
723TinyUSB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac94  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  0800af68  0800af68  0001af68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b398  0800b398  0001b398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b39c  0800b39c  0001b39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000048  24000000  0800b3a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001be0  24000048  0800b3e8  00020048  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24001c28  0800b3e8  00021c28  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
  9 .debug_info   00019567  00000000  00000000  00020076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003b5c  00000000  00000000  000395dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001160  00000000  00000000  0003d140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000010b8  00000000  00000000  0003e2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003463d  00000000  00000000  0003f358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00015f29  00000000  00000000  00073995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014d47e  00000000  00000000  000898be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001d6d3c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004954  00000000  00000000  001d6d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000048 	.word	0x24000048
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800af4c 	.word	0x0800af4c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400004c 	.word	0x2400004c
 800030c:	0800af4c 	.word	0x0800af4c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <tud_cdc_connected>:
{
  return tud_cdc_n_write(itf, str, strlen(str));
}

static inline bool tud_cdc_connected (void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  return tud_cdc_n_connected(0);
 8000324:	2000      	movs	r0, #0
 8000326:	f005 fa1d 	bl	8005764 <tud_cdc_n_connected>
 800032a:	4603      	mov	r3, r0
}
 800032c:	4618      	mov	r0, r3
 800032e:	bd80      	pop	{r7, pc}

08000330 <tud_cdc_available>:
{
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  return tud_cdc_n_available(0);
 8000334:	2000      	movs	r0, #0
 8000336:	f005 fa55 	bl	80057e4 <tud_cdc_n_available>
 800033a:	4603      	mov	r3, r0
}
 800033c:	4618      	mov	r0, r3
 800033e:	bd80      	pop	{r7, pc}

08000340 <tud_cdc_read>:
{
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_read(0, buffer, bufsize);
 800034a:	683a      	ldr	r2, [r7, #0]
 800034c:	6879      	ldr	r1, [r7, #4]
 800034e:	2000      	movs	r0, #0
 8000350:	f005 fa60 	bl	8005814 <tud_cdc_n_read>
 8000354:	4603      	mov	r3, r0
}
 8000356:	4618      	mov	r0, r3
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}

0800035e <tud_cdc_write>:
{
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
 800035e:	b580      	push	{r7, lr}
 8000360:	b082      	sub	sp, #8
 8000362:	af00      	add	r7, sp, #0
 8000364:	6078      	str	r0, [r7, #4]
 8000366:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_write(0, buffer, bufsize);
 8000368:	683a      	ldr	r2, [r7, #0]
 800036a:	6879      	ldr	r1, [r7, #4]
 800036c:	2000      	movs	r0, #0
 800036e:	f005 fa75 	bl	800585c <tud_cdc_n_write>
 8000372:	4603      	mov	r3, r0
}
 8000374:	4618      	mov	r0, r3
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <tud_cdc_write_flush>:
{
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 8000380:	2000      	movs	r0, #0
 8000382:	f005 fa97 	bl	80058b4 <tud_cdc_n_write_flush>
 8000386:	4603      	mov	r3, r0
}
 8000388:	4618      	mov	r0, r3
 800038a:	bd80      	pop	{r7, pc}

0800038c <tud_cdc_write_available>:

static inline uint32_t tud_cdc_write_available(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_available(0);
 8000390:	2000      	movs	r0, #0
 8000392:	f005 fb0b 	bl	80059ac <tud_cdc_n_write_available>
 8000396:	4603      	mov	r3, r0
}
 8000398:	4618      	mov	r0, r3
 800039a:	bd80      	pop	{r7, pc}

0800039c <tud_audio_read>:
{
  return tud_audio_n_available(0);
}

static inline uint16_t tud_audio_read(void* buffer, uint16_t bufsize)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	460b      	mov	r3, r1
 80003a6:	807b      	strh	r3, [r7, #2]
  return tud_audio_n_read(0, buffer, bufsize);
 80003a8:	887b      	ldrh	r3, [r7, #2]
 80003aa:	461a      	mov	r2, r3
 80003ac:	6879      	ldr	r1, [r7, #4]
 80003ae:	2000      	movs	r0, #0
 80003b0:	f004 f860 	bl	8004474 <tud_audio_n_read>
 80003b4:	4603      	mov	r3, r0
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <tud_audio_write>:
// TX API

#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING

static inline uint16_t tud_audio_write(const void * data, uint16_t len)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b082      	sub	sp, #8
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
 80003c6:	460b      	mov	r3, r1
 80003c8:	807b      	strh	r3, [r7, #2]
  return tud_audio_n_write(0, data, len);
 80003ca:	887b      	ldrh	r3, [r7, #2]
 80003cc:	461a      	mov	r2, r3
 80003ce:	6879      	ldr	r1, [r7, #4]
 80003d0:	2000      	movs	r0, #0
 80003d2:	f004 f8f1 	bl	80045b8 <tud_audio_n_write>
 80003d6:	4603      	mov	r3, r0
}
 80003d8:	4618      	mov	r0, r3
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <tud_mount_cb>:
// Device callbacks
//--------------------------------------------------------------------+

// Invoked when device is mounted
void tud_mount_cb(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
	blink_interval_ms = BLINK_MOUNTED;
 80003e4:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <tud_mount_cb+0x18>)
 80003e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003ea:	601a      	str	r2, [r3, #0]
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	24000004 	.word	0x24000004

080003fc <tud_umount_cb>:

// Invoked when device is unmounted
void tud_umount_cb(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
	blink_interval_ms = BLINK_NOT_MOUNTED;
 8000400:	4b03      	ldr	r3, [pc, #12]	; (8000410 <tud_umount_cb+0x14>)
 8000402:	22fa      	movs	r2, #250	; 0xfa
 8000404:	601a      	str	r2, [r3, #0]
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	24000004 	.word	0x24000004

08000414 <tud_suspend_cb>:

// Invoked when usb bus is suspended
// remote_wakeup_en : if host allow us  to perform remote wakeup
// Within 7ms, device must draw an average of current less than 2.5 mA from bus
void tud_suspend_cb(bool remote_wakeup_en)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	71fb      	strb	r3, [r7, #7]
	(void)remote_wakeup_en;
	blink_interval_ms = BLINK_SUSPENDED;
 800041e:	4b05      	ldr	r3, [pc, #20]	; (8000434 <tud_suspend_cb+0x20>)
 8000420:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000424:	601a      	str	r2, [r3, #0]
}
 8000426:	bf00      	nop
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	24000004 	.word	0x24000004

08000438 <tud_resume_cb>:

// Invoked when usb bus is resumed
void tud_resume_cb(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
	blink_interval_ms = BLINK_MOUNTED;
 800043c:	4b04      	ldr	r3, [pc, #16]	; (8000450 <tud_resume_cb+0x18>)
 800043e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000442:	601a      	str	r2, [r3, #0]
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	24000004 	.word	0x24000004

08000454 <tud_audio_clock_get_request>:

// Helper for clock get requests
static bool tud_audio_clock_get_request(uint8_t rhport, audio_control_request_t const *request)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b094      	sub	sp, #80	; 0x50
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	6039      	str	r1, [r7, #0]
 800045e:	71fb      	strb	r3, [r7, #7]
	TU_ASSERT(request->bEntityID == UAC2_ENTITY_CLOCK);
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	795b      	ldrb	r3, [r3, #5]
 8000464:	2b04      	cmp	r3, #4
 8000466:	d00a      	beq.n	800047e <tud_audio_clock_get_request+0x2a>
 8000468:	4b44      	ldr	r3, [pc, #272]	; (800057c <tud_audio_clock_get_request+0x128>)
 800046a:	64bb      	str	r3, [r7, #72]	; 0x48
 800046c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f003 0301 	and.w	r3, r3, #1
 8000474:	2b00      	cmp	r3, #0
 8000476:	d000      	beq.n	800047a <tud_audio_clock_get_request+0x26>
 8000478:	be00      	bkpt	0x0000
 800047a:	2300      	movs	r3, #0
 800047c:	e07a      	b.n	8000574 <tud_audio_clock_get_request+0x120>

	if (request->bControlSelector == AUDIO_CS_CTRL_SAM_FREQ)
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	78db      	ldrb	r3, [r3, #3]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d161      	bne.n	800054a <tud_audio_clock_get_request+0xf6>
	{
		if (request->bRequest == AUDIO_CS_REQ_CUR)
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	785b      	ldrb	r3, [r3, #1]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d10b      	bne.n	80004a6 <tud_audio_clock_get_request+0x52>
		{
			TU_LOG1("Clock get current freq %lu\r\n", current_sample_rate);

			audio_control_cur_4_t curf = { (int32_t) tu_htole32(current_sample_rate) };
 800048e:	4b3c      	ldr	r3, [pc, #240]	; (8000580 <tud_audio_clock_get_request+0x12c>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	647b      	str	r3, [r7, #68]	; 0x44
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &curf, sizeof(curf));
 8000494:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000498:	79f8      	ldrb	r0, [r7, #7]
 800049a:	2304      	movs	r3, #4
 800049c:	6839      	ldr	r1, [r7, #0]
 800049e:	f004 fe4b 	bl	8005138 <tud_audio_buffer_and_schedule_control_xfer>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e066      	b.n	8000574 <tud_audio_clock_get_request+0x120>
		}
		else if (request->bRequest == AUDIO_CS_REQ_RANGE)
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	785b      	ldrb	r3, [r3, #1]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d161      	bne.n	8000572 <tud_audio_clock_get_request+0x11e>
		{
			audio_control_range_4_n_t(N_SAMPLE_RATES) rangef =
 80004ae:	f107 030c 	add.w	r3, r7, #12
 80004b2:	2232      	movs	r2, #50	; 0x32
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f009 ff4a 	bl	800a350 <memset>
 80004bc:	2304      	movs	r3, #4
 80004be:	81bb      	strh	r3, [r7, #12]
			{
					.wNumSubRanges = tu_htole16(N_SAMPLE_RATES)
			};
			TU_LOG1("Clock get %d freq ranges\r\n", N_SAMPLE_RATES);
			for(uint8_t i = 0; i < N_SAMPLE_RATES; i++)
 80004c0:	2300      	movs	r3, #0
 80004c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80004c6:	e033      	b.n	8000530 <tud_audio_clock_get_request+0xdc>
			{
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 80004c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80004cc:	4a2d      	ldr	r2, [pc, #180]	; (8000584 <tud_audio_clock_get_request+0x130>)
 80004ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004d2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80004d6:	4619      	mov	r1, r3
 80004d8:	4613      	mov	r3, r2
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	4413      	add	r3, r2
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	3350      	adds	r3, #80	; 0x50
 80004e2:	443b      	add	r3, r7
 80004e4:	3b44      	subs	r3, #68	; 0x44
 80004e6:	f8c3 1002 	str.w	r1, [r3, #2]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80004ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80004ee:	4a25      	ldr	r2, [pc, #148]	; (8000584 <tud_audio_clock_get_request+0x130>)
 80004f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004f4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80004f8:	4619      	mov	r1, r3
 80004fa:	4613      	mov	r3, r2
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	4413      	add	r3, r2
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	3350      	adds	r3, #80	; 0x50
 8000504:	443b      	add	r3, r7
 8000506:	3b44      	subs	r3, #68	; 0x44
 8000508:	f8c3 1006 	str.w	r1, [r3, #6]
				rangef.subrange[i].bRes = 0;
 800050c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000510:	4613      	mov	r3, r2
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	4413      	add	r3, r2
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	3350      	adds	r3, #80	; 0x50
 800051a:	443b      	add	r3, r7
 800051c:	3b3c      	subs	r3, #60	; 0x3c
 800051e:	2200      	movs	r2, #0
 8000520:	805a      	strh	r2, [r3, #2]
 8000522:	2200      	movs	r2, #0
 8000524:	809a      	strh	r2, [r3, #4]
			for(uint8_t i = 0; i < N_SAMPLE_RATES; i++)
 8000526:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800052a:	3301      	adds	r3, #1
 800052c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000530:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000534:	2b03      	cmp	r3, #3
 8000536:	d9c7      	bls.n	80004c8 <tud_audio_clock_get_request+0x74>
				TU_LOG1("Range %d (%d, %d, %d)\r\n", i, (int)rangef.subrange[i].bMin, (int)rangef.subrange[i].bMax, (int)rangef.subrange[i].bRes);
			}

			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 8000538:	f107 020c 	add.w	r2, r7, #12
 800053c:	79f8      	ldrb	r0, [r7, #7]
 800053e:	2332      	movs	r3, #50	; 0x32
 8000540:	6839      	ldr	r1, [r7, #0]
 8000542:	f004 fdf9 	bl	8005138 <tud_audio_buffer_and_schedule_control_xfer>
 8000546:	4603      	mov	r3, r0
 8000548:	e014      	b.n	8000574 <tud_audio_clock_get_request+0x120>
		}
	}
	else if (request->bControlSelector == AUDIO_CS_CTRL_CLK_VALID &&
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	78db      	ldrb	r3, [r3, #3]
 800054e:	2b02      	cmp	r3, #2
 8000550:	d10f      	bne.n	8000572 <tud_audio_clock_get_request+0x11e>
			request->bRequest == AUDIO_CS_REQ_CUR)
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	785b      	ldrb	r3, [r3, #1]
	else if (request->bControlSelector == AUDIO_CS_CTRL_CLK_VALID &&
 8000556:	2b01      	cmp	r3, #1
 8000558:	d10b      	bne.n	8000572 <tud_audio_clock_get_request+0x11e>
	{
		audio_control_cur_1_t cur_valid = { .bCur = 1 };
 800055a:	2301      	movs	r3, #1
 800055c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		TU_LOG1("Clock get is valid %u\r\n", cur_valid.bCur);
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_valid, sizeof(cur_valid));
 8000560:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000564:	79f8      	ldrb	r0, [r7, #7]
 8000566:	2301      	movs	r3, #1
 8000568:	6839      	ldr	r1, [r7, #0]
 800056a:	f004 fde5 	bl	8005138 <tud_audio_buffer_and_schedule_control_xfer>
 800056e:	4603      	mov	r3, r0
 8000570:	e000      	b.n	8000574 <tud_audio_clock_get_request+0x120>
	}
	TU_LOG1("Clock get request not supported, entity = %u, selector = %u, request = %u\r\n",
			request->bEntityID, request->bControlSelector, request->bRequest);
	return false;
 8000572:	2300      	movs	r3, #0
}
 8000574:	4618      	mov	r0, r3
 8000576:	3750      	adds	r7, #80	; 0x50
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	e000edf0 	.word	0xe000edf0
 8000580:	24000000 	.word	0x24000000
 8000584:	0800afd0 	.word	0x0800afd0

08000588 <tud_audio_clock_set_request>:

// Helper for clock set requests
static bool tud_audio_clock_set_request(uint8_t rhport, audio_control_request_t const *request, uint8_t const *buf)
{
 8000588:	b480      	push	{r7}
 800058a:	b087      	sub	sp, #28
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
 8000594:	73fb      	strb	r3, [r7, #15]
	(void)rhport;

	TU_ASSERT(request->bEntityID == UAC2_ENTITY_CLOCK);
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	795b      	ldrb	r3, [r3, #5]
 800059a:	2b04      	cmp	r3, #4
 800059c:	d00a      	beq.n	80005b4 <tud_audio_clock_set_request+0x2c>
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <tud_audio_clock_set_request+0x6c>)
 80005a0:	617b      	str	r3, [r7, #20]
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d000      	beq.n	80005b0 <tud_audio_clock_set_request+0x28>
 80005ae:	be00      	bkpt	0x0000
 80005b0:	2300      	movs	r3, #0
 80005b2:	e018      	b.n	80005e6 <tud_audio_clock_set_request+0x5e>
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	785b      	ldrb	r3, [r3, #1]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d001      	beq.n	80005c0 <tud_audio_clock_set_request+0x38>
 80005bc:	2300      	movs	r3, #0
 80005be:	e012      	b.n	80005e6 <tud_audio_clock_set_request+0x5e>

	if (request->bControlSelector == AUDIO_CS_CTRL_SAM_FREQ)
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	78db      	ldrb	r3, [r3, #3]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d10d      	bne.n	80005e4 <tud_audio_clock_set_request+0x5c>
	{
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_4_t));
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	88db      	ldrh	r3, [r3, #6]
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	2b04      	cmp	r3, #4
 80005d0:	d001      	beq.n	80005d6 <tud_audio_clock_set_request+0x4e>
 80005d2:	2300      	movs	r3, #0
 80005d4:	e007      	b.n	80005e6 <tud_audio_clock_set_request+0x5e>

		current_sample_rate = (uint32_t) ((audio_control_cur_4_t const *)buf)->bCur;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <tud_audio_clock_set_request+0x70>)
 80005de:	601a      	str	r2, [r3, #0]

		TU_LOG1("Clock set current freq: %ld\r\n", current_sample_rate);

		return true;
 80005e0:	2301      	movs	r3, #1
 80005e2:	e000      	b.n	80005e6 <tud_audio_clock_set_request+0x5e>
	}
	else
	{
		TU_LOG1("Clock set request not supported, entity = %u, selector = %u, request = %u\r\n",
				request->bEntityID, request->bControlSelector, request->bRequest);
		return false;
 80005e4:	2300      	movs	r3, #0
	}
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	371c      	adds	r7, #28
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	e000edf0 	.word	0xe000edf0
 80005f8:	24000000 	.word	0x24000000

080005fc <tud_audio_feature_unit_get_request>:

// Helper for feature unit get requests
static bool tud_audio_feature_unit_get_request(uint8_t rhport, audio_control_request_t const *request)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	6039      	str	r1, [r7, #0]
 8000606:	71fb      	strb	r3, [r7, #7]
	TU_ASSERT(request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT);
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	795b      	ldrb	r3, [r3, #5]
 800060c:	2b02      	cmp	r3, #2
 800060e:	d00a      	beq.n	8000626 <tud_audio_feature_unit_get_request+0x2a>
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <tud_audio_feature_unit_get_request+0xbc>)
 8000612:	61fb      	str	r3, [r7, #28]
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	2b00      	cmp	r3, #0
 800061e:	d000      	beq.n	8000622 <tud_audio_feature_unit_get_request+0x26>
 8000620:	be00      	bkpt	0x0000
 8000622:	2300      	movs	r3, #0
 8000624:	e043      	b.n	80006ae <tud_audio_feature_unit_get_request+0xb2>

	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE && request->bRequest == AUDIO_CS_REQ_CUR)
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	78db      	ldrb	r3, [r3, #3]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d112      	bne.n	8000654 <tud_audio_feature_unit_get_request+0x58>
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	785b      	ldrb	r3, [r3, #1]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d10e      	bne.n	8000654 <tud_audio_feature_unit_get_request+0x58>
	{
		audio_control_cur_1_t mute1 = { .bCur = mute[request->bChannelNumber] };
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	789b      	ldrb	r3, [r3, #2]
 800063a:	461a      	mov	r2, r3
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <tud_audio_feature_unit_get_request+0xc0>)
 800063e:	569b      	ldrsb	r3, [r3, r2]
 8000640:	763b      	strb	r3, [r7, #24]
		TU_LOG1("Get channel %u mute %d\r\n", request->bChannelNumber, mute1.bCur);
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &mute1, sizeof(mute1));
 8000642:	f107 0218 	add.w	r2, r7, #24
 8000646:	79f8      	ldrb	r0, [r7, #7]
 8000648:	2301      	movs	r3, #1
 800064a:	6839      	ldr	r1, [r7, #0]
 800064c:	f004 fd74 	bl	8005138 <tud_audio_buffer_and_schedule_control_xfer>
 8000650:	4603      	mov	r3, r0
 8000652:	e02c      	b.n	80006ae <tud_audio_feature_unit_get_request+0xb2>
	}
	else if (UAC2_ENTITY_SPK_FEATURE_UNIT && request->bControlSelector == AUDIO_FU_CTRL_VOLUME)
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	78db      	ldrb	r3, [r3, #3]
 8000658:	2b02      	cmp	r3, #2
 800065a:	d127      	bne.n	80006ac <tud_audio_feature_unit_get_request+0xb0>
	{
		if (request->bRequest == AUDIO_CS_REQ_RANGE)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	785b      	ldrb	r3, [r3, #1]
 8000660:	2b02      	cmp	r3, #2
 8000662:	d10f      	bne.n	8000684 <tud_audio_feature_unit_get_request+0x88>
		{
			audio_control_range_2_n_t(1) range_vol = {
 8000664:	4a16      	ldr	r2, [pc, #88]	; (80006c0 <tud_audio_feature_unit_get_request+0xc4>)
 8000666:	f107 0310 	add.w	r3, r7, #16
 800066a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800066e:	e883 0003 	stmia.w	r3, {r0, r1}
					.wNumSubRanges = tu_htole16(1),
					.subrange[0] = { .bMin = tu_htole16(-VOLUME_CTRL_50_DB), tu_htole16(VOLUME_CTRL_0_DB), tu_htole16(256) }
			};
			TU_LOG1("Get channel %u volume range (%d, %d, %u) dB\r\n", request->bChannelNumber,
					range_vol.subrange[0].bMin / 256, range_vol.subrange[0].bMax / 256, range_vol.subrange[0].bRes / 256);
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &range_vol, sizeof(range_vol));
 8000672:	f107 0210 	add.w	r2, r7, #16
 8000676:	79f8      	ldrb	r0, [r7, #7]
 8000678:	2308      	movs	r3, #8
 800067a:	6839      	ldr	r1, [r7, #0]
 800067c:	f004 fd5c 	bl	8005138 <tud_audio_buffer_and_schedule_control_xfer>
 8000680:	4603      	mov	r3, r0
 8000682:	e014      	b.n	80006ae <tud_audio_feature_unit_get_request+0xb2>
		}
		else if (request->bRequest == AUDIO_CS_REQ_CUR)
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	785b      	ldrb	r3, [r3, #1]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d10f      	bne.n	80006ac <tud_audio_feature_unit_get_request+0xb0>
		{
			audio_control_cur_2_t cur_vol = { .bCur = tu_htole16(volume[request->bChannelNumber]) };
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	789b      	ldrb	r3, [r3, #2]
 8000690:	461a      	mov	r2, r3
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <tud_audio_feature_unit_get_request+0xc8>)
 8000694:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000698:	81bb      	strh	r3, [r7, #12]
			TU_LOG1("Get channel %u volume %d dB\r\n", request->bChannelNumber, cur_vol.bCur / 256);
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_vol, sizeof(cur_vol));
 800069a:	f107 020c 	add.w	r2, r7, #12
 800069e:	79f8      	ldrb	r0, [r7, #7]
 80006a0:	2302      	movs	r3, #2
 80006a2:	6839      	ldr	r1, [r7, #0]
 80006a4:	f004 fd48 	bl	8005138 <tud_audio_buffer_and_schedule_control_xfer>
 80006a8:	4603      	mov	r3, r0
 80006aa:	e000      	b.n	80006ae <tud_audio_feature_unit_get_request+0xb2>
		}
	}
	TU_LOG1("Feature unit get request not supported, entity = %u, selector = %u, request = %u\r\n",
			request->bEntityID, request->bControlSelector, request->bRequest);

	return false;
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3720      	adds	r7, #32
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	e000edf0 	.word	0xe000edf0
 80006bc:	24000570 	.word	0x24000570
 80006c0:	0800af68 	.word	0x0800af68
 80006c4:	24000574 	.word	0x24000574

080006c8 <tud_audio_feature_unit_set_request>:

// Helper for feature unit set requests
static bool tud_audio_feature_unit_set_request(uint8_t rhport, audio_control_request_t const *request, uint8_t const *buf)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b087      	sub	sp, #28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
 80006d4:	73fb      	strb	r3, [r7, #15]
	(void)rhport;

	TU_ASSERT(request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT);
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	795b      	ldrb	r3, [r3, #5]
 80006da:	2b02      	cmp	r3, #2
 80006dc:	d00a      	beq.n	80006f4 <tud_audio_feature_unit_set_request+0x2c>
 80006de:	4b22      	ldr	r3, [pc, #136]	; (8000768 <tud_audio_feature_unit_set_request+0xa0>)
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d000      	beq.n	80006f0 <tud_audio_feature_unit_set_request+0x28>
 80006ee:	be00      	bkpt	0x0000
 80006f0:	2300      	movs	r3, #0
 80006f2:	e032      	b.n	800075a <tud_audio_feature_unit_set_request+0x92>
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	785b      	ldrb	r3, [r3, #1]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d001      	beq.n	8000700 <tud_audio_feature_unit_set_request+0x38>
 80006fc:	2300      	movs	r3, #0
 80006fe:	e02c      	b.n	800075a <tud_audio_feature_unit_set_request+0x92>

	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	78db      	ldrb	r3, [r3, #3]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d110      	bne.n	800072a <tud_audio_feature_unit_set_request+0x62>
	{
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_1_t));
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	88db      	ldrh	r3, [r3, #6]
 800070c:	b29b      	uxth	r3, r3
 800070e:	2b01      	cmp	r3, #1
 8000710:	d001      	beq.n	8000716 <tud_audio_feature_unit_set_request+0x4e>
 8000712:	2300      	movs	r3, #0
 8000714:	e021      	b.n	800075a <tud_audio_feature_unit_set_request+0x92>

		mute[request->bChannelNumber] = ((audio_control_cur_1_t const *)buf)->bCur;
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	789b      	ldrb	r3, [r3, #2]
 800071a:	461a      	mov	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f993 1000 	ldrsb.w	r1, [r3]
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <tud_audio_feature_unit_set_request+0xa4>)
 8000724:	5499      	strb	r1, [r3, r2]

		TU_LOG1("Set channel %d Mute: %d\r\n", request->bChannelNumber, mute[request->bChannelNumber]);

		return true;
 8000726:	2301      	movs	r3, #1
 8000728:	e017      	b.n	800075a <tud_audio_feature_unit_set_request+0x92>
	}
	else if (request->bControlSelector == AUDIO_FU_CTRL_VOLUME)
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	78db      	ldrb	r3, [r3, #3]
 800072e:	2b02      	cmp	r3, #2
 8000730:	d112      	bne.n	8000758 <tud_audio_feature_unit_set_request+0x90>
	{
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_2_t));
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	88db      	ldrh	r3, [r3, #6]
 8000736:	b29b      	uxth	r3, r3
 8000738:	2b02      	cmp	r3, #2
 800073a:	d001      	beq.n	8000740 <tud_audio_feature_unit_set_request+0x78>
 800073c:	2300      	movs	r3, #0
 800073e:	e00c      	b.n	800075a <tud_audio_feature_unit_set_request+0x92>

		volume[request->bChannelNumber] = ((audio_control_cur_2_t const *)buf)->bCur;
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	789b      	ldrb	r3, [r3, #2]
 8000744:	461a      	mov	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800074c:	b219      	sxth	r1, r3
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <tud_audio_feature_unit_set_request+0xa8>)
 8000750:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		TU_LOG1("Set channel %d volume: %d dB\r\n", request->bChannelNumber, volume[request->bChannelNumber] / 256);

		return true;
 8000754:	2301      	movs	r3, #1
 8000756:	e000      	b.n	800075a <tud_audio_feature_unit_set_request+0x92>
	}
	else
	{
		TU_LOG1("Feature unit set request not supported, entity = %u, selector = %u, request = %u\r\n",
				request->bEntityID, request->bControlSelector, request->bRequest);
		return false;
 8000758:	2300      	movs	r3, #0
	}
}
 800075a:	4618      	mov	r0, r3
 800075c:	371c      	adds	r7, #28
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000edf0 	.word	0xe000edf0
 800076c:	24000570 	.word	0x24000570
 8000770:	24000574 	.word	0x24000574

08000774 <tud_audio_get_req_entity_cb>:
// Application Callback API Implementations
//--------------------------------------------------------------------+

// Invoked when audio class specific get request received for an entity
bool tud_audio_get_req_entity_cb(uint8_t rhport, tusb_control_request_t const *p_request)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	71fb      	strb	r3, [r7, #7]
	audio_control_request_t const *request = (audio_control_request_t const *)p_request;
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	60fb      	str	r3, [r7, #12]

	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	795b      	ldrb	r3, [r3, #5]
 8000788:	2b04      	cmp	r3, #4
 800078a:	d106      	bne.n	800079a <tud_audio_get_req_entity_cb+0x26>
		return tud_audio_clock_get_request(rhport, request);
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	68f9      	ldr	r1, [r7, #12]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fe5f 	bl	8000454 <tud_audio_clock_get_request>
 8000796:	4603      	mov	r3, r0
 8000798:	e00b      	b.n	80007b2 <tud_audio_get_req_entity_cb+0x3e>
	if (request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	795b      	ldrb	r3, [r3, #5]
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d106      	bne.n	80007b0 <tud_audio_get_req_entity_cb+0x3c>
		return tud_audio_feature_unit_get_request(rhport, request);
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	68f9      	ldr	r1, [r7, #12]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ff28 	bl	80005fc <tud_audio_feature_unit_get_request>
 80007ac:	4603      	mov	r3, r0
 80007ae:	e000      	b.n	80007b2 <tud_audio_get_req_entity_cb+0x3e>
	else
	{
		TU_LOG1("Get request not handled, entity = %d, selector = %d, request = %d\r\n",
				request->bEntityID, request->bControlSelector, request->bRequest);
	}
	return false;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <tud_audio_set_req_entity_cb>:

// Invoked when audio class specific set request received for an entity
bool tud_audio_set_req_entity_cb(uint8_t rhport, tusb_control_request_t const *p_request, uint8_t *buf)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b086      	sub	sp, #24
 80007be:	af00      	add	r7, sp, #0
 80007c0:	4603      	mov	r3, r0
 80007c2:	60b9      	str	r1, [r7, #8]
 80007c4:	607a      	str	r2, [r7, #4]
 80007c6:	73fb      	strb	r3, [r7, #15]
	audio_control_request_t const *request = (audio_control_request_t const *)p_request;
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	617b      	str	r3, [r7, #20]

	if (request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT)
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	795b      	ldrb	r3, [r3, #5]
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	d107      	bne.n	80007e4 <tud_audio_set_req_entity_cb+0x2a>
		return tud_audio_feature_unit_set_request(rhport, request, buf);
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	6979      	ldr	r1, [r7, #20]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff74 	bl	80006c8 <tud_audio_feature_unit_set_request>
 80007e0:	4603      	mov	r3, r0
 80007e2:	e00c      	b.n	80007fe <tud_audio_set_req_entity_cb+0x44>
	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	795b      	ldrb	r3, [r3, #5]
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	d107      	bne.n	80007fc <tud_audio_set_req_entity_cb+0x42>
		return tud_audio_clock_set_request(rhport, request, buf);
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	6979      	ldr	r1, [r7, #20]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fec8 	bl	8000588 <tud_audio_clock_set_request>
 80007f8:	4603      	mov	r3, r0
 80007fa:	e000      	b.n	80007fe <tud_audio_set_req_entity_cb+0x44>
	TU_LOG1("Set request not handled, entity = %d, selector = %d, request = %d\r\n",
			request->bEntityID, request->bControlSelector, request->bRequest);

	return false;
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <tud_audio_set_itf_close_EP_cb>:

bool tud_audio_set_itf_close_EP_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	6039      	str	r1, [r7, #0]
 8000812:	71fb      	strb	r3, [r7, #7]
	(void)rhport;

	uint8_t const itf = tu_u16_low(tu_le16toh(p_request->wIndex));
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	889b      	ldrh	r3, [r3, #4]
 8000818:	b29b      	uxth	r3, r3
 800081a:	817b      	strh	r3, [r7, #10]

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_u32_high16(uint32_t ui32) { return (uint16_t) (ui32 >> 16); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_u32_low16 (uint32_t ui32) { return (uint16_t) (ui32 & 0x0000ffffu); }

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800081c:	897b      	ldrh	r3, [r7, #10]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	73fb      	strb	r3, [r7, #15]
	uint8_t const alt = tu_u16_low(tu_le16toh(p_request->wValue));
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	885b      	ldrh	r3, [r3, #2]
 8000826:	b29b      	uxth	r3, r3
 8000828:	81bb      	strh	r3, [r7, #12]
 800082a:	89bb      	ldrh	r3, [r7, #12]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	73bb      	strb	r3, [r7, #14]

	if (ITF_NUM_AUDIO_STREAMING_SPK == itf && alt == 0)
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d106      	bne.n	8000844 <tud_audio_set_itf_close_EP_cb+0x3c>
 8000836:	7bbb      	ldrb	r3, [r7, #14]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d103      	bne.n	8000844 <tud_audio_set_itf_close_EP_cb+0x3c>
		blink_interval_ms = BLINK_MOUNTED;
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <tud_audio_set_itf_close_EP_cb+0x4c>)
 800083e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000842:	601a      	str	r2, [r3, #0]

	return true;
 8000844:	2301      	movs	r3, #1
}
 8000846:	4618      	mov	r0, r3
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	24000004 	.word	0x24000004

08000858 <tud_audio_set_itf_cb>:

bool tud_audio_set_itf_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	6039      	str	r1, [r7, #0]
 8000862:	71fb      	strb	r3, [r7, #7]
	(void)rhport;
	uint8_t const itf = tu_u16_low(tu_le16toh(p_request->wIndex));
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	889b      	ldrh	r3, [r3, #4]
 8000868:	b29b      	uxth	r3, r3
 800086a:	817b      	strh	r3, [r7, #10]
 800086c:	897b      	ldrh	r3, [r7, #10]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	73fb      	strb	r3, [r7, #15]
	uint8_t const alt = tu_u16_low(tu_le16toh(p_request->wValue));
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	885b      	ldrh	r3, [r3, #2]
 8000876:	b29b      	uxth	r3, r3
 8000878:	81bb      	strh	r3, [r7, #12]
 800087a:	89bb      	ldrh	r3, [r7, #12]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	73bb      	strb	r3, [r7, #14]

	TU_LOG2("Set interface %d alt %d\r\n", itf, alt);
	if (ITF_NUM_AUDIO_STREAMING_SPK == itf && alt != 0)
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d105      	bne.n	8000892 <tud_audio_set_itf_cb+0x3a>
 8000886:	7bbb      	ldrb	r3, [r7, #14]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d002      	beq.n	8000892 <tud_audio_set_itf_cb+0x3a>
		blink_interval_ms = BLINK_STREAMING;
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <tud_audio_set_itf_cb+0x60>)
 800088e:	2219      	movs	r2, #25
 8000890:	601a      	str	r2, [r3, #0]

	// Clear buffer when streaming format is changed
	spk_data_size = 0;
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <tud_audio_set_itf_cb+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
	if(alt != 0)
 8000898:	7bbb      	ldrb	r3, [r7, #14]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d005      	beq.n	80008aa <tud_audio_set_itf_cb+0x52>
	{
		current_resolution = resolutions_per_format[alt-1];
 800089e:	7bbb      	ldrb	r3, [r7, #14]
 80008a0:	3b01      	subs	r3, #1
 80008a2:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <tud_audio_set_itf_cb+0x68>)
 80008a4:	5cd2      	ldrb	r2, [r2, r3]
 80008a6:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <tud_audio_set_itf_cb+0x6c>)
 80008a8:	701a      	strb	r2, [r3, #0]
	}

	return true;
 80008aa:	2301      	movs	r3, #1
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	24000004 	.word	0x24000004
 80008bc:	24000e94 	.word	0x24000e94
 80008c0:	0800afe0 	.word	0x0800afe0
 80008c4:	24000e98 	.word	0x24000e98

080008c8 <tud_audio_rx_done_pre_read_cb>:

bool tud_audio_rx_done_pre_read_cb(uint8_t rhport, uint16_t n_bytes_received, uint8_t func_id, uint8_t ep_out, uint8_t cur_alt_setting)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4604      	mov	r4, r0
 80008d0:	4608      	mov	r0, r1
 80008d2:	4611      	mov	r1, r2
 80008d4:	461a      	mov	r2, r3
 80008d6:	4623      	mov	r3, r4
 80008d8:	71fb      	strb	r3, [r7, #7]
 80008da:	4603      	mov	r3, r0
 80008dc:	80bb      	strh	r3, [r7, #4]
 80008de:	460b      	mov	r3, r1
 80008e0:	71bb      	strb	r3, [r7, #6]
 80008e2:	4613      	mov	r3, r2
 80008e4:	70fb      	strb	r3, [r7, #3]
	(void)rhport;
	(void)func_id;
	(void)ep_out;
	(void)cur_alt_setting;

	spk_data_size = tud_audio_read(spk_buf, n_bytes_received);
 80008e6:	88bb      	ldrh	r3, [r7, #4]
 80008e8:	4619      	mov	r1, r3
 80008ea:	4806      	ldr	r0, [pc, #24]	; (8000904 <tud_audio_rx_done_pre_read_cb+0x3c>)
 80008ec:	f7ff fd56 	bl	800039c <tud_audio_read>
 80008f0:	4603      	mov	r3, r0
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <tud_audio_rx_done_pre_read_cb+0x40>)
 80008f6:	601a      	str	r2, [r3, #0]
	return true;
 80008f8:	2301      	movs	r3, #1
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd90      	pop	{r4, r7, pc}
 8000902:	bf00      	nop
 8000904:	24000884 	.word	0x24000884
 8000908:	24000e94 	.word	0x24000e94
 800090c:	00000000 	.word	0x00000000

08000910 <tud_audio_tx_done_pre_load_cb>:

bool tud_audio_tx_done_pre_load_cb(uint8_t rhport, uint8_t itf, uint8_t ep_in, uint8_t cur_alt_setting)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	4604      	mov	r4, r0
 8000918:	4608      	mov	r0, r1
 800091a:	4611      	mov	r1, r2
 800091c:	461a      	mov	r2, r3
 800091e:	4623      	mov	r3, r4
 8000920:	71fb      	strb	r3, [r7, #7]
 8000922:	4603      	mov	r3, r0
 8000924:	71bb      	strb	r3, [r7, #6]
 8000926:	460b      	mov	r3, r1
 8000928:	717b      	strb	r3, [r7, #5]
 800092a:	4613      	mov	r3, r2
 800092c:	713b      	strb	r3, [r7, #4]
	(void)rhport;
	(void)itf;
	(void)ep_in;
	(void)cur_alt_setting;
	int16_t *dst = (int16_t*)mic_buf;
 800092e:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <tud_audio_tx_done_pre_load_cb+0xa8>)
 8000930:	60fb      	str	r3, [r7, #12]

	for (uint16_t i = 0; i < 48000/1000; i++ )
 8000932:	2300      	movs	r3, #0
 8000934:	817b      	strh	r3, [r7, #10]
 8000936:	e026      	b.n	8000986 <tud_audio_tx_done_pre_load_cb+0x76>
			{
				*dst ++ = (int16_t)(20000.0 * sin(432.0 * 6.28 * AudioCounter++ / 48000));
 8000938:	4b20      	ldr	r3, [pc, #128]	; (80009bc <tud_audio_tx_done_pre_load_cb+0xac>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	1c53      	adds	r3, r2, #1
 800093e:	491f      	ldr	r1, [pc, #124]	; (80009bc <tud_audio_tx_done_pre_load_cb+0xac>)
 8000940:	600b      	str	r3, [r1, #0]
 8000942:	ee07 2a90 	vmov	s15, r2
 8000946:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800094a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80009a0 <tud_audio_tx_done_pre_load_cb+0x90>
 800094e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000952:	ed9f 5b15 	vldr	d5, [pc, #84]	; 80009a8 <tud_audio_tx_done_pre_load_cb+0x98>
 8000956:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800095a:	eeb0 0b46 	vmov.f64	d0, d6
 800095e:	f009 fcff 	bl	800a360 <sin>
 8000962:	eeb0 7b40 	vmov.f64	d7, d0
 8000966:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80009b0 <tud_audio_tx_done_pre_load_cb+0xa0>
 800096a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	1c9a      	adds	r2, r3, #2
 8000972:	60fa      	str	r2, [r7, #12]
 8000974:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000978:	ee17 2a90 	vmov	r2, s15
 800097c:	b212      	sxth	r2, r2
 800097e:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < 48000/1000; i++ )
 8000980:	897b      	ldrh	r3, [r7, #10]
 8000982:	3301      	adds	r3, #1
 8000984:	817b      	strh	r3, [r7, #10]
 8000986:	897b      	ldrh	r3, [r7, #10]
 8000988:	2b2f      	cmp	r3, #47	; 0x2f
 800098a:	d9d5      	bls.n	8000938 <tud_audio_tx_done_pre_load_cb+0x28>
			}
	tud_audio_write((uint8_t *)mic_buf, (uint16_t) (2 * 48000 /1000));
 800098c:	2160      	movs	r1, #96	; 0x60
 800098e:	480a      	ldr	r0, [pc, #40]	; (80009b8 <tud_audio_tx_done_pre_load_cb+0xa8>)
 8000990:	f7ff fd15 	bl	80003be <tud_audio_write>



	// This callback could be used to fill microphone data separately
	return true;
 8000994:	2301      	movs	r3, #1
}
 8000996:	4618      	mov	r0, r3
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	bd90      	pop	{r4, r7, pc}
 800099e:	bf00      	nop
 80009a0:	851eb852 	.word	0x851eb852
 80009a4:	40a531eb 	.word	0x40a531eb
 80009a8:	00000000 	.word	0x00000000
 80009ac:	40e77000 	.word	0x40e77000
 80009b0:	00000000 	.word	0x00000000
 80009b4:	40d38800 	.word	0x40d38800
 80009b8:	2400057c 	.word	0x2400057c
 80009bc:	24000e9c 	.word	0x24000e9c

080009c0 <tud_cdc_line_state_cb>:
//--------------------------------------------------------------------+
// USB CDC
//--------------------------------------------------------------------+
// Invoked when cdc when line state changed e.g connected/disconnected
void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
 80009ca:	460b      	mov	r3, r1
 80009cc:	71bb      	strb	r3, [r7, #6]
 80009ce:	4613      	mov	r3, r2
 80009d0:	717b      	strb	r3, [r7, #5]
		// Terminal connected
	}else
	{
		// Terminal disconnected
	}
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	71fb      	strb	r3, [r7, #7]
	(void) itf;
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <cdc_task>:

void cdc_task(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b092      	sub	sp, #72	; 0x48
 80009f8:	af00      	add	r7, sp, #0
	// connected() check for DTR bit
	// Most but not all terminal client set this when making connection
	 if ( tud_cdc_connected() )
 80009fa:	f7ff fc91 	bl	8000320 <tud_cdc_connected>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d023      	beq.n	8000a4c <cdc_task+0x58>
	{
//TODO: terminal shows message only after a key is pressed. Why?
 		if (SendGreetings && tud_cdc_write_available())
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <cdc_task+0x60>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d00d      	beq.n	8000a28 <cdc_task+0x34>
 8000a0c:	f7ff fcbe 	bl	800038c <tud_cdc_write_available>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d008      	beq.n	8000a28 <cdc_task+0x34>
		{
			tud_cdc_write("\n\rHello!\n\r", 8);
 8000a16:	2108      	movs	r1, #8
 8000a18:	480f      	ldr	r0, [pc, #60]	; (8000a58 <cdc_task+0x64>)
 8000a1a:	f7ff fca0 	bl	800035e <tud_cdc_write>
			tud_cdc_write_flush();
 8000a1e:	f7ff fcad 	bl	800037c <tud_cdc_write_flush>
			SendGreetings = 0;
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <cdc_task+0x60>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
		}
		// connected and there are data available
		if ( tud_cdc_available() )
 8000a28:	f7ff fc82 	bl	8000330 <tud_cdc_available>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d00c      	beq.n	8000a4c <cdc_task+0x58>
		{
			// read data
			char buf[64];
			uint32_t count = tud_cdc_read(buf, sizeof(buf));
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2140      	movs	r1, #64	; 0x40
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fc82 	bl	8000340 <tud_cdc_read>
 8000a3c:	6478      	str	r0, [r7, #68]	; 0x44

			// Echo back
			// Note: Skip echo by commenting out write() and write_flush()
			// for throughput test e.g
			//    $ dd if=/dev/zero of=/dev/ttyACM0 count=10000
			tud_cdc_write(buf, count);
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fc8b 	bl	800035e <tud_cdc_write>
			tud_cdc_write_flush();
 8000a48:	f7ff fc98 	bl	800037c <tud_cdc_write_flush>
		}
	}
}
 8000a4c:	bf00      	nop
 8000a4e:	3748      	adds	r7, #72	; 0x48
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	24000008 	.word	0x24000008
 8000a58:	0800af70 	.word	0x0800af70

08000a5c <audio_task>:
//--------------------------------------------------------------------+
// AUDIO Task
//--------------------------------------------------------------------+

void audio_task(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
			tud_audio_write((uint8_t *)mic_buf, (uint16_t) (spk_data_size / 2));
			spk_data_size = 0;
		}
	}
#endif
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a72:	f000 facd 	bl	8001010 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a76:	f000 f83f 	bl	8000af8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7a:	f000 f8df 	bl	8000c3c <MX_GPIO_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000a7e:	f000 f8ab 	bl	8000bd8 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a88:	4819      	ldr	r0, [pc, #100]	; (8000af0 <main+0x84>)
 8000a8a:	f000 fe2f 	bl	80016ec <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000a8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a92:	f000 fb4f 	bl	8001134 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9c:	4814      	ldr	r0, [pc, #80]	; (8000af0 <main+0x84>)
 8000a9e:	f000 fe25 	bl	80016ec <HAL_GPIO_WritePin>
   HAL_Delay(1000);
 8000aa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa6:	f000 fb45 	bl	8001134 <HAL_Delay>
	//  board_init();
	TU_ASSERT(tusb_init());
 8000aaa:	f009 fadb 	bl	800a064 <tusb_init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	f083 0301 	eor.w	r3, r3, #1
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d00a      	beq.n	8000ad0 <main+0x64>
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <main+0x88>)
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d000      	beq.n	8000acc <main+0x60>
 8000aca:	be00      	bkpt	0x0000
 8000acc:	2300      	movs	r3, #0
 8000ace:	e00a      	b.n	8000ae6 <main+0x7a>

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void)
{
  tud_task_ext(UINT32_MAX, false);
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad6:	f006 f9f7 	bl	8006ec8 <tud_task_ext>
}
 8000ada:	bf00      	nop
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		tud_task();
		audio_task();
 8000adc:	f7ff ffbe 	bl	8000a5c <audio_task>
		cdc_task();
 8000ae0:	f7ff ff88 	bl	80009f4 <cdc_task>
		tud_task();
 8000ae4:	e7f4      	b.n	8000ad0 <main+0x64>
	}
	/* USER CODE END 3 */
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	58020000 	.word	0x58020000
 8000af4:	e000edf0 	.word	0xe000edf0

08000af8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b09c      	sub	sp, #112	; 0x70
 8000afc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	224c      	movs	r2, #76	; 0x4c
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f009 fc22 	bl	800a350 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2220      	movs	r2, #32
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f009 fc1c 	bl	800a350 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b18:	2002      	movs	r0, #2
 8000b1a:	f000 ff49 	bl	80019b0 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	4b2c      	ldr	r3, [pc, #176]	; (8000bd4 <SystemClock_Config+0xdc>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	4a2b      	ldr	r2, [pc, #172]	; (8000bd4 <SystemClock_Config+0xdc>)
 8000b28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b2c:	6193      	str	r3, [r2, #24]
 8000b2e:	4b29      	ldr	r3, [pc, #164]	; (8000bd4 <SystemClock_Config+0xdc>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b3a:	bf00      	nop
 8000b3c:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <SystemClock_Config+0xdc>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b48:	d1f8      	bne.n	8000b3c <SystemClock_Config+0x44>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b4a:	2321      	movs	r3, #33	; 0x21
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b4e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b54:	2301      	movs	r3, #1
 8000b56:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 8000b60:	2305      	movs	r3, #5
 8000b62:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 100;
 8000b64:	2364      	movs	r3, #100	; 0x64
 8000b66:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000b74:	2308      	movs	r3, #8
 8000b76:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 ff5d 	bl	8001a44 <HAL_RCC_OscConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8000b90:	f000 f89a 	bl	8000cc8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b94:	233f      	movs	r3, #63	; 0x3f
 8000b96:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ba4:	2340      	movs	r3, #64	; 0x40
 8000ba6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ba8:	2340      	movs	r3, #64	; 0x40
 8000baa:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bb2:	2340      	movs	r3, #64	; 0x40
 8000bb4:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2103      	movs	r1, #3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 fb1c 	bl	80021f8 <HAL_RCC_ClockConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0xd2>
	{
		Error_Handler();
 8000bc6:	f000 f87f 	bl	8000cc8 <Error_Handler>
	}
}
 8000bca:	bf00      	nop
 8000bcc:	3770      	adds	r7, #112	; 0x70
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	58024800 	.word	0x58024800

08000bd8 <MX_USB_OTG_HS_PCD_Init>:
 * @brief USB_OTG_HS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_HS_Init 0 */

	/* USER CODE BEGIN USB_OTG_HS_Init 1 */

	/* USER CODE END USB_OTG_HS_Init 1 */
	hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000bde:	4a16      	ldr	r2, [pc, #88]	; (8000c38 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000be0:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000be4:	2209      	movs	r2, #9
 8000be6:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000bea:	2202      	movs	r2, #2
 8000bec:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	631a      	str	r2, [r3, #48]	; 0x30
	hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000c20:	f000 fd7d 	bl	800171e <HAL_PCD_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_USB_OTG_HS_PCD_Init+0x56>
	{
		Error_Handler();
 8000c2a:	f000 f84d 	bl	8000cc8 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_HS_Init 2 */

	/* USER CODE END USB_OTG_HS_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	24000064 	.word	0x24000064
 8000c38:	40040000 	.word	0x40040000

08000c3c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <MX_GPIO_Init+0x84>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <MX_GPIO_Init+0x84>)
 8000c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <MX_GPIO_Init+0x84>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MX_GPIO_Init+0x84>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <MX_GPIO_Init+0x84>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_GPIO_Init+0x84>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c94:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <MX_GPIO_Init+0x88>)
 8000c96:	f000 fd29 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4804      	ldr	r0, [pc, #16]	; (8000cc4 <MX_GPIO_Init+0x88>)
 8000cb4:	f000 fb72 	bl	800139c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb8:	bf00      	nop
 8000cba:	3720      	adds	r7, #32
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	58024400 	.word	0x58024400
 8000cc4:	58020000 	.word	0x58020000

08000cc8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <Error_Handler+0x8>
	...

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <HAL_MspInit+0x30>)
 8000cdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ce0:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <HAL_MspInit+0x30>)
 8000ce2:	f043 0302 	orr.w	r3, r3, #2
 8000ce6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_MspInit+0x30>)
 8000cec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	58024400 	.word	0x58024400

08000d08 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b0b2      	sub	sp, #200	; 0xc8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	22b8      	movs	r2, #184	; 0xb8
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f009 fb19 	bl	800a350 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a1a      	ldr	r2, [pc, #104]	; (8000d8c <HAL_PCD_MspInit+0x84>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d12c      	bne.n	8000d82 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d28:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000d34:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000d38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	4618      	mov	r0, r3
 8000d42:	f001 fd89 	bl	8002858 <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8000d4c:	f7ff ffbc 	bl	8000cc8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000d50:	f000 fe68 	bl	8001a24 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_PCD_MspInit+0x88>)
 8000d56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d5a:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <HAL_PCD_MspInit+0x88>)
 8000d5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d60:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d64:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <HAL_PCD_MspInit+0x88>)
 8000d66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	204d      	movs	r0, #77	; 0x4d
 8000d78:	f000 fadb 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8000d7c:	204d      	movs	r0, #77	; 0x4d
 8000d7e:	f000 faf2 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	37c8      	adds	r7, #200	; 0xc8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40040000 	.word	0x40040000
 8000d90:	58024400 	.word	0x58024400

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <NMI_Handler+0x4>

08000d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <MemManage_Handler+0x4>

08000da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de0:	f000 f988 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 8000dec:	2000      	movs	r0, #0
 8000dee:	f008 ffeb 	bl	8009dc8 <dcd_int_handler>
	return;
 8000df2:	bf00      	nop
  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
  /* USER CODE BEGIN OTG_HS_IRQn 1 */
  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b32      	ldr	r3, [pc, #200]	; (8000ec8 <SystemInit+0xd0>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e02:	4a31      	ldr	r2, [pc, #196]	; (8000ec8 <SystemInit+0xd0>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e0c:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <SystemInit+0xd4>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 030f 	and.w	r3, r3, #15
 8000e14:	2b06      	cmp	r3, #6
 8000e16:	d807      	bhi.n	8000e28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e18:	4b2c      	ldr	r3, [pc, #176]	; (8000ecc <SystemInit+0xd4>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f023 030f 	bic.w	r3, r3, #15
 8000e20:	4a2a      	ldr	r2, [pc, #168]	; (8000ecc <SystemInit+0xd4>)
 8000e22:	f043 0307 	orr.w	r3, r3, #7
 8000e26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e28:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <SystemInit+0xd8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a28      	ldr	r2, [pc, #160]	; (8000ed0 <SystemInit+0xd8>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e34:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <SystemInit+0xd8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e3a:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <SystemInit+0xd8>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4924      	ldr	r1, [pc, #144]	; (8000ed0 <SystemInit+0xd8>)
 8000e40:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <SystemInit+0xdc>)
 8000e42:	4013      	ands	r3, r2
 8000e44:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <SystemInit+0xd4>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0308 	and.w	r3, r3, #8
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d007      	beq.n	8000e62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e52:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <SystemInit+0xd4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f023 030f 	bic.w	r3, r3, #15
 8000e5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ecc <SystemInit+0xd4>)
 8000e5c:	f043 0307 	orr.w	r3, r3, #7
 8000e60:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <SystemInit+0xd8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e68:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <SystemInit+0xd8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <SystemInit+0xd8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e74:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <SystemInit+0xd8>)
 8000e76:	4a18      	ldr	r2, [pc, #96]	; (8000ed8 <SystemInit+0xe0>)
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <SystemInit+0xd8>)
 8000e7c:	4a17      	ldr	r2, [pc, #92]	; (8000edc <SystemInit+0xe4>)
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <SystemInit+0xd8>)
 8000e82:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <SystemInit+0xe8>)
 8000e84:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <SystemInit+0xd8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e8c:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <SystemInit+0xd8>)
 8000e8e:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <SystemInit+0xe8>)
 8000e90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <SystemInit+0xd8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <SystemInit+0xd8>)
 8000e9a:	4a11      	ldr	r2, [pc, #68]	; (8000ee0 <SystemInit+0xe8>)
 8000e9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <SystemInit+0xd8>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <SystemInit+0xd8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <SystemInit+0xd8>)
 8000eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <SystemInit+0xd8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <SystemInit+0xec>)
 8000eb8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ebc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00
 8000ecc:	52002000 	.word	0x52002000
 8000ed0:	58024400 	.word	0x58024400
 8000ed4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ed8:	02020200 	.word	0x02020200
 8000edc:	01ff0000 	.word	0x01ff0000
 8000ee0:	01010280 	.word	0x01010280
 8000ee4:	52004000 	.word	0x52004000

08000ee8 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
	return (uint8_t const *)&desc_device;
 8000eec:	4b02      	ldr	r3, [pc, #8]	; (8000ef8 <tud_descriptor_device_cb+0x10>)
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	0800aff4 	.word	0x0800aff4

08000efc <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
	(void)index; // for multiple configurations
	return desc_configuration;
 8000f06:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <tud_descriptor_configuration_cb+0x18>)
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	0800b008 	.word	0x0800b008

08000f18 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	460a      	mov	r2, r1
 8000f22:	71fb      	strb	r3, [r7, #7]
 8000f24:	4613      	mov	r3, r2
 8000f26:	80bb      	strh	r3, [r7, #4]
	(void)langid;

	uint8_t chr_count;

	if (index == 0)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d108      	bne.n	8000f40 <tud_descriptor_string_cb+0x28>
	{
		memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8000f2e:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <tud_descriptor_string_cb+0x9c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	4b20      	ldr	r3, [pc, #128]	; (8000fb8 <tud_descriptor_string_cb+0xa0>)
 8000f38:	805a      	strh	r2, [r3, #2]
		chr_count = 1;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
 8000f3e:	e027      	b.n	8000f90 <tud_descriptor_string_cb+0x78>
	}
	else
	{
		// Convert ASCII string into UTF-16

		if (!(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0]))) return NULL;
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d901      	bls.n	8000f4a <tud_descriptor_string_cb+0x32>
 8000f46:	2300      	movs	r3, #0
 8000f48:	e030      	b.n	8000fac <tud_descriptor_string_cb+0x94>

		const char* str = string_desc_arr[index];
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	4a19      	ldr	r2, [pc, #100]	; (8000fb4 <tud_descriptor_string_cb+0x9c>)
 8000f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f52:	60bb      	str	r3, [r7, #8]

		// Cap at max char
		chr_count = (uint8_t) strlen(str);
 8000f54:	68b8      	ldr	r0, [r7, #8]
 8000f56:	f7ff f9db 	bl	8000310 <strlen>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	73fb      	strb	r3, [r7, #15]
		if (chr_count > 31) chr_count = 31;
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	2b1f      	cmp	r3, #31
 8000f62:	d901      	bls.n	8000f68 <tud_descriptor_string_cb+0x50>
 8000f64:	231f      	movs	r3, #31
 8000f66:	73fb      	strb	r3, [r7, #15]

		for (uint8_t i = 0; i < chr_count; i++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73bb      	strb	r3, [r7, #14]
 8000f6c:	e00c      	b.n	8000f88 <tud_descriptor_string_cb+0x70>
		{
			_desc_str[1 + i] = str[i];
 8000f6e:	7bbb      	ldrb	r3, [r7, #14]
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	4413      	add	r3, r2
 8000f74:	781a      	ldrb	r2, [r3, #0]
 8000f76:	7bbb      	ldrb	r3, [r7, #14]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	b291      	uxth	r1, r2
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <tud_descriptor_string_cb+0xa0>)
 8000f7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < chr_count; i++)
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	3301      	adds	r3, #1
 8000f86:	73bb      	strb	r3, [r7, #14]
 8000f88:	7bba      	ldrb	r2, [r7, #14]
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d3ee      	bcc.n	8000f6e <tud_descriptor_string_cb+0x56>
		}
	}

	// first byte is length (including header), second byte is string type
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	3301      	adds	r3, #1
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <tud_descriptor_string_cb+0xa0>)
 8000fa8:	801a      	strh	r2, [r3, #0]

	return _desc_str;
 8000faa:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <tud_descriptor_string_cb+0xa0>)
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	24000014 	.word	0x24000014
 8000fb8:	24000ea0 	.word	0x24000ea0

08000fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fc0:	f7ff ff1a 	bl	8000df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fc6:	490d      	ldr	r1, [pc, #52]	; (8000ffc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	; (8001008 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fea:	f009 f97f 	bl	800a2ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fee:	f7ff fd3d 	bl	8000a6c <main>
  bx  lr
 8000ff2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ff4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000ff8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ffc:	24000048 	.word	0x24000048
  ldr r2, =_sidata
 8001000:	0800b3a0 	.word	0x0800b3a0
  ldr r2, =_sbss
 8001004:	24000048 	.word	0x24000048
  ldr r4, =_ebss
 8001008:	24001c28 	.word	0x24001c28

0800100c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC3_IRQHandler>
	...

08001010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001016:	2003      	movs	r0, #3
 8001018:	f000 f980 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800101c:	f001 faa2 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8001020:	4602      	mov	r2, r0
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_Init+0x68>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	0a1b      	lsrs	r3, r3, #8
 8001028:	f003 030f 	and.w	r3, r3, #15
 800102c:	4913      	ldr	r1, [pc, #76]	; (800107c <HAL_Init+0x6c>)
 800102e:	5ccb      	ldrb	r3, [r1, r3]
 8001030:	f003 031f 	and.w	r3, r3, #31
 8001034:	fa22 f303 	lsr.w	r3, r2, r3
 8001038:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_Init+0x68>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	4a0e      	ldr	r2, [pc, #56]	; (800107c <HAL_Init+0x6c>)
 8001044:	5cd3      	ldrb	r3, [r2, r3]
 8001046:	f003 031f 	and.w	r3, r3, #31
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	fa22 f303 	lsr.w	r3, r2, r3
 8001050:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <HAL_Init+0x70>)
 8001052:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001054:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <HAL_Init+0x74>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800105a:	200f      	movs	r0, #15
 800105c:	f000 f814 	bl	8001088 <HAL_InitTick>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e002      	b.n	8001070 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800106a:	f7ff fe33 	bl	8000cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	58024400 	.word	0x58024400
 800107c:	0800afe4 	.word	0x0800afe4
 8001080:	24000010 	.word	0x24000010
 8001084:	2400000c 	.word	0x2400000c

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_InitTick+0x60>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e021      	b.n	80010e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <HAL_InitTick+0x64>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_InitTick+0x60>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f965 	bl	8001382 <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 f92f 	bl	8001332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_InitTick+0x68>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	24000034 	.word	0x24000034
 80010ec:	2400000c 	.word	0x2400000c
 80010f0:	24000030 	.word	0x24000030

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	24000034 	.word	0x24000034
 8001118:	24000ee0 	.word	0x24000ee0

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	24000ee0 	.word	0x24000ee0

08001134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff ffee 	bl	800111c <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114c:	d005      	beq.n	800115a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_Delay+0x44>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800115a:	bf00      	nop
 800115c:	f7ff ffde 	bl	800111c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8f7      	bhi.n	800115c <HAL_Delay+0x28>
  {
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	24000034 	.word	0x24000034

0800117c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <__NVIC_SetPriorityGrouping+0x40>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <__NVIC_SetPriorityGrouping+0x40>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	60d3      	str	r3, [r2, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00
 80011c0:	05fa0000 	.word	0x05fa0000

080011c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	f003 021f 	and.w	r2, r3, #31
 80011f8:	4907      	ldr	r1, [pc, #28]	; (8001218 <__NVIC_EnableIRQ+0x38>)
 80011fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	; (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <__NVIC_SetPriority+0x50>)
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff29 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001340:	f7ff ff40 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 8001344:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f7ff ff90 	bl	8001270 <NVIC_EncodePriority>
 8001350:	4602      	mov	r2, r0
 8001352:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff5f 	bl	800121c <__NVIC_SetPriority>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001370:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff33 	bl	80011e0 <__NVIC_EnableIRQ>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffa4 	bl	80012d8 <SysTick_Config>
 8001390:	4603      	mov	r3, r0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800139c:	b480      	push	{r7}
 800139e:	b089      	sub	sp, #36	; 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013aa:	4b86      	ldr	r3, [pc, #536]	; (80015c4 <HAL_GPIO_Init+0x228>)
 80013ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013ae:	e18c      	b.n	80016ca <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2101      	movs	r1, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 817e 	beq.w	80016c4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d005      	beq.n	80013e0 <HAL_GPIO_Init+0x44>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d130      	bne.n	8001442 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	2203      	movs	r2, #3
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	68da      	ldr	r2, [r3, #12]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001416:	2201      	movs	r2, #1
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	091b      	lsrs	r3, r3, #4
 800142c:	f003 0201 	and.w	r2, r3, #1
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b03      	cmp	r3, #3
 800144c:	d017      	beq.n	800147e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	2203      	movs	r2, #3
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d123      	bne.n	80014d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	08da      	lsrs	r2, r3, #3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3208      	adds	r2, #8
 8001492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	220f      	movs	r2, #15
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	691a      	ldr	r2, [r3, #16]
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	08da      	lsrs	r2, r3, #3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3208      	adds	r2, #8
 80014cc:	69b9      	ldr	r1, [r7, #24]
 80014ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	2203      	movs	r2, #3
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0203 	and.w	r2, r3, #3
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 80d8 	beq.w	80016c4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001514:	4b2c      	ldr	r3, [pc, #176]	; (80015c8 <HAL_GPIO_Init+0x22c>)
 8001516:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800151a:	4a2b      	ldr	r2, [pc, #172]	; (80015c8 <HAL_GPIO_Init+0x22c>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001524:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <HAL_GPIO_Init+0x22c>)
 8001526:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001532:	4a26      	ldr	r2, [pc, #152]	; (80015cc <HAL_GPIO_Init+0x230>)
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3302      	adds	r3, #2
 800153a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	220f      	movs	r2, #15
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <HAL_GPIO_Init+0x234>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d04a      	beq.n	80015f4 <HAL_GPIO_Init+0x258>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a1c      	ldr	r2, [pc, #112]	; (80015d4 <HAL_GPIO_Init+0x238>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d02b      	beq.n	80015be <HAL_GPIO_Init+0x222>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a1b      	ldr	r2, [pc, #108]	; (80015d8 <HAL_GPIO_Init+0x23c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d025      	beq.n	80015ba <HAL_GPIO_Init+0x21e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a1a      	ldr	r2, [pc, #104]	; (80015dc <HAL_GPIO_Init+0x240>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01f      	beq.n	80015b6 <HAL_GPIO_Init+0x21a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <HAL_GPIO_Init+0x244>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d019      	beq.n	80015b2 <HAL_GPIO_Init+0x216>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a18      	ldr	r2, [pc, #96]	; (80015e4 <HAL_GPIO_Init+0x248>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0x212>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a17      	ldr	r2, [pc, #92]	; (80015e8 <HAL_GPIO_Init+0x24c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00d      	beq.n	80015aa <HAL_GPIO_Init+0x20e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a16      	ldr	r2, [pc, #88]	; (80015ec <HAL_GPIO_Init+0x250>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x20a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a15      	ldr	r2, [pc, #84]	; (80015f0 <HAL_GPIO_Init+0x254>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_GPIO_Init+0x206>
 800159e:	2309      	movs	r3, #9
 80015a0:	e029      	b.n	80015f6 <HAL_GPIO_Init+0x25a>
 80015a2:	230a      	movs	r3, #10
 80015a4:	e027      	b.n	80015f6 <HAL_GPIO_Init+0x25a>
 80015a6:	2307      	movs	r3, #7
 80015a8:	e025      	b.n	80015f6 <HAL_GPIO_Init+0x25a>
 80015aa:	2306      	movs	r3, #6
 80015ac:	e023      	b.n	80015f6 <HAL_GPIO_Init+0x25a>
 80015ae:	2305      	movs	r3, #5
 80015b0:	e021      	b.n	80015f6 <HAL_GPIO_Init+0x25a>
 80015b2:	2304      	movs	r3, #4
 80015b4:	e01f      	b.n	80015f6 <HAL_GPIO_Init+0x25a>
 80015b6:	2303      	movs	r3, #3
 80015b8:	e01d      	b.n	80015f6 <HAL_GPIO_Init+0x25a>
 80015ba:	2302      	movs	r3, #2
 80015bc:	e01b      	b.n	80015f6 <HAL_GPIO_Init+0x25a>
 80015be:	2301      	movs	r3, #1
 80015c0:	e019      	b.n	80015f6 <HAL_GPIO_Init+0x25a>
 80015c2:	bf00      	nop
 80015c4:	58000080 	.word	0x58000080
 80015c8:	58024400 	.word	0x58024400
 80015cc:	58000400 	.word	0x58000400
 80015d0:	58020000 	.word	0x58020000
 80015d4:	58020400 	.word	0x58020400
 80015d8:	58020800 	.word	0x58020800
 80015dc:	58020c00 	.word	0x58020c00
 80015e0:	58021000 	.word	0x58021000
 80015e4:	58021400 	.word	0x58021400
 80015e8:	58021800 	.word	0x58021800
 80015ec:	58021c00 	.word	0x58021c00
 80015f0:	58022400 	.word	0x58022400
 80015f4:	2300      	movs	r3, #0
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	f002 0203 	and.w	r2, r2, #3
 80015fc:	0092      	lsls	r2, r2, #2
 80015fe:	4093      	lsls	r3, r2
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001606:	4938      	ldr	r1, [pc, #224]	; (80016e8 <HAL_GPIO_Init+0x34c>)
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	3302      	adds	r3, #2
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800163a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	3301      	adds	r3, #1
 80016c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	fa22 f303 	lsr.w	r3, r2, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f47f ae6b 	bne.w	80013b0 <HAL_GPIO_Init+0x14>
  }
}
 80016da:	bf00      	nop
 80016dc:	bf00      	nop
 80016de:	3724      	adds	r7, #36	; 0x24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	58000400 	.word	0x58000400

080016ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
 80016f8:	4613      	mov	r3, r2
 80016fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016fc:	787b      	ldrb	r3, [r7, #1]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001708:	e003      	b.n	8001712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800170a:	887b      	ldrh	r3, [r7, #2]
 800170c:	041a      	lsls	r2, r3, #16
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	619a      	str	r2, [r3, #24]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800171e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001720:	b08f      	sub	sp, #60	; 0x3c
 8001722:	af0a      	add	r7, sp, #40	; 0x28
 8001724:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e116      	b.n	800195e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d106      	bne.n	8001750 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff fadc 	bl	8000d08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2203      	movs	r2, #3
 8001754:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800175c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f002 fbe4 	bl	8003f3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	603b      	str	r3, [r7, #0]
 800177a:	687e      	ldr	r6, [r7, #4]
 800177c:	466d      	mov	r5, sp
 800177e:	f106 0410 	add.w	r4, r6, #16
 8001782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001784:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001786:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001788:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800178a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800178e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001792:	1d33      	adds	r3, r6, #4
 8001794:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001796:	6838      	ldr	r0, [r7, #0]
 8001798:	f002 fb62 	bl	8003e60 <USB_CoreInit>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d005      	beq.n	80017ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2202      	movs	r2, #2
 80017a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e0d7      	b.n	800195e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f002 fbd2 	bl	8003f5e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	e04a      	b.n	8001856 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	333d      	adds	r3, #61	; 0x3d
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017d4:	7bfa      	ldrb	r2, [r7, #15]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4413      	add	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	333c      	adds	r3, #60	; 0x3c
 80017e4:	7bfa      	ldrb	r2, [r7, #15]
 80017e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017e8:	7bfa      	ldrb	r2, [r7, #15]
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	b298      	uxth	r0, r3
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4413      	add	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	3356      	adds	r3, #86	; 0x56
 80017fc:	4602      	mov	r2, r0
 80017fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	3340      	adds	r3, #64	; 0x40
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4413      	add	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	3344      	adds	r3, #68	; 0x44
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001828:	7bfa      	ldrb	r2, [r7, #15]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	3348      	adds	r3, #72	; 0x48
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4413      	add	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	334c      	adds	r3, #76	; 0x4c
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	3301      	adds	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
 8001856:	7bfa      	ldrb	r2, [r7, #15]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	d3af      	bcc.n	80017c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001860:	2300      	movs	r3, #0
 8001862:	73fb      	strb	r3, [r7, #15]
 8001864:	e044      	b.n	80018f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4413      	add	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4413      	add	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001892:	7bfa      	ldrb	r2, [r7, #15]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4413      	add	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	440b      	add	r3, r1
 80018a0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018be:	7bfa      	ldrb	r2, [r7, #15]
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4413      	add	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018d4:	7bfa      	ldrb	r2, [r7, #15]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	4413      	add	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	3301      	adds	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
 80018f0:	7bfa      	ldrb	r2, [r7, #15]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d3b5      	bcc.n	8001866 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	687e      	ldr	r6, [r7, #4]
 8001902:	466d      	mov	r5, sp
 8001904:	f106 0410 	add.w	r4, r6, #16
 8001908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800190a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800190c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800190e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001910:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001914:	e885 0003 	stmia.w	r5, {r0, r1}
 8001918:	1d33      	adds	r3, r6, #4
 800191a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800191c:	6838      	ldr	r0, [r7, #0]
 800191e:	f002 fb6b 	bl	8003ff8 <USB_DevInit>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2202      	movs	r2, #2
 800192c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e014      	b.n	800195e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	2b01      	cmp	r3, #1
 800194a:	d102      	bne.n	8001952 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f80b 	bl	8001968 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f002 fd29 	bl	80043ae <USB_DevDisconnect>

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001968 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_PCDEx_ActivateLPM+0x44>)
 8001998:	4313      	orrs	r3, r2
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	10000003 	.word	0x10000003

080019b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_PWREx_ConfigSupply+0x70>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d00a      	beq.n	80019da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_PWREx_ConfigSupply+0x70>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d001      	beq.n	80019d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e01f      	b.n	8001a16 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e01d      	b.n	8001a16 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_PWREx_ConfigSupply+0x70>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	f023 0207 	bic.w	r2, r3, #7
 80019e2:	490f      	ldr	r1, [pc, #60]	; (8001a20 <HAL_PWREx_ConfigSupply+0x70>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019ea:	f7ff fb97 	bl	800111c <HAL_GetTick>
 80019ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019f0:	e009      	b.n	8001a06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019f2:	f7ff fb93 	bl	800111c <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a00:	d901      	bls.n	8001a06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e007      	b.n	8001a16 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_PWREx_ConfigSupply+0x70>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a12:	d1ee      	bne.n	80019f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	58024800 	.word	0x58024800

08001a24 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a32:	60d3      	str	r3, [r2, #12]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	58024800 	.word	0x58024800

08001a44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08c      	sub	sp, #48	; 0x30
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e3c8      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8087 	beq.w	8001b72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a64:	4b88      	ldr	r3, [pc, #544]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a6e:	4b86      	ldr	r3, [pc, #536]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a76:	2b10      	cmp	r3, #16
 8001a78:	d007      	beq.n	8001a8a <HAL_RCC_OscConfig+0x46>
 8001a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7c:	2b18      	cmp	r3, #24
 8001a7e:	d110      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x5e>
 8001a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d10b      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8a:	4b7f      	ldr	r3, [pc, #508]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d06c      	beq.n	8001b70 <HAL_RCC_OscConfig+0x12c>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d168      	bne.n	8001b70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e3a2      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aaa:	d106      	bne.n	8001aba <HAL_RCC_OscConfig+0x76>
 8001aac:	4b76      	ldr	r3, [pc, #472]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a75      	ldr	r2, [pc, #468]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	e02e      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x98>
 8001ac2:	4b71      	ldr	r3, [pc, #452]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a70      	ldr	r2, [pc, #448]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b6e      	ldr	r3, [pc, #440]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a6d      	ldr	r2, [pc, #436]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e01d      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0xbc>
 8001ae6:	4b68      	ldr	r3, [pc, #416]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a67      	ldr	r2, [pc, #412]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b65      	ldr	r3, [pc, #404]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a64      	ldr	r2, [pc, #400]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e00b      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001b00:	4b61      	ldr	r3, [pc, #388]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a60      	ldr	r2, [pc, #384]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b5e      	ldr	r3, [pc, #376]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a5d      	ldr	r2, [pc, #372]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d013      	beq.n	8001b48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff fafc 	bl	800111c <HAL_GetTick>
 8001b24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff faf8 	bl	800111c <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e356      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b3a:	4b53      	ldr	r3, [pc, #332]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0xe4>
 8001b46:	e014      	b.n	8001b72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7ff fae8 	bl	800111c <HAL_GetTick>
 8001b4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff fae4 	bl	800111c <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	; 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e342      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b62:	4b49      	ldr	r3, [pc, #292]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x10c>
 8001b6e:	e000      	b.n	8001b72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 808c 	beq.w	8001c98 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b80:	4b41      	ldr	r3, [pc, #260]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b88:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b8a:	4b3f      	ldr	r3, [pc, #252]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d007      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x162>
 8001b96:	6a3b      	ldr	r3, [r7, #32]
 8001b98:	2b18      	cmp	r3, #24
 8001b9a:	d137      	bne.n	8001c0c <HAL_RCC_OscConfig+0x1c8>
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d132      	bne.n	8001c0c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ba6:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <HAL_RCC_OscConfig+0x17a>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e314      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001bbe:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 0219 	bic.w	r2, r3, #25
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	492f      	ldr	r1, [pc, #188]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff faa4 	bl	800111c <HAL_GetTick>
 8001bd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd8:	f7ff faa0 	bl	800111c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e2fe      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bea:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf6:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	061b      	lsls	r3, r3, #24
 8001c04:	4920      	ldr	r1, [pc, #128]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c0a:	e045      	b.n	8001c98 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d026      	beq.n	8001c62 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c14:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 0219 	bic.w	r2, r3, #25
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	4919      	ldr	r1, [pc, #100]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c26:	f7ff fa79 	bl	800111c <HAL_GetTick>
 8001c2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2e:	f7ff fa75 	bl	800111c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e2d3      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	061b      	lsls	r3, r3, #24
 8001c5a:	490b      	ldr	r1, [pc, #44]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]
 8001c60:	e01a      	b.n	8001c98 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a08      	ldr	r2, [pc, #32]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6e:	f7ff fa55 	bl	800111c <HAL_GetTick>
 8001c72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c74:	e00a      	b.n	8001c8c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c76:	f7ff fa51 	bl	800111c <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d903      	bls.n	8001c8c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e2af      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
 8001c88:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c8c:	4b96      	ldr	r3, [pc, #600]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1ee      	bne.n	8001c76 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d06a      	beq.n	8001d7a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ca4:	4b90      	ldr	r3, [pc, #576]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cac:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cae:	4b8e      	ldr	r3, [pc, #568]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d007      	beq.n	8001cca <HAL_RCC_OscConfig+0x286>
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	2b18      	cmp	r3, #24
 8001cbe:	d11b      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x2b4>
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d116      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cca:	4b87      	ldr	r3, [pc, #540]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x29e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	2b80      	cmp	r3, #128	; 0x80
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e282      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ce2:	4b81      	ldr	r3, [pc, #516]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	061b      	lsls	r3, r3, #24
 8001cf0:	497d      	ldr	r1, [pc, #500]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cf6:	e040      	b.n	8001d7a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d023      	beq.n	8001d48 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d00:	4b79      	ldr	r3, [pc, #484]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a78      	ldr	r2, [pc, #480]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fa06 	bl	800111c <HAL_GetTick>
 8001d10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d14:	f7ff fa02 	bl	800111c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e260      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d26:	4b70      	ldr	r3, [pc, #448]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d32:	4b6d      	ldr	r3, [pc, #436]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	061b      	lsls	r3, r3, #24
 8001d40:	4969      	ldr	r1, [pc, #420]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	60cb      	str	r3, [r1, #12]
 8001d46:	e018      	b.n	8001d7a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d48:	4b67      	ldr	r3, [pc, #412]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a66      	ldr	r2, [pc, #408]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff f9e2 	bl	800111c <HAL_GetTick>
 8001d58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d5c:	f7ff f9de 	bl	800111c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e23c      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d6e:	4b5e      	ldr	r3, [pc, #376]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d036      	beq.n	8001df4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d019      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8e:	4b56      	ldr	r3, [pc, #344]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d92:	4a55      	ldr	r2, [pc, #340]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9a:	f7ff f9bf 	bl	800111c <HAL_GetTick>
 8001d9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da2:	f7ff f9bb 	bl	800111c <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e219      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001db4:	4b4c      	ldr	r3, [pc, #304]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x35e>
 8001dc0:	e018      	b.n	8001df4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc2:	4b49      	ldr	r3, [pc, #292]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dc6:	4a48      	ldr	r2, [pc, #288]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dce:	f7ff f9a5 	bl	800111c <HAL_GetTick>
 8001dd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd6:	f7ff f9a1 	bl	800111c <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e1ff      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001de8:	4b3f      	ldr	r3, [pc, #252]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f0      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0320 	and.w	r3, r3, #32
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d036      	beq.n	8001e6e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d019      	beq.n	8001e3c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e08:	4b37      	ldr	r3, [pc, #220]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a36      	ldr	r2, [pc, #216]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001e0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e14:	f7ff f982 	bl	800111c <HAL_GetTick>
 8001e18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e1c:	f7ff f97e 	bl	800111c <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e1dc      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x3d8>
 8001e3a:	e018      	b.n	8001e6e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a29      	ldr	r2, [pc, #164]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001e42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e46:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e48:	f7ff f968 	bl	800111c <HAL_GetTick>
 8001e4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e50:	f7ff f964 	bl	800111c <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e1c2      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e62:	4b21      	ldr	r3, [pc, #132]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8086 	beq.w	8001f88 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <HAL_RCC_OscConfig+0x4a8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1a      	ldr	r2, [pc, #104]	; (8001eec <HAL_RCC_OscConfig+0x4a8>)
 8001e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e88:	f7ff f948 	bl	800111c <HAL_GetTick>
 8001e8c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e90:	f7ff f944 	bl	800111c <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b64      	cmp	r3, #100	; 0x64
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e1a2      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_RCC_OscConfig+0x4a8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d106      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x480>
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eba:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec2:	e032      	b.n	8001f2a <HAL_RCC_OscConfig+0x4e6>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d111      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x4ac>
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed0:	4a05      	ldr	r2, [pc, #20]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001ed2:	f023 0301 	bic.w	r3, r3, #1
 8001ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001edc:	4a02      	ldr	r2, [pc, #8]	; (8001ee8 <HAL_RCC_OscConfig+0x4a4>)
 8001ede:	f023 0304 	bic.w	r3, r3, #4
 8001ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee4:	e021      	b.n	8001f2a <HAL_RCC_OscConfig+0x4e6>
 8001ee6:	bf00      	nop
 8001ee8:	58024400 	.word	0x58024400
 8001eec:	58024800 	.word	0x58024800
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	d10c      	bne.n	8001f12 <HAL_RCC_OscConfig+0x4ce>
 8001ef8:	4b83      	ldr	r3, [pc, #524]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efc:	4a82      	ldr	r2, [pc, #520]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	6713      	str	r3, [r2, #112]	; 0x70
 8001f04:	4b80      	ldr	r3, [pc, #512]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8001f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f08:	4a7f      	ldr	r2, [pc, #508]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f10:	e00b      	b.n	8001f2a <HAL_RCC_OscConfig+0x4e6>
 8001f12:	4b7d      	ldr	r3, [pc, #500]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f16:	4a7c      	ldr	r2, [pc, #496]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1e:	4b7a      	ldr	r3, [pc, #488]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8001f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f22:	4a79      	ldr	r2, [pc, #484]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8001f24:	f023 0304 	bic.w	r3, r3, #4
 8001f28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d015      	beq.n	8001f5e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f32:	f7ff f8f3 	bl	800111c <HAL_GetTick>
 8001f36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7ff f8ef 	bl	800111c <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e14b      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f50:	4b6d      	ldr	r3, [pc, #436]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8001f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0ee      	beq.n	8001f3a <HAL_RCC_OscConfig+0x4f6>
 8001f5c:	e014      	b.n	8001f88 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5e:	f7ff f8dd 	bl	800111c <HAL_GetTick>
 8001f62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7ff f8d9 	bl	800111c <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e135      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f7c:	4b62      	ldr	r3, [pc, #392]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1ee      	bne.n	8001f66 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 812a 	beq.w	80021e6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f92:	4b5d      	ldr	r3, [pc, #372]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f9a:	2b18      	cmp	r3, #24
 8001f9c:	f000 80ba 	beq.w	8002114 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	f040 8095 	bne.w	80020d4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001faa:	4b57      	ldr	r3, [pc, #348]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a56      	ldr	r2, [pc, #344]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8001fb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb6:	f7ff f8b1 	bl	800111c <HAL_GetTick>
 8001fba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbe:	f7ff f8ad 	bl	800111c <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e10b      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fd0:	4b4d      	ldr	r3, [pc, #308]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f0      	bne.n	8001fbe <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fdc:	4b4a      	ldr	r3, [pc, #296]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8001fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fe0:	4b4a      	ldr	r3, [pc, #296]	; (800210c <HAL_RCC_OscConfig+0x6c8>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	4945      	ldr	r1, [pc, #276]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	628b      	str	r3, [r1, #40]	; 0x28
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002004:	3b01      	subs	r3, #1
 8002006:	025b      	lsls	r3, r3, #9
 8002008:	b29b      	uxth	r3, r3
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002010:	3b01      	subs	r3, #1
 8002012:	041b      	lsls	r3, r3, #16
 8002014:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201e:	3b01      	subs	r3, #1
 8002020:	061b      	lsls	r3, r3, #24
 8002022:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002026:	4938      	ldr	r1, [pc, #224]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8002028:	4313      	orrs	r3, r2
 800202a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800202c:	4b36      	ldr	r3, [pc, #216]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	4a35      	ldr	r2, [pc, #212]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8002032:	f023 0301 	bic.w	r3, r3, #1
 8002036:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002038:	4b33      	ldr	r3, [pc, #204]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 800203a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800203c:	4b34      	ldr	r3, [pc, #208]	; (8002110 <HAL_RCC_OscConfig+0x6cc>)
 800203e:	4013      	ands	r3, r2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002044:	00d2      	lsls	r2, r2, #3
 8002046:	4930      	ldr	r1, [pc, #192]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8002048:	4313      	orrs	r3, r2
 800204a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800204c:	4b2e      	ldr	r3, [pc, #184]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	f023 020c 	bic.w	r2, r3, #12
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	492b      	ldr	r1, [pc, #172]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 800205a:	4313      	orrs	r3, r2
 800205c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800205e:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8002060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002062:	f023 0202 	bic.w	r2, r3, #2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	4927      	ldr	r1, [pc, #156]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 800206c:	4313      	orrs	r3, r2
 800206e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002070:	4b25      	ldr	r3, [pc, #148]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	4a24      	ldr	r2, [pc, #144]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8002076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800207c:	4b22      	ldr	r3, [pc, #136]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 800207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002080:	4a21      	ldr	r2, [pc, #132]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8002082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002086:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002088:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 800208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208c:	4a1e      	ldr	r2, [pc, #120]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 800208e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002092:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002094:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	4a1b      	ldr	r2, [pc, #108]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a18      	ldr	r2, [pc, #96]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 80020a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ac:	f7ff f836 	bl	800111c <HAL_GetTick>
 80020b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b4:	f7ff f832 	bl	800111c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e090      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0x670>
 80020d2:	e088      	b.n	80021e6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0b      	ldr	r2, [pc, #44]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 80020da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e0:	f7ff f81c 	bl	800111c <HAL_GetTick>
 80020e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e8:	f7ff f818 	bl	800111c <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e076      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020fa:	4b03      	ldr	r3, [pc, #12]	; (8002108 <HAL_RCC_OscConfig+0x6c4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x6a4>
 8002106:	e06e      	b.n	80021e6 <HAL_RCC_OscConfig+0x7a2>
 8002108:	58024400 	.word	0x58024400
 800210c:	fffffc0c 	.word	0xfffffc0c
 8002110:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002114:	4b36      	ldr	r3, [pc, #216]	; (80021f0 <HAL_RCC_OscConfig+0x7ac>)
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800211a:	4b35      	ldr	r3, [pc, #212]	; (80021f0 <HAL_RCC_OscConfig+0x7ac>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	2b01      	cmp	r3, #1
 8002126:	d031      	beq.n	800218c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	f003 0203 	and.w	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002132:	429a      	cmp	r2, r3
 8002134:	d12a      	bne.n	800218c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002142:	429a      	cmp	r2, r3
 8002144:	d122      	bne.n	800218c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002152:	429a      	cmp	r2, r3
 8002154:	d11a      	bne.n	800218c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	0a5b      	lsrs	r3, r3, #9
 800215a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002162:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002164:	429a      	cmp	r2, r3
 8002166:	d111      	bne.n	800218c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	0c1b      	lsrs	r3, r3, #16
 800216c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002174:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002176:	429a      	cmp	r2, r3
 8002178:	d108      	bne.n	800218c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	0e1b      	lsrs	r3, r3, #24
 800217e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002186:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e02b      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002190:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <HAL_RCC_OscConfig+0x7ac>)
 8002192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002194:	08db      	lsrs	r3, r3, #3
 8002196:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800219a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d01f      	beq.n	80021e6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80021a6:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_RCC_OscConfig+0x7ac>)
 80021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021aa:	4a11      	ldr	r2, [pc, #68]	; (80021f0 <HAL_RCC_OscConfig+0x7ac>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021b2:	f7fe ffb3 	bl	800111c <HAL_GetTick>
 80021b6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80021b8:	bf00      	nop
 80021ba:	f7fe ffaf 	bl	800111c <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d0f9      	beq.n	80021ba <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_OscConfig+0x7ac>)
 80021c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <HAL_RCC_OscConfig+0x7b0>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021d2:	00d2      	lsls	r2, r2, #3
 80021d4:	4906      	ldr	r1, [pc, #24]	; (80021f0 <HAL_RCC_OscConfig+0x7ac>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_RCC_OscConfig+0x7ac>)
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <HAL_RCC_OscConfig+0x7ac>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3730      	adds	r7, #48	; 0x30
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	58024400 	.word	0x58024400
 80021f4:	ffff0007 	.word	0xffff0007

080021f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e19c      	b.n	8002546 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800220c:	4b8a      	ldr	r3, [pc, #552]	; (8002438 <HAL_RCC_ClockConfig+0x240>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d910      	bls.n	800223c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b87      	ldr	r3, [pc, #540]	; (8002438 <HAL_RCC_ClockConfig+0x240>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 020f 	bic.w	r2, r3, #15
 8002222:	4985      	ldr	r1, [pc, #532]	; (8002438 <HAL_RCC_ClockConfig+0x240>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b83      	ldr	r3, [pc, #524]	; (8002438 <HAL_RCC_ClockConfig+0x240>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e184      	b.n	8002546 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d010      	beq.n	800226a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	4b7b      	ldr	r3, [pc, #492]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002254:	429a      	cmp	r2, r3
 8002256:	d908      	bls.n	800226a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002258:	4b78      	ldr	r3, [pc, #480]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	4975      	ldr	r1, [pc, #468]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 8002266:	4313      	orrs	r3, r2
 8002268:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d010      	beq.n	8002298 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	4b70      	ldr	r3, [pc, #448]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002282:	429a      	cmp	r2, r3
 8002284:	d908      	bls.n	8002298 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002286:	4b6d      	ldr	r3, [pc, #436]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	496a      	ldr	r1, [pc, #424]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 8002294:	4313      	orrs	r3, r2
 8002296:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0310 	and.w	r3, r3, #16
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d010      	beq.n	80022c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699a      	ldr	r2, [r3, #24]
 80022a8:	4b64      	ldr	r3, [pc, #400]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d908      	bls.n	80022c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022b4:	4b61      	ldr	r3, [pc, #388]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	495e      	ldr	r1, [pc, #376]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d010      	beq.n	80022f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69da      	ldr	r2, [r3, #28]
 80022d6:	4b59      	ldr	r3, [pc, #356]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022de:	429a      	cmp	r2, r3
 80022e0:	d908      	bls.n	80022f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80022e2:	4b56      	ldr	r3, [pc, #344]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	4953      	ldr	r1, [pc, #332]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d010      	beq.n	8002322 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	4b4d      	ldr	r3, [pc, #308]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f003 030f 	and.w	r3, r3, #15
 800230c:	429a      	cmp	r2, r3
 800230e:	d908      	bls.n	8002322 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002310:	4b4a      	ldr	r3, [pc, #296]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f023 020f 	bic.w	r2, r3, #15
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4947      	ldr	r1, [pc, #284]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 800231e:	4313      	orrs	r3, r2
 8002320:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d055      	beq.n	80023da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800232e:	4b43      	ldr	r3, [pc, #268]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	4940      	ldr	r1, [pc, #256]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 800233c:	4313      	orrs	r3, r2
 800233e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d107      	bne.n	8002358 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002348:	4b3c      	ldr	r3, [pc, #240]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d121      	bne.n	8002398 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0f6      	b.n	8002546 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b03      	cmp	r3, #3
 800235e:	d107      	bne.n	8002370 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002360:	4b36      	ldr	r3, [pc, #216]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d115      	bne.n	8002398 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0ea      	b.n	8002546 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d107      	bne.n	8002388 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002378:	4b30      	ldr	r3, [pc, #192]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d109      	bne.n	8002398 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0de      	b.n	8002546 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002388:	4b2c      	ldr	r3, [pc, #176]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0d6      	b.n	8002546 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002398:	4b28      	ldr	r3, [pc, #160]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	f023 0207 	bic.w	r2, r3, #7
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	4925      	ldr	r1, [pc, #148]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023aa:	f7fe feb7 	bl	800111c <HAL_GetTick>
 80023ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b0:	e00a      	b.n	80023c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b2:	f7fe feb3 	bl	800111c <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e0be      	b.n	8002546 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c8:	4b1c      	ldr	r3, [pc, #112]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d1eb      	bne.n	80023b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d010      	beq.n	8002408 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	4b14      	ldr	r3, [pc, #80]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d208      	bcs.n	8002408 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f023 020f 	bic.w	r2, r3, #15
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	490e      	ldr	r1, [pc, #56]	; (800243c <HAL_RCC_ClockConfig+0x244>)
 8002404:	4313      	orrs	r3, r2
 8002406:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_RCC_ClockConfig+0x240>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d214      	bcs.n	8002440 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_RCC_ClockConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 020f 	bic.w	r2, r3, #15
 800241e:	4906      	ldr	r1, [pc, #24]	; (8002438 <HAL_RCC_ClockConfig+0x240>)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b04      	ldr	r3, [pc, #16]	; (8002438 <HAL_RCC_ClockConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d005      	beq.n	8002440 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e086      	b.n	8002546 <HAL_RCC_ClockConfig+0x34e>
 8002438:	52002000 	.word	0x52002000
 800243c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d010      	beq.n	800246e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <HAL_RCC_ClockConfig+0x358>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002458:	429a      	cmp	r2, r3
 800245a:	d208      	bcs.n	800246e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800245c:	4b3c      	ldr	r3, [pc, #240]	; (8002550 <HAL_RCC_ClockConfig+0x358>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	4939      	ldr	r1, [pc, #228]	; (8002550 <HAL_RCC_ClockConfig+0x358>)
 800246a:	4313      	orrs	r3, r2
 800246c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d010      	beq.n	800249c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695a      	ldr	r2, [r3, #20]
 800247e:	4b34      	ldr	r3, [pc, #208]	; (8002550 <HAL_RCC_ClockConfig+0x358>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002486:	429a      	cmp	r2, r3
 8002488:	d208      	bcs.n	800249c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800248a:	4b31      	ldr	r3, [pc, #196]	; (8002550 <HAL_RCC_ClockConfig+0x358>)
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	492e      	ldr	r1, [pc, #184]	; (8002550 <HAL_RCC_ClockConfig+0x358>)
 8002498:	4313      	orrs	r3, r2
 800249a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d010      	beq.n	80024ca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	699a      	ldr	r2, [r3, #24]
 80024ac:	4b28      	ldr	r3, [pc, #160]	; (8002550 <HAL_RCC_ClockConfig+0x358>)
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d208      	bcs.n	80024ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024b8:	4b25      	ldr	r3, [pc, #148]	; (8002550 <HAL_RCC_ClockConfig+0x358>)
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	4922      	ldr	r1, [pc, #136]	; (8002550 <HAL_RCC_ClockConfig+0x358>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d010      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69da      	ldr	r2, [r3, #28]
 80024da:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HAL_RCC_ClockConfig+0x358>)
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d208      	bcs.n	80024f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80024e6:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <HAL_RCC_ClockConfig+0x358>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	4917      	ldr	r1, [pc, #92]	; (8002550 <HAL_RCC_ClockConfig+0x358>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024f8:	f000 f834 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4b14      	ldr	r3, [pc, #80]	; (8002550 <HAL_RCC_ClockConfig+0x358>)
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	0a1b      	lsrs	r3, r3, #8
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	4912      	ldr	r1, [pc, #72]	; (8002554 <HAL_RCC_ClockConfig+0x35c>)
 800250a:	5ccb      	ldrb	r3, [r1, r3]
 800250c:	f003 031f 	and.w	r3, r3, #31
 8002510:	fa22 f303 	lsr.w	r3, r2, r3
 8002514:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002516:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <HAL_RCC_ClockConfig+0x358>)
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	4a0d      	ldr	r2, [pc, #52]	; (8002554 <HAL_RCC_ClockConfig+0x35c>)
 8002520:	5cd3      	ldrb	r3, [r2, r3]
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
 800252c:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <HAL_RCC_ClockConfig+0x360>)
 800252e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002530:	4a0a      	ldr	r2, [pc, #40]	; (800255c <HAL_RCC_ClockConfig+0x364>)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002536:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <HAL_RCC_ClockConfig+0x368>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe fda4 	bl	8001088 <HAL_InitTick>
 8002540:	4603      	mov	r3, r0
 8002542:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002544:	7bfb      	ldrb	r3, [r7, #15]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	58024400 	.word	0x58024400
 8002554:	0800afe4 	.word	0x0800afe4
 8002558:	24000010 	.word	0x24000010
 800255c:	2400000c 	.word	0x2400000c
 8002560:	24000030 	.word	0x24000030

08002564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002564:	b480      	push	{r7}
 8002566:	b089      	sub	sp, #36	; 0x24
 8002568:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800256a:	4bb3      	ldr	r3, [pc, #716]	; (8002838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002572:	2b18      	cmp	r3, #24
 8002574:	f200 8155 	bhi.w	8002822 <HAL_RCC_GetSysClockFreq+0x2be>
 8002578:	a201      	add	r2, pc, #4	; (adr r2, 8002580 <HAL_RCC_GetSysClockFreq+0x1c>)
 800257a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257e:	bf00      	nop
 8002580:	080025e5 	.word	0x080025e5
 8002584:	08002823 	.word	0x08002823
 8002588:	08002823 	.word	0x08002823
 800258c:	08002823 	.word	0x08002823
 8002590:	08002823 	.word	0x08002823
 8002594:	08002823 	.word	0x08002823
 8002598:	08002823 	.word	0x08002823
 800259c:	08002823 	.word	0x08002823
 80025a0:	0800260b 	.word	0x0800260b
 80025a4:	08002823 	.word	0x08002823
 80025a8:	08002823 	.word	0x08002823
 80025ac:	08002823 	.word	0x08002823
 80025b0:	08002823 	.word	0x08002823
 80025b4:	08002823 	.word	0x08002823
 80025b8:	08002823 	.word	0x08002823
 80025bc:	08002823 	.word	0x08002823
 80025c0:	08002611 	.word	0x08002611
 80025c4:	08002823 	.word	0x08002823
 80025c8:	08002823 	.word	0x08002823
 80025cc:	08002823 	.word	0x08002823
 80025d0:	08002823 	.word	0x08002823
 80025d4:	08002823 	.word	0x08002823
 80025d8:	08002823 	.word	0x08002823
 80025dc:	08002823 	.word	0x08002823
 80025e0:	08002617 	.word	0x08002617
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025e4:	4b94      	ldr	r3, [pc, #592]	; (8002838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d009      	beq.n	8002604 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80025f0:	4b91      	ldr	r3, [pc, #580]	; (8002838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	08db      	lsrs	r3, r3, #3
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	4a90      	ldr	r2, [pc, #576]	; (800283c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002600:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002602:	e111      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002604:	4b8d      	ldr	r3, [pc, #564]	; (800283c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002606:	61bb      	str	r3, [r7, #24]
      break;
 8002608:	e10e      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800260a:	4b8d      	ldr	r3, [pc, #564]	; (8002840 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800260c:	61bb      	str	r3, [r7, #24]
      break;
 800260e:	e10b      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002610:	4b8c      	ldr	r3, [pc, #560]	; (8002844 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002612:	61bb      	str	r3, [r7, #24]
      break;
 8002614:	e108      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002616:	4b88      	ldr	r3, [pc, #544]	; (8002838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002620:	4b85      	ldr	r3, [pc, #532]	; (8002838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800262a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800262c:	4b82      	ldr	r3, [pc, #520]	; (8002838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002636:	4b80      	ldr	r3, [pc, #512]	; (8002838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263a:	08db      	lsrs	r3, r3, #3
 800263c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	fb02 f303 	mul.w	r3, r2, r3
 8002646:	ee07 3a90 	vmov	s15, r3
 800264a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800264e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80e1 	beq.w	800281c <HAL_RCC_GetSysClockFreq+0x2b8>
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2b02      	cmp	r3, #2
 800265e:	f000 8083 	beq.w	8002768 <HAL_RCC_GetSysClockFreq+0x204>
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b02      	cmp	r3, #2
 8002666:	f200 80a1 	bhi.w	80027ac <HAL_RCC_GetSysClockFreq+0x248>
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x114>
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d056      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002676:	e099      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002678:	4b6f      	ldr	r3, [pc, #444]	; (8002838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b00      	cmp	r3, #0
 8002682:	d02d      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002684:	4b6c      	ldr	r3, [pc, #432]	; (8002838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	08db      	lsrs	r3, r3, #3
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	4a6b      	ldr	r2, [pc, #428]	; (800283c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
 8002694:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	ee07 3a90 	vmov	s15, r3
 800269c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	ee07 3a90 	vmov	s15, r3
 80026a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026ae:	4b62      	ldr	r3, [pc, #392]	; (8002838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b6:	ee07 3a90 	vmov	s15, r3
 80026ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026be:	ed97 6a02 	vldr	s12, [r7, #8]
 80026c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002848 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80026de:	e087      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	ee07 3a90 	vmov	s15, r3
 80026e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 800284c <HAL_RCC_GetSysClockFreq+0x2e8>
 80026ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026f2:	4b51      	ldr	r3, [pc, #324]	; (8002838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026fa:	ee07 3a90 	vmov	s15, r3
 80026fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002702:	ed97 6a02 	vldr	s12, [r7, #8]
 8002706:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002848 <HAL_RCC_GetSysClockFreq+0x2e4>
 800270a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800270e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800271a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002722:	e065      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	ee07 3a90 	vmov	s15, r3
 800272a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800272e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002850 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002736:	4b40      	ldr	r3, [pc, #256]	; (8002838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800273e:	ee07 3a90 	vmov	s15, r3
 8002742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002746:	ed97 6a02 	vldr	s12, [r7, #8]
 800274a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002848 <HAL_RCC_GetSysClockFreq+0x2e4>
 800274e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800275a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800275e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002762:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002766:	e043      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	ee07 3a90 	vmov	s15, r3
 800276e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002772:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002854 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800277a:	4b2f      	ldr	r3, [pc, #188]	; (8002838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002782:	ee07 3a90 	vmov	s15, r3
 8002786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800278a:	ed97 6a02 	vldr	s12, [r7, #8]
 800278e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002848 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800279a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800279e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027aa:	e021      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	ee07 3a90 	vmov	s15, r3
 80027b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002850 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027be:	4b1e      	ldr	r3, [pc, #120]	; (8002838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80027d2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002848 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	0a5b      	lsrs	r3, r3, #9
 80027f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027fa:	3301      	adds	r3, #1
 80027fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	ee07 3a90 	vmov	s15, r3
 8002804:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002808:	edd7 6a07 	vldr	s13, [r7, #28]
 800280c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002814:	ee17 3a90 	vmov	r3, s15
 8002818:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800281a:	e005      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	61bb      	str	r3, [r7, #24]
      break;
 8002820:	e002      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002822:	4b07      	ldr	r3, [pc, #28]	; (8002840 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002824:	61bb      	str	r3, [r7, #24]
      break;
 8002826:	bf00      	nop
  }

  return sysclockfreq;
 8002828:	69bb      	ldr	r3, [r7, #24]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3724      	adds	r7, #36	; 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	58024400 	.word	0x58024400
 800283c:	03d09000 	.word	0x03d09000
 8002840:	003d0900 	.word	0x003d0900
 8002844:	017d7840 	.word	0x017d7840
 8002848:	46000000 	.word	0x46000000
 800284c:	4c742400 	.word	0x4c742400
 8002850:	4a742400 	.word	0x4a742400
 8002854:	4bbebc20 	.word	0x4bbebc20

08002858 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800285c:	b0c6      	sub	sp, #280	; 0x118
 800285e:	af00      	add	r7, sp, #0
 8002860:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002864:	2300      	movs	r3, #0
 8002866:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800286a:	2300      	movs	r3, #0
 800286c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002878:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800287c:	2500      	movs	r5, #0
 800287e:	ea54 0305 	orrs.w	r3, r4, r5
 8002882:	d049      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002888:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800288a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800288e:	d02f      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002890:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002894:	d828      	bhi.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002896:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800289a:	d01a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800289c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028a0:	d822      	bhi.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 80028a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028aa:	d007      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028ac:	e01c      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028ae:	4bab      	ldr	r3, [pc, #684]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	4aaa      	ldr	r2, [pc, #680]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028ba:	e01a      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80028bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80028c0:	3308      	adds	r3, #8
 80028c2:	2102      	movs	r1, #2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f001 f967 	bl	8003b98 <RCCEx_PLL2_Config>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028d0:	e00f      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80028d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80028d6:	3328      	adds	r3, #40	; 0x28
 80028d8:	2102      	movs	r1, #2
 80028da:	4618      	mov	r0, r3
 80028dc:	f001 fa0e 	bl	8003cfc <RCCEx_PLL3_Config>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028e6:	e004      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80028ee:	e000      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80028f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10a      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80028fa:	4b98      	ldr	r3, [pc, #608]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002908:	4a94      	ldr	r2, [pc, #592]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800290a:	430b      	orrs	r3, r1
 800290c:	6513      	str	r3, [r2, #80]	; 0x50
 800290e:	e003      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002910:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002914:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002920:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002924:	f04f 0900 	mov.w	r9, #0
 8002928:	ea58 0309 	orrs.w	r3, r8, r9
 800292c:	d047      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800292e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	2b04      	cmp	r3, #4
 8002936:	d82a      	bhi.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002938:	a201      	add	r2, pc, #4	; (adr r2, 8002940 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800293a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293e:	bf00      	nop
 8002940:	08002955 	.word	0x08002955
 8002944:	08002963 	.word	0x08002963
 8002948:	08002979 	.word	0x08002979
 800294c:	08002997 	.word	0x08002997
 8002950:	08002997 	.word	0x08002997
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002954:	4b81      	ldr	r3, [pc, #516]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	4a80      	ldr	r2, [pc, #512]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800295a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800295e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002960:	e01a      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002966:	3308      	adds	r3, #8
 8002968:	2100      	movs	r1, #0
 800296a:	4618      	mov	r0, r3
 800296c:	f001 f914 	bl	8003b98 <RCCEx_PLL2_Config>
 8002970:	4603      	mov	r3, r0
 8002972:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002976:	e00f      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800297c:	3328      	adds	r3, #40	; 0x28
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f001 f9bb 	bl	8003cfc <RCCEx_PLL3_Config>
 8002986:	4603      	mov	r3, r0
 8002988:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800298c:	e004      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002994:	e000      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002998:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10a      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029a0:	4b6e      	ldr	r3, [pc, #440]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a4:	f023 0107 	bic.w	r1, r3, #7
 80029a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80029ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ae:	4a6b      	ldr	r2, [pc, #428]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029b0:	430b      	orrs	r3, r1
 80029b2:	6513      	str	r3, [r2, #80]	; 0x50
 80029b4:	e003      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80029ba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80029be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80029c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c6:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80029ca:	f04f 0b00 	mov.w	fp, #0
 80029ce:	ea5a 030b 	orrs.w	r3, sl, fp
 80029d2:	d05b      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80029d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80029d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80029dc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80029e0:	d03b      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80029e2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80029e6:	d834      	bhi.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80029e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029ec:	d037      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80029ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029f2:	d82e      	bhi.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80029f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80029f8:	d033      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80029fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80029fe:	d828      	bhi.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002a00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a04:	d01a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002a06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a0a:	d822      	bhi.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002a10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a14:	d007      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002a16:	e01c      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a18:	4b50      	ldr	r3, [pc, #320]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	4a4f      	ldr	r2, [pc, #316]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a24:	e01e      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f001 f8b2 	bl	8003b98 <RCCEx_PLL2_Config>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002a3a:	e013      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a40:	3328      	adds	r3, #40	; 0x28
 8002a42:	2100      	movs	r1, #0
 8002a44:	4618      	mov	r0, r3
 8002a46:	f001 f959 	bl	8003cfc <RCCEx_PLL3_Config>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a50:	e008      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002a58:	e004      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002a5a:	bf00      	nop
 8002a5c:	e002      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002a5e:	bf00      	nop
 8002a60:	e000      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002a62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10b      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002a6c:	4b3b      	ldr	r3, [pc, #236]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a70:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a7c:	4a37      	ldr	r2, [pc, #220]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	6593      	str	r3, [r2, #88]	; 0x58
 8002a82:	e003      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a94:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002a98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002aa2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	d05d      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ab0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ab4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002ab8:	d03b      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002aba:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002abe:	d834      	bhi.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002ac0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ac4:	d037      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002ac6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aca:	d82e      	bhi.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002acc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ad0:	d033      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8002ad2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ad6:	d828      	bhi.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002ad8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002adc:	d01a      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002ade:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ae2:	d822      	bhi.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aec:	d007      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002aee:	e01c      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002af0:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	4a19      	ldr	r2, [pc, #100]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002afa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002afc:	e01e      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b02:	3308      	adds	r3, #8
 8002b04:	2100      	movs	r1, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f001 f846 	bl	8003b98 <RCCEx_PLL2_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002b12:	e013      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b18:	3328      	adds	r3, #40	; 0x28
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f001 f8ed 	bl	8003cfc <RCCEx_PLL3_Config>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b28:	e008      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002b30:	e004      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002b32:	bf00      	nop
 8002b34:	e002      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002b36:	bf00      	nop
 8002b38:	e000      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10d      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b48:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b54:	4a01      	ldr	r2, [pc, #4]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b56:	430b      	orrs	r3, r1
 8002b58:	6593      	str	r3, [r2, #88]	; 0x58
 8002b5a:	e005      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002b5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002b64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b70:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002b74:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002b7e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4313      	orrs	r3, r2
 8002b86:	d03a      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8e:	2b30      	cmp	r3, #48	; 0x30
 8002b90:	d01f      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8002b92:	2b30      	cmp	r3, #48	; 0x30
 8002b94:	d819      	bhi.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002b96:	2b20      	cmp	r3, #32
 8002b98:	d00c      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d815      	bhi.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d019      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002ba2:	2b10      	cmp	r3, #16
 8002ba4:	d111      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ba6:	4baa      	ldr	r3, [pc, #680]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	4aa9      	ldr	r2, [pc, #676]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002bb2:	e011      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002bb8:	3308      	adds	r3, #8
 8002bba:	2102      	movs	r1, #2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 ffeb 	bl	8003b98 <RCCEx_PLL2_Config>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002bc8:	e006      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002bd0:	e002      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002bd2:	bf00      	nop
 8002bd4:	e000      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002be0:	4b9b      	ldr	r3, [pc, #620]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bee:	4a98      	ldr	r2, [pc, #608]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bf4:	e003      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002bfa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c06:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002c0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002c14:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	d051      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c28:	d035      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8002c2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c2e:	d82e      	bhi.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002c30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c34:	d031      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8002c36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c3a:	d828      	bhi.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c40:	d01a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c46:	d822      	bhi.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c50:	d007      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8002c52:	e01c      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c54:	4b7e      	ldr	r3, [pc, #504]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	4a7d      	ldr	r2, [pc, #500]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c60:	e01c      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c66:	3308      	adds	r3, #8
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 ff94 	bl	8003b98 <RCCEx_PLL2_Config>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c76:	e011      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c7c:	3328      	adds	r3, #40	; 0x28
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4618      	mov	r0, r3
 8002c82:	f001 f83b 	bl	8003cfc <RCCEx_PLL3_Config>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c8c:	e006      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002c94:	e002      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002c96:	bf00      	nop
 8002c98:	e000      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10a      	bne.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ca4:	4b6a      	ldr	r3, [pc, #424]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb2:	4a67      	ldr	r2, [pc, #412]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	6513      	str	r3, [r2, #80]	; 0x50
 8002cb8:	e003      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002cbe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cca:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002cce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cd8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	d053      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cec:	d033      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8002cee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cf2:	d82c      	bhi.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002cf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cf8:	d02f      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8002cfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cfe:	d826      	bhi.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002d00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d04:	d02b      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002d06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d0a:	d820      	bhi.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002d0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d10:	d012      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8002d12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d16:	d81a      	bhi.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d022      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d20:	d115      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d26:	3308      	adds	r3, #8
 8002d28:	2101      	movs	r1, #1
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 ff34 	bl	8003b98 <RCCEx_PLL2_Config>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002d36:	e015      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d3c:	3328      	adds	r3, #40	; 0x28
 8002d3e:	2101      	movs	r1, #1
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 ffdb 	bl	8003cfc <RCCEx_PLL3_Config>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002d4c:	e00a      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002d54:	e006      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002d56:	bf00      	nop
 8002d58:	e004      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002d5a:	bf00      	nop
 8002d5c:	e002      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002d5e:	bf00      	nop
 8002d60:	e000      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002d6c:	4b38      	ldr	r3, [pc, #224]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d70:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7a:	4a35      	ldr	r2, [pc, #212]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	6513      	str	r3, [r2, #80]	; 0x50
 8002d80:	e003      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002d86:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d92:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002d96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002da0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002da4:	460b      	mov	r3, r1
 8002da6:	4313      	orrs	r3, r2
 8002da8:	d058      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002dae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002db6:	d033      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002db8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dbc:	d82c      	bhi.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc2:	d02f      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc8:	d826      	bhi.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002dca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002dce:	d02b      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002dd0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002dd4:	d820      	bhi.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dda:	d012      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8002ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002de0:	d81a      	bhi.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d022      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002de6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dea:	d115      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002df0:	3308      	adds	r3, #8
 8002df2:	2101      	movs	r1, #1
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fecf 	bl	8003b98 <RCCEx_PLL2_Config>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e00:	e015      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e06:	3328      	adds	r3, #40	; 0x28
 8002e08:	2101      	movs	r1, #1
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 ff76 	bl	8003cfc <RCCEx_PLL3_Config>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e16:	e00a      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002e1e:	e006      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002e20:	bf00      	nop
 8002e22:	e004      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002e24:	bf00      	nop
 8002e26:	e002      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002e28:	bf00      	nop
 8002e2a:	e000      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10e      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e46:	4a02      	ldr	r2, [pc, #8]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e4c:	e006      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002e4e:	bf00      	nop
 8002e50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e64:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002e72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	d037      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e86:	d00e      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e8c:	d816      	bhi.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d018      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002e92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e96:	d111      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e98:	4bc4      	ldr	r3, [pc, #784]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	4ac3      	ldr	r2, [pc, #780]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002ea4:	e00f      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002eaa:	3308      	adds	r3, #8
 8002eac:	2101      	movs	r1, #1
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fe72 	bl	8003b98 <RCCEx_PLL2_Config>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002eba:	e004      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002ec2:	e000      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ec6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10a      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ece:	4bb7      	ldr	r3, [pc, #732]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002edc:	4ab3      	ldr	r2, [pc, #716]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	6513      	str	r3, [r2, #80]	; 0x50
 8002ee2:	e003      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002ee8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002ef8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002efc:	2300      	movs	r3, #0
 8002efe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f02:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002f06:	460b      	mov	r3, r1
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	d039      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d81c      	bhi.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002f16:	a201      	add	r2, pc, #4	; (adr r2, 8002f1c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1c:	08002f59 	.word	0x08002f59
 8002f20:	08002f2d 	.word	0x08002f2d
 8002f24:	08002f3b 	.word	0x08002f3b
 8002f28:	08002f59 	.word	0x08002f59
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f2c:	4b9f      	ldr	r3, [pc, #636]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	4a9e      	ldr	r2, [pc, #632]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002f38:	e00f      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f3e:	3308      	adds	r3, #8
 8002f40:	2102      	movs	r1, #2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fe28 	bl	8003b98 <RCCEx_PLL2_Config>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002f4e:	e004      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002f56:	e000      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10a      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f62:	4b92      	ldr	r3, [pc, #584]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f66:	f023 0103 	bic.w	r1, r3, #3
 8002f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f70:	4a8e      	ldr	r2, [pc, #568]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f72:	430b      	orrs	r3, r1
 8002f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f76:	e003      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f88:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002f8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f90:	2300      	movs	r3, #0
 8002f92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f96:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f000 8099 	beq.w	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fa2:	4b83      	ldr	r3, [pc, #524]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a82      	ldr	r2, [pc, #520]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fae:	f7fe f8b5 	bl	800111c <HAL_GetTick>
 8002fb2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fb6:	e00b      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb8:	f7fe f8b0 	bl	800111c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b64      	cmp	r3, #100	; 0x64
 8002fc6:	d903      	bls.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002fce:	e005      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fd0:	4b77      	ldr	r3, [pc, #476]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0ed      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002fdc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d173      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002fe4:	4b71      	ldr	r3, [pc, #452]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fe6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ff0:	4053      	eors	r3, r2
 8002ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d015      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ffa:	4b6c      	ldr	r3, [pc, #432]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003002:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003006:	4b69      	ldr	r3, [pc, #420]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	4a68      	ldr	r2, [pc, #416]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800300c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003010:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003012:	4b66      	ldr	r3, [pc, #408]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003016:	4a65      	ldr	r2, [pc, #404]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800301e:	4a63      	ldr	r2, [pc, #396]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003020:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003024:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800302a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800302e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003032:	d118      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7fe f872 	bl	800111c <HAL_GetTick>
 8003038:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800303c:	e00d      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303e:	f7fe f86d 	bl	800111c <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003048:	1ad2      	subs	r2, r2, r3
 800304a:	f241 3388 	movw	r3, #5000	; 0x1388
 800304e:	429a      	cmp	r2, r3
 8003050:	d903      	bls.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8003058:	e005      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800305a:	4b54      	ldr	r3, [pc, #336]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0eb      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003066:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800306a:	2b00      	cmp	r3, #0
 800306c:	d129      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800306e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003072:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800307a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800307e:	d10e      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003080:	4b4a      	ldr	r3, [pc, #296]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800308c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003090:	091a      	lsrs	r2, r3, #4
 8003092:	4b48      	ldr	r3, [pc, #288]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003094:	4013      	ands	r3, r2
 8003096:	4a45      	ldr	r2, [pc, #276]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003098:	430b      	orrs	r3, r1
 800309a:	6113      	str	r3, [r2, #16]
 800309c:	e005      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x852>
 800309e:	4b43      	ldr	r3, [pc, #268]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	4a42      	ldr	r2, [pc, #264]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80030a8:	6113      	str	r3, [r2, #16]
 80030aa:	4b40      	ldr	r3, [pc, #256]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030ac:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80030ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ba:	4a3c      	ldr	r2, [pc, #240]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030bc:	430b      	orrs	r3, r1
 80030be:	6713      	str	r3, [r2, #112]	; 0x70
 80030c0:	e008      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80030ca:	e003      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80030d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	f002 0301 	and.w	r3, r2, #1
 80030e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030e4:	2300      	movs	r3, #0
 80030e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80030ea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80030ee:	460b      	mov	r3, r1
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f000 808f 	beq.w	8003214 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80030f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030fc:	2b28      	cmp	r3, #40	; 0x28
 80030fe:	d871      	bhi.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003100:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003106:	bf00      	nop
 8003108:	080031ed 	.word	0x080031ed
 800310c:	080031e5 	.word	0x080031e5
 8003110:	080031e5 	.word	0x080031e5
 8003114:	080031e5 	.word	0x080031e5
 8003118:	080031e5 	.word	0x080031e5
 800311c:	080031e5 	.word	0x080031e5
 8003120:	080031e5 	.word	0x080031e5
 8003124:	080031e5 	.word	0x080031e5
 8003128:	080031b9 	.word	0x080031b9
 800312c:	080031e5 	.word	0x080031e5
 8003130:	080031e5 	.word	0x080031e5
 8003134:	080031e5 	.word	0x080031e5
 8003138:	080031e5 	.word	0x080031e5
 800313c:	080031e5 	.word	0x080031e5
 8003140:	080031e5 	.word	0x080031e5
 8003144:	080031e5 	.word	0x080031e5
 8003148:	080031cf 	.word	0x080031cf
 800314c:	080031e5 	.word	0x080031e5
 8003150:	080031e5 	.word	0x080031e5
 8003154:	080031e5 	.word	0x080031e5
 8003158:	080031e5 	.word	0x080031e5
 800315c:	080031e5 	.word	0x080031e5
 8003160:	080031e5 	.word	0x080031e5
 8003164:	080031e5 	.word	0x080031e5
 8003168:	080031ed 	.word	0x080031ed
 800316c:	080031e5 	.word	0x080031e5
 8003170:	080031e5 	.word	0x080031e5
 8003174:	080031e5 	.word	0x080031e5
 8003178:	080031e5 	.word	0x080031e5
 800317c:	080031e5 	.word	0x080031e5
 8003180:	080031e5 	.word	0x080031e5
 8003184:	080031e5 	.word	0x080031e5
 8003188:	080031ed 	.word	0x080031ed
 800318c:	080031e5 	.word	0x080031e5
 8003190:	080031e5 	.word	0x080031e5
 8003194:	080031e5 	.word	0x080031e5
 8003198:	080031e5 	.word	0x080031e5
 800319c:	080031e5 	.word	0x080031e5
 80031a0:	080031e5 	.word	0x080031e5
 80031a4:	080031e5 	.word	0x080031e5
 80031a8:	080031ed 	.word	0x080031ed
 80031ac:	58024400 	.word	0x58024400
 80031b0:	58024800 	.word	0x58024800
 80031b4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031bc:	3308      	adds	r3, #8
 80031be:	2101      	movs	r1, #1
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fce9 	bl	8003b98 <RCCEx_PLL2_Config>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80031cc:	e00f      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031d2:	3328      	adds	r3, #40	; 0x28
 80031d4:	2101      	movs	r1, #1
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fd90 	bl	8003cfc <RCCEx_PLL3_Config>
 80031dc:	4603      	mov	r3, r0
 80031de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80031e2:	e004      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80031ea:	e000      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80031ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10a      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80031f6:	4bbf      	ldr	r3, [pc, #764]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80031f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80031fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003202:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003204:	4abb      	ldr	r2, [pc, #748]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003206:	430b      	orrs	r3, r1
 8003208:	6553      	str	r3, [r2, #84]	; 0x54
 800320a:	e003      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003210:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321c:	f002 0302 	and.w	r3, r2, #2
 8003220:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003224:	2300      	movs	r3, #0
 8003226:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800322a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800322e:	460b      	mov	r3, r1
 8003230:	4313      	orrs	r3, r2
 8003232:	d041      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323a:	2b05      	cmp	r3, #5
 800323c:	d824      	bhi.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800323e:	a201      	add	r2, pc, #4	; (adr r2, 8003244 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003244:	08003291 	.word	0x08003291
 8003248:	0800325d 	.word	0x0800325d
 800324c:	08003273 	.word	0x08003273
 8003250:	08003291 	.word	0x08003291
 8003254:	08003291 	.word	0x08003291
 8003258:	08003291 	.word	0x08003291
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800325c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003260:	3308      	adds	r3, #8
 8003262:	2101      	movs	r1, #1
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fc97 	bl	8003b98 <RCCEx_PLL2_Config>
 800326a:	4603      	mov	r3, r0
 800326c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003270:	e00f      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003276:	3328      	adds	r3, #40	; 0x28
 8003278:	2101      	movs	r1, #1
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fd3e 	bl	8003cfc <RCCEx_PLL3_Config>
 8003280:	4603      	mov	r3, r0
 8003282:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003286:	e004      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800328e:	e000      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003292:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10a      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800329a:	4b96      	ldr	r3, [pc, #600]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	f023 0107 	bic.w	r1, r3, #7
 80032a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a8:	4a92      	ldr	r2, [pc, #584]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80032aa:	430b      	orrs	r3, r1
 80032ac:	6553      	str	r3, [r2, #84]	; 0x54
 80032ae:	e003      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80032b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c0:	f002 0304 	and.w	r3, r2, #4
 80032c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80032c8:	2300      	movs	r3, #0
 80032ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032ce:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80032d2:	460b      	mov	r3, r1
 80032d4:	4313      	orrs	r3, r2
 80032d6:	d044      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80032d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e0:	2b05      	cmp	r3, #5
 80032e2:	d825      	bhi.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80032e4:	a201      	add	r2, pc, #4	; (adr r2, 80032ec <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80032e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ea:	bf00      	nop
 80032ec:	08003339 	.word	0x08003339
 80032f0:	08003305 	.word	0x08003305
 80032f4:	0800331b 	.word	0x0800331b
 80032f8:	08003339 	.word	0x08003339
 80032fc:	08003339 	.word	0x08003339
 8003300:	08003339 	.word	0x08003339
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003308:	3308      	adds	r3, #8
 800330a:	2101      	movs	r1, #1
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fc43 	bl	8003b98 <RCCEx_PLL2_Config>
 8003312:	4603      	mov	r3, r0
 8003314:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003318:	e00f      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800331a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800331e:	3328      	adds	r3, #40	; 0x28
 8003320:	2101      	movs	r1, #1
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fcea 	bl	8003cfc <RCCEx_PLL3_Config>
 8003328:	4603      	mov	r3, r0
 800332a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800332e:	e004      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003336:	e000      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800333a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10b      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003342:	4b6c      	ldr	r3, [pc, #432]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003346:	f023 0107 	bic.w	r1, r3, #7
 800334a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003352:	4a68      	ldr	r2, [pc, #416]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003354:	430b      	orrs	r3, r1
 8003356:	6593      	str	r3, [r2, #88]	; 0x58
 8003358:	e003      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800335e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	f002 0320 	and.w	r3, r2, #32
 800336e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003372:	2300      	movs	r3, #0
 8003374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003378:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800337c:	460b      	mov	r3, r1
 800337e:	4313      	orrs	r3, r2
 8003380:	d055      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800338a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800338e:	d033      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003390:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003394:	d82c      	bhi.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339a:	d02f      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800339c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a0:	d826      	bhi.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80033a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033a6:	d02b      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80033a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033ac:	d820      	bhi.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80033ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033b2:	d012      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80033b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033b8:	d81a      	bhi.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d022      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80033be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033c2:	d115      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033c8:	3308      	adds	r3, #8
 80033ca:	2100      	movs	r1, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fbe3 	bl	8003b98 <RCCEx_PLL2_Config>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80033d8:	e015      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033de:	3328      	adds	r3, #40	; 0x28
 80033e0:	2102      	movs	r1, #2
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fc8a 	bl	8003cfc <RCCEx_PLL3_Config>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80033ee:	e00a      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80033f6:	e006      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80033f8:	bf00      	nop
 80033fa:	e004      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80033fc:	bf00      	nop
 80033fe:	e002      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003400:	bf00      	nop
 8003402:	e000      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003406:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10b      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800340e:	4b39      	ldr	r3, [pc, #228]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003412:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800341a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800341e:	4a35      	ldr	r2, [pc, #212]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003420:	430b      	orrs	r3, r1
 8003422:	6553      	str	r3, [r2, #84]	; 0x54
 8003424:	e003      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003426:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800342a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800342e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003436:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800343a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800343e:	2300      	movs	r3, #0
 8003440:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003444:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003448:	460b      	mov	r3, r1
 800344a:	4313      	orrs	r3, r2
 800344c:	d058      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800344e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003452:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003456:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800345a:	d033      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800345c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003460:	d82c      	bhi.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003466:	d02f      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346c:	d826      	bhi.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800346e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003472:	d02b      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003474:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003478:	d820      	bhi.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800347a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800347e:	d012      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003484:	d81a      	bhi.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003486:	2b00      	cmp	r3, #0
 8003488:	d022      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348e:	d115      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003494:	3308      	adds	r3, #8
 8003496:	2100      	movs	r1, #0
 8003498:	4618      	mov	r0, r3
 800349a:	f000 fb7d 	bl	8003b98 <RCCEx_PLL2_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80034a4:	e015      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034aa:	3328      	adds	r3, #40	; 0x28
 80034ac:	2102      	movs	r1, #2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fc24 	bl	8003cfc <RCCEx_PLL3_Config>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80034ba:	e00a      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80034c2:	e006      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80034c4:	bf00      	nop
 80034c6:	e004      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80034c8:	bf00      	nop
 80034ca:	e002      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80034cc:	bf00      	nop
 80034ce:	e000      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80034d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10e      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034da:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80034dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034de:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80034e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ea:	4a02      	ldr	r2, [pc, #8]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80034ec:	430b      	orrs	r3, r1
 80034ee:	6593      	str	r3, [r2, #88]	; 0x58
 80034f0:	e006      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80034f2:	bf00      	nop
 80034f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003508:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800350c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003510:	2300      	movs	r3, #0
 8003512:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003516:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800351a:	460b      	mov	r3, r1
 800351c:	4313      	orrs	r3, r2
 800351e:	d055      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003524:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003528:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800352c:	d033      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800352e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003532:	d82c      	bhi.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003538:	d02f      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800353a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800353e:	d826      	bhi.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003540:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003544:	d02b      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003546:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800354a:	d820      	bhi.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800354c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003550:	d012      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003552:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003556:	d81a      	bhi.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003558:	2b00      	cmp	r3, #0
 800355a:	d022      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800355c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003560:	d115      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003566:	3308      	adds	r3, #8
 8003568:	2100      	movs	r1, #0
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fb14 	bl	8003b98 <RCCEx_PLL2_Config>
 8003570:	4603      	mov	r3, r0
 8003572:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003576:	e015      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800357c:	3328      	adds	r3, #40	; 0x28
 800357e:	2102      	movs	r1, #2
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fbbb 	bl	8003cfc <RCCEx_PLL3_Config>
 8003586:	4603      	mov	r3, r0
 8003588:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800358c:	e00a      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003594:	e006      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003596:	bf00      	nop
 8003598:	e004      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800359a:	bf00      	nop
 800359c:	e002      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800359e:	bf00      	nop
 80035a0:	e000      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80035a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10b      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80035ac:	4ba0      	ldr	r3, [pc, #640]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80035ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80035b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035bc:	4a9c      	ldr	r2, [pc, #624]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80035be:	430b      	orrs	r3, r1
 80035c0:	6593      	str	r3, [r2, #88]	; 0x58
 80035c2:	e003      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80035c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80035cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d4:	f002 0308 	and.w	r3, r2, #8
 80035d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035dc:	2300      	movs	r3, #0
 80035de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80035e2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80035e6:	460b      	mov	r3, r1
 80035e8:	4313      	orrs	r3, r2
 80035ea:	d01e      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80035ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f8:	d10c      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80035fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035fe:	3328      	adds	r3, #40	; 0x28
 8003600:	2102      	movs	r1, #2
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fb7a 	bl	8003cfc <RCCEx_PLL3_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003614:	4b86      	ldr	r3, [pc, #536]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003618:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800361c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003624:	4a82      	ldr	r2, [pc, #520]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003626:	430b      	orrs	r3, r1
 8003628:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800362a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800362e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003632:	f002 0310 	and.w	r3, r2, #16
 8003636:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800363a:	2300      	movs	r3, #0
 800363c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003640:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003644:	460b      	mov	r3, r1
 8003646:	4313      	orrs	r3, r2
 8003648:	d01e      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800364a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800364e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003656:	d10c      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800365c:	3328      	adds	r3, #40	; 0x28
 800365e:	2102      	movs	r1, #2
 8003660:	4618      	mov	r0, r3
 8003662:	f000 fb4b 	bl	8003cfc <RCCEx_PLL3_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003672:	4b6f      	ldr	r3, [pc, #444]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003676:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800367a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800367e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003682:	4a6b      	ldr	r2, [pc, #428]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003684:	430b      	orrs	r3, r1
 8003686:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003690:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003694:	67bb      	str	r3, [r7, #120]	; 0x78
 8003696:	2300      	movs	r3, #0
 8003698:	67fb      	str	r3, [r7, #124]	; 0x7c
 800369a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800369e:	460b      	mov	r3, r1
 80036a0:	4313      	orrs	r3, r2
 80036a2:	d03e      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80036a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80036ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036b0:	d022      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80036b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036b6:	d81b      	bhi.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80036bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c0:	d00b      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80036c2:	e015      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036c8:	3308      	adds	r3, #8
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fa63 	bl	8003b98 <RCCEx_PLL2_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80036d8:	e00f      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036de:	3328      	adds	r3, #40	; 0x28
 80036e0:	2102      	movs	r1, #2
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fb0a 	bl	8003cfc <RCCEx_PLL3_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80036ee:	e004      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80036f6:	e000      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80036f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10b      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003702:	4b4b      	ldr	r3, [pc, #300]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800370a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800370e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003712:	4a47      	ldr	r2, [pc, #284]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003714:	430b      	orrs	r3, r1
 8003716:	6593      	str	r3, [r2, #88]	; 0x58
 8003718:	e003      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800371a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800371e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800372e:	673b      	str	r3, [r7, #112]	; 0x70
 8003730:	2300      	movs	r3, #0
 8003732:	677b      	str	r3, [r7, #116]	; 0x74
 8003734:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003738:	460b      	mov	r3, r1
 800373a:	4313      	orrs	r3, r2
 800373c:	d03b      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800373e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003746:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800374a:	d01f      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800374c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003750:	d818      	bhi.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003756:	d003      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003758:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800375c:	d007      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800375e:	e011      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003760:	4b33      	ldr	r3, [pc, #204]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	4a32      	ldr	r2, [pc, #200]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800376a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800376c:	e00f      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800376e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003772:	3328      	adds	r3, #40	; 0x28
 8003774:	2101      	movs	r1, #1
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fac0 	bl	8003cfc <RCCEx_PLL3_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003782:	e004      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800378a:	e000      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800378c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800378e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10b      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003796:	4b26      	ldr	r3, [pc, #152]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800379e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a6:	4a22      	ldr	r2, [pc, #136]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80037a8:	430b      	orrs	r3, r1
 80037aa:	6553      	str	r3, [r2, #84]	; 0x54
 80037ac:	e003      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80037b2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80037b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037be:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80037c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80037c4:	2300      	movs	r3, #0
 80037c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037c8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80037cc:	460b      	mov	r3, r1
 80037ce:	4313      	orrs	r3, r2
 80037d0:	d034      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80037d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80037dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e0:	d007      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80037e2:	e011      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e4:	4b12      	ldr	r3, [pc, #72]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	4a11      	ldr	r2, [pc, #68]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80037ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80037f0:	e00e      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037f6:	3308      	adds	r3, #8
 80037f8:	2102      	movs	r1, #2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f9cc 	bl	8003b98 <RCCEx_PLL2_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003806:	e003      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800380e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003810:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10d      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800381a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003826:	4a02      	ldr	r2, [pc, #8]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003828:	430b      	orrs	r3, r1
 800382a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800382c:	e006      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800382e:	bf00      	nop
 8003830:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003834:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003838:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800383c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003848:	663b      	str	r3, [r7, #96]	; 0x60
 800384a:	2300      	movs	r3, #0
 800384c:	667b      	str	r3, [r7, #100]	; 0x64
 800384e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003852:	460b      	mov	r3, r1
 8003854:	4313      	orrs	r3, r2
 8003856:	d00c      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800385c:	3328      	adds	r3, #40	; 0x28
 800385e:	2102      	movs	r1, #2
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fa4b 	bl	8003cfc <RCCEx_PLL3_Config>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800387e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003880:	2300      	movs	r3, #0
 8003882:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003884:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003888:	460b      	mov	r3, r1
 800388a:	4313      	orrs	r3, r2
 800388c:	d036      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800388e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003894:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003898:	d018      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800389a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800389e:	d811      	bhi.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80038a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a4:	d014      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80038a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038aa:	d80b      	bhi.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d011      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80038b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b4:	d106      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038b6:	4bb7      	ldr	r3, [pc, #732]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	4ab6      	ldr	r2, [pc, #728]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80038bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80038c2:	e008      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80038ca:	e004      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80038cc:	bf00      	nop
 80038ce:	e002      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80038d0:	bf00      	nop
 80038d2:	e000      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80038d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10a      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038de:	4bad      	ldr	r3, [pc, #692]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80038e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ec:	4aa9      	ldr	r2, [pc, #676]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80038ee:	430b      	orrs	r3, r1
 80038f0:	6553      	str	r3, [r2, #84]	; 0x54
 80038f2:	e003      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80038f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003904:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003908:	653b      	str	r3, [r7, #80]	; 0x50
 800390a:	2300      	movs	r3, #0
 800390c:	657b      	str	r3, [r7, #84]	; 0x54
 800390e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003912:	460b      	mov	r3, r1
 8003914:	4313      	orrs	r3, r2
 8003916:	d009      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003918:	4b9e      	ldr	r3, [pc, #632]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800391a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	4a9b      	ldr	r2, [pc, #620]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003928:	430b      	orrs	r3, r1
 800392a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800392c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003934:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003938:	64bb      	str	r3, [r7, #72]	; 0x48
 800393a:	2300      	movs	r3, #0
 800393c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800393e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003942:	460b      	mov	r3, r1
 8003944:	4313      	orrs	r3, r2
 8003946:	d009      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003948:	4b92      	ldr	r3, [pc, #584]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800394a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800394c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003956:	4a8f      	ldr	r2, [pc, #572]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003958:	430b      	orrs	r3, r1
 800395a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800395c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003964:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003968:	643b      	str	r3, [r7, #64]	; 0x40
 800396a:	2300      	movs	r3, #0
 800396c:	647b      	str	r3, [r7, #68]	; 0x44
 800396e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003972:	460b      	mov	r3, r1
 8003974:	4313      	orrs	r3, r2
 8003976:	d00e      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003978:	4b86      	ldr	r3, [pc, #536]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	4a85      	ldr	r2, [pc, #532]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800397e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003982:	6113      	str	r3, [r2, #16]
 8003984:	4b83      	ldr	r3, [pc, #524]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003986:	6919      	ldr	r1, [r3, #16]
 8003988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800398c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003990:	4a80      	ldr	r2, [pc, #512]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003992:	430b      	orrs	r3, r1
 8003994:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800399a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80039a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80039a4:	2300      	movs	r3, #0
 80039a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039a8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80039ac:	460b      	mov	r3, r1
 80039ae:	4313      	orrs	r3, r2
 80039b0:	d009      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80039b2:	4b78      	ldr	r3, [pc, #480]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80039b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80039ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c0:	4a74      	ldr	r2, [pc, #464]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80039c2:	430b      	orrs	r3, r1
 80039c4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80039d2:	633b      	str	r3, [r7, #48]	; 0x30
 80039d4:	2300      	movs	r3, #0
 80039d6:	637b      	str	r3, [r7, #52]	; 0x34
 80039d8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80039dc:	460b      	mov	r3, r1
 80039de:	4313      	orrs	r3, r2
 80039e0:	d00a      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039e2:	4b6c      	ldr	r3, [pc, #432]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80039e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80039ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f2:	4a68      	ldr	r2, [pc, #416]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80039f4:	430b      	orrs	r3, r1
 80039f6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80039f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	2100      	movs	r1, #0
 8003a02:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a0a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4313      	orrs	r3, r2
 8003a12:	d011      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a18:	3308      	adds	r3, #8
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 f8bb 	bl	8003b98 <RCCEx_PLL2_Config>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003a28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a34:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	2100      	movs	r1, #0
 8003a42:	6239      	str	r1, [r7, #32]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4313      	orrs	r3, r2
 8003a52:	d011      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a58:	3308      	adds	r3, #8
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 f89b 	bl	8003b98 <RCCEx_PLL2_Config>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003a68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	2100      	movs	r1, #0
 8003a82:	61b9      	str	r1, [r7, #24]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	61fb      	str	r3, [r7, #28]
 8003a8a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4313      	orrs	r3, r2
 8003a92:	d011      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a98:	3308      	adds	r3, #8
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 f87b 	bl	8003b98 <RCCEx_PLL2_Config>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003aa8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ab4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	6139      	str	r1, [r7, #16]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	d011      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ad8:	3328      	adds	r3, #40	; 0x28
 8003ada:	2100      	movs	r1, #0
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 f90d 	bl	8003cfc <RCCEx_PLL3_Config>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8003ae8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003af4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b00:	2100      	movs	r1, #0
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4313      	orrs	r3, r2
 8003b12:	d011      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b18:	3328      	adds	r3, #40	; 0x28
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 f8ed 	bl	8003cfc <RCCEx_PLL3_Config>
 8003b22:	4603      	mov	r3, r0
 8003b24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003b28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b34:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	2100      	movs	r1, #0
 8003b42:	6039      	str	r1, [r7, #0]
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4313      	orrs	r3, r2
 8003b52:	d011      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b58:	3328      	adds	r3, #40	; 0x28
 8003b5a:	2102      	movs	r1, #2
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 f8cd 	bl	8003cfc <RCCEx_PLL3_Config>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003b68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8003b78:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	e000      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b92:	bf00      	nop
 8003b94:	58024400 	.word	0x58024400

08003b98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ba6:	4b53      	ldr	r3, [pc, #332]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d101      	bne.n	8003bb6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e099      	b.n	8003cea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003bb6:	4b4f      	ldr	r3, [pc, #316]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a4e      	ldr	r2, [pc, #312]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003bbc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc2:	f7fd faab 	bl	800111c <HAL_GetTick>
 8003bc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003bc8:	e008      	b.n	8003bdc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003bca:	f7fd faa7 	bl	800111c <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e086      	b.n	8003cea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003bdc:	4b45      	ldr	r3, [pc, #276]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1f0      	bne.n	8003bca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003be8:	4b42      	ldr	r3, [pc, #264]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	031b      	lsls	r3, r3, #12
 8003bf6:	493f      	ldr	r1, [pc, #252]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	628b      	str	r3, [r1, #40]	; 0x28
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	025b      	lsls	r3, r3, #9
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	041b      	lsls	r3, r3, #16
 8003c1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	3b01      	subs	r3, #1
 8003c26:	061b      	lsls	r3, r3, #24
 8003c28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c2c:	4931      	ldr	r1, [pc, #196]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003c32:	4b30      	ldr	r3, [pc, #192]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	492d      	ldr	r1, [pc, #180]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003c44:	4b2b      	ldr	r3, [pc, #172]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	f023 0220 	bic.w	r2, r3, #32
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	4928      	ldr	r1, [pc, #160]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003c56:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	4a26      	ldr	r2, [pc, #152]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003c5c:	f023 0310 	bic.w	r3, r3, #16
 8003c60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003c62:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003c64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c66:	4b24      	ldr	r3, [pc, #144]	; (8003cf8 <RCCEx_PLL2_Config+0x160>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	69d2      	ldr	r2, [r2, #28]
 8003c6e:	00d2      	lsls	r2, r2, #3
 8003c70:	4920      	ldr	r1, [pc, #128]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003c76:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	4a1e      	ldr	r2, [pc, #120]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003c7c:	f043 0310 	orr.w	r3, r3, #16
 8003c80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d106      	bne.n	8003c96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003c88:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	4a19      	ldr	r2, [pc, #100]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003c8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c94:	e00f      	b.n	8003cb6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d106      	bne.n	8003caa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003c9c:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	4a14      	ldr	r2, [pc, #80]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003ca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ca6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ca8:	e005      	b.n	8003cb6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003caa:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	4a11      	ldr	r2, [pc, #68]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003cb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003cb6:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a0e      	ldr	r2, [pc, #56]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003cbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc2:	f7fd fa2b 	bl	800111c <HAL_GetTick>
 8003cc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003cc8:	e008      	b.n	8003cdc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003cca:	f7fd fa27 	bl	800111c <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e006      	b.n	8003cea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <RCCEx_PLL2_Config+0x15c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0f0      	beq.n	8003cca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	58024400 	.word	0x58024400
 8003cf8:	ffff0007 	.word	0xffff0007

08003cfc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d0a:	4b53      	ldr	r3, [pc, #332]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d101      	bne.n	8003d1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e099      	b.n	8003e4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003d1a:	4b4f      	ldr	r3, [pc, #316]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a4e      	ldr	r2, [pc, #312]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d26:	f7fd f9f9 	bl	800111c <HAL_GetTick>
 8003d2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d2c:	e008      	b.n	8003d40 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003d2e:	f7fd f9f5 	bl	800111c <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e086      	b.n	8003e4e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d40:	4b45      	ldr	r3, [pc, #276]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f0      	bne.n	8003d2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003d4c:	4b42      	ldr	r3, [pc, #264]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	051b      	lsls	r3, r3, #20
 8003d5a:	493f      	ldr	r1, [pc, #252]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	628b      	str	r3, [r1, #40]	; 0x28
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	025b      	lsls	r3, r3, #9
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	041b      	lsls	r3, r3, #16
 8003d7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	061b      	lsls	r3, r3, #24
 8003d8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d90:	4931      	ldr	r1, [pc, #196]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003d96:	4b30      	ldr	r3, [pc, #192]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	492d      	ldr	r1, [pc, #180]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003da8:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	4928      	ldr	r1, [pc, #160]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003dba:	4b27      	ldr	r3, [pc, #156]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	4a26      	ldr	r2, [pc, #152]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003dc6:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dca:	4b24      	ldr	r3, [pc, #144]	; (8003e5c <RCCEx_PLL3_Config+0x160>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	69d2      	ldr	r2, [r2, #28]
 8003dd2:	00d2      	lsls	r2, r2, #3
 8003dd4:	4920      	ldr	r1, [pc, #128]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003dda:	4b1f      	ldr	r3, [pc, #124]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	4a1e      	ldr	r2, [pc, #120]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d106      	bne.n	8003dfa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003dec:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	4a19      	ldr	r2, [pc, #100]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003df2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003df6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003df8:	e00f      	b.n	8003e1a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d106      	bne.n	8003e0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003e00:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	4a14      	ldr	r2, [pc, #80]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003e06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e0c:	e005      	b.n	8003e1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003e0e:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	4a11      	ldr	r2, [pc, #68]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003e14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003e1a:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a0e      	ldr	r2, [pc, #56]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e26:	f7fd f979 	bl	800111c <HAL_GetTick>
 8003e2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e2c:	e008      	b.n	8003e40 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e2e:	f7fd f975 	bl	800111c <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e006      	b.n	8003e4e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <RCCEx_PLL3_Config+0x15c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0f0      	beq.n	8003e2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	58024400 	.word	0x58024400
 8003e5c:	ffff0007 	.word	0xffff0007

08003e60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e60:	b084      	sub	sp, #16
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	f107 001c 	add.w	r0, r7, #28
 8003e6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d120      	bne.n	8003eba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	4b2a      	ldr	r3, [pc, #168]	; (8003f34 <USB_CoreInit+0xd4>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d105      	bne.n	8003eae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 faac 	bl	800440c <USB_CoreReset>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	73fb      	strb	r3, [r7, #15]
 8003eb8:	e01a      	b.n	8003ef0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 faa0 	bl	800440c <USB_CoreReset>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	639a      	str	r2, [r3, #56]	; 0x38
 8003ee2:	e005      	b.n	8003ef0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d116      	bne.n	8003f24 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f04:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <USB_CoreInit+0xd8>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f043 0206 	orr.w	r2, r3, #6
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f043 0220 	orr.w	r2, r3, #32
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f30:	b004      	add	sp, #16
 8003f32:	4770      	bx	lr
 8003f34:	ffbdffbf 	.word	0xffbdffbf
 8003f38:	03ee0000 	.word	0x03ee0000

08003f3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f023 0201 	bic.w	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b084      	sub	sp, #16
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	460b      	mov	r3, r1
 8003f68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d115      	bne.n	8003fac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f8c:	2001      	movs	r0, #1
 8003f8e:	f7fd f8d1 	bl	8001134 <HAL_Delay>
      ms++;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3301      	adds	r3, #1
 8003f96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fa29 	bl	80043f0 <USB_GetMode>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d01e      	beq.n	8003fe2 <USB_SetCurrentMode+0x84>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b31      	cmp	r3, #49	; 0x31
 8003fa8:	d9f0      	bls.n	8003f8c <USB_SetCurrentMode+0x2e>
 8003faa:	e01a      	b.n	8003fe2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d115      	bne.n	8003fde <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fbe:	2001      	movs	r0, #1
 8003fc0:	f7fd f8b8 	bl	8001134 <HAL_Delay>
      ms++;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fa10 	bl	80043f0 <USB_GetMode>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d005      	beq.n	8003fe2 <USB_SetCurrentMode+0x84>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b31      	cmp	r3, #49	; 0x31
 8003fda:	d9f0      	bls.n	8003fbe <USB_SetCurrentMode+0x60>
 8003fdc:	e001      	b.n	8003fe2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e005      	b.n	8003fee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2b32      	cmp	r3, #50	; 0x32
 8003fe6:	d101      	bne.n	8003fec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e000      	b.n	8003fee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b086      	sub	sp, #24
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004012:	2300      	movs	r3, #0
 8004014:	613b      	str	r3, [r7, #16]
 8004016:	e009      	b.n	800402c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	3340      	adds	r3, #64	; 0x40
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	2200      	movs	r2, #0
 8004024:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	3301      	adds	r3, #1
 800402a:	613b      	str	r3, [r7, #16]
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	2b0e      	cmp	r3, #14
 8004030:	d9f2      	bls.n	8004018 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d11c      	bne.n	8004072 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004046:	f043 0302 	orr.w	r3, r3, #2
 800404a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	e005      	b.n	800407e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004084:	461a      	mov	r2, r3
 8004086:	2300      	movs	r3, #0
 8004088:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004090:	4619      	mov	r1, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004098:	461a      	mov	r2, r3
 800409a:	680b      	ldr	r3, [r1, #0]
 800409c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800409e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d10c      	bne.n	80040be <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d104      	bne.n	80040b4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040aa:	2100      	movs	r1, #0
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f965 	bl	800437c <USB_SetDevSpeed>
 80040b2:	e008      	b.n	80040c6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040b4:	2101      	movs	r1, #1
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f960 	bl	800437c <USB_SetDevSpeed>
 80040bc:	e003      	b.n	80040c6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040be:	2103      	movs	r1, #3
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f95b 	bl	800437c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040c6:	2110      	movs	r1, #16
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f8f3 	bl	80042b4 <USB_FlushTxFifo>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f91f 	bl	800431c <USB_FlushRxFifo>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ee:	461a      	mov	r2, r3
 80040f0:	2300      	movs	r3, #0
 80040f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fa:	461a      	mov	r2, r3
 80040fc:	2300      	movs	r3, #0
 80040fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004106:	461a      	mov	r2, r3
 8004108:	2300      	movs	r3, #0
 800410a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800410c:	2300      	movs	r3, #0
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	e043      	b.n	800419a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004124:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004128:	d118      	bne.n	800415c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10a      	bne.n	8004146 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413c:	461a      	mov	r2, r3
 800413e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	e013      	b.n	800416e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004152:	461a      	mov	r2, r3
 8004154:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	e008      	b.n	800416e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004168:	461a      	mov	r2, r3
 800416a:	2300      	movs	r3, #0
 800416c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417a:	461a      	mov	r2, r3
 800417c:	2300      	movs	r3, #0
 800417e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418c:	461a      	mov	r2, r3
 800418e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004192:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	3301      	adds	r3, #1
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d3b7      	bcc.n	8004112 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041a2:	2300      	movs	r3, #0
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	e043      	b.n	8004230 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041be:	d118      	bne.n	80041f2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10a      	bne.n	80041dc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d2:	461a      	mov	r2, r3
 80041d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	e013      	b.n	8004204 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e8:	461a      	mov	r2, r3
 80041ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	e008      	b.n	8004204 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fe:	461a      	mov	r2, r3
 8004200:	2300      	movs	r3, #0
 8004202:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004210:	461a      	mov	r2, r3
 8004212:	2300      	movs	r3, #0
 8004214:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004222:	461a      	mov	r2, r3
 8004224:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004228:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	3301      	adds	r3, #1
 800422e:	613b      	str	r3, [r7, #16]
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	429a      	cmp	r2, r3
 8004236:	d3b7      	bcc.n	80041a8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004246:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800424a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004258:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425c:	2b00      	cmp	r3, #0
 800425e:	d105      	bne.n	800426c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	f043 0210 	orr.w	r2, r3, #16
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699a      	ldr	r2, [r3, #24]
 8004270:	4b0e      	ldr	r3, [pc, #56]	; (80042ac <USB_DevInit+0x2b4>)
 8004272:	4313      	orrs	r3, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d005      	beq.n	800428a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	f043 0208 	orr.w	r2, r3, #8
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800428a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d105      	bne.n	800429c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699a      	ldr	r2, [r3, #24]
 8004294:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <USB_DevInit+0x2b8>)
 8004296:	4313      	orrs	r3, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800429c:	7dfb      	ldrb	r3, [r7, #23]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042a8:	b004      	add	sp, #16
 80042aa:	4770      	bx	lr
 80042ac:	803c3800 	.word	0x803c3800
 80042b0:	40000004 	.word	0x40000004

080042b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3301      	adds	r3, #1
 80042c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4a13      	ldr	r2, [pc, #76]	; (8004318 <USB_FlushTxFifo+0x64>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e01b      	b.n	800430c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	daf2      	bge.n	80042c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	019b      	lsls	r3, r3, #6
 80042e4:	f043 0220 	orr.w	r2, r3, #32
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	3301      	adds	r3, #1
 80042f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4a08      	ldr	r2, [pc, #32]	; (8004318 <USB_FlushTxFifo+0x64>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d901      	bls.n	80042fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e006      	b.n	800430c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b20      	cmp	r3, #32
 8004308:	d0f0      	beq.n	80042ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	00030d40 	.word	0x00030d40

0800431c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	3301      	adds	r3, #1
 800432c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4a11      	ldr	r2, [pc, #68]	; (8004378 <USB_FlushRxFifo+0x5c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d901      	bls.n	800433a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e018      	b.n	800436c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	daf2      	bge.n	8004328 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2210      	movs	r2, #16
 800434a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	3301      	adds	r3, #1
 8004350:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4a08      	ldr	r2, [pc, #32]	; (8004378 <USB_FlushRxFifo+0x5c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e006      	b.n	800436c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b10      	cmp	r3, #16
 8004368:	d0f0      	beq.n	800434c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	00030d40 	.word	0x00030d40

0800437c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	68f9      	ldr	r1, [r7, #12]
 8004398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800439c:	4313      	orrs	r3, r2
 800439e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b085      	sub	sp, #20
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043c8:	f023 0303 	bic.w	r3, r3, #3
 80043cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043dc:	f043 0302 	orr.w	r3, r3, #2
 80043e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f003 0301 	and.w	r3, r3, #1
}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3301      	adds	r3, #1
 800441c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4a13      	ldr	r2, [pc, #76]	; (8004470 <USB_CoreReset+0x64>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d901      	bls.n	800442a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e01b      	b.n	8004462 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	daf2      	bge.n	8004418 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f043 0201 	orr.w	r2, r3, #1
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	3301      	adds	r3, #1
 8004446:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4a09      	ldr	r2, [pc, #36]	; (8004470 <USB_CoreReset+0x64>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d901      	bls.n	8004454 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e006      	b.n	8004462 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b01      	cmp	r3, #1
 800445e:	d0f0      	beq.n	8004442 <USB_CoreReset+0x36>

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	00030d40 	.word	0x00030d40

08004474 <tud_audio_n_read>:
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
  return tu_fifo_count(&_audiod_fct[func_id].ep_out_ff);
}

uint16_t tud_audio_n_read(uint8_t func_id, void* buffer, uint16_t bufsize)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	6039      	str	r1, [r7, #0]
 800447e:	71fb      	strb	r3, [r7, #7]
 8004480:	4613      	mov	r3, r2
 8004482:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
 8004484:	79fb      	ldrb	r3, [r7, #7]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10a      	bne.n	80044a0 <tud_audio_n_read+0x2c>
 800448a:	79fa      	ldrb	r2, [r7, #7]
 800448c:	490e      	ldr	r1, [pc, #56]	; (80044c8 <tud_audio_n_read+0x54>)
 800448e:	4613      	mov	r3, r2
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	440b      	add	r3, r1
 8004498:	3304      	adds	r3, #4
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <tud_audio_n_read+0x30>
 80044a0:	2300      	movs	r3, #0
 80044a2:	e00d      	b.n	80044c0 <tud_audio_n_read+0x4c>
  return tu_fifo_read_n(&_audiod_fct[func_id].ep_out_ff, buffer, bufsize);
 80044a4:	79fa      	ldrb	r2, [r7, #7]
 80044a6:	4613      	mov	r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	1a9b      	subs	r3, r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	3320      	adds	r3, #32
 80044b0:	4a05      	ldr	r2, [pc, #20]	; (80044c8 <tud_audio_n_read+0x54>)
 80044b2:	4413      	add	r3, r2
 80044b4:	88ba      	ldrh	r2, [r7, #4]
 80044b6:	6839      	ldr	r1, [r7, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f002 fb1e 	bl	8006afa <tu_fifo_read_n>
 80044be:	4603      	mov	r3, r0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	24001840 	.word	0x24001840

080044cc <audiod_rx_done_cb>:
// If you prefer your own (more efficient) implementation suiting your purpose set CFG_TUD_AUDIO_ENABLE_DECODING = 0.

#if CFG_TUD_AUDIO_ENABLE_EP_OUT

static bool audiod_rx_done_cb(uint8_t rhport, audiod_function_t* audio, uint16_t n_bytes_received)
{
 80044cc:	b590      	push	{r4, r7, lr}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	4603      	mov	r3, r0
 80044d4:	6039      	str	r1, [r7, #0]
 80044d6:	71fb      	strb	r3, [r7, #7]
 80044d8:	4613      	mov	r3, r2
 80044da:	80bb      	strh	r3, [r7, #4]
  uint8_t idxItf = 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	73bb      	strb	r3, [r7, #14]
  uint8_t const *dummy2;
  uint8_t idx_audio_fct = 0;
 80044e0:	2300      	movs	r3, #0
 80044e2:	73fb      	strb	r3, [r7, #15]

  if (tud_audio_rx_done_pre_read_cb || tud_audio_rx_done_post_read_cb)
 80044e4:	4b32      	ldr	r3, [pc, #200]	; (80045b0 <audiod_rx_done_cb+0xe4>)
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d102      	bne.n	80044f0 <audiod_rx_done_cb+0x24>
 80044ea:	4b32      	ldr	r3, [pc, #200]	; (80045b4 <audiod_rx_done_cb+0xe8>)
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d015      	beq.n	800451c <audiod_rx_done_cb+0x50>
  {
    idx_audio_fct = audiod_get_audio_fct_idx(audio);
 80044f0:	6838      	ldr	r0, [r7, #0]
 80044f2:	f001 f8d3 	bl	800569c <audiod_get_audio_fct_idx>
 80044f6:	4603      	mov	r3, r0
 80044f8:	73fb      	strb	r3, [r7, #15]
    TU_VERIFY(audiod_get_AS_interface_index(audio->ep_out_as_intf_num, audio, &idxItf, &dummy2));
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	7c18      	ldrb	r0, [r3, #16]
 80044fe:	f107 0308 	add.w	r3, r7, #8
 8004502:	f107 020e 	add.w	r2, r7, #14
 8004506:	6839      	ldr	r1, [r7, #0]
 8004508:	f000 fee4 	bl	80052d4 <audiod_get_AS_interface_index>
 800450c:	4603      	mov	r3, r0
 800450e:	f083 0301 	eor.w	r3, r3, #1
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <audiod_rx_done_cb+0x50>
 8004518:	2300      	movs	r3, #0
 800451a:	e044      	b.n	80045a6 <audiod_rx_done_cb+0xda>
  }

  // Call a weak callback here - a possibility for user to get informed an audio packet was received and data gets now loaded into EP FIFO (or decoded into support RX software FIFO)
  if (tud_audio_rx_done_pre_read_cb)
 800451c:	4b24      	ldr	r3, [pc, #144]	; (80045b0 <audiod_rx_done_cb+0xe4>)
 800451e:	2b00      	cmp	r3, #0
 8004520:	d015      	beq.n	800454e <audiod_rx_done_cb+0x82>
  {
    TU_VERIFY(tud_audio_rx_done_pre_read_cb(rhport, n_bytes_received, idx_audio_fct, audio->ep_out, audio->alt_setting[idxItf]));
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	7b5c      	ldrb	r4, [r3, #13]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	7bba      	ldrb	r2, [r7, #14]
 800452c:	4413      	add	r3, r2
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	7bfa      	ldrb	r2, [r7, #15]
 8004532:	88b9      	ldrh	r1, [r7, #4]
 8004534:	79f8      	ldrb	r0, [r7, #7]
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	4623      	mov	r3, r4
 800453a:	f7fc f9c5 	bl	80008c8 <tud_audio_rx_done_pre_read_cb>
 800453e:	4603      	mov	r3, r0
 8004540:	f083 0301 	eor.w	r3, r3, #1
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <audiod_rx_done_cb+0x82>
 800454a:	2300      	movs	r3, #0
 800454c:	e02b      	b.n	80045a6 <audiod_rx_done_cb+0xda>

  // Schedule for next receive
  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_out, audio->lin_buf_out, audio->ep_out_sz), false);
#else
  // Data is already placed in EP FIFO, schedule for next receive
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	7b59      	ldrb	r1, [r3, #13]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	f103 0220 	add.w	r2, r3, #32
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	89db      	ldrh	r3, [r3, #14]
 800455c:	79f8      	ldrb	r0, [r7, #7]
 800455e:	f003 fe13 	bl	8008188 <usbd_edpt_xfer_fifo>
 8004562:	4603      	mov	r3, r0
 8004564:	f083 0301 	eor.w	r3, r3, #1
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <audiod_rx_done_cb+0xa6>
 800456e:	2300      	movs	r3, #0
 8004570:	e019      	b.n	80045a6 <audiod_rx_done_cb+0xda>
#endif

#endif

  // Call a weak callback here - a possibility for user to get informed decoding was completed
  if (tud_audio_rx_done_post_read_cb)
 8004572:	4b10      	ldr	r3, [pc, #64]	; (80045b4 <audiod_rx_done_cb+0xe8>)
 8004574:	2b00      	cmp	r3, #0
 8004576:	d015      	beq.n	80045a4 <audiod_rx_done_cb+0xd8>
  {
    TU_VERIFY(tud_audio_rx_done_post_read_cb(rhport, n_bytes_received, idx_audio_fct, audio->ep_out, audio->alt_setting[idxItf]));
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	7b5c      	ldrb	r4, [r3, #13]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	7bba      	ldrb	r2, [r7, #14]
 8004582:	4413      	add	r3, r2
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	7bfa      	ldrb	r2, [r7, #15]
 8004588:	88b9      	ldrh	r1, [r7, #4]
 800458a:	79f8      	ldrb	r0, [r7, #7]
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	4623      	mov	r3, r4
 8004590:	f3af 8000 	nop.w
 8004594:	4603      	mov	r3, r0
 8004596:	f083 0301 	eor.w	r3, r3, #1
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <audiod_rx_done_cb+0xd8>
 80045a0:	2300      	movs	r3, #0
 80045a2:	e000      	b.n	80045a6 <audiod_rx_done_cb+0xda>
  }

  return true;
 80045a4:	2301      	movs	r3, #1
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd90      	pop	{r4, r7, pc}
 80045ae:	bf00      	nop
 80045b0:	080008c9 	.word	0x080008c9
 80045b4:	00000000 	.word	0x00000000

080045b8 <tud_audio_n_write>:
 * \param[in]       data: Pointer to data array to be copied from
 * \param[in]       len: # of array elements to copy
 * \return          Number of bytes actually written
 */
uint16_t tud_audio_n_write(uint8_t func_id, const void * data, uint16_t len)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4603      	mov	r3, r0
 80045c0:	6039      	str	r1, [r7, #0]
 80045c2:	71fb      	strb	r3, [r7, #7]
 80045c4:	4613      	mov	r3, r2
 80045c6:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10a      	bne.n	80045e4 <tud_audio_n_write+0x2c>
 80045ce:	79fa      	ldrb	r2, [r7, #7]
 80045d0:	490f      	ldr	r1, [pc, #60]	; (8004610 <tud_audio_n_write+0x58>)
 80045d2:	4613      	mov	r3, r2
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	1a9b      	subs	r3, r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	440b      	add	r3, r1
 80045dc:	3304      	adds	r3, #4
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <tud_audio_n_write+0x30>
 80045e4:	2300      	movs	r3, #0
 80045e6:	e00e      	b.n	8004606 <tud_audio_n_write+0x4e>
  return tu_fifo_write_n(&_audiod_fct[func_id].ep_in_ff, data, len);
 80045e8:	79fa      	ldrb	r2, [r7, #7]
 80045ea:	4613      	mov	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	3328      	adds	r3, #40	; 0x28
 80045f4:	4a06      	ldr	r2, [pc, #24]	; (8004610 <tud_audio_n_write+0x58>)
 80045f6:	4413      	add	r3, r2
 80045f8:	3304      	adds	r3, #4
 80045fa:	88ba      	ldrh	r2, [r7, #4]
 80045fc:	6839      	ldr	r1, [r7, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f002 fae2 	bl	8006bc8 <tu_fifo_write_n>
 8004604:	4603      	mov	r3, r0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	24001840 	.word	0x24001840

08004614 <audiod_tx_done_cb>:
// If you prefer your own (more efficient) implementation suiting your purpose set CFG_TUD_AUDIO_ENABLE_ENCODING = 0 and use tud_audio_n_write.

// n_bytes_copied - Informs caller how many bytes were loaded. In case n_bytes_copied = 0, a ZLP is scheduled to inform host no data is available for current frame.
#if CFG_TUD_AUDIO_ENABLE_EP_IN
static bool audiod_tx_done_cb(uint8_t rhport, audiod_function_t * audio)
{
 8004614:	b590      	push	{r4, r7, lr}
 8004616:	b089      	sub	sp, #36	; 0x24
 8004618:	af02      	add	r7, sp, #8
 800461a:	4603      	mov	r3, r0
 800461c:	6039      	str	r1, [r7, #0]
 800461e:	71fb      	strb	r3, [r7, #7]
  uint8_t idxItf;
  uint8_t const *dummy2;

  uint8_t idx_audio_fct = audiod_get_audio_fct_idx(audio);
 8004620:	6838      	ldr	r0, [r7, #0]
 8004622:	f001 f83b 	bl	800569c <audiod_get_audio_fct_idx>
 8004626:	4603      	mov	r3, r0
 8004628:	75fb      	strb	r3, [r7, #23]
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	7b18      	ldrb	r0, [r3, #12]
 800462e:	f107 0308 	add.w	r3, r7, #8
 8004632:	f107 020f 	add.w	r2, r7, #15
 8004636:	6839      	ldr	r1, [r7, #0]
 8004638:	f000 fe4c 	bl	80052d4 <audiod_get_AS_interface_index>
 800463c:	4603      	mov	r3, r0
 800463e:	f083 0301 	eor.w	r3, r3, #1
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <audiod_tx_done_cb+0x38>
 8004648:	2300      	movs	r3, #0
 800464a:	e05b      	b.n	8004704 <audiod_tx_done_cb+0xf0>

  // Only send something if current alternate interface is not 0 as in this case nothing is to be sent due to UAC2 specifications
  if (audio->alt_setting[idxItf] == 0) return false;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	7bfa      	ldrb	r2, [r7, #15]
 8004652:	4413      	add	r3, r2
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <audiod_tx_done_cb+0x4a>
 800465a:	2300      	movs	r3, #0
 800465c:	e052      	b.n	8004704 <audiod_tx_done_cb+0xf0>

  // Call a weak callback here - a possibility for user to get informed former TX was completed and data gets now loaded into EP in buffer (in case FIFOs are used) or
  // if no FIFOs are used the user may use this call back to load its data into the EP IN buffer by use of tud_audio_n_write_ep_in_buffer().
  if (tud_audio_tx_done_pre_load_cb) TU_VERIFY(tud_audio_tx_done_pre_load_cb(rhport, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 800465e:	4b2b      	ldr	r3, [pc, #172]	; (800470c <audiod_tx_done_cb+0xf8>)
 8004660:	2b00      	cmp	r3, #0
 8004662:	d012      	beq.n	800468a <audiod_tx_done_cb+0x76>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	7a1a      	ldrb	r2, [r3, #8]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	7bf9      	ldrb	r1, [r7, #15]
 800466e:	440b      	add	r3, r1
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	7df9      	ldrb	r1, [r7, #23]
 8004674:	79f8      	ldrb	r0, [r7, #7]
 8004676:	f7fc f94b 	bl	8000910 <tud_audio_tx_done_pre_load_cb>
 800467a:	4603      	mov	r3, r0
 800467c:	f083 0301 	eor.w	r3, r3, #1
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <audiod_tx_done_cb+0x76>
 8004686:	2300      	movs	r3, #0
 8004688:	e03c      	b.n	8004704 <audiod_tx_done_cb+0xf0>
  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_in, audio->lin_buf_in, n_bytes_tx));

#else
  // No support FIFOs, if no linear buffer required schedule transmit, else put data into linear buffer and schedule

  n_bytes_tx = tu_min16(tu_fifo_count(&audio->ep_in_ff), audio->ep_in_sz);      // Limit up to max packet size, more can not be done for ISO
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	332c      	adds	r3, #44	; 0x2c
 800468e:	4618      	mov	r0, r3
 8004690:	f002 f962 	bl	8006958 <tu_fifo_count>
 8004694:	4603      	mov	r3, r0
 8004696:	461a      	mov	r2, r3
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	895b      	ldrh	r3, [r3, #10]
 800469c:	827a      	strh	r2, [r7, #18]
 800469e:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80046a0:	8a7a      	ldrh	r2, [r7, #18]
 80046a2:	8a3b      	ldrh	r3, [r7, #16]
 80046a4:	4293      	cmp	r3, r2
 80046a6:	bf28      	it	cs
 80046a8:	4613      	movcs	r3, r2
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	82bb      	strh	r3, [r7, #20]
#if USE_LINEAR_BUFFER_TX
  tu_fifo_read_n(&audio->ep_in_ff, audio->lin_buf_in, n_bytes_tx);
  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_in, audio->lin_buf_in, n_bytes_tx));
#else
  // Send everything in ISO EP FIFO
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_in, &audio->ep_in_ff, n_bytes_tx));
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	7a19      	ldrb	r1, [r3, #8]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80046b8:	8abb      	ldrh	r3, [r7, #20]
 80046ba:	79f8      	ldrb	r0, [r7, #7]
 80046bc:	f003 fd64 	bl	8008188 <usbd_edpt_xfer_fifo>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f083 0301 	eor.w	r3, r3, #1
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <audiod_tx_done_cb+0xbc>
 80046cc:	2300      	movs	r3, #0
 80046ce:	e019      	b.n	8004704 <audiod_tx_done_cb+0xf0>
#endif

#endif

  // Call a weak callback here - a possibility for user to get informed former TX was completed and how many bytes were loaded for the next frame
  if (tud_audio_tx_done_post_load_cb) TU_VERIFY(tud_audio_tx_done_post_load_cb(rhport, n_bytes_tx, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 80046d0:	4b0f      	ldr	r3, [pc, #60]	; (8004710 <audiod_tx_done_cb+0xfc>)
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d015      	beq.n	8004702 <audiod_tx_done_cb+0xee>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	7a1c      	ldrb	r4, [r3, #8]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	7bfa      	ldrb	r2, [r7, #15]
 80046e0:	4413      	add	r3, r2
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	7dfa      	ldrb	r2, [r7, #23]
 80046e6:	8ab9      	ldrh	r1, [r7, #20]
 80046e8:	79f8      	ldrb	r0, [r7, #7]
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	4623      	mov	r3, r4
 80046ee:	f3af 8000 	nop.w
 80046f2:	4603      	mov	r3, r0
 80046f4:	f083 0301 	eor.w	r3, r3, #1
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <audiod_tx_done_cb+0xee>
 80046fe:	2300      	movs	r3, #0
 8004700:	e000      	b.n	8004704 <audiod_tx_done_cb+0xf0>

  return true;
 8004702:	2301      	movs	r3, #1
}
 8004704:	4618      	mov	r0, r3
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	bd90      	pop	{r4, r7, pc}
 800470c:	08000911 	.word	0x08000911
 8004710:	00000000 	.word	0x00000000

08004714 <audiod_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void audiod_init(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af02      	add	r7, sp, #8
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 800471a:	2238      	movs	r2, #56	; 0x38
 800471c:	2100      	movs	r1, #0
 800471e:	4824      	ldr	r0, [pc, #144]	; (80047b0 <audiod_init+0x9c>)
 8004720:	f005 fe16 	bl	800a350 <memset>

  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8004724:	2300      	movs	r3, #0
 8004726:	71fb      	strb	r3, [r7, #7]
 8004728:	e039      	b.n	800479e <audiod_init+0x8a>
  {
    audiod_function_t* audio = &_audiod_fct[i];
 800472a:	79fa      	ldrb	r2, [r7, #7]
 800472c:	4613      	mov	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	4a1e      	ldr	r2, [pc, #120]	; (80047b0 <audiod_init+0x9c>)
 8004736:	4413      	add	r3, r2
 8004738:	603b      	str	r3, [r7, #0]

    // Initialize control buffers
    switch (i)
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d106      	bne.n	800474e <audiod_init+0x3a>
    {
      case 0:
        audio->ctrl_buf = ctrl_buf_1;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	4a1c      	ldr	r2, [pc, #112]	; (80047b4 <audiod_init+0xa0>)
 8004744:	615a      	str	r2, [r3, #20]
        audio->ctrl_buf_sz = CFG_TUD_AUDIO_FUNC_1_CTRL_BUF_SZ;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2240      	movs	r2, #64	; 0x40
 800474a:	761a      	strb	r2, [r3, #24]
        break;
 800474c:	bf00      	nop
        break;
#endif
    }

    // Initialize active alternate interface buffers
    switch (i)
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d103      	bne.n	800475c <audiod_init+0x48>
    {
#if CFG_TUD_AUDIO_FUNC_1_N_AS_INT > 0
      case 0:
        audio->alt_setting = alt_setting_1;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	4a18      	ldr	r2, [pc, #96]	; (80047b8 <audiod_init+0xa4>)
 8004758:	61da      	str	r2, [r3, #28]
        break;
 800475a:	bf00      	nop
    }

    // Initialize IN EP FIFO if required
#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING

    switch (i)
 800475c:	79fb      	ldrb	r3, [r7, #7]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10b      	bne.n	800477a <audiod_init+0x66>
    {
#if CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ > 0
      case 0:
        tu_fifo_config(&audio->ep_in_ff, audio_ep_in_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ, 1, true);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8004768:	2301      	movs	r3, #1
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	2301      	movs	r3, #1
 800476e:	f44f 7242 	mov.w	r2, #776	; 0x308
 8004772:	4912      	ldr	r1, [pc, #72]	; (80047bc <audiod_init+0xa8>)
 8004774:	f001 fc5e 	bl	8006034 <tu_fifo_config>
#if CFG_FIFO_MUTEX
        tu_fifo_config_mutex(&audio->ep_in_ff, osal_mutex_create(&ep_in_ff_mutex_wr_1), NULL);
#endif
        break;
 8004778:	bf00      	nop
#endif // USE_LINEAR_BUFFER_TX

    // Initialize OUT EP FIFO if required
#if CFG_TUD_AUDIO_ENABLE_EP_OUT && !CFG_TUD_AUDIO_ENABLE_DECODING

    switch (i)
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10b      	bne.n	8004798 <audiod_init+0x84>
    {
#if CFG_TUD_AUDIO_FUNC_1_EP_OUT_SW_BUF_SZ > 0
      case 0:
        tu_fifo_config(&audio->ep_out_ff, audio_ep_out_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_OUT_SW_BUF_SZ, 1, true);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	f103 0020 	add.w	r0, r3, #32
 8004786:	2301      	movs	r3, #1
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	2301      	movs	r3, #1
 800478c:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8004790:	490b      	ldr	r1, [pc, #44]	; (80047c0 <audiod_init+0xac>)
 8004792:	f001 fc4f 	bl	8006034 <tu_fifo_config>
#if CFG_FIFO_MUTEX
        tu_fifo_config_mutex(&audio->ep_out_ff, NULL, osal_mutex_create(&ep_out_ff_mutex_rd_1));
#endif
        break;
 8004796:	bf00      	nop
  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8004798:	79fb      	ldrb	r3, [r7, #7]
 800479a:	3301      	adds	r3, #1
 800479c:	71fb      	strb	r3, [r7, #7]
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0c2      	beq.n	800472a <audiod_init+0x16>
        break;
#endif
    }
#endif // CFG_TUD_AUDIO_ENABLE_TYPE_I_DECODING
  }
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	24001840 	.word	0x24001840
 80047b4:	240017fc 	.word	0x240017fc
 80047b8:	2400183c 	.word	0x2400183c
 80047bc:	24000ee4 	.word	0x24000ee4
 80047c0:	240011ec 	.word	0x240011ec

080047c4 <audiod_reset>:

void audiod_reset(uint8_t rhport)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 80047ce:	2300      	movs	r3, #0
 80047d0:	73fb      	strb	r3, [r7, #15]
 80047d2:	e019      	b.n	8004808 <audiod_reset+0x44>
  {
    audiod_function_t* audio = &_audiod_fct[i];
 80047d4:	7bfa      	ldrb	r2, [r7, #15]
 80047d6:	4613      	mov	r3, r2
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	1a9b      	subs	r3, r3, r2
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4a0e      	ldr	r2, [pc, #56]	; (8004818 <audiod_reset+0x54>)
 80047e0:	4413      	add	r3, r2
 80047e2:	60bb      	str	r3, [r7, #8]
    tu_memclr(audio, ITF_MEM_RESET_SIZE);
 80047e4:	2214      	movs	r2, #20
 80047e6:	2100      	movs	r1, #0
 80047e8:	68b8      	ldr	r0, [r7, #8]
 80047ea:	f005 fdb1 	bl	800a350 <memset>

#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING
    tu_fifo_clear(&audio->ep_in_ff);
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	332c      	adds	r3, #44	; 0x2c
 80047f2:	4618      	mov	r0, r3
 80047f4:	f002 fa0c 	bl	8006c10 <tu_fifo_clear>
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_OUT && !CFG_TUD_AUDIO_ENABLE_DECODING
    tu_fifo_clear(&audio->ep_out_ff);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	3320      	adds	r3, #32
 80047fc:	4618      	mov	r0, r3
 80047fe:	f002 fa07 	bl	8006c10 <tu_fifo_clear>
  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8004802:	7bfb      	ldrb	r3, [r7, #15]
 8004804:	3301      	adds	r3, #1
 8004806:	73fb      	strb	r3, [r7, #15]
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0e2      	beq.n	80047d4 <audiod_reset+0x10>
    {
      tu_fifo_clear(&audio->rx_supp_ff[cnt]);
    }
#endif
  }
}
 800480e:	bf00      	nop
 8004810:	bf00      	nop
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	24001840 	.word	0x24001840

0800481c <audiod_open>:

uint16_t audiod_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	4603      	mov	r3, r0
 8004824:	6039      	str	r1, [r7, #0]
 8004826:	71fb      	strb	r3, [r7, #7]
 8004828:	4613      	mov	r3, r2
 800482a:	80bb      	strh	r3, [r7, #4]
  (void) max_len;

  TU_VERIFY ( TUSB_CLASS_AUDIO  == itf_desc->bInterfaceClass &&
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	795b      	ldrb	r3, [r3, #5]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d103      	bne.n	800483c <audiod_open+0x20>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	799b      	ldrb	r3, [r3, #6]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d001      	beq.n	8004840 <audiod_open+0x24>
 800483c:	2300      	movs	r3, #0
 800483e:	e064      	b.n	800490a <audiod_open+0xee>
              AUDIO_SUBCLASS_CONTROL    == itf_desc->bInterfaceSubClass);

  // Verify version is correct - this check can be omitted
  TU_VERIFY(itf_desc->bInterfaceProtocol == AUDIO_INT_PROTOCOL_CODE_V2);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	79db      	ldrb	r3, [r3, #7]
 8004844:	2b20      	cmp	r3, #32
 8004846:	d001      	beq.n	800484c <audiod_open+0x30>
 8004848:	2300      	movs	r3, #0
 800484a:	e05e      	b.n	800490a <audiod_open+0xee>

  // Verify interrupt control EP is enabled if demanded by descriptor - this should be best some static check however - this check can be omitted
  if (itf_desc->bNumEndpoints == 1) // 0 or 1 EPs are allowed
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	791b      	ldrb	r3, [r3, #4]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <audiod_open+0x3c>
  {
    TU_VERIFY(CFG_TUD_AUDIO_INT_CTR_EPSIZE_IN > 0);
 8004854:	2300      	movs	r3, #0
 8004856:	e058      	b.n	800490a <audiod_open+0xee>
  }

  // Alternate setting MUST be zero - this check can be omitted
  TU_VERIFY(itf_desc->bAlternateSetting == 0);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	78db      	ldrb	r3, [r3, #3]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <audiod_open+0x48>
 8004860:	2300      	movs	r3, #0
 8004862:	e052      	b.n	800490a <audiod_open+0xee>

  // Find available audio driver interface
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8004864:	2300      	movs	r3, #0
 8004866:	73fb      	strb	r3, [r7, #15]
 8004868:	e030      	b.n	80048cc <audiod_open+0xb0>
  {
    if (!_audiod_fct[i].p_desc)
 800486a:	7bfa      	ldrb	r2, [r7, #15]
 800486c:	492a      	ldr	r1, [pc, #168]	; (8004918 <audiod_open+0xfc>)
 800486e:	4613      	mov	r3, r2
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	1a9b      	subs	r3, r3, r2
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	440b      	add	r3, r1
 8004878:	3304      	adds	r3, #4
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d122      	bne.n	80048c6 <audiod_open+0xaa>
    {
      _audiod_fct[i].p_desc = (uint8_t const *)itf_desc;    // Save pointer to AC descriptor which is by specification always the first one
 8004880:	7bfa      	ldrb	r2, [r7, #15]
 8004882:	4925      	ldr	r1, [pc, #148]	; (8004918 <audiod_open+0xfc>)
 8004884:	4613      	mov	r3, r2
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	1a9b      	subs	r3, r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	440b      	add	r3, r1
 800488e:	3304      	adds	r3, #4
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	601a      	str	r2, [r3, #0]
      _audiod_fct[i].rhport = rhport;
 8004894:	7bfa      	ldrb	r2, [r7, #15]
 8004896:	4920      	ldr	r1, [pc, #128]	; (8004918 <audiod_open+0xfc>)
 8004898:	4613      	mov	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	440b      	add	r3, r1
 80048a2:	79fa      	ldrb	r2, [r7, #7]
 80048a4:	701a      	strb	r2, [r3, #0]

      // Setup descriptor lengths
      switch (i)
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d113      	bne.n	80048d4 <audiod_open+0xb8>
      {
        case 0:
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_1_DESC_LEN;
 80048ac:	7bfa      	ldrb	r2, [r7, #15]
 80048ae:	491a      	ldr	r1, [pc, #104]	; (8004918 <audiod_open+0xfc>)
 80048b0:	4613      	mov	r3, r2
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	1a9b      	subs	r3, r3, r2
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	440b      	add	r3, r1
 80048ba:	3312      	adds	r3, #18
 80048bc:	f44f 729c 	mov.w	r2, #312	; 0x138
 80048c0:	801a      	strh	r2, [r3, #0]
          break;
 80048c2:	bf00      	nop
      }
  #endif

#endif // USE_ISO_EP_ALLOCATION

      break;
 80048c4:	e006      	b.n	80048d4 <audiod_open+0xb8>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	3301      	adds	r3, #1
 80048ca:	73fb      	strb	r3, [r7, #15]
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0cb      	beq.n	800486a <audiod_open+0x4e>
 80048d2:	e000      	b.n	80048d6 <audiod_open+0xba>
      break;
 80048d4:	bf00      	nop
    }
  }

  // Verify we found a free one
  TU_ASSERT( i < CFG_TUD_AUDIO );
 80048d6:	7bfb      	ldrb	r3, [r7, #15]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00a      	beq.n	80048f2 <audiod_open+0xd6>
 80048dc:	4b0f      	ldr	r3, [pc, #60]	; (800491c <audiod_open+0x100>)
 80048de:	60bb      	str	r3, [r7, #8]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d000      	beq.n	80048ee <audiod_open+0xd2>
 80048ec:	be00      	bkpt	0x0000
 80048ee:	2300      	movs	r3, #0
 80048f0:	e00b      	b.n	800490a <audiod_open+0xee>

  // This is all we need so far - the EPs are setup by a later set_interface request (as per UAC2 specification)
  uint16_t drv_len = _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;    // - TUD_AUDIO_DESC_IAD_LEN since tinyUSB already handles the IAD descriptor
 80048f2:	7bfa      	ldrb	r2, [r7, #15]
 80048f4:	4908      	ldr	r1, [pc, #32]	; (8004918 <audiod_open+0xfc>)
 80048f6:	4613      	mov	r3, r2
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	440b      	add	r3, r1
 8004900:	3312      	adds	r3, #18
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	3b08      	subs	r3, #8
 8004906:	81bb      	strh	r3, [r7, #12]

  return drv_len;
 8004908:	89bb      	ldrh	r3, [r7, #12]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	24001840 	.word	0x24001840
 800491c:	e000edf0 	.word	0xe000edf0

08004920 <audiod_get_interface>:

static bool audiod_get_interface(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	6039      	str	r1, [r7, #0]
 800492a:	71fb      	strb	r3, [r7, #7]
  uint8_t const itf = tu_u16_low(p_request->wIndex);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	889b      	ldrh	r3, [r3, #4]
 8004930:	b29b      	uxth	r3, r3
 8004932:	82bb      	strh	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8004934:	8abb      	ldrh	r3, [r7, #20]
 8004936:	b2db      	uxtb	r3, r3
 8004938:	75fb      	strb	r3, [r7, #23]

  // Find index of audio streaming interface
  uint8_t func_id, idxItf;
  uint8_t const *dummy;

  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &dummy));
 800493a:	f107 030c 	add.w	r3, r7, #12
 800493e:	f107 0212 	add.w	r2, r7, #18
 8004942:	f107 0113 	add.w	r1, r7, #19
 8004946:	7df8      	ldrb	r0, [r7, #23]
 8004948:	f000 fd20 	bl	800538c <audiod_get_AS_interface_index_global>
 800494c:	4603      	mov	r3, r0
 800494e:	f083 0301 	eor.w	r3, r3, #1
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <audiod_get_interface+0x3c>
 8004958:	2300      	movs	r3, #0
 800495a:	e019      	b.n	8004990 <audiod_get_interface+0x70>
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 800495c:	7cfb      	ldrb	r3, [r7, #19]
 800495e:	4619      	mov	r1, r3
 8004960:	4a0d      	ldr	r2, [pc, #52]	; (8004998 <audiod_get_interface+0x78>)
 8004962:	460b      	mov	r3, r1
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	1a5b      	subs	r3, r3, r1
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	4413      	add	r3, r2
 800496c:	331c      	adds	r3, #28
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	7cba      	ldrb	r2, [r7, #18]
 8004972:	441a      	add	r2, r3
 8004974:	79f8      	ldrb	r0, [r7, #7]
 8004976:	2301      	movs	r3, #1
 8004978:	6839      	ldr	r1, [r7, #0]
 800497a:	f003 fe2b 	bl	80085d4 <tud_control_xfer>
 800497e:	4603      	mov	r3, r0
 8004980:	f083 0301 	eor.w	r3, r3, #1
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <audiod_get_interface+0x6e>
 800498a:	2300      	movs	r3, #0
 800498c:	e000      	b.n	8004990 <audiod_get_interface+0x70>

  TU_LOG2("  Get itf: %u - current alt: %u\r\n", itf, _audiod_fct[func_id].alt_setting[idxItf]);

  return true;
 800498e:	2301      	movs	r3, #1
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	24001840 	.word	0x24001840

0800499c <audiod_set_interface>:

static bool audiod_set_interface(uint8_t rhport, tusb_control_request_t const * p_request)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b096      	sub	sp, #88	; 0x58
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	6039      	str	r1, [r7, #0]
 80049a6:	71fb      	strb	r3, [r7, #7]
  // 2. Close EPs which are currently open
  // To do so it is not necessary to know the current active alternate interface since we already save the current EP addresses - we simply close them

  // 3. Open new EP

  uint8_t const itf = tu_u16_low(p_request->wIndex);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	889b      	ldrh	r3, [r3, #4]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	873b      	strh	r3, [r7, #56]	; 0x38
 80049b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  uint8_t const alt = tu_u16_low(p_request->wValue);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	885b      	ldrh	r3, [r3, #2]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	877b      	strh	r3, [r7, #58]	; 0x3a
 80049c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  TU_LOG2("  Set itf: %u - alt: %u\r\n", itf, alt);

  // Find index of audio streaming interface and index of interface
  uint8_t func_id, idxItf;
  uint8_t const *p_desc;
  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &p_desc));
 80049c8:	f107 0308 	add.w	r3, r7, #8
 80049cc:	f107 020e 	add.w	r2, r7, #14
 80049d0:	f107 010f 	add.w	r1, r7, #15
 80049d4:	f897 0056 	ldrb.w	r0, [r7, #86]	; 0x56
 80049d8:	f000 fcd8 	bl	800538c <audiod_get_AS_interface_index_global>
 80049dc:	4603      	mov	r3, r0
 80049de:	f083 0301 	eor.w	r3, r3, #1
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <audiod_set_interface+0x50>
 80049e8:	2300      	movs	r3, #0
 80049ea:	e168      	b.n	8004cbe <audiod_set_interface+0x322>

  audiod_function_t* audio = &_audiod_fct[func_id];
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	461a      	mov	r2, r3
 80049f0:	4613      	mov	r3, r2
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	4aa9      	ldr	r2, [pc, #676]	; (8004ca0 <audiod_set_interface+0x304>)
 80049fa:	4413      	add	r3, r2
 80049fc:	653b      	str	r3, [r7, #80]	; 0x50

  // Look if there is an EP to be closed - for this driver, there are only 3 possible EPs which may be closed (only AS related EPs can be closed, AC EP (if present) is always open)
#if CFG_TUD_AUDIO_ENABLE_EP_IN
  if (audio->ep_in_as_intf_num == itf)
 80049fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a00:	7b1b      	ldrb	r3, [r3, #12]
 8004a02:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d121      	bne.n	8004a4e <audiod_set_interface+0xb2>
  {
    audio->ep_in_as_intf_num = 0;
 8004a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	731a      	strb	r2, [r3, #12]
  #if !USE_ISO_EP_ALLOCATION
    usbd_edpt_close(rhport, audio->ep_in);
 8004a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a12:	7a1a      	ldrb	r2, [r3, #8]
 8004a14:	79fb      	ldrb	r3, [r7, #7]
 8004a16:	4611      	mov	r1, r2
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f003 fcf1 	bl	8008400 <usbd_edpt_close>
  #endif

    // Clear FIFOs, since data is no longer valid
  #if !CFG_TUD_AUDIO_ENABLE_ENCODING
    tu_fifo_clear(&audio->ep_in_ff);
 8004a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a20:	332c      	adds	r3, #44	; 0x2c
 8004a22:	4618      	mov	r0, r3
 8004a24:	f002 f8f4 	bl	8006c10 <tu_fifo_clear>
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
    }
  #endif

    // Invoke callback - can be used to stop data sampling
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 8004a28:	4b9e      	ldr	r3, [pc, #632]	; (8004ca4 <audiod_set_interface+0x308>)
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00c      	beq.n	8004a48 <audiod_set_interface+0xac>
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	6839      	ldr	r1, [r7, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fb fee8 	bl	8000808 <tud_audio_set_itf_close_EP_cb>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f083 0301 	eor.w	r3, r3, #1
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <audiod_set_interface+0xac>
 8004a44:	2300      	movs	r3, #0
 8004a46:	e13a      	b.n	8004cbe <audiod_set_interface+0x322>

    audio->ep_in = 0;                           // Necessary?
 8004a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	721a      	strb	r2, [r3, #8]

  }
#endif // CFG_TUD_AUDIO_ENABLE_EP_IN

#if CFG_TUD_AUDIO_ENABLE_EP_OUT
  if (audio->ep_out_as_intf_num == itf)
 8004a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a50:	7c1b      	ldrb	r3, [r3, #16]
 8004a52:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d121      	bne.n	8004a9e <audiod_set_interface+0x102>
  {
    audio->ep_out_as_intf_num = 0;
 8004a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	741a      	strb	r2, [r3, #16]
  #if !USE_ISO_EP_ALLOCATION
    usbd_edpt_close(rhport, audio->ep_out);
 8004a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a62:	7b5a      	ldrb	r2, [r3, #13]
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	4611      	mov	r1, r2
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f003 fcc9 	bl	8008400 <usbd_edpt_close>
  #endif

    // Clear FIFOs, since data is no longer valid
  #if !CFG_TUD_AUDIO_ENABLE_DECODING
    tu_fifo_clear(&audio->ep_out_ff);
 8004a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a70:	3320      	adds	r3, #32
 8004a72:	4618      	mov	r0, r3
 8004a74:	f002 f8cc 	bl	8006c10 <tu_fifo_clear>
      tu_fifo_clear(&audio->rx_supp_ff[cnt]);
    }
  #endif

    // Invoke callback - can be used to stop data sampling
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 8004a78:	4b8a      	ldr	r3, [pc, #552]	; (8004ca4 <audiod_set_interface+0x308>)
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00c      	beq.n	8004a98 <audiod_set_interface+0xfc>
 8004a7e:	79fb      	ldrb	r3, [r7, #7]
 8004a80:	6839      	ldr	r1, [r7, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fb fec0 	bl	8000808 <tud_audio_set_itf_close_EP_cb>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	f083 0301 	eor.w	r3, r3, #1
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <audiod_set_interface+0xfc>
 8004a94:	2300      	movs	r3, #0
 8004a96:	e112      	b.n	8004cbe <audiod_set_interface+0x322>

    audio->ep_out = 0;                          // Necessary?
 8004a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	735a      	strb	r2, [r3, #13]
  #endif
  }
#endif // CFG_TUD_AUDIO_ENABLE_EP_OUT

  // Save current alternative interface setting
  audio->alt_setting[idxItf] = alt;
 8004a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	7bba      	ldrb	r2, [r7, #14]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8004aaa:	701a      	strb	r2, [r3, #0]

  // Open new EP if necessary - EPs are only to be closed or opened for AS interfaces - Look for AS interface with correct alternate interface
  // Get pointer at end
  uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8004aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ab2:	8a5b      	ldrh	r3, [r3, #18]
 8004ab4:	3b08      	subs	r3, #8
 8004ab6:	4413      	add	r3, r2
 8004ab8:	64fb      	str	r3, [r7, #76]	; 0x4c

  // p_desc starts at required interface with alternate setting zero
  while (p_desc < p_desc_end)
 8004aba:	e0ea      	b.n	8004c92 <audiod_set_interface+0x2f6>
  {
    // Find correct interface
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == alt)
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	637b      	str	r3, [r7, #52]	; 0x34
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	f040 80d9 	bne.w	8004c7e <audiod_set_interface+0x2e2>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	789b      	ldrb	r3, [r3, #2]
 8004ad0:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	f040 80d2 	bne.w	8004c7e <audiod_set_interface+0x2e2>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	78db      	ldrb	r3, [r3, #3]
 8004ade:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	f040 80cb 	bne.w	8004c7e <audiod_set_interface+0x2e2>
    {
#if CFG_TUD_AUDIO_ENABLE_ENCODING || CFG_TUD_AUDIO_ENABLE_DECODING
      uint8_t const * p_desc_parse_for_params = p_desc;
#endif
      // From this point forward follow the EP descriptors associated to the current alternate setting interface - Open EPs if necessary
      uint8_t foundEPs = 0, nEps = ((tusb_desc_interface_t const * )p_desc)->bNumEndpoints;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	791b      	ldrb	r3, [r3, #4]
 8004af2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
      while (foundEPs < nEps && p_desc < p_desc_end)
 8004af6:	e09f      	b.n	8004c38 <audiod_set_interface+0x29c>
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT)
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	633b      	str	r3, [r7, #48]	; 0x30
 8004afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afe:	3301      	adds	r3, #1
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b05      	cmp	r3, #5
 8004b04:	f040 808e 	bne.w	8004c24 <audiod_set_interface+0x288>
        {
          tusb_desc_endpoint_t const* desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	647b      	str	r3, [r7, #68]	; 0x44
#if USE_ISO_EP_ALLOCATION
          TU_ASSERT(usbd_edpt_iso_activate(rhport, desc_ep));
#else
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b10:	4618      	mov	r0, r3
 8004b12:	f003 fa2b 	bl	8007f6c <usbd_edpt_open>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f083 0301 	eor.w	r3, r3, #1
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <audiod_set_interface+0x19c>
 8004b22:	4b61      	ldr	r3, [pc, #388]	; (8004ca8 <audiod_set_interface+0x30c>)
 8004b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d000      	beq.n	8004b34 <audiod_set_interface+0x198>
 8004b32:	be00      	bkpt	0x0000
 8004b34:	2300      	movs	r3, #0
 8004b36:	e0c2      	b.n	8004cbe <audiod_set_interface+0x322>
#endif
          uint8_t const ep_addr = desc_ep->bEndpointAddress;
 8004b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b3a:	789b      	ldrb	r3, [r3, #2]
 8004b3c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

          //TODO: We need to set EP non busy since this is not taken care of right now in ep_close() - THIS IS A WORKAROUND!
          usbd_edpt_clear_stall(rhport, ep_addr);
 8004b40:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	4611      	mov	r1, r2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f003 fbdf 	bl	800830c <usbd_edpt_clear_stall>
 8004b4e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004b56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b5a:	09db      	lsrs	r3, r3, #7
 8004b5c:	b2db      	uxtb	r3, r3

#if CFG_TUD_AUDIO_ENABLE_EP_IN
          if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN && desc_ep->bmAttributes.usage == 0x00)   // Check if usage is data EP
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d12d      	bne.n	8004bbe <audiod_set_interface+0x222>
 8004b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b64:	78db      	ldrb	r3, [r3, #3]
 8004b66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d126      	bne.n	8004bbe <audiod_set_interface+0x222>
          {
            // Save address
            audio->ep_in = ep_addr;
 8004b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b72:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8004b76:	721a      	strb	r2, [r3, #8]
            audio->ep_in_as_intf_num = itf;
 8004b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b7a:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8004b7e:	731a      	strb	r2, [r3, #12]
 8004b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b82:	62bb      	str	r3, [r7, #40]	; 0x28
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	889b      	ldrh	r3, [r3, #4]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b8e:	b29a      	uxth	r2, r3
            audio->ep_in_sz = tu_edpt_packet_size(desc_ep);
 8004b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b92:	815a      	strh	r2, [r3, #10]
    #endif
  #endif

            // Schedule first transmit if alternate interface is not zero i.e. streaming is disabled - in case no sample data is available a ZLP is loaded
            // It is necessary to trigger this here since the refill is done with an RX FIFO empty interrupt which can only trigger if something was in there
            TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
 8004b96:	461a      	mov	r2, r3
 8004b98:	4613      	mov	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	1a9b      	subs	r3, r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4a3f      	ldr	r2, [pc, #252]	; (8004ca0 <audiod_set_interface+0x304>)
 8004ba2:	441a      	add	r2, r3
 8004ba4:	79fb      	ldrb	r3, [r7, #7]
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff fd33 	bl	8004614 <audiod_tx_done_cb>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	f083 0301 	eor.w	r3, r3, #1
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <audiod_set_interface+0x222>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e07f      	b.n	8004cbe <audiod_set_interface+0x322>
 8004bbe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bca:	09db      	lsrs	r3, r3, #7
 8004bcc:	b2db      	uxtb	r3, r3
          }
#endif // CFG_TUD_AUDIO_ENABLE_EP_IN

#if CFG_TUD_AUDIO_ENABLE_EP_OUT

          if (tu_edpt_dir(ep_addr) == TUSB_DIR_OUT)     // Checking usage not necessary
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d123      	bne.n	8004c1a <audiod_set_interface+0x27e>
          {
            // Save address
            audio->ep_out = ep_addr;
 8004bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd4:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8004bd8:	735a      	strb	r2, [r3, #13]
            audio->ep_out_as_intf_num = itf;
 8004bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bdc:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8004be0:	741a      	strb	r2, [r3, #16]
 8004be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be4:	623b      	str	r3, [r7, #32]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	889b      	ldrh	r3, [r3, #4]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bf0:	b29a      	uxth	r2, r3
            audio->ep_out_sz = tu_edpt_packet_size(desc_ep);
 8004bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf4:	81da      	strh	r2, [r3, #14]

            // Prepare for incoming data
  #if USE_LINEAR_BUFFER_RX
            TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_out, audio->lin_buf_out, audio->ep_out_sz), false);
  #else
            TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 8004bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf8:	7b59      	ldrb	r1, [r3, #13]
 8004bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bfc:	f103 0220 	add.w	r2, r3, #32
 8004c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c02:	89db      	ldrh	r3, [r3, #14]
 8004c04:	79f8      	ldrb	r0, [r7, #7]
 8004c06:	f003 fabf 	bl	8008188 <usbd_edpt_xfer_fifo>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	f083 0301 	eor.w	r3, r3, #1
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <audiod_set_interface+0x27e>
 8004c16:	2300      	movs	r3, #0
 8004c18:	e051      	b.n	8004cbe <audiod_set_interface+0x322>
            if (tud_audio_feedback_interval_isr) usbd_sof_enable(rhport, true);
          }
  #endif
#endif // CFG_TUD_AUDIO_ENABLE_EP_OUT

          foundEPs += 1;
 8004c1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c1e:	3301      	adds	r3, #1
 8004c20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        }
        p_desc = tu_desc_next(p_desc);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	4413      	add	r3, r2
 8004c36:	60bb      	str	r3, [r7, #8]
      while (foundEPs < nEps && p_desc < p_desc_end)
 8004c38:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004c3c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d204      	bcs.n	8004c4e <audiod_set_interface+0x2b2>
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	f63f af55 	bhi.w	8004af8 <audiod_set_interface+0x15c>
      }

      TU_VERIFY(foundEPs == nEps);
 8004c4e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004c52:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d001      	beq.n	8004c5e <audiod_set_interface+0x2c2>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e02f      	b.n	8004cbe <audiod_set_interface+0x322>

      // Invoke one callback for a final set interface
      if (tud_audio_set_itf_cb) TU_VERIFY(tud_audio_set_itf_cb(rhport, p_request));
 8004c5e:	4b13      	ldr	r3, [pc, #76]	; (8004cac <audiod_set_interface+0x310>)
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d025      	beq.n	8004cb0 <audiod_set_interface+0x314>
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	6839      	ldr	r1, [r7, #0]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fb fdf5 	bl	8000858 <tud_audio_set_itf_cb>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f083 0301 	eor.w	r3, r3, #1
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d01a      	beq.n	8004cb0 <audiod_set_interface+0x314>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e01f      	b.n	8004cbe <audiod_set_interface+0x322>
      // We are done - abort loop
      break;
    }

    // Moving forward
    p_desc = tu_desc_next(p_desc);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	4413      	add	r3, r2
 8004c90:	60bb      	str	r3, [r7, #8]
  while (p_desc < p_desc_end)
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c96:	429a      	cmp	r2, r3
 8004c98:	f63f af10 	bhi.w	8004abc <audiod_set_interface+0x120>
 8004c9c:	e009      	b.n	8004cb2 <audiod_set_interface+0x316>
 8004c9e:	bf00      	nop
 8004ca0:	24001840 	.word	0x24001840
 8004ca4:	08000809 	.word	0x08000809
 8004ca8:	e000edf0 	.word	0xe000edf0
 8004cac:	08000859 	.word	0x08000859
      break;
 8004cb0:	bf00      	nop
    }
  }
  if (disable) usbd_sof_enable(rhport, false);
#endif

  tud_control_status(rhport, p_request);
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	6839      	ldr	r1, [r7, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f003 fc1a 	bl	80084f0 <tud_control_status>

  return true;
 8004cbc:	2301      	movs	r3, #1
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3758      	adds	r7, #88	; 0x58
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop

08004cc8 <audiod_control_complete>:

// Invoked when class request DATA stage is finished.
// return false to stall control EP (e.g Host send non-sense DATA)
static bool audiod_control_complete(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	6039      	str	r1, [r7, #0]
 8004cd2:	71fb      	strb	r3, [r7, #7]
  // Handle audio class specific set requests
  if(p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS && p_request->bmRequestType_bit.direction == TUSB_DIR_OUT)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b20      	cmp	r3, #32
 8004ce0:	f040 809d 	bne.w	8004e1e <audiod_control_complete+0x156>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f040 8095 	bne.w	8004e1e <audiod_control_complete+0x156>
  {
    uint8_t func_id;

    switch (p_request->bmRequestType_bit.recipient)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d002      	beq.n	8004d08 <audiod_control_complete+0x40>
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d057      	beq.n	8004db6 <audiod_control_complete+0xee>
 8004d06:	e07f      	b.n	8004e08 <audiod_control_complete+0x140>
    {
      case TUSB_REQ_RCPT_INTERFACE:
      {
        uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	889b      	ldrh	r3, [r3, #4]
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	75bb      	strb	r3, [r7, #22]
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	889b      	ldrh	r3, [r3, #4]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	0a1b      	lsrs	r3, r3, #8
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	757b      	strb	r3, [r7, #21]

        if (entityID != 0)
 8004d1c:	7d7b      	ldrb	r3, [r7, #21]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d024      	beq.n	8004d6c <audiod_control_complete+0xa4>
        {
          if (tud_audio_set_req_entity_cb)
 8004d22:	4b41      	ldr	r3, [pc, #260]	; (8004e28 <audiod_control_complete+0x160>)
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01f      	beq.n	8004d68 <audiod_control_complete+0xa0>
          {
            // Check if entity is present and get corresponding driver index
            TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8004d28:	f107 020f 	add.w	r2, r7, #15
 8004d2c:	7d79      	ldrb	r1, [r7, #21]
 8004d2e:	7dbb      	ldrb	r3, [r7, #22]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fb57 	bl	80053e4 <audiod_verify_entity_exists>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f083 0301 	eor.w	r3, r3, #1
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <audiod_control_complete+0x7e>
 8004d42:	2300      	movs	r3, #0
 8004d44:	e06c      	b.n	8004e20 <audiod_control_complete+0x158>

            // Invoke callback
            return tud_audio_set_req_entity_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4a38      	ldr	r2, [pc, #224]	; (8004e2c <audiod_control_complete+0x164>)
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	1a5b      	subs	r3, r3, r1
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	4413      	add	r3, r2
 8004d56:	3314      	adds	r3, #20
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	79fb      	ldrb	r3, [r7, #7]
 8004d5c:	6839      	ldr	r1, [r7, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fb fd2b 	bl	80007ba <tud_audio_set_req_entity_cb>
 8004d64:	4603      	mov	r3, r0
 8004d66:	e05b      	b.n	8004e20 <audiod_control_complete+0x158>
          }
          else
          {
            TU_LOG2("  No entity set request callback available!\r\n");
            return false;     // In case no callback function is present or request can not be conducted we stall it
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e059      	b.n	8004e20 <audiod_control_complete+0x158>
          }
        }
        else
        {
          if (tud_audio_set_req_itf_cb)
 8004d6c:	4b30      	ldr	r3, [pc, #192]	; (8004e30 <audiod_control_complete+0x168>)
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d01f      	beq.n	8004db2 <audiod_control_complete+0xea>
          {
            // Find index of audio driver structure and verify interface really exists
            TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 8004d72:	f107 020f 	add.w	r2, r7, #15
 8004d76:	7dbb      	ldrb	r3, [r7, #22]
 8004d78:	4611      	mov	r1, r2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fbaa 	bl	80054d4 <audiod_verify_itf_exists>
 8004d80:	4603      	mov	r3, r0
 8004d82:	f083 0301 	eor.w	r3, r3, #1
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <audiod_control_complete+0xc8>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	e047      	b.n	8004e20 <audiod_control_complete+0x158>

            // Invoke callback
            return tud_audio_set_req_itf_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	4619      	mov	r1, r3
 8004d94:	4a25      	ldr	r2, [pc, #148]	; (8004e2c <audiod_control_complete+0x164>)
 8004d96:	460b      	mov	r3, r1
 8004d98:	00db      	lsls	r3, r3, #3
 8004d9a:	1a5b      	subs	r3, r3, r1
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	4413      	add	r3, r2
 8004da0:	3314      	adds	r3, #20
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	79fb      	ldrb	r3, [r7, #7]
 8004da6:	6839      	ldr	r1, [r7, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f3af 8000 	nop.w
 8004dae:	4603      	mov	r3, r0
 8004db0:	e036      	b.n	8004e20 <audiod_control_complete+0x158>
          }
          else
          {
            TU_LOG2("  No interface set request callback available!\r\n");
            return false;     // In case no callback function is present or request can not be conducted we stall it
 8004db2:	2300      	movs	r3, #0
 8004db4:	e034      	b.n	8004e20 <audiod_control_complete+0x158>
      }
      break;

      case TUSB_REQ_RCPT_ENDPOINT:
      {
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	889b      	ldrh	r3, [r3, #4]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	75fb      	strb	r3, [r7, #23]

        if (tud_audio_set_req_ep_cb)
 8004dbe:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <audiod_control_complete+0x16c>)
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d01f      	beq.n	8004e04 <audiod_control_complete+0x13c>
        {
          // Check if entity is present and get corresponding driver index
          TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8004dc4:	f107 020f 	add.w	r2, r7, #15
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
 8004dca:	4611      	mov	r1, r2
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 fbeb 	bl	80055a8 <audiod_verify_ep_exists>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	f083 0301 	eor.w	r3, r3, #1
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <audiod_control_complete+0x11a>
 8004dde:	2300      	movs	r3, #0
 8004de0:	e01e      	b.n	8004e20 <audiod_control_complete+0x158>

          // Invoke callback
          return tud_audio_set_req_ep_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	4619      	mov	r1, r3
 8004de6:	4a11      	ldr	r2, [pc, #68]	; (8004e2c <audiod_control_complete+0x164>)
 8004de8:	460b      	mov	r3, r1
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	1a5b      	subs	r3, r3, r1
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	4413      	add	r3, r2
 8004df2:	3314      	adds	r3, #20
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	79fb      	ldrb	r3, [r7, #7]
 8004df8:	6839      	ldr	r1, [r7, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f3af 8000 	nop.w
 8004e00:	4603      	mov	r3, r0
 8004e02:	e00d      	b.n	8004e20 <audiod_control_complete+0x158>
        }
        else
        {
          TU_LOG2("  No EP set request callback available!\r\n");
          return false;   // In case no callback function is present or request can not be conducted we stall it
 8004e04:	2300      	movs	r3, #0
 8004e06:	e00b      	b.n	8004e20 <audiod_control_complete+0x158>
        }
      }
      break;
      // Unknown/Unsupported recipient
      default: TU_BREAKPOINT(); return false;
 8004e08:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <audiod_control_complete+0x170>)
 8004e0a:	613b      	str	r3, [r7, #16]
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d000      	beq.n	8004e1a <audiod_control_complete+0x152>
 8004e18:	be00      	bkpt	0x0000
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e000      	b.n	8004e20 <audiod_control_complete+0x158>
    }
  }
  return true;
 8004e1e:	2301      	movs	r3, #1
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	080007bb 	.word	0x080007bb
 8004e2c:	24001840 	.word	0x24001840
	...
 8004e38:	e000edf0 	.word	0xe000edf0

08004e3c <audiod_control_request>:

// Handle class control request
// return false to stall control endpoint (e.g unsupported request)
static bool audiod_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b088      	sub	sp, #32
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	4603      	mov	r3, r0
 8004e44:	6039      	str	r1, [r7, #0]
 8004e46:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  // Handle standard requests - standard set requests usually have no data stage so we also handle set requests here
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d11f      	bne.n	8004e96 <audiod_control_request+0x5a>
  {
    switch (p_request->bRequest)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	785b      	ldrb	r3, [r3, #1]
 8004e5a:	2b0a      	cmp	r3, #10
 8004e5c:	d002      	beq.n	8004e64 <audiod_control_request+0x28>
 8004e5e:	2b0b      	cmp	r3, #11
 8004e60:	d007      	beq.n	8004e72 <audiod_control_request+0x36>
 8004e62:	e00d      	b.n	8004e80 <audiod_control_request+0x44>
    {
      case TUSB_REQ_GET_INTERFACE:
        return audiod_get_interface(rhport, p_request);
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	6839      	ldr	r1, [r7, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff fd59 	bl	8004920 <audiod_get_interface>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	e0d5      	b.n	800501e <audiod_control_request+0x1e2>

      case TUSB_REQ_SET_INTERFACE:
        return audiod_set_interface(rhport, p_request);
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	6839      	ldr	r1, [r7, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff fd90 	bl	800499c <audiod_set_interface>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	e0ce      	b.n	800501e <audiod_control_request+0x1e2>

        // Unknown/Unsupported request
      default: TU_BREAKPOINT(); return false;
 8004e80:	4b69      	ldr	r3, [pc, #420]	; (8005028 <audiod_control_request+0x1ec>)
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d000      	beq.n	8004e92 <audiod_control_request+0x56>
 8004e90:	be00      	bkpt	0x0000
 8004e92:	2300      	movs	r3, #0
 8004e94:	e0c3      	b.n	800501e <audiod_control_request+0x1e2>
    }
  }

  // Handle class requests
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	f040 80b2 	bne.w	800500a <audiod_control_request+0x1ce>
  {
    uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	889b      	ldrh	r3, [r3, #4]
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	76fb      	strb	r3, [r7, #27]
    uint8_t func_id;

    // Conduct checks which depend on the recipient
    switch (p_request->bmRequestType_bit.recipient)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d002      	beq.n	8004ec2 <audiod_control_request+0x86>
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d04d      	beq.n	8004f5c <audiod_control_request+0x120>
 8004ec0:	e072      	b.n	8004fa8 <audiod_control_request+0x16c>
    {
      case TUSB_REQ_RCPT_INTERFACE:
      {
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	889b      	ldrh	r3, [r3, #4]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	0a1b      	lsrs	r3, r3, #8
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	767b      	strb	r3, [r7, #25]

        // Verify if entity is present
        if (entityID != 0)
 8004ece:	7e7b      	ldrb	r3, [r7, #25]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d021      	beq.n	8004f18 <audiod_control_request+0xdc>
        {
          // Find index of audio driver structure and verify entity really exists
          TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8004ed4:	f107 020f 	add.w	r2, r7, #15
 8004ed8:	7e79      	ldrb	r1, [r7, #25]
 8004eda:	7efb      	ldrb	r3, [r7, #27]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 fa81 	bl	80053e4 <audiod_verify_entity_exists>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f083 0301 	eor.w	r3, r3, #1
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <audiod_control_request+0xb6>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e095      	b.n	800501e <audiod_control_request+0x1e2>

          // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d05e      	beq.n	8004fbe <audiod_control_request+0x182>
          {
            if (tud_audio_get_req_entity_cb)
 8004f00:	4b4a      	ldr	r3, [pc, #296]	; (800502c <audiod_control_request+0x1f0>)
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d006      	beq.n	8004f14 <audiod_control_request+0xd8>
            {
              return tud_audio_get_req_entity_cb(rhport, p_request);
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	6839      	ldr	r1, [r7, #0]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fb fc32 	bl	8000774 <tud_audio_get_req_entity_cb>
 8004f10:	4603      	mov	r3, r0
 8004f12:	e084      	b.n	800501e <audiod_control_request+0x1e2>
            }
            else
            {
              TU_LOG2("  No entity get request callback available!\r\n");
              return false;   // Stall
 8004f14:	2300      	movs	r3, #0
 8004f16:	e082      	b.n	800501e <audiod_control_request+0x1e2>
          }
        }
        else
        {
          // Find index of audio driver structure and verify interface really exists
          TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 8004f18:	f107 020f 	add.w	r2, r7, #15
 8004f1c:	7efb      	ldrb	r3, [r7, #27]
 8004f1e:	4611      	mov	r1, r2
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fad7 	bl	80054d4 <audiod_verify_itf_exists>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f083 0301 	eor.w	r3, r3, #1
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <audiod_control_request+0xfa>
 8004f32:	2300      	movs	r3, #0
 8004f34:	e073      	b.n	800501e <audiod_control_request+0x1e2>

          // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d03c      	beq.n	8004fbe <audiod_control_request+0x182>
          {
            if (tud_audio_get_req_itf_cb)
 8004f44:	4b3a      	ldr	r3, [pc, #232]	; (8005030 <audiod_control_request+0x1f4>)
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d006      	beq.n	8004f58 <audiod_control_request+0x11c>
            {
              return tud_audio_get_req_itf_cb(rhport, p_request);
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	6839      	ldr	r1, [r7, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f3af 8000 	nop.w
 8004f54:	4603      	mov	r3, r0
 8004f56:	e062      	b.n	800501e <audiod_control_request+0x1e2>
            }
            else
            {
              TU_LOG2("  No interface get request callback available!\r\n");
              return false;   // Stall
 8004f58:	2300      	movs	r3, #0
 8004f5a:	e060      	b.n	800501e <audiod_control_request+0x1e2>
      }
      break;

      case TUSB_REQ_RCPT_ENDPOINT:
      {
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	889b      	ldrh	r3, [r3, #4]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	76bb      	strb	r3, [r7, #26]

        // Find index of audio driver structure and verify EP really exists
        TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8004f64:	f107 020f 	add.w	r2, r7, #15
 8004f68:	7ebb      	ldrb	r3, [r7, #26]
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fb1b 	bl	80055a8 <audiod_verify_ep_exists>
 8004f72:	4603      	mov	r3, r0
 8004f74:	f083 0301 	eor.w	r3, r3, #1
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <audiod_control_request+0x146>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e04d      	b.n	800501e <audiod_control_request+0x1e2>

        // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
        if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d018      	beq.n	8004fc2 <audiod_control_request+0x186>
        {
          if (tud_audio_get_req_ep_cb)
 8004f90:	4b28      	ldr	r3, [pc, #160]	; (8005034 <audiod_control_request+0x1f8>)
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d006      	beq.n	8004fa4 <audiod_control_request+0x168>
          {
            return tud_audio_get_req_ep_cb(rhport, p_request);
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	6839      	ldr	r1, [r7, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f3af 8000 	nop.w
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	e03c      	b.n	800501e <audiod_control_request+0x1e2>
          }
          else
          {
            TU_LOG2("  No EP get request callback available!\r\n");
            return false;     // Stall
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e03a      	b.n	800501e <audiod_control_request+0x1e2>
        }
      }
      break;

      // Unknown/Unsupported recipient
      default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 8004fa8:	4b1f      	ldr	r3, [pc, #124]	; (8005028 <audiod_control_request+0x1ec>)
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d000      	beq.n	8004fba <audiod_control_request+0x17e>
 8004fb8:	be00      	bkpt	0x0000
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e02f      	b.n	800501e <audiod_control_request+0x1e2>
      break;
 8004fbe:	bf00      	nop
 8004fc0:	e000      	b.n	8004fc4 <audiod_control_request+0x188>
      break;
 8004fc2:	bf00      	nop
    }

    // If we end here, the received request is a set request - we schedule a receive for the data stage and return true here. We handle the rest later in audiod_control_complete() once the data stage was finished
    TU_VERIFY(tud_control_xfer(rhport, p_request, _audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz));
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4a1b      	ldr	r2, [pc, #108]	; (8005038 <audiod_control_request+0x1fc>)
 8004fca:	460b      	mov	r3, r1
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	1a5b      	subs	r3, r3, r1
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	4413      	add	r3, r2
 8004fd4:	3314      	adds	r3, #20
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	4916      	ldr	r1, [pc, #88]	; (8005038 <audiod_control_request+0x1fc>)
 8004fde:	4603      	mov	r3, r0
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	1a1b      	subs	r3, r3, r0
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	440b      	add	r3, r1
 8004fe8:	3318      	adds	r3, #24
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	79f8      	ldrb	r0, [r7, #7]
 8004ff0:	6839      	ldr	r1, [r7, #0]
 8004ff2:	f003 faef 	bl	80085d4 <tud_control_xfer>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	f083 0301 	eor.w	r3, r3, #1
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <audiod_control_request+0x1ca>
 8005002:	2300      	movs	r3, #0
 8005004:	e00b      	b.n	800501e <audiod_control_request+0x1e2>
    return true;
 8005006:	2301      	movs	r3, #1
 8005008:	e009      	b.n	800501e <audiod_control_request+0x1e2>
  }

  // There went something wrong - unsupported control request type
  TU_BREAKPOINT();
 800500a:	4b07      	ldr	r3, [pc, #28]	; (8005028 <audiod_control_request+0x1ec>)
 800500c:	61fb      	str	r3, [r7, #28]
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d000      	beq.n	800501c <audiod_control_request+0x1e0>
 800501a:	be00      	bkpt	0x0000
  return false;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3720      	adds	r7, #32
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	e000edf0 	.word	0xe000edf0
 800502c:	08000775 	.word	0x08000775
	...
 8005038:	24001840 	.word	0x24001840

0800503c <audiod_control_xfer_cb>:

bool audiod_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	4603      	mov	r3, r0
 8005044:	603a      	str	r2, [r7, #0]
 8005046:	71fb      	strb	r3, [r7, #7]
 8005048:	460b      	mov	r3, r1
 800504a:	71bb      	strb	r3, [r7, #6]
  if ( stage == CONTROL_STAGE_SETUP )
 800504c:	79bb      	ldrb	r3, [r7, #6]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d106      	bne.n	8005060 <audiod_control_xfer_cb+0x24>
  {
    return audiod_control_request(rhport, request);
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	6839      	ldr	r1, [r7, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff fef0 	bl	8004e3c <audiod_control_request>
 800505c:	4603      	mov	r3, r0
 800505e:	e00a      	b.n	8005076 <audiod_control_xfer_cb+0x3a>
  }
  else if ( stage == CONTROL_STAGE_DATA )
 8005060:	79bb      	ldrb	r3, [r7, #6]
 8005062:	2b02      	cmp	r3, #2
 8005064:	d106      	bne.n	8005074 <audiod_control_xfer_cb+0x38>
  {
    return audiod_control_complete(rhport, request);
 8005066:	79fb      	ldrb	r3, [r7, #7]
 8005068:	6839      	ldr	r1, [r7, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff fe2c 	bl	8004cc8 <audiod_control_complete>
 8005070:	4603      	mov	r3, r0
 8005072:	e000      	b.n	8005076 <audiod_control_xfer_cb+0x3a>
  }

  return true;
 8005074:	2301      	movs	r3, #1
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <audiod_xfer_cb>:

bool audiod_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	4603      	mov	r3, r0
 800508a:	71fb      	strb	r3, [r7, #7]
 800508c:	460b      	mov	r3, r1
 800508e:	71bb      	strb	r3, [r7, #6]
 8005090:	4613      	mov	r3, r2
 8005092:	717b      	strb	r3, [r7, #5]
  (void) result;
  (void) xferred_bytes;

  // Search for interface belonging to given end point address and proceed as required
  for (uint8_t func_id = 0; func_id < CFG_TUD_AUDIO; func_id++)
 8005094:	2300      	movs	r3, #0
 8005096:	73fb      	strb	r3, [r7, #15]
 8005098:	e038      	b.n	800510c <audiod_xfer_cb+0x8c>
  {
    audiod_function_t* audio = &_audiod_fct[func_id];
 800509a:	7bfa      	ldrb	r2, [r7, #15]
 800509c:	4613      	mov	r3, r2
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	4a1d      	ldr	r2, [pc, #116]	; (800511c <audiod_xfer_cb+0x9c>)
 80050a6:	4413      	add	r3, r2
 80050a8:	60bb      	str	r3, [r7, #8]
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_IN

    // Data transmission of audio packet finished
    if (audio->ep_in == ep_addr && audio->alt_setting != 0)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	7a1b      	ldrb	r3, [r3, #8]
 80050ae:	79ba      	ldrb	r2, [r7, #6]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d112      	bne.n	80050da <audiod_xfer_cb+0x5a>
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00e      	beq.n	80050da <audiod_xfer_cb+0x5a>
      // Check if there is data to load into EPs buffer - if not load it with ZLP
      // Be aware - we as a device are not able to know if the host polls for data with a faster rate as we stated this in the descriptors. Therefore we always have to put something into the EPs buffer. However, once we did that, there is no way of aborting this or replacing what we put into the buffer before!
      // This is the only place where we can fill something into the EPs buffer!

      // Load new data
      TU_VERIFY(audiod_tx_done_cb(rhport, audio));
 80050bc:	79fb      	ldrb	r3, [r7, #7]
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff faa7 	bl	8004614 <audiod_tx_done_cb>
 80050c6:	4603      	mov	r3, r0
 80050c8:	f083 0301 	eor.w	r3, r3, #1
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <audiod_xfer_cb+0x56>
 80050d2:	2300      	movs	r3, #0
 80050d4:	e01e      	b.n	8005114 <audiod_xfer_cb+0x94>

      // Transmission of ZLP is done by audiod_tx_done_cb()
      return true;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e01c      	b.n	8005114 <audiod_xfer_cb+0x94>
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_OUT

    // New audio packet received
    if (audio->ep_out == ep_addr)
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	7b5b      	ldrb	r3, [r3, #13]
 80050de:	79ba      	ldrb	r2, [r7, #6]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d110      	bne.n	8005106 <audiod_xfer_cb+0x86>
    {
      TU_VERIFY(audiod_rx_done_cb(rhport, audio, (uint16_t) xferred_bytes));
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	79fb      	ldrb	r3, [r7, #7]
 80050ea:	68b9      	ldr	r1, [r7, #8]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff f9ed 	bl	80044cc <audiod_rx_done_cb>
 80050f2:	4603      	mov	r3, r0
 80050f4:	f083 0301 	eor.w	r3, r3, #1
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <audiod_xfer_cb+0x82>
 80050fe:	2300      	movs	r3, #0
 8005100:	e008      	b.n	8005114 <audiod_xfer_cb+0x94>
      return true;
 8005102:	2301      	movs	r3, #1
 8005104:	e006      	b.n	8005114 <audiod_xfer_cb+0x94>
  for (uint8_t func_id = 0; func_id < CFG_TUD_AUDIO; func_id++)
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	3301      	adds	r3, #1
 800510a:	73fb      	strb	r3, [r7, #15]
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0c3      	beq.n	800509a <audiod_xfer_cb+0x1a>
    }
#endif
#endif
  }

  return false;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	24001840 	.word	0x24001840

08005120 <audiod_sof_isr>:
  return feedback;
}
#endif

TU_ATTR_FAST_FUNC void audiod_sof_isr (uint8_t rhport, uint32_t frame_count)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	4603      	mov	r3, r0
 8005128:	6039      	str	r1, [r7, #0]
 800512a:	71fb      	strb	r3, [r7, #7]
        if(tud_audio_feedback_interval_isr) tud_audio_feedback_interval_isr(i, frame_count, audio->feedback.frame_shift);
      }
    }
  }
#endif // CFG_TUD_AUDIO_ENABLE_EP_OUT && CFG_TUD_AUDIO_ENABLE_FEEDBACK_EP
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <tud_audio_buffer_and_schedule_control_xfer>:

bool tud_audio_buffer_and_schedule_control_xfer(uint8_t rhport, tusb_control_request_t const * p_request, void* data, uint16_t len)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08c      	sub	sp, #48	; 0x30
 800513c:	af00      	add	r7, sp, #0
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	607a      	str	r2, [r7, #4]
 8005142:	461a      	mov	r2, r3
 8005144:	4603      	mov	r3, r0
 8005146:	73fb      	strb	r3, [r7, #15]
 8005148:	4613      	mov	r3, r2
 800514a:	81bb      	strh	r3, [r7, #12]
  // Handles only sending of data not receiving
  if (p_request->bmRequestType_bit.direction == TUSB_DIR_OUT) return false;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <tud_audio_buffer_and_schedule_control_xfer+0x26>
 800515a:	2300      	movs	r3, #0
 800515c:	e0b2      	b.n	80052c4 <tud_audio_buffer_and_schedule_control_xfer+0x18c>

  // Get corresponding driver index
  uint8_t func_id;
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	889b      	ldrh	r3, [r3, #4]
 8005162:	b29b      	uxth	r3, r3
 8005164:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  // Conduct checks which depend on the recipient
  switch (p_request->bmRequestType_bit.recipient)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b01      	cmp	r3, #1
 8005174:	d002      	beq.n	800517c <tud_audio_buffer_and_schedule_control_xfer+0x44>
 8005176:	2b02      	cmp	r3, #2
 8005178:	d02c      	beq.n	80051d4 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 800517a:	e040      	b.n	80051fe <tud_audio_buffer_and_schedule_control_xfer+0xc6>
  {
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	889b      	ldrh	r3, [r3, #4]
 8005180:	b29b      	uxth	r3, r3
 8005182:	0a1b      	lsrs	r3, r3, #8
 8005184:	b29b      	uxth	r3, r3
 8005186:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

      // Verify if entity is present
      if (entityID != 0)
 800518a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800518e:	2b00      	cmp	r3, #0
 8005190:	d010      	beq.n	80051b4 <tud_audio_buffer_and_schedule_control_xfer+0x7c>
      {
        // Find index of audio driver structure and verify entity really exists
        TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8005192:	f107 0217 	add.w	r2, r7, #23
 8005196:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800519a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 f920 	bl	80053e4 <audiod_verify_entity_exists>
 80051a4:	4603      	mov	r3, r0
 80051a6:	f083 0301 	eor.w	r3, r3, #1
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d031      	beq.n	8005214 <tud_audio_buffer_and_schedule_control_xfer+0xdc>
 80051b0:	2300      	movs	r3, #0
 80051b2:	e087      	b.n	80052c4 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
      }
      else
      {
        // Find index of audio driver structure and verify interface really exists
        TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 80051b4:	f107 0217 	add.w	r2, r7, #23
 80051b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051bc:	4611      	mov	r1, r2
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 f988 	bl	80054d4 <audiod_verify_itf_exists>
 80051c4:	4603      	mov	r3, r0
 80051c6:	f083 0301 	eor.w	r3, r3, #1
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d021      	beq.n	8005214 <tud_audio_buffer_and_schedule_control_xfer+0xdc>
 80051d0:	2300      	movs	r3, #0
 80051d2:	e077      	b.n	80052c4 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
    }
    break;

    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t ep = TU_U16_LOW(p_request->wIndex);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	889b      	ldrh	r3, [r3, #4]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

      // Find index of audio driver structure and verify EP really exists
      TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 80051de:	f107 0217 	add.w	r2, r7, #23
 80051e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80051e6:	4611      	mov	r1, r2
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 f9dd 	bl	80055a8 <audiod_verify_ep_exists>
 80051ee:	4603      	mov	r3, r0
 80051f0:	f083 0301 	eor.w	r3, r3, #1
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00e      	beq.n	8005218 <tud_audio_buffer_and_schedule_control_xfer+0xe0>
 80051fa:	2300      	movs	r3, #0
 80051fc:	e062      	b.n	80052c4 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
    }
    break;

    // Unknown/Unsupported recipient
    default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 80051fe:	4b33      	ldr	r3, [pc, #204]	; (80052cc <tud_audio_buffer_and_schedule_control_xfer+0x194>)
 8005200:	62bb      	str	r3, [r7, #40]	; 0x28
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d000      	beq.n	8005210 <tud_audio_buffer_and_schedule_control_xfer+0xd8>
 800520e:	be00      	bkpt	0x0000
 8005210:	2300      	movs	r3, #0
 8005212:	e057      	b.n	80052c4 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
    break;
 8005214:	bf00      	nop
 8005216:	e000      	b.n	800521a <tud_audio_buffer_and_schedule_control_xfer+0xe2>
    break;
 8005218:	bf00      	nop
  }

  // Crop length
  if (len > _audiod_fct[func_id].ctrl_buf_sz) len = _audiod_fct[func_id].ctrl_buf_sz;
 800521a:	7dfb      	ldrb	r3, [r7, #23]
 800521c:	4619      	mov	r1, r3
 800521e:	4a2c      	ldr	r2, [pc, #176]	; (80052d0 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 8005220:	460b      	mov	r3, r1
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	1a5b      	subs	r3, r3, r1
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	4413      	add	r3, r2
 800522a:	3318      	adds	r3, #24
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	b29b      	uxth	r3, r3
 8005230:	89ba      	ldrh	r2, [r7, #12]
 8005232:	429a      	cmp	r2, r3
 8005234:	d90a      	bls.n	800524c <tud_audio_buffer_and_schedule_control_xfer+0x114>
 8005236:	7dfb      	ldrb	r3, [r7, #23]
 8005238:	4619      	mov	r1, r3
 800523a:	4a25      	ldr	r2, [pc, #148]	; (80052d0 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 800523c:	460b      	mov	r3, r1
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	1a5b      	subs	r3, r3, r1
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	4413      	add	r3, r2
 8005246:	3318      	adds	r3, #24
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	81bb      	strh	r3, [r7, #12]

  // Copy into buffer
  TU_VERIFY(0 == tu_memcpy_s(_audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz, data, (size_t)len));
 800524c:	7dfb      	ldrb	r3, [r7, #23]
 800524e:	4619      	mov	r1, r3
 8005250:	4a1f      	ldr	r2, [pc, #124]	; (80052d0 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 8005252:	460b      	mov	r3, r1
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	1a5b      	subs	r3, r3, r1
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	4413      	add	r3, r2
 800525c:	3314      	adds	r3, #20
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	7dfb      	ldrb	r3, [r7, #23]
 8005262:	4618      	mov	r0, r3
 8005264:	491a      	ldr	r1, [pc, #104]	; (80052d0 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 8005266:	4603      	mov	r3, r0
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	1a1b      	subs	r3, r3, r0
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	440b      	add	r3, r1
 8005270:	3318      	adds	r3, #24
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	4619      	mov	r1, r3
 8005276:	89bb      	ldrh	r3, [r7, #12]
 8005278:	627a      	str	r2, [r7, #36]	; 0x24
 800527a:	6239      	str	r1, [r7, #32]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	61fa      	str	r2, [r7, #28]
 8005280:	61bb      	str	r3, [r7, #24]
  if (count > destsz) {
 8005282:	6a3a      	ldr	r2, [r7, #32]
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	429a      	cmp	r2, r3
 8005288:	d202      	bcs.n	8005290 <tud_audio_buffer_and_schedule_control_xfer+0x158>
    return -1;
 800528a:	f04f 33ff 	mov.w	r3, #4294967295
 800528e:	e005      	b.n	800529c <tud_audio_buffer_and_schedule_control_xfer+0x164>
  memcpy(dest, src, count);
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	69f9      	ldr	r1, [r7, #28]
 8005294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005296:	f005 f84d 	bl	800a334 <memcpy>
  return 0;
 800529a:	2300      	movs	r3, #0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <tud_audio_buffer_and_schedule_control_xfer+0x16c>
 80052a0:	2300      	movs	r3, #0
 80052a2:	e00f      	b.n	80052c4 <tud_audio_buffer_and_schedule_control_xfer+0x18c>

  // Schedule transmit
  return tud_control_xfer(rhport, p_request, (void*)_audiod_fct[func_id].ctrl_buf, len);
 80052a4:	7dfb      	ldrb	r3, [r7, #23]
 80052a6:	4619      	mov	r1, r3
 80052a8:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 80052aa:	460b      	mov	r3, r1
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	1a5b      	subs	r3, r3, r1
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	4413      	add	r3, r2
 80052b4:	3314      	adds	r3, #20
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	89bb      	ldrh	r3, [r7, #12]
 80052ba:	7bf8      	ldrb	r0, [r7, #15]
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	f003 f989 	bl	80085d4 <tud_control_xfer>
 80052c2:	4603      	mov	r3, r0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3730      	adds	r7, #48	; 0x30
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	e000edf0 	.word	0xe000edf0
 80052d0:	24001840 	.word	0x24001840

080052d4 <audiod_get_AS_interface_index>:

// This helper function finds for a given audio function and AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index(uint8_t itf, audiod_function_t * audio, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b08d      	sub	sp, #52	; 0x34
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
 80052de:	603b      	str	r3, [r7, #0]
 80052e0:	4603      	mov	r3, r0
 80052e2:	73fb      	strb	r3, [r7, #15]
  if (audio->p_desc)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d048      	beq.n	800537e <audiod_get_AS_interface_index+0xaa>
  {
    // Get pointer at end
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	8a5b      	ldrh	r3, [r3, #18]
 80052f4:	3b08      	subs	r3, #8
 80052f6:	4413      	add	r3, r2
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24

    // Advance past AC descriptors
    uint8_t const *p_desc = tu_desc_next(audio->p_desc);
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	623b      	str	r3, [r7, #32]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	61fb      	str	r3, [r7, #28]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	461a      	mov	r2, r3
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	4413      	add	r3, r2
 800530e:	62fb      	str	r3, [r7, #44]	; 0x2c
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8005310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005312:	88db      	ldrh	r3, [r3, #6]
 8005314:	b29b      	uxth	r3, r3
 8005316:	461a      	mov	r2, r3
 8005318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531a:	4413      	add	r3, r2
 800531c:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint8_t tmp = 0;
 800531e:	2300      	movs	r3, #0
 8005320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    while (p_desc < p_desc_end)
 8005324:	e027      	b.n	8005376 <audiod_get_AS_interface_index+0xa2>
 8005326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005328:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	3301      	adds	r3, #1
 800532e:	781b      	ldrb	r3, [r3, #0]
    {
      // We assume the number of alternate settings is increasing thus we return the index of alternate setting zero!
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 8005330:	2b04      	cmp	r3, #4
 8005332:	d116      	bne.n	8005362 <audiod_get_AS_interface_index+0x8e>
 8005334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005336:	78db      	ldrb	r3, [r3, #3]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d112      	bne.n	8005362 <audiod_get_AS_interface_index+0x8e>
      {
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 800533c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533e:	789b      	ldrb	r3, [r3, #2]
 8005340:	7bfa      	ldrb	r2, [r7, #15]
 8005342:	429a      	cmp	r2, r3
 8005344:	d108      	bne.n	8005358 <audiod_get_AS_interface_index+0x84>
        {
          *idxItf = tmp;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800534c:	701a      	strb	r2, [r3, #0]
          *pp_desc_int = p_desc;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005352:	601a      	str	r2, [r3, #0]
          return true;
 8005354:	2301      	movs	r3, #1
 8005356:	e013      	b.n	8005380 <audiod_get_AS_interface_index+0xac>
        }
        // Increase index, bytes read, and pointer
        tmp++;
 8005358:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800535c:	3301      	adds	r3, #1
 800535e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005364:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	4413      	add	r3, r2
      }
      p_desc = tu_desc_next(p_desc);
 8005374:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p_desc < p_desc_end)
 8005376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	429a      	cmp	r2, r3
 800537c:	d3d3      	bcc.n	8005326 <audiod_get_AS_interface_index+0x52>
    }
  }
  return false;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3734      	adds	r7, #52	; 0x34
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <audiod_get_AS_interface_index_global>:

// This helper function finds for a given AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index_global(uint8_t itf, uint8_t *func_id, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60b9      	str	r1, [r7, #8]
 8005394:	607a      	str	r2, [r7, #4]
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	4603      	mov	r3, r0
 800539a:	73fb      	strb	r3, [r7, #15]
  // Loop over audio driver interfaces
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 800539c:	2300      	movs	r3, #0
 800539e:	75fb      	strb	r3, [r7, #23]
 80053a0:	e016      	b.n	80053d0 <audiod_get_AS_interface_index_global+0x44>
  {
    if (audiod_get_AS_interface_index(itf, &_audiod_fct[i], idxItf, pp_desc_int))
 80053a2:	7dfa      	ldrb	r2, [r7, #23]
 80053a4:	4613      	mov	r3, r2
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	4a0c      	ldr	r2, [pc, #48]	; (80053e0 <audiod_get_AS_interface_index_global+0x54>)
 80053ae:	1899      	adds	r1, r3, r2
 80053b0:	7bf8      	ldrb	r0, [r7, #15]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	f7ff ff8d 	bl	80052d4 <audiod_get_AS_interface_index>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d004      	beq.n	80053ca <audiod_get_AS_interface_index_global+0x3e>
    {
      *func_id = i;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	7dfa      	ldrb	r2, [r7, #23]
 80053c4:	701a      	strb	r2, [r3, #0]
      return true;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e006      	b.n	80053d8 <audiod_get_AS_interface_index_global+0x4c>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80053ca:	7dfb      	ldrb	r3, [r7, #23]
 80053cc:	3301      	adds	r3, #1
 80053ce:	75fb      	strb	r3, [r7, #23]
 80053d0:	7dfb      	ldrb	r3, [r7, #23]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0e5      	beq.n	80053a2 <audiod_get_AS_interface_index_global+0x16>
    }
  }

  return false;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	24001840 	.word	0x24001840

080053e4 <audiod_verify_entity_exists>:

// Verify an entity with the given ID exists and returns also the corresponding driver index
static bool audiod_verify_entity_exists(uint8_t itf, uint8_t entityID, uint8_t *func_id)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b08d      	sub	sp, #52	; 0x34
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	4603      	mov	r3, r0
 80053ec:	603a      	str	r2, [r7, #0]
 80053ee:	71fb      	strb	r3, [r7, #7]
 80053f0:	460b      	mov	r3, r1
 80053f2:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80053f4:	2300      	movs	r3, #0
 80053f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80053fa:	e05d      	b.n	80054b8 <audiod_verify_entity_exists+0xd4>
  {
    // Look for the correct driver by checking if the unique standard AC interface number fits
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 80053fc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005400:	4933      	ldr	r1, [pc, #204]	; (80054d0 <audiod_verify_entity_exists+0xec>)
 8005402:	4613      	mov	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	1a9b      	subs	r3, r3, r2
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	440b      	add	r3, r1
 800540c:	3304      	adds	r3, #4
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d04c      	beq.n	80054ae <audiod_verify_entity_exists+0xca>
 8005414:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005418:	492d      	ldr	r1, [pc, #180]	; (80054d0 <audiod_verify_entity_exists+0xec>)
 800541a:	4613      	mov	r3, r2
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	440b      	add	r3, r1
 8005424:	3304      	adds	r3, #4
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	789b      	ldrb	r3, [r3, #2]
 800542a:	79fa      	ldrb	r2, [r7, #7]
 800542c:	429a      	cmp	r2, r3
 800542e:	d13e      	bne.n	80054ae <audiod_verify_entity_exists+0xca>
    {
      // Get pointers after class specific AC descriptors and end of AC descriptors - entities are defined in between
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);                                          // Points to CS AC descriptor
 8005430:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005434:	4926      	ldr	r1, [pc, #152]	; (80054d0 <audiod_verify_entity_exists+0xec>)
 8005436:	4613      	mov	r3, r2
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	440b      	add	r3, r1
 8005440:	3304      	adds	r3, #4
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	461a      	mov	r2, r3
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	4413      	add	r3, r2
 8005454:	62bb      	str	r3, [r7, #40]	; 0x28
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	88db      	ldrh	r3, [r3, #6]
 800545a:	b29b      	uxth	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005460:	4413      	add	r3, r2
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
 8005464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005466:	623b      	str	r3, [r7, #32]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	61fb      	str	r3, [r7, #28]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	461a      	mov	r2, r3
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	4413      	add	r3, r2
      p_desc = tu_desc_next(p_desc);                                                                            // Get past CS AC descriptor
 8005476:	62bb      	str	r3, [r7, #40]	; 0x28

      while (p_desc < p_desc_end)
 8005478:	e015      	b.n	80054a6 <audiod_verify_entity_exists+0xc2>
      {
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 800547a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547c:	3303      	adds	r3, #3
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	79ba      	ldrb	r2, [r7, #6]
 8005482:	429a      	cmp	r2, r3
 8005484:	d105      	bne.n	8005492 <audiod_verify_entity_exists+0xae>
        {
          *func_id = i;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800548c:	701a      	strb	r2, [r3, #0]
          return true;
 800548e:	2301      	movs	r3, #1
 8005490:	e017      	b.n	80054c2 <audiod_verify_entity_exists+0xde>
 8005492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005494:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4413      	add	r3, r2
        }
        p_desc = tu_desc_next(p_desc);
 80054a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (p_desc < p_desc_end)
 80054a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d3e5      	bcc.n	800547a <audiod_verify_entity_exists+0x96>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80054ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054b2:	3301      	adds	r3, #1
 80054b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80054b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d09d      	beq.n	80053fc <audiod_verify_entity_exists+0x18>
      }
    }
  }
  return false;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3734      	adds	r7, #52	; 0x34
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	24001840 	.word	0x24001840

080054d4 <audiod_verify_itf_exists>:

static bool audiod_verify_itf_exists(uint8_t itf, uint8_t *func_id)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b089      	sub	sp, #36	; 0x24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	6039      	str	r1, [r7, #0]
 80054de:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80054e0:	2300      	movs	r3, #0
 80054e2:	77fb      	strb	r3, [r7, #31]
 80054e4:	e054      	b.n	8005590 <audiod_verify_itf_exists+0xbc>
  {
    if (_audiod_fct[i].p_desc)
 80054e6:	7ffa      	ldrb	r2, [r7, #31]
 80054e8:	492e      	ldr	r1, [pc, #184]	; (80055a4 <audiod_verify_itf_exists+0xd0>)
 80054ea:	4613      	mov	r3, r2
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	1a9b      	subs	r3, r3, r2
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	440b      	add	r3, r1
 80054f4:	3304      	adds	r3, #4
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d046      	beq.n	800558a <audiod_verify_itf_exists+0xb6>
    {
      // Get pointer at beginning and end
      uint8_t const *p_desc = _audiod_fct[i].p_desc;
 80054fc:	7ffa      	ldrb	r2, [r7, #31]
 80054fe:	4929      	ldr	r1, [pc, #164]	; (80055a4 <audiod_verify_itf_exists+0xd0>)
 8005500:	4613      	mov	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	1a9b      	subs	r3, r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	440b      	add	r3, r1
 800550a:	3304      	adds	r3, #4
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	61bb      	str	r3, [r7, #24]
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8005510:	7ffa      	ldrb	r2, [r7, #31]
 8005512:	4924      	ldr	r1, [pc, #144]	; (80055a4 <audiod_verify_itf_exists+0xd0>)
 8005514:	4613      	mov	r3, r2
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	440b      	add	r3, r1
 800551e:	3304      	adds	r3, #4
 8005520:	6819      	ldr	r1, [r3, #0]
 8005522:	7ffa      	ldrb	r2, [r7, #31]
 8005524:	481f      	ldr	r0, [pc, #124]	; (80055a4 <audiod_verify_itf_exists+0xd0>)
 8005526:	4613      	mov	r3, r2
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	1a9b      	subs	r3, r3, r2
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	4403      	add	r3, r0
 8005530:	3312      	adds	r3, #18
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	3b08      	subs	r3, #8
 8005536:	440b      	add	r3, r1
 8005538:	617b      	str	r3, [r7, #20]

      while (p_desc < p_desc_end)
 800553a:	e022      	b.n	8005582 <audiod_verify_itf_exists+0xae>
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	3301      	adds	r3, #1
 8005544:	781b      	ldrb	r3, [r3, #0]
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8005546:	2b04      	cmp	r3, #4
 8005548:	d111      	bne.n	800556e <audiod_verify_itf_exists+0x9a>
 800554a:	7ffa      	ldrb	r2, [r7, #31]
 800554c:	4915      	ldr	r1, [pc, #84]	; (80055a4 <audiod_verify_itf_exists+0xd0>)
 800554e:	4613      	mov	r3, r2
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	1a9b      	subs	r3, r3, r2
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	440b      	add	r3, r1
 8005558:	3304      	adds	r3, #4
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	789b      	ldrb	r3, [r3, #2]
 800555e:	79fa      	ldrb	r2, [r7, #7]
 8005560:	429a      	cmp	r2, r3
 8005562:	d104      	bne.n	800556e <audiod_verify_itf_exists+0x9a>
        {
          *func_id = i;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	7ffa      	ldrb	r2, [r7, #31]
 8005568:	701a      	strb	r2, [r3, #0]
          return true;
 800556a:	2301      	movs	r3, #1
 800556c:	e014      	b.n	8005598 <audiod_verify_itf_exists+0xc4>
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	60fb      	str	r3, [r7, #12]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	60bb      	str	r3, [r7, #8]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4413      	add	r3, r2
        }
        p_desc = tu_desc_next(p_desc);
 8005580:	61bb      	str	r3, [r7, #24]
      while (p_desc < p_desc_end)
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	429a      	cmp	r2, r3
 8005588:	d3d8      	bcc.n	800553c <audiod_verify_itf_exists+0x68>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 800558a:	7ffb      	ldrb	r3, [r7, #31]
 800558c:	3301      	adds	r3, #1
 800558e:	77fb      	strb	r3, [r7, #31]
 8005590:	7ffb      	ldrb	r3, [r7, #31]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0a7      	beq.n	80054e6 <audiod_verify_itf_exists+0x12>
      }
    }
  }
  return false;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3724      	adds	r7, #36	; 0x24
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	24001840 	.word	0x24001840

080055a8 <audiod_verify_ep_exists>:

static bool audiod_verify_ep_exists(uint8_t ep, uint8_t *func_id)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b08b      	sub	sp, #44	; 0x2c
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	4603      	mov	r3, r0
 80055b0:	6039      	str	r1, [r7, #0]
 80055b2:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80055ba:	e061      	b.n	8005680 <audiod_verify_ep_exists+0xd8>
  {
    if (_audiod_fct[i].p_desc)
 80055bc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80055c0:	4935      	ldr	r1, [pc, #212]	; (8005698 <audiod_verify_ep_exists+0xf0>)
 80055c2:	4613      	mov	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	1a9b      	subs	r3, r3, r2
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	440b      	add	r3, r1
 80055cc:	3304      	adds	r3, #4
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d050      	beq.n	8005676 <audiod_verify_ep_exists+0xce>
    {
      // Get pointer at end
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 80055d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80055d8:	492f      	ldr	r1, [pc, #188]	; (8005698 <audiod_verify_ep_exists+0xf0>)
 80055da:	4613      	mov	r3, r2
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	440b      	add	r3, r1
 80055e4:	3304      	adds	r3, #4
 80055e6:	6819      	ldr	r1, [r3, #0]
 80055e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80055ec:	482a      	ldr	r0, [pc, #168]	; (8005698 <audiod_verify_ep_exists+0xf0>)
 80055ee:	4613      	mov	r3, r2
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	1a9b      	subs	r3, r3, r2
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	4403      	add	r3, r0
 80055f8:	3312      	adds	r3, #18
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	440b      	add	r3, r1
 80055fe:	61fb      	str	r3, [r7, #28]

      // Advance past AC descriptors - EP we look for are streaming EPs
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);
 8005600:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005604:	4924      	ldr	r1, [pc, #144]	; (8005698 <audiod_verify_ep_exists+0xf0>)
 8005606:	4613      	mov	r3, r2
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	440b      	add	r3, r1
 8005610:	3304      	adds	r3, #4
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	4413      	add	r3, r2
 8005624:	623b      	str	r3, [r7, #32]
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	88db      	ldrh	r3, [r3, #6]
 800562a:	b29b      	uxth	r3, r3
 800562c:	461a      	mov	r2, r3
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	4413      	add	r3, r2
 8005632:	623b      	str	r3, [r7, #32]

      while (p_desc < p_desc_end)
 8005634:	e01b      	b.n	800566e <audiod_verify_ep_exists+0xc6>
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	3301      	adds	r3, #1
 800563e:	781b      	ldrb	r3, [r3, #0]
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 8005640:	2b05      	cmp	r3, #5
 8005642:	d10a      	bne.n	800565a <audiod_verify_ep_exists+0xb2>
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	789b      	ldrb	r3, [r3, #2]
 8005648:	79fa      	ldrb	r2, [r7, #7]
 800564a:	429a      	cmp	r2, r3
 800564c:	d105      	bne.n	800565a <audiod_verify_ep_exists+0xb2>
        {
          *func_id = i;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005654:	701a      	strb	r2, [r3, #0]
          return true;
 8005656:	2301      	movs	r3, #1
 8005658:	e017      	b.n	800568a <audiod_verify_ep_exists+0xe2>
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	60fb      	str	r3, [r7, #12]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	60bb      	str	r3, [r7, #8]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4413      	add	r3, r2
        }
        p_desc = tu_desc_next(p_desc);
 800566c:	623b      	str	r3, [r7, #32]
      while (p_desc < p_desc_end)
 800566e:	6a3a      	ldr	r2, [r7, #32]
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	429a      	cmp	r2, r3
 8005674:	d3df      	bcc.n	8005636 <audiod_verify_ep_exists+0x8e>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8005676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800567a:	3301      	adds	r3, #1
 800567c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005684:	2b00      	cmp	r3, #0
 8005686:	d099      	beq.n	80055bc <audiod_verify_ep_exists+0x14>
      }
    }
  }
  return false;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	372c      	adds	r7, #44	; 0x2c
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	24001840 	.word	0x24001840

0800569c <audiod_get_audio_fct_idx>:
}
#endif

// No security checks here - internal function only which should always succeed
uint8_t audiod_get_audio_fct_idx(audiod_function_t * audio)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  for (uint8_t cnt=0; cnt < CFG_TUD_AUDIO; cnt++)
 80056a4:	2300      	movs	r3, #0
 80056a6:	73fb      	strb	r3, [r7, #15]
 80056a8:	e00e      	b.n	80056c8 <audiod_get_audio_fct_idx+0x2c>
  {
    if (&_audiod_fct[cnt] == audio) return cnt;
 80056aa:	7bfa      	ldrb	r2, [r7, #15]
 80056ac:	4613      	mov	r3, r2
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	1a9b      	subs	r3, r3, r2
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	4a09      	ldr	r2, [pc, #36]	; (80056dc <audiod_get_audio_fct_idx+0x40>)
 80056b6:	4413      	add	r3, r2
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d101      	bne.n	80056c2 <audiod_get_audio_fct_idx+0x26>
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	e006      	b.n	80056d0 <audiod_get_audio_fct_idx+0x34>
  for (uint8_t cnt=0; cnt < CFG_TUD_AUDIO; cnt++)
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
 80056c4:	3301      	adds	r3, #1
 80056c6:	73fb      	strb	r3, [r7, #15]
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0ed      	beq.n	80056aa <audiod_get_audio_fct_idx+0xe>
  }
  return 0;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	24001840 	.word	0x24001840

080056e0 <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUSB_MEM_SECTION tu_static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static bool _prep_out_transaction (cdcd_interface_t* p_cdc)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = 0;
 80056e8:	2300      	movs	r3, #0
 80056ea:	73fb      	strb	r3, [r7, #15]
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3310      	adds	r3, #16
 80056f0:	4618      	mov	r0, r3
 80056f2:	f001 f9a6 	bl	8006a42 <tu_fifo_remaining>
 80056f6:	4603      	mov	r3, r0
 80056f8:	81bb      	strh	r3, [r7, #12]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 80056fa:	89bb      	ldrh	r3, [r7, #12]
 80056fc:	2b3f      	cmp	r3, #63	; 0x3f
 80056fe:	d801      	bhi.n	8005704 <_prep_out_transaction+0x24>
 8005700:	2300      	movs	r3, #0
 8005702:	e02b      	b.n	800575c <_prep_out_transaction+0x7c>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	78da      	ldrb	r2, [r3, #3]
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	4611      	mov	r1, r2
 800570c:	4618      	mov	r0, r3
 800570e:	f002 fc71 	bl	8007ff4 <usbd_edpt_claim>
 8005712:	4603      	mov	r3, r0
 8005714:	f083 0301 	eor.w	r3, r3, #1
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <_prep_out_transaction+0x42>
 800571e:	2300      	movs	r3, #0
 8005720:	e01c      	b.n	800575c <_prep_out_transaction+0x7c>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	3310      	adds	r3, #16
 8005726:	4618      	mov	r0, r3
 8005728:	f001 f98b 	bl	8006a42 <tu_fifo_remaining>
 800572c:	4603      	mov	r3, r0
 800572e:	81bb      	strh	r3, [r7, #12]

  if ( available >= sizeof(p_cdc->epout_buf) )
 8005730:	89bb      	ldrh	r3, [r7, #12]
 8005732:	2b3f      	cmp	r3, #63	; 0x3f
 8005734:	d90a      	bls.n	800574c <_prep_out_transaction+0x6c>
  {
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	78d9      	ldrb	r1, [r3, #3]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8005740:	7bf8      	ldrb	r0, [r7, #15]
 8005742:	2340      	movs	r3, #64	; 0x40
 8005744:	f002 fcaa 	bl	800809c <usbd_edpt_xfer>
 8005748:	4603      	mov	r3, r0
 800574a:	e007      	b.n	800575c <_prep_out_transaction+0x7c>
  }else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	78da      	ldrb	r2, [r3, #3]
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	4611      	mov	r1, r2
 8005754:	4618      	mov	r0, r3
 8005756:	f002 fc77 	bl	8008048 <usbd_edpt_release>

    return false;
 800575a:	2300      	movs	r3, #0
  }
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <tud_cdc_n_connected>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_cdc_n_connected(uint8_t itf)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	71fb      	strb	r3, [r7, #7]

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
 800576e:	f001 faa9 	bl	8006cc4 <tud_mounted>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d009      	beq.n	800578c <tud_cdc_n_connected+0x28>
 8005778:	f001 fab6 	bl	8006ce8 <tud_suspended>
 800577c:	4603      	mov	r3, r0
 800577e:	f083 0301 	eor.w	r3, r3, #1
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <tud_cdc_n_connected+0x28>
 8005788:	2301      	movs	r3, #1
 800578a:	e000      	b.n	800578e <tud_cdc_n_connected+0x2a>
 800578c:	2300      	movs	r3, #0
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	b2db      	uxtb	r3, r3
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01a      	beq.n	80057ce <tud_cdc_n_connected+0x6a>
 8005798:	79fb      	ldrb	r3, [r7, #7]
 800579a:	4a11      	ldr	r2, [pc, #68]	; (80057e0 <tud_cdc_n_connected+0x7c>)
 800579c:	f44f 7194 	mov.w	r1, #296	; 0x128
 80057a0:	fb01 f303 	mul.w	r3, r1, r3
 80057a4:	4413      	add	r3, r2
 80057a6:	3304      	adds	r3, #4
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	2300      	movs	r3, #0
 80057ae:	72fb      	strb	r3, [r7, #11]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80057b0:	7afb      	ldrb	r3, [r7, #11]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	fa22 f303 	lsr.w	r3, r2, r3
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	bf14      	ite	ne
 80057c0:	2301      	movne	r3, #1
 80057c2:	2300      	moveq	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <tud_cdc_n_connected+0x6a>
 80057ca:	2301      	movs	r3, #1
 80057cc:	e000      	b.n	80057d0 <tud_cdc_n_connected+0x6c>
 80057ce:	2300      	movs	r3, #0
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	b2db      	uxtb	r3, r3
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	24001878 	.word	0x24001878

080057e4 <tud_cdc_n_available>:

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4603      	mov	r3, r0
 80057ec:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	f44f 7294 	mov.w	r2, #296	; 0x128
 80057f4:	fb02 f303 	mul.w	r3, r2, r3
 80057f8:	3310      	adds	r3, #16
 80057fa:	4a05      	ldr	r2, [pc, #20]	; (8005810 <tud_cdc_n_available+0x2c>)
 80057fc:	4413      	add	r3, r2
 80057fe:	4618      	mov	r0, r3
 8005800:	f001 f8aa 	bl	8006958 <tu_fifo_count>
 8005804:	4603      	mov	r3, r0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	24001878 	.word	0x24001878

08005814 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	4603      	mov	r3, r0
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8005822:	7bfb      	ldrb	r3, [r7, #15]
 8005824:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005828:	fb02 f303 	mul.w	r3, r2, r3
 800582c:	4a0a      	ldr	r2, [pc, #40]	; (8005858 <tud_cdc_n_read+0x44>)
 800582e:	4413      	add	r3, r2
 8005830:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) bufsize);
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	3310      	adds	r3, #16
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	b292      	uxth	r2, r2
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	4618      	mov	r0, r3
 800583e:	f001 f95c 	bl	8006afa <tu_fifo_read_n>
 8005842:	4603      	mov	r3, r0
 8005844:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(p_cdc);
 8005846:	6978      	ldr	r0, [r7, #20]
 8005848:	f7ff ff4a 	bl	80056e0 <_prep_out_transaction>
  return num_read;
 800584c:	693b      	ldr	r3, [r7, #16]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3718      	adds	r7, #24
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	24001878 	.word	0x24001878

0800585c <tud_cdc_n_write>:

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	4603      	mov	r3, r0
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005870:	fb02 f303 	mul.w	r3, r2, r3
 8005874:	4a0e      	ldr	r2, [pc, #56]	; (80058b0 <tud_cdc_n_write+0x54>)
 8005876:	4413      	add	r3, r2
 8005878:	617b      	str	r3, [r7, #20]
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	331c      	adds	r3, #28
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	b292      	uxth	r2, r2
 8005882:	68b9      	ldr	r1, [r7, #8]
 8005884:	4618      	mov	r0, r3
 8005886:	f001 f99f 	bl	8006bc8 <tu_fifo_write_n>
 800588a:	4603      	mov	r3, r0
 800588c:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  // may need to suppress -Wunreachable-code since most of the time CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
  if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	331c      	adds	r3, #28
 8005892:	4618      	mov	r0, r3
 8005894:	f001 f860 	bl	8006958 <tu_fifo_count>
 8005898:	4603      	mov	r3, r0
 800589a:	2b3f      	cmp	r3, #63	; 0x3f
 800589c:	d903      	bls.n	80058a6 <tud_cdc_n_write+0x4a>
  {
    tud_cdc_n_write_flush(itf);
 800589e:	7bfb      	ldrb	r3, [r7, #15]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 f807 	bl	80058b4 <tud_cdc_n_write_flush>
  }

  return ret;
 80058a6:	8a7b      	ldrh	r3, [r7, #18]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3718      	adds	r7, #24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	24001878 	.word	0x24001878

080058b4 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	4603      	mov	r3, r0
 80058bc:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	f44f 7294 	mov.w	r2, #296	; 0x128
 80058c4:	fb02 f303 	mul.w	r3, r2, r3
 80058c8:	4a36      	ldr	r2, [pc, #216]	; (80059a4 <tud_cdc_n_write_flush+0xf0>)
 80058ca:	4413      	add	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	f001 f9f9 	bl	8006cc4 <tud_mounted>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d009      	beq.n	80058ec <tud_cdc_n_write_flush+0x38>
 80058d8:	f001 fa06 	bl	8006ce8 <tud_suspended>
 80058dc:	4603      	mov	r3, r0
 80058de:	f083 0301 	eor.w	r3, r3, #1
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <tud_cdc_n_write_flush+0x38>
 80058e8:	2301      	movs	r3, #1
 80058ea:	e000      	b.n	80058ee <tud_cdc_n_write_flush+0x3a>
 80058ec:	2300      	movs	r3, #0
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 80058f4:	f083 0301 	eor.w	r3, r3, #1
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <tud_cdc_n_write_flush+0x4e>
 80058fe:	2300      	movs	r3, #0
 8005900:	e04c      	b.n	800599c <tud_cdc_n_write_flush+0xe8>

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	331c      	adds	r3, #28
 8005906:	4618      	mov	r0, r3
 8005908:	f001 f826 	bl	8006958 <tu_fifo_count>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <tud_cdc_n_write_flush+0x62>
 8005912:	2300      	movs	r3, #0
 8005914:	e042      	b.n	800599c <tud_cdc_n_write_flush+0xe8>

  uint8_t const rhport = 0;
 8005916:	2300      	movs	r3, #0
 8005918:	74fb      	strb	r3, [r7, #19]

  // Claim the endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	789a      	ldrb	r2, [r3, #2]
 800591e:	7cfb      	ldrb	r3, [r7, #19]
 8005920:	4611      	mov	r1, r2
 8005922:	4618      	mov	r0, r3
 8005924:	f002 fb66 	bl	8007ff4 <usbd_edpt_claim>
 8005928:	4603      	mov	r3, r0
 800592a:	f083 0301 	eor.w	r3, r3, #1
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <tud_cdc_n_write_flush+0x84>
 8005934:	2300      	movs	r3, #0
 8005936:	e031      	b.n	800599c <tud_cdc_n_write_flush+0xe8>

  // Pull data from FIFO
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f103 001c 	add.w	r0, r3, #28
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	33e8      	adds	r3, #232	; 0xe8
 8005942:	2240      	movs	r2, #64	; 0x40
 8005944:	4619      	mov	r1, r3
 8005946:	f001 f8d8 	bl	8006afa <tu_fifo_read_n>
 800594a:	4603      	mov	r3, r0
 800594c:	823b      	strh	r3, [r7, #16]

  if ( count )
 800594e:	8a3b      	ldrh	r3, [r7, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01b      	beq.n	800598c <tud_cdc_n_write_flush+0xd8>
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	7899      	ldrb	r1, [r3, #2]
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 800595e:	8a3b      	ldrh	r3, [r7, #16]
 8005960:	7cf8      	ldrb	r0, [r7, #19]
 8005962:	f002 fb9b 	bl	800809c <usbd_edpt_xfer>
 8005966:	4603      	mov	r3, r0
 8005968:	f083 0301 	eor.w	r3, r3, #1
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <tud_cdc_n_write_flush+0xd4>
 8005972:	4b0d      	ldr	r3, [pc, #52]	; (80059a8 <tud_cdc_n_write_flush+0xf4>)
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d000      	beq.n	8005984 <tud_cdc_n_write_flush+0xd0>
 8005982:	be00      	bkpt	0x0000
 8005984:	2300      	movs	r3, #0
 8005986:	e009      	b.n	800599c <tud_cdc_n_write_flush+0xe8>
    return count;
 8005988:	8a3b      	ldrh	r3, [r7, #16]
 800598a:	e007      	b.n	800599c <tud_cdc_n_write_flush+0xe8>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	789a      	ldrb	r2, [r3, #2]
 8005990:	7cfb      	ldrb	r3, [r7, #19]
 8005992:	4611      	mov	r1, r2
 8005994:	4618      	mov	r0, r3
 8005996:	f002 fb57 	bl	8008048 <usbd_edpt_release>
    return 0;
 800599a:	2300      	movs	r3, #0
  }
}
 800599c:	4618      	mov	r0, r3
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	24001878 	.word	0x24001878
 80059a8:	e000edf0 	.word	0xe000edf0

080059ac <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available (uint8_t itf)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	4603      	mov	r3, r0
 80059b4:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	f44f 7294 	mov.w	r2, #296	; 0x128
 80059bc:	fb02 f303 	mul.w	r3, r2, r3
 80059c0:	3318      	adds	r3, #24
 80059c2:	4a05      	ldr	r2, [pc, #20]	; (80059d8 <tud_cdc_n_write_available+0x2c>)
 80059c4:	4413      	add	r3, r2
 80059c6:	3304      	adds	r3, #4
 80059c8:	4618      	mov	r0, r3
 80059ca:	f001 f83a 	bl	8006a42 <tu_fifo_remaining>
 80059ce:	4603      	mov	r3, r0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	24001878 	.word	0x24001878

080059dc <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 80059e2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80059e6:	2100      	movs	r1, #0
 80059e8:	4820      	ldr	r0, [pc, #128]	; (8005a6c <cdcd_init+0x90>)
 80059ea:	f004 fcb1 	bl	800a350 <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 80059ee:	2300      	movs	r3, #0
 80059f0:	71fb      	strb	r3, [r7, #7]
 80059f2:	e032      	b.n	8005a5a <cdcd_init+0x7e>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80059fa:	fb02 f303 	mul.w	r3, r2, r3
 80059fe:	4a1b      	ldr	r2, [pc, #108]	; (8005a6c <cdcd_init+0x90>)
 8005a00:	4413      	add	r3, r2
 8005a02:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	22ff      	movs	r2, #255	; 0xff
 8005a08:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005a10:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2200      	movs	r2, #0
 8005a16:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity    = 0;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2208      	movs	r2, #8
 8005a22:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	f103 0010 	add.w	r0, r3, #16
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8005a30:	2300      	movs	r3, #0
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	2301      	movs	r3, #1
 8005a36:	2240      	movs	r2, #64	; 0x40
 8005a38:	f000 fafc 	bl	8006034 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	f103 001c 	add.w	r0, r3, #28
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8005a48:	2301      	movs	r3, #1
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	2240      	movs	r2, #64	; 0x40
 8005a50:	f000 faf0 	bl	8006034 <tu_fifo_config>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	3301      	adds	r3, #1
 8005a58:	71fb      	strb	r3, [r7, #7]
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0c9      	beq.n	80059f4 <cdcd_init+0x18>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
  }
}
 8005a60:	bf00      	nop
 8005a62:	bf00      	nop
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	24001878 	.word	0x24001878

08005a70 <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	4603      	mov	r3, r0
 8005a78:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	73fb      	strb	r3, [r7, #15]
 8005a7e:	e01f      	b.n	8005ac0 <cdcd_reset+0x50>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
 8005a82:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005a86:	fb02 f303 	mul.w	r3, r2, r3
 8005a8a:	4a11      	ldr	r2, [pc, #68]	; (8005ad0 <cdcd_reset+0x60>)
 8005a8c:	4413      	add	r3, r2
 8005a8e:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8005a90:	2205      	movs	r2, #5
 8005a92:	2100      	movs	r1, #0
 8005a94:	68b8      	ldr	r0, [r7, #8]
 8005a96:	f004 fc5b 	bl	800a350 <memset>
    tu_fifo_clear(&p_cdc->rx_ff);
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	3310      	adds	r3, #16
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f001 f8b6 	bl	8006c10 <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	331c      	adds	r3, #28
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f001 f8b1 	bl	8006c10 <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	331c      	adds	r3, #28
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f001 f8bc 	bl	8006c32 <tu_fifo_set_overwritable>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	3301      	adds	r3, #1
 8005abe:	73fb      	strb	r3, [r7, #15]
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0dc      	beq.n	8005a80 <cdcd_reset+0x10>
  }
}
 8005ac6:	bf00      	nop
 8005ac8:	bf00      	nop
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	24001878 	.word	0x24001878

08005ad4 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b09a      	sub	sp, #104	; 0x68
 8005ad8:	af02      	add	r7, sp, #8
 8005ada:	4603      	mov	r3, r0
 8005adc:	6039      	str	r1, [r7, #0]
 8005ade:	71fb      	strb	r3, [r7, #7]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	795b      	ldrb	r3, [r3, #5]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d103      	bne.n	8005af4 <cdcd_open+0x20>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	799b      	ldrb	r3, [r3, #6]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d001      	beq.n	8005af8 <cdcd_open+0x24>
 8005af4:	2300      	movs	r3, #0
 8005af6:	e0e1      	b.n	8005cbc <cdcd_open+0x1e8>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t * p_cdc = NULL;
 8005af8:	2300      	movs	r3, #0
 8005afa:	65fb      	str	r3, [r7, #92]	; 0x5c
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8005afc:	2300      	movs	r3, #0
 8005afe:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8005b02:	e01a      	b.n	8005b3a <cdcd_open+0x66>
  {
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 8005b04:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005b08:	4a6e      	ldr	r2, [pc, #440]	; (8005cc4 <cdcd_open+0x1f0>)
 8005b0a:	f44f 7194 	mov.w	r1, #296	; 0x128
 8005b0e:	fb01 f303 	mul.w	r3, r1, r3
 8005b12:	4413      	add	r3, r2
 8005b14:	3302      	adds	r3, #2
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d109      	bne.n	8005b30 <cdcd_open+0x5c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
 8005b1c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005b20:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005b24:	fb02 f303 	mul.w	r3, r2, r3
 8005b28:	4a66      	ldr	r2, [pc, #408]	; (8005cc4 <cdcd_open+0x1f0>)
 8005b2a:	4413      	add	r3, r2
 8005b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8005b2e:	e008      	b.n	8005b42 <cdcd_open+0x6e>
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8005b30:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005b34:	3301      	adds	r3, #1
 8005b36:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8005b3a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0e0      	beq.n	8005b04 <cdcd_open+0x30>
    }
  }
  TU_ASSERT(p_cdc, 0);
 8005b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10a      	bne.n	8005b5e <cdcd_open+0x8a>
 8005b48:	4b5f      	ldr	r3, [pc, #380]	; (8005cc8 <cdcd_open+0x1f4>)
 8005b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d000      	beq.n	8005b5a <cdcd_open+0x86>
 8005b58:	be00      	bkpt	0x0000
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e0ae      	b.n	8005cbc <cdcd_open+0x1e8>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	789a      	ldrb	r2, [r3, #2]
 8005b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b64:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8005b66:	2309      	movs	r3, #9
 8005b68:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b7c:	4413      	add	r3, r2
  uint8_t const * p_desc = tu_desc_next( itf_desc );
 8005b7e:	657b      	str	r3, [r7, #84]	; 0x54

  // Communication Functional Descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8005b80:	e013      	b.n	8005baa <cdcd_open+0xd6>
 8005b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b84:	633b      	str	r3, [r7, #48]	; 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8005b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b88:	781b      	ldrb	r3, [r3, #0]
  {
    drv_len += tu_desc_len(p_desc);
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005b90:	4413      	add	r3, r2
 8005b92:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8005b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b98:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	637b      	str	r3, [r7, #52]	; 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba6:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8005ba8:	657b      	str	r3, [r7, #84]	; 0x54
 8005baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	781b      	ldrb	r3, [r3, #0]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8005bb4:	2b24      	cmp	r3, #36	; 0x24
 8005bb6:	d104      	bne.n	8005bc2 <cdcd_open+0xee>
 8005bb8:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8005bbc:	88bb      	ldrh	r3, [r7, #4]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d9df      	bls.n	8005b82 <cdcd_open+0xae>
 8005bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	3301      	adds	r3, #1
 8005bca:	781b      	ldrb	r3, [r3, #0]
  }

  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8005bcc:	2b05      	cmp	r3, #5
 8005bce:	d12f      	bne.n	8005c30 <cdcd_open+0x15c>
  {
    // notification endpoint
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8005bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bd2:	653b      	str	r3, [r7, #80]	; 0x50

    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 8005bd4:	79fb      	ldrb	r3, [r7, #7]
 8005bd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f002 f9c7 	bl	8007f6c <usbd_edpt_open>
 8005bde:	4603      	mov	r3, r0
 8005be0:	f083 0301 	eor.w	r3, r3, #1
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <cdcd_open+0x12c>
 8005bea:	4b37      	ldr	r3, [pc, #220]	; (8005cc8 <cdcd_open+0x1f4>)
 8005bec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d000      	beq.n	8005bfc <cdcd_open+0x128>
 8005bfa:	be00      	bkpt	0x0000
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	e05d      	b.n	8005cbc <cdcd_open+0x1e8>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8005c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c02:	789a      	ldrb	r2, [r3, #2]
 8005c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c06:	705a      	strb	r2, [r3, #1]
 8005c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c0a:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005c16:	4413      	add	r3, r2
 8005c18:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8005c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8005c2e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c32:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	3301      	adds	r3, #1
 8005c38:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d139      	bne.n	8005cb2 <cdcd_open+0x1de>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
 8005c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c40:	795b      	ldrb	r3, [r3, #5]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8005c42:	2b0a      	cmp	r3, #10
 8005c44:	d135      	bne.n	8005cb2 <cdcd_open+0x1de>
 8005c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c48:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
  {
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005c54:	4413      	add	r3, r2
 8005c56:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8005c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c5c:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8005c6c:	657b      	str	r3, [r7, #84]	; 0x54

    // Open endpoint pair
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 8005c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c70:	3303      	adds	r3, #3
 8005c72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c74:	3202      	adds	r2, #2
 8005c76:	79f8      	ldrb	r0, [r7, #7]
 8005c78:	9201      	str	r2, [sp, #4]
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	2202      	movs	r2, #2
 8005c80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c82:	f002 f90b 	bl	8007e9c <usbd_open_edpt_pair>
 8005c86:	4603      	mov	r3, r0
 8005c88:	f083 0301 	eor.w	r3, r3, #1
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <cdcd_open+0x1d4>
 8005c92:	4b0d      	ldr	r3, [pc, #52]	; (8005cc8 <cdcd_open+0x1f4>)
 8005c94:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d000      	beq.n	8005ca4 <cdcd_open+0x1d0>
 8005ca2:	be00      	bkpt	0x0000
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	e009      	b.n	8005cbc <cdcd_open+0x1e8>

    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 8005ca8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005cac:	330e      	adds	r3, #14
 8005cae:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);
 8005cb2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005cb4:	f7ff fd14 	bl	80056e0 <_prep_out_transaction>

  return drv_len;
 8005cb8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3760      	adds	r7, #96	; 0x60
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	24001878 	.word	0x24001878
 8005cc8:	e000edf0 	.word	0xe000edf0

08005ccc <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08a      	sub	sp, #40	; 0x28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	603a      	str	r2, [r7, #0]
 8005cd6:	71fb      	strb	r3, [r7, #7]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b20      	cmp	r3, #32
 8005ce8:	d001      	beq.n	8005cee <cdcd_control_xfer_cb+0x22>
 8005cea:	2300      	movs	r3, #0
 8005cec:	e0cf      	b.n	8005e8e <cdcd_control_xfer_cb+0x1c2>

  uint8_t itf = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  cdcd_interface_t* p_cdc = _cdcd_itf;
 8005cf4:	4b68      	ldr	r3, [pc, #416]	; (8005e98 <cdcd_control_xfer_cb+0x1cc>)
 8005cf6:	623b      	str	r3, [r7, #32]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8005cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <cdcd_control_xfer_cb+0x38>
 8005d00:	2300      	movs	r3, #0
 8005d02:	e0c4      	b.n	8005e8e <cdcd_control_xfer_cb+0x1c2>

    if ( p_cdc->itf_num == request->wIndex ) break;
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	889b      	ldrh	r3, [r3, #4]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d009      	beq.n	8005d28 <cdcd_control_xfer_cb+0x5c>
  for ( ; ; itf++, p_cdc++)
 8005d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d18:	3301      	adds	r3, #1
 8005d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005d24:	623b      	str	r3, [r7, #32]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8005d26:	e7e7      	b.n	8005cf8 <cdcd_control_xfer_cb+0x2c>
    if ( p_cdc->itf_num == request->wIndex ) break;
 8005d28:	bf00      	nop
  }

  switch ( request->bRequest )
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	785b      	ldrb	r3, [r3, #1]
 8005d2e:	3b20      	subs	r3, #32
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	f200 80a2 	bhi.w	8005e7a <cdcd_control_xfer_cb+0x1ae>
 8005d36:	a201      	add	r2, pc, #4	; (adr r2, 8005d3c <cdcd_control_xfer_cb+0x70>)
 8005d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3c:	08005d4d 	.word	0x08005d4d
 8005d40:	08005d89 	.word	0x08005d89
 8005d44:	08005da1 	.word	0x08005da1
 8005d48:	08005e49 	.word	0x08005e49
  {
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8005d4c:	79bb      	ldrb	r3, [r7, #6]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d108      	bne.n	8005d64 <cdcd_control_xfer_cb+0x98>
      {
        TU_LOG2("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	f103 0208 	add.w	r2, r3, #8
 8005d58:	79f8      	ldrb	r0, [r7, #7]
 8005d5a:	2307      	movs	r3, #7
 8005d5c:	6839      	ldr	r1, [r7, #0]
 8005d5e:	f002 fc39 	bl	80085d4 <tud_control_xfer>
      }
      else if ( stage == CONTROL_STAGE_ACK)
      {
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
      }
    break;
 8005d62:	e08c      	b.n	8005e7e <cdcd_control_xfer_cb+0x1b2>
      else if ( stage == CONTROL_STAGE_ACK)
 8005d64:	79bb      	ldrb	r3, [r7, #6]
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	f040 8089 	bne.w	8005e7e <cdcd_control_xfer_cb+0x1b2>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8005d6c:	4b4b      	ldr	r3, [pc, #300]	; (8005e9c <cdcd_control_xfer_cb+0x1d0>)
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 8085 	beq.w	8005e7e <cdcd_control_xfer_cb+0x1b2>
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	f103 0208 	add.w	r2, r3, #8
 8005d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d7e:	4611      	mov	r1, r2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f3af 8000 	nop.w
    break;
 8005d86:	e07a      	b.n	8005e7e <cdcd_control_xfer_cb+0x1b2>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8005d88:	79bb      	ldrb	r3, [r7, #6]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d179      	bne.n	8005e82 <cdcd_control_xfer_cb+0x1b6>
      {
        TU_LOG2("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	f103 0208 	add.w	r2, r3, #8
 8005d94:	79f8      	ldrb	r0, [r7, #7]
 8005d96:	2307      	movs	r3, #7
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	f002 fc1b 	bl	80085d4 <tud_control_xfer>
      }
    break;
 8005d9e:	e070      	b.n	8005e82 <cdcd_control_xfer_cb+0x1b6>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP)
 8005da0:	79bb      	ldrb	r3, [r7, #6]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d105      	bne.n	8005db2 <cdcd_control_xfer_cb+0xe6>
      {
        tud_control_status(rhport, request);
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	6839      	ldr	r1, [r7, #0]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f002 fba0 	bl	80084f0 <tud_control_status>
        TU_LOG2("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);

        // Invoke callback
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
      }
    break;
 8005db0:	e069      	b.n	8005e86 <cdcd_control_xfer_cb+0x1ba>
      else if (stage == CONTROL_STAGE_ACK)
 8005db2:	79bb      	ldrb	r3, [r7, #6]
 8005db4:	2b03      	cmp	r3, #3
 8005db6:	d166      	bne.n	8005e86 <cdcd_control_xfer_cb+0x1ba>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	885b      	ldrh	r3, [r3, #2]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	613b      	str	r3, [r7, #16]
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	73fb      	strb	r3, [r7, #15]
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	bf14      	ite	ne
 8005dd4:	2301      	movne	r3, #1
 8005dd6:	2300      	moveq	r3, #0
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	885b      	ldrh	r3, [r3, #2]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	61bb      	str	r3, [r7, #24]
 8005de4:	2301      	movs	r3, #1
 8005de6:	75fb      	strb	r3, [r7, #23]
 8005de8:	7dfb      	ldrb	r3, [r7, #23]
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	fa22 f303 	lsr.w	r3, r2, r3
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	bf14      	ite	ne
 8005df8:	2301      	movne	r3, #1
 8005dfa:	2300      	moveq	r3, #0
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	885b      	ldrh	r3, [r3, #2]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	f103 021c 	add.w	r2, r3, #28
 8005e12:	7ffb      	ldrb	r3, [r7, #31]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	bf14      	ite	ne
 8005e18:	2301      	movne	r3, #1
 8005e1a:	2300      	moveq	r3, #0
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	f083 0301 	eor.w	r3, r3, #1
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	f000 ff00 	bl	8006c32 <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 8005e32:	4b1b      	ldr	r3, [pc, #108]	; (8005ea0 <cdcd_control_xfer_cb+0x1d4>)
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d026      	beq.n	8005e86 <cdcd_control_xfer_cb+0x1ba>
 8005e38:	7fba      	ldrb	r2, [r7, #30]
 8005e3a:	7ff9      	ldrb	r1, [r7, #31]
 8005e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fa fdbd 	bl	80009c0 <tud_cdc_line_state_cb>
    break;
 8005e46:	e01e      	b.n	8005e86 <cdcd_control_xfer_cb+0x1ba>
    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP)
 8005e48:	79bb      	ldrb	r3, [r7, #6]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d105      	bne.n	8005e5a <cdcd_control_xfer_cb+0x18e>
      {
        tud_control_status(rhport, request);
 8005e4e:	79fb      	ldrb	r3, [r7, #7]
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f002 fb4c 	bl	80084f0 <tud_control_status>
      else if (stage == CONTROL_STAGE_ACK)
      {
        TU_LOG2("  Send Break\r\n");
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
      }
    break;
 8005e58:	e017      	b.n	8005e8a <cdcd_control_xfer_cb+0x1be>
      else if (stage == CONTROL_STAGE_ACK)
 8005e5a:	79bb      	ldrb	r3, [r7, #6]
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d114      	bne.n	8005e8a <cdcd_control_xfer_cb+0x1be>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 8005e60:	4b10      	ldr	r3, [pc, #64]	; (8005ea4 <cdcd_control_xfer_cb+0x1d8>)
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d011      	beq.n	8005e8a <cdcd_control_xfer_cb+0x1be>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	885b      	ldrh	r3, [r3, #2]
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e70:	4611      	mov	r1, r2
 8005e72:	4618      	mov	r0, r3
 8005e74:	f3af 8000 	nop.w
    break;
 8005e78:	e007      	b.n	8005e8a <cdcd_control_xfer_cb+0x1be>

    default: return false; // stall unsupported request
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	e007      	b.n	8005e8e <cdcd_control_xfer_cb+0x1c2>
    break;
 8005e7e:	bf00      	nop
 8005e80:	e004      	b.n	8005e8c <cdcd_control_xfer_cb+0x1c0>
    break;
 8005e82:	bf00      	nop
 8005e84:	e002      	b.n	8005e8c <cdcd_control_xfer_cb+0x1c0>
    break;
 8005e86:	bf00      	nop
 8005e88:	e000      	b.n	8005e8c <cdcd_control_xfer_cb+0x1c0>
    break;
 8005e8a:	bf00      	nop
  }

  return true;
 8005e8c:	2301      	movs	r3, #1
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3728      	adds	r7, #40	; 0x28
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	24001878 	.word	0x24001878
 8005e9c:	00000000 	.word	0x00000000
 8005ea0:	080009c1 	.word	0x080009c1
 8005ea4:	00000000 	.word	0x00000000

08005ea8 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	603b      	str	r3, [r7, #0]
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	71fb      	strb	r3, [r7, #7]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	71bb      	strb	r3, [r7, #6]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	75fb      	strb	r3, [r7, #23]
 8005ec0:	e014      	b.n	8005eec <cdcd_xfer_cb+0x44>
  {
    p_cdc = &_cdcd_itf[itf];
 8005ec2:	7dfb      	ldrb	r3, [r7, #23]
 8005ec4:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005ec8:	fb02 f303 	mul.w	r3, r2, r3
 8005ecc:	4a54      	ldr	r2, [pc, #336]	; (8006020 <cdcd_xfer_cb+0x178>)
 8005ece:	4413      	add	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	78db      	ldrb	r3, [r3, #3]
 8005ed6:	79ba      	ldrb	r2, [r7, #6]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d00a      	beq.n	8005ef2 <cdcd_xfer_cb+0x4a>
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	789b      	ldrb	r3, [r3, #2]
 8005ee0:	79ba      	ldrb	r2, [r7, #6]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d005      	beq.n	8005ef2 <cdcd_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8005ee6:	7dfb      	ldrb	r3, [r7, #23]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	75fb      	strb	r3, [r7, #23]
 8005eec:	7dfb      	ldrb	r3, [r7, #23]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0e7      	beq.n	8005ec2 <cdcd_xfer_cb+0x1a>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00a      	beq.n	8005f0e <cdcd_xfer_cb+0x66>
 8005ef8:	4b4a      	ldr	r3, [pc, #296]	; (8006024 <cdcd_xfer_cb+0x17c>)
 8005efa:	60bb      	str	r3, [r7, #8]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d000      	beq.n	8005f0a <cdcd_xfer_cb+0x62>
 8005f08:	be00      	bkpt	0x0000
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	e084      	b.n	8006018 <cdcd_xfer_cb+0x170>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	78db      	ldrb	r3, [r3, #3]
 8005f12:	79ba      	ldrb	r2, [r7, #6]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d14a      	bne.n	8005fae <cdcd_xfer_cb+0x106>
  {
    tu_fifo_write_n(&p_cdc->rx_ff, p_cdc->epout_buf, (uint16_t) xferred_bytes);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f103 0010 	add.w	r0, r3, #16
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	33a8      	adds	r3, #168	; 0xa8
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	b292      	uxth	r2, r2
 8005f26:	4619      	mov	r1, r3
 8005f28:	f000 fe4e 	bl	8006bc8 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 8005f2c:	4b3e      	ldr	r3, [pc, #248]	; (8006028 <cdcd_xfer_cb+0x180>)
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d028      	beq.n	8005f84 <cdcd_xfer_cb+0xdc>
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	795b      	ldrb	r3, [r3, #5]
 8005f36:	2bff      	cmp	r3, #255	; 0xff
 8005f38:	d024      	beq.n	8005f84 <cdcd_xfer_cb+0xdc>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	e01d      	b.n	8005f7c <cdcd_xfer_cb+0xd4>
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	795a      	ldrb	r2, [r3, #5]
 8005f44:	6939      	ldr	r1, [r7, #16]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	440b      	add	r3, r1
 8005f4a:	33a8      	adds	r3, #168	; 0xa8
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d111      	bne.n	8005f76 <cdcd_xfer_cb+0xce>
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	3310      	adds	r3, #16
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 fd30 	bl	80069bc <tu_fifo_empty>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f083 0301 	eor.w	r3, r3, #1
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d006      	beq.n	8005f76 <cdcd_xfer_cb+0xce>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	795a      	ldrb	r2, [r3, #5]
 8005f6c:	7dfb      	ldrb	r3, [r7, #23]
 8005f6e:	4611      	mov	r1, r2
 8005f70:	4618      	mov	r0, r3
 8005f72:	f3af 8000 	nop.w
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d3dd      	bcc.n	8005f40 <cdcd_xfer_cb+0x98>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 8005f84:	4b29      	ldr	r3, [pc, #164]	; (800602c <cdcd_xfer_cb+0x184>)
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00e      	beq.n	8005fa8 <cdcd_xfer_cb+0x100>
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	3310      	adds	r3, #16
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 fd14 	bl	80069bc <tu_fifo_empty>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f083 0301 	eor.w	r3, r3, #1
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <cdcd_xfer_cb+0x100>
 8005fa0:	7dfb      	ldrb	r3, [r7, #23]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fa fd1b 	bl	80009de <tud_cdc_rx_cb>

    // prepare for OUT transaction
    _prep_out_transaction(p_cdc);
 8005fa8:	6938      	ldr	r0, [r7, #16]
 8005faa:	f7ff fb99 	bl	80056e0 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	789b      	ldrb	r3, [r3, #2]
 8005fb2:	79ba      	ldrb	r2, [r7, #6]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d12e      	bne.n	8006016 <cdcd_xfer_cb+0x16e>
  {
    // invoke transmit callback to possibly refill tx fifo
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 8005fb8:	4b1d      	ldr	r3, [pc, #116]	; (8006030 <cdcd_xfer_cb+0x188>)
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <cdcd_xfer_cb+0x11e>
 8005fbe:	7dfb      	ldrb	r3, [r7, #23]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f3af 8000 	nop.w

    if ( 0 == tud_cdc_n_write_flush(itf) )
 8005fc6:	7dfb      	ldrb	r3, [r7, #23]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7ff fc73 	bl	80058b4 <tud_cdc_n_write_flush>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d120      	bne.n	8006016 <cdcd_xfer_cb+0x16e>
    {
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	331c      	adds	r3, #28
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 fcbd 	bl	8006958 <tu_fifo_count>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d118      	bne.n	8006016 <cdcd_xfer_cb+0x16e>
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d015      	beq.n	8006016 <cdcd_xfer_cb+0x16e>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d110      	bne.n	8006016 <cdcd_xfer_cb+0x16e>
      {
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	789a      	ldrb	r2, [r3, #2]
 8005ff8:	79fb      	ldrb	r3, [r7, #7]
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f001 fff9 	bl	8007ff4 <usbd_edpt_claim>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d006      	beq.n	8006016 <cdcd_xfer_cb+0x16e>
        {
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	7899      	ldrb	r1, [r3, #2]
 800600c:	79f8      	ldrb	r0, [r7, #7]
 800600e:	2300      	movs	r3, #0
 8006010:	2200      	movs	r2, #0
 8006012:	f002 f843 	bl	800809c <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 8006016:	2301      	movs	r3, #1
}
 8006018:	4618      	mov	r0, r3
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	24001878 	.word	0x24001878
 8006024:	e000edf0 	.word	0xe000edf0
 8006028:	00000000 	.word	0x00000000
 800602c:	080009df 	.word	0x080009df
 8006030:	00000000 	.word	0x00000000

08006034 <tu_fifo_config>:
  TU_FIFO_COPY_INC,            ///< Copy from/to an increasing source/destination address - default mode
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	4611      	mov	r1, r2
 8006040:	461a      	mov	r2, r3
 8006042:	460b      	mov	r3, r1
 8006044:	80fb      	strh	r3, [r7, #6]
 8006046:	4613      	mov	r3, r2
 8006048:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006050:	d901      	bls.n	8006056 <tu_fifo_config+0x22>
 8006052:	2300      	movs	r3, #0
 8006054:	e01b      	b.n	800608e <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	88fa      	ldrh	r2, [r7, #6]
 8006060:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8006062:	88bb      	ldrh	r3, [r7, #4]
 8006064:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006068:	b299      	uxth	r1, r3
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	88d3      	ldrh	r3, [r2, #6]
 800606e:	f361 030e 	bfi	r3, r1, #0, #15
 8006072:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	79d3      	ldrb	r3, [r2, #7]
 8006078:	7e39      	ldrb	r1, [r7, #24]
 800607a:	f361 13c7 	bfi	r3, r1, #7, #1
 800607e:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 800608c:	2301      	movs	r3, #1
}
 800608e:	4618      	mov	r0, r3
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b08a      	sub	sp, #40	; 0x28
 800609e:	af00      	add	r7, sp, #0
 80060a0:	60f8      	str	r0, [r7, #12]
 80060a2:	60b9      	str	r1, [r7, #8]
 80060a4:	4613      	mov	r3, r2
 80060a6:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 80060ac:	88fb      	ldrh	r3, [r7, #6]
 80060ae:	089b      	lsrs	r3, r3, #2
 80060b0:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 80060b2:	e00b      	b.n	80060cc <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	61ba      	str	r2, [r7, #24]
 80060bc:	617b      	str	r3, [r7, #20]

// MCU that could access unaligned memory natively
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }

TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	bf00      	nop
    ff_buf += 4;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	3304      	adds	r3, #4
 80060ca:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 80060cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060ce:	1e5a      	subs	r2, r3, #1
 80060d0:	84fa      	strh	r2, [r7, #38]	; 0x26
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1ee      	bne.n	80060b4 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 80060d6:	88fb      	ldrh	r3, [r7, #6]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80060e0:	7ffb      	ldrb	r3, [r7, #31]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d009      	beq.n	80060fa <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 80060ec:	7ffa      	ldrb	r2, [r7, #31]
 80060ee:	f107 0310 	add.w	r3, r7, #16
 80060f2:	4619      	mov	r1, r3
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f004 f91d 	bl	800a334 <memcpy>
  }
}
 80060fa:	bf00      	nop
 80060fc:	3728      	adds	r7, #40	; 0x28
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b08a      	sub	sp, #40	; 0x28
 8006106:	af00      	add	r7, sp, #0
 8006108:	60f8      	str	r0, [r7, #12]
 800610a:	60b9      	str	r1, [r7, #8]
 800610c:	4613      	mov	r3, r2
 800610e:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8006114:	88fb      	ldrh	r3, [r7, #6]
 8006116:	089b      	lsrs	r3, r3, #2
 8006118:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 800611a:	e008      	b.n	800612e <_ff_pull_const_addr+0x2c>
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	61bb      	str	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	3304      	adds	r3, #4
 800612c:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 800612e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006130:	1e5a      	subs	r2, r3, #1
 8006132:	84fa      	strh	r2, [r7, #38]	; 0x26
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1f1      	bne.n	800611c <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8006138:	88fb      	ldrh	r3, [r7, #6]
 800613a:	b2db      	uxtb	r3, r3
 800613c:	f003 0303 	and.w	r3, r3, #3
 8006140:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8006142:	7ffb      	ldrb	r3, [r7, #31]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00b      	beq.n	8006160 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8006148:	2300      	movs	r3, #0
 800614a:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 800614c:	7ffa      	ldrb	r2, [r7, #31]
 800614e:	f107 0314 	add.w	r3, r7, #20
 8006152:	68b9      	ldr	r1, [r7, #8]
 8006154:	4618      	mov	r0, r3
 8006156:	f004 f8ed 	bl	800a334 <memcpy>

    *reg_tx = tmp32;
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	601a      	str	r2, [r3, #0]
  }
}
 8006160:	bf00      	nop
 8006162:	3728      	adds	r7, #40	; 0x28
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <_ff_push>:

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	4613      	mov	r3, r2
 8006174:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	88fa      	ldrh	r2, [r7, #6]
 800617c:	68f9      	ldr	r1, [r7, #12]
 800617e:	88c9      	ldrh	r1, [r1, #6]
 8006180:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006184:	b289      	uxth	r1, r1
 8006186:	fb01 f202 	mul.w	r2, r1, r2
 800618a:	1898      	adds	r0, r3, r2
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	88db      	ldrh	r3, [r3, #6]
 8006190:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006194:	b29b      	uxth	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	68b9      	ldr	r1, [r7, #8]
 800619a:	f004 f8cb 	bl	800a334 <memcpy>
}
 800619e:	bf00      	nop
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b08e      	sub	sp, #56	; 0x38
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	60f8      	str	r0, [r7, #12]
 80061ae:	60b9      	str	r1, [r7, #8]
 80061b0:	4611      	mov	r1, r2
 80061b2:	461a      	mov	r2, r3
 80061b4:	460b      	mov	r3, r1
 80061b6:	80fb      	strh	r3, [r7, #6]
 80061b8:	4613      	mov	r3, r2
 80061ba:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	889a      	ldrh	r2, [r3, #4]
 80061c0:	88bb      	ldrh	r3, [r7, #4]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count;
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	88db      	ldrh	r3, [r3, #6]
 80061d2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061dc:	fb13 f302 	smulbb	r3, r3, r2
 80061e0:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	88db      	ldrh	r3, [r3, #6]
 80061e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	461a      	mov	r2, r3
 80061ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061f0:	fb13 f302 	smulbb	r3, r3, r2
 80061f4:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	88ba      	ldrh	r2, [r7, #4]
 80061fc:	68f9      	ldr	r1, [r7, #12]
 80061fe:	88c9      	ldrh	r1, [r1, #6]
 8006200:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006204:	b289      	uxth	r1, r1
 8006206:	fb01 f202 	mul.w	r2, r1, r2
 800620a:	4413      	add	r3, r2
 800620c:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 800620e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <_ff_push_n+0x76>
 8006216:	2b01      	cmp	r3, #1
 8006218:	d022      	beq.n	8006260 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
  }
}
 800621a:	e09e      	b.n	800635a <_ff_push_n+0x1b4>
      if(n <= lin_count)
 800621c:	88fa      	ldrh	r2, [r7, #6]
 800621e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006220:	429a      	cmp	r2, r3
 8006222:	d80d      	bhi.n	8006240 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8006224:	88fb      	ldrh	r3, [r7, #6]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	88d2      	ldrh	r2, [r2, #6]
 800622a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800622e:	b292      	uxth	r2, r2
 8006230:	fb02 f303 	mul.w	r3, r2, r3
 8006234:	461a      	mov	r2, r3
 8006236:	68b9      	ldr	r1, [r7, #8]
 8006238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800623a:	f004 f87b 	bl	800a334 <memcpy>
      break;
 800623e:	e08c      	b.n	800635a <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8006240:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006242:	461a      	mov	r2, r3
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006248:	f004 f874 	bl	800a334 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	4413      	add	r3, r2
 8006256:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006258:	4619      	mov	r1, r3
 800625a:	f004 f86b 	bl	800a334 <memcpy>
      break;
 800625e:	e07c      	b.n	800635a <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8006260:	88fa      	ldrh	r2, [r7, #6]
 8006262:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006264:	429a      	cmp	r2, r3
 8006266:	d80f      	bhi.n	8006288 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	88db      	ldrh	r3, [r3, #6]
 800626c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006270:	b29b      	uxth	r3, r3
 8006272:	461a      	mov	r2, r3
 8006274:	88fb      	ldrh	r3, [r7, #6]
 8006276:	fb13 f302 	smulbb	r3, r3, r2
 800627a:	b29b      	uxth	r3, r3
 800627c:	461a      	mov	r2, r3
 800627e:	68b9      	ldr	r1, [r7, #8]
 8006280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006282:	f7ff ff0a 	bl	800609a <_ff_push_const_addr>
      break;
 8006286:	e067      	b.n	8006358 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8006288:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800628a:	f023 0303 	bic.w	r3, r3, #3
 800628e:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8006290:	8c3b      	ldrh	r3, [r7, #32]
 8006292:	461a      	mov	r2, r3
 8006294:	68b9      	ldr	r1, [r7, #8]
 8006296:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006298:	f7ff feff 	bl	800609a <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 800629c:	8c3b      	ldrh	r3, [r7, #32]
 800629e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062a0:	4413      	add	r3, r2
 80062a2:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 80062a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	f003 0303 	and.w	r3, r3, #3
 80062ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 80062b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d043      	beq.n	8006340 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 80062bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	f1c3 0304 	rsb	r3, r3, #4
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062ca:	837b      	strh	r3, [r7, #26]
 80062cc:	4613      	mov	r3, r2
 80062ce:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80062d0:	8b7a      	ldrh	r2, [r7, #26]
 80062d2:	8b3b      	ldrh	r3, [r7, #24]
 80062d4:	4293      	cmp	r3, r2
 80062d6:	bf28      	it	cs
 80062d8:	4613      	movcs	r3, r2
 80062da:	b29b      	uxth	r3, r3
 80062dc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 80062e0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32 = *rx_fifo;
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 80062f2:	f107 0314 	add.w	r3, r7, #20
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 80062f8:	e007      	b.n	800630a <_ff_push_n+0x164>
 80062fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062fc:	1c53      	adds	r3, r2, #1
 80062fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006302:	1c59      	adds	r1, r3, #1
 8006304:	6339      	str	r1, [r7, #48]	; 0x30
 8006306:	7812      	ldrb	r2, [r2, #0]
 8006308:	701a      	strb	r2, [r3, #0]
 800630a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800630e:	1e5a      	subs	r2, r3, #1
 8006310:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1f0      	bne.n	80062fa <_ff_push_n+0x154>
          ff_buf = f->buffer;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 800631e:	e007      	b.n	8006330 <_ff_push_n+0x18a>
 8006320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006322:	1c53      	adds	r3, r2, #1
 8006324:	62bb      	str	r3, [r7, #40]	; 0x28
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	1c59      	adds	r1, r3, #1
 800632a:	6339      	str	r1, [r7, #48]	; 0x30
 800632c:	7812      	ldrb	r2, [r2, #0]
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006334:	1e5a      	subs	r2, r3, #1
 8006336:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1f0      	bne.n	8006320 <_ff_push_n+0x17a>
 800633e:	e002      	b.n	8006346 <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8006346:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006348:	2b00      	cmp	r3, #0
 800634a:	d005      	beq.n	8006358 <_ff_push_n+0x1b2>
 800634c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800634e:	461a      	mov	r2, r3
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006354:	f7ff fea1 	bl	800609a <_ff_push_const_addr>
      break;
 8006358:	bf00      	nop
}
 800635a:	bf00      	nop
 800635c:	3738      	adds	r7, #56	; 0x38
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	4613      	mov	r3, r2
 800636e:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	88fa      	ldrh	r2, [r7, #6]
 8006376:	68f9      	ldr	r1, [r7, #12]
 8006378:	88c9      	ldrh	r1, [r1, #6]
 800637a:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800637e:	b289      	uxth	r1, r1
 8006380:	fb01 f202 	mul.w	r2, r1, r2
 8006384:	1899      	adds	r1, r3, r2
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	88db      	ldrh	r3, [r3, #6]
 800638a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800638e:	b29b      	uxth	r3, r3
 8006390:	461a      	mov	r2, r3
 8006392:	68b8      	ldr	r0, [r7, #8]
 8006394:	f003 ffce 	bl	800a334 <memcpy>
}
 8006398:	bf00      	nop
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08e      	sub	sp, #56	; 0x38
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	4611      	mov	r1, r2
 80063ac:	461a      	mov	r2, r3
 80063ae:	460b      	mov	r3, r1
 80063b0:	80fb      	strh	r3, [r7, #6]
 80063b2:	4613      	mov	r3, r2
 80063b4:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	889a      	ldrh	r2, [r3, #4]
 80063ba:	88bb      	ldrh	r3, [r7, #4]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 80063c0:	88fa      	ldrh	r2, [r7, #6]
 80063c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	88db      	ldrh	r3, [r3, #6]
 80063cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	461a      	mov	r2, r3
 80063d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063d6:	fb13 f302 	smulbb	r3, r3, r2
 80063da:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	88db      	ldrh	r3, [r3, #6]
 80063e0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	461a      	mov	r2, r3
 80063e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063ea:	fb13 f302 	smulbb	r3, r3, r2
 80063ee:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	88ba      	ldrh	r2, [r7, #4]
 80063f6:	68f9      	ldr	r1, [r7, #12]
 80063f8:	88c9      	ldrh	r1, [r1, #6]
 80063fa:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80063fe:	b289      	uxth	r1, r1
 8006400:	fb01 f202 	mul.w	r2, r1, r2
 8006404:	4413      	add	r3, r2
 8006406:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8006408:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <_ff_pull_n+0x76>
 8006410:	2b01      	cmp	r3, #1
 8006412:	d022      	beq.n	800645a <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;

    default: break;
 8006414:	e0a0      	b.n	8006558 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8006416:	88fa      	ldrh	r2, [r7, #6]
 8006418:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800641a:	429a      	cmp	r2, r3
 800641c:	d80d      	bhi.n	800643a <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 800641e:	88fb      	ldrh	r3, [r7, #6]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	88d2      	ldrh	r2, [r2, #6]
 8006424:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006428:	b292      	uxth	r2, r2
 800642a:	fb02 f303 	mul.w	r3, r2, r3
 800642e:	461a      	mov	r2, r3
 8006430:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006432:	68b8      	ldr	r0, [r7, #8]
 8006434:	f003 ff7e 	bl	800a334 <memcpy>
    break;
 8006438:	e08e      	b.n	8006558 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 800643a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800643c:	461a      	mov	r2, r3
 800643e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006440:	68b8      	ldr	r0, [r7, #8]
 8006442:	f003 ff77 	bl	800a334 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8006446:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	18d0      	adds	r0, r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006452:	4619      	mov	r1, r3
 8006454:	f003 ff6e 	bl	800a334 <memcpy>
    break;
 8006458:	e07e      	b.n	8006558 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 800645a:	88fa      	ldrh	r2, [r7, #6]
 800645c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800645e:	429a      	cmp	r2, r3
 8006460:	d80f      	bhi.n	8006482 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	88db      	ldrh	r3, [r3, #6]
 8006466:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800646a:	b29b      	uxth	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	88fb      	ldrh	r3, [r7, #6]
 8006470:	fb13 f302 	smulbb	r3, r3, r2
 8006474:	b29b      	uxth	r3, r3
 8006476:	461a      	mov	r2, r3
 8006478:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800647a:	68b8      	ldr	r0, [r7, #8]
 800647c:	f7ff fe41 	bl	8006102 <_ff_pull_const_addr>
    break;
 8006480:	e069      	b.n	8006556 <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8006482:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006484:	f023 0303 	bic.w	r3, r3, #3
 8006488:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 800648a:	8c3b      	ldrh	r3, [r7, #32]
 800648c:	461a      	mov	r2, r3
 800648e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006490:	68b8      	ldr	r0, [r7, #8]
 8006492:	f7ff fe36 	bl	8006102 <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 8006496:	8c3b      	ldrh	r3, [r7, #32]
 8006498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800649a:	4413      	add	r3, r2
 800649c:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 800649e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 80064aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d045      	beq.n	800653e <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 80064b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	f1c3 0304 	rsb	r3, r3, #4
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80064c4:	837b      	strh	r3, [r7, #26]
 80064c6:	4613      	mov	r3, r2
 80064c8:	833b      	strh	r3, [r7, #24]
 80064ca:	8b7a      	ldrh	r2, [r7, #26]
 80064cc:	8b3b      	ldrh	r3, [r7, #24]
 80064ce:	4293      	cmp	r3, r2
 80064d0:	bf28      	it	cs
 80064d2:	4613      	movcs	r3, r2
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 80064da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80064de:	b29b      	uxth	r3, r3
 80064e0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32=0;
 80064e6:	2300      	movs	r3, #0
 80064e8:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 80064ea:	f107 0314 	add.w	r3, r7, #20
 80064ee:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 80064f0:	e007      	b.n	8006502 <_ff_pull_n+0x162>
 80064f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064f4:	1c53      	adds	r3, r2, #1
 80064f6:	633b      	str	r3, [r7, #48]	; 0x30
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	1c59      	adds	r1, r3, #1
 80064fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80064fe:	7812      	ldrb	r2, [r2, #0]
 8006500:	701a      	strb	r2, [r3, #0]
 8006502:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006506:	1e5a      	subs	r2, r3, #1
 8006508:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1f0      	bne.n	80064f2 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 8006516:	e007      	b.n	8006528 <_ff_pull_n+0x188>
 8006518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800651a:	1c53      	adds	r3, r2, #1
 800651c:	633b      	str	r3, [r7, #48]	; 0x30
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	1c59      	adds	r1, r3, #1
 8006522:	62b9      	str	r1, [r7, #40]	; 0x28
 8006524:	7812      	ldrb	r2, [r2, #0]
 8006526:	701a      	strb	r2, [r3, #0]
 8006528:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800652c:	1e5a      	subs	r2, r3, #1
 800652e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1f0      	bne.n	8006518 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	e002      	b.n	8006544 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8006544:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006546:	2b00      	cmp	r3, #0
 8006548:	d005      	beq.n	8006556 <_ff_pull_n+0x1b6>
 800654a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800654c:	461a      	mov	r2, r3
 800654e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006550:	68b8      	ldr	r0, [r7, #8]
 8006552:	f7ff fdd6 	bl	8006102 <_ff_pull_const_addr>
    break;
 8006556:	bf00      	nop
  }
}
 8006558:	bf00      	nop
 800655a:	3738      	adds	r7, #56	; 0x38
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	4603      	mov	r3, r0
 8006568:	80fb      	strh	r3, [r7, #6]
 800656a:	460b      	mov	r3, r1
 800656c:	80bb      	strh	r3, [r7, #4]
 800656e:	4613      	mov	r3, r2
 8006570:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8006572:	88ba      	ldrh	r2, [r7, #4]
 8006574:	887b      	ldrh	r3, [r7, #2]
 8006576:	4413      	add	r3, r2
 8006578:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800657a:	88ba      	ldrh	r2, [r7, #4]
 800657c:	89fb      	ldrh	r3, [r7, #14]
 800657e:	429a      	cmp	r2, r3
 8006580:	d804      	bhi.n	800658c <advance_index+0x2c>
 8006582:	89fa      	ldrh	r2, [r7, #14]
 8006584:	88fb      	ldrh	r3, [r7, #6]
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	429a      	cmp	r2, r3
 800658a:	db08      	blt.n	800659e <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 800658c:	88fb      	ldrh	r3, [r7, #6]
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	b29b      	uxth	r3, r3
 8006592:	425b      	negs	r3, r3
 8006594:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8006596:	89fa      	ldrh	r2, [r7, #14]
 8006598:	89bb      	ldrh	r3, [r7, #12]
 800659a:	4413      	add	r3, r2
 800659c:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 800659e:	89fb      	ldrh	r3, [r7, #14]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08a      	sub	sp, #40	; 0x28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	4611      	mov	r1, r2
 80065b8:	461a      	mov	r2, r3
 80065ba:	460b      	mov	r3, r1
 80065bc:	80fb      	strh	r3, [r7, #6]
 80065be:	4613      	mov	r3, r2
 80065c0:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	889b      	ldrh	r3, [r3, #4]
 80065c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80065c8:	88fb      	ldrh	r3, [r7, #6]
 80065ca:	843b      	strh	r3, [r7, #32]
 80065cc:	88bb      	ldrh	r3, [r7, #4]
 80065ce:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80065d0:	8c3a      	ldrh	r2, [r7, #32]
 80065d2:	8bfb      	ldrh	r3, [r7, #30]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d304      	bcc.n	80065e2 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80065d8:	8c3a      	ldrh	r2, [r7, #32]
 80065da:	8bfb      	ldrh	r3, [r7, #30]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	b29b      	uxth	r3, r3
 80065e0:	e008      	b.n	80065f4 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80065e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	8c39      	ldrh	r1, [r7, #32]
 80065ea:	8bfb      	ldrh	r3, [r7, #30]
 80065ec:	1acb      	subs	r3, r1, r3
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	4413      	add	r3, r2
 80065f2:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80065f4:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 80065f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <_tu_fifo_peek+0x54>
 80065fc:	2300      	movs	r3, #0
 80065fe:	e037      	b.n	8006670 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	889b      	ldrh	r3, [r3, #4]
 8006604:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006606:	429a      	cmp	r2, r3
 8006608:	d91b      	bls.n	8006642 <_tu_fifo_peek+0x96>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	61bb      	str	r3, [r7, #24]
 800660e:	88fb      	ldrh	r3, [r7, #6]
 8006610:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	889b      	ldrh	r3, [r3, #4]
 8006616:	8afa      	ldrh	r2, [r7, #22]
 8006618:	429a      	cmp	r2, r3
 800661a:	d305      	bcc.n	8006628 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	889b      	ldrh	r3, [r3, #4]
 8006620:	8afa      	ldrh	r2, [r7, #22]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	82bb      	strh	r3, [r7, #20]
 8006626:	e004      	b.n	8006632 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	889a      	ldrh	r2, [r3, #4]
 800662c:	8afb      	ldrh	r3, [r7, #22]
 800662e:	4413      	add	r3, r2
 8006630:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	8aba      	ldrh	r2, [r7, #20]
 8006636:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8006638:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800663a:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	889b      	ldrh	r3, [r3, #4]
 8006640:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	889b      	ldrh	r3, [r3, #4]
 8006646:	827b      	strh	r3, [r7, #18]
 8006648:	88bb      	ldrh	r3, [r7, #4]
 800664a:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 800664c:	e003      	b.n	8006656 <_tu_fifo_peek+0xaa>
 800664e:	8a3a      	ldrh	r2, [r7, #16]
 8006650:	8a7b      	ldrh	r3, [r7, #18]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	823b      	strh	r3, [r7, #16]
 8006656:	8a7a      	ldrh	r2, [r7, #18]
 8006658:	8a3b      	ldrh	r3, [r7, #16]
 800665a:	429a      	cmp	r2, r3
 800665c:	d9f7      	bls.n	800664e <_tu_fifo_peek+0xa2>
  return idx;
 800665e:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006660:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 8006662:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006664:	461a      	mov	r2, r3
 8006666:	68b9      	ldr	r1, [r7, #8]
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f7ff fe7a 	bl	8006362 <_ff_pull>

  return true;
 800666e:	2301      	movs	r3, #1
}
 8006670:	4618      	mov	r0, r3
 8006672:	3728      	adds	r7, #40	; 0x28
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08c      	sub	sp, #48	; 0x30
 800667c:	af02      	add	r7, sp, #8
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	4611      	mov	r1, r2
 8006684:	461a      	mov	r2, r3
 8006686:	460b      	mov	r3, r1
 8006688:	80fb      	strh	r3, [r7, #6]
 800668a:	4613      	mov	r3, r2
 800668c:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	889b      	ldrh	r3, [r3, #4]
 8006692:	847b      	strh	r3, [r7, #34]	; 0x22
 8006694:	88bb      	ldrh	r3, [r7, #4]
 8006696:	843b      	strh	r3, [r7, #32]
 8006698:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800669a:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 800669c:	8c3a      	ldrh	r2, [r7, #32]
 800669e:	8bfb      	ldrh	r3, [r7, #30]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d304      	bcc.n	80066ae <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80066a4:	8c3a      	ldrh	r2, [r7, #32]
 80066a6:	8bfb      	ldrh	r3, [r7, #30]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	e008      	b.n	80066c0 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80066ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	8c39      	ldrh	r1, [r7, #32]
 80066b6:	8bfb      	ldrh	r3, [r7, #30]
 80066b8:	1acb      	subs	r3, r1, r3
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	4413      	add	r3, r2
 80066be:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80066c0:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 80066c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <_tu_fifo_peek_n+0x54>
 80066c8:	2300      	movs	r3, #0
 80066ca:	e041      	b.n	8006750 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	889b      	ldrh	r3, [r3, #4]
 80066d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d91b      	bls.n	800670e <_tu_fifo_peek_n+0x96>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	61bb      	str	r3, [r7, #24]
 80066da:	88bb      	ldrh	r3, [r7, #4]
 80066dc:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	889b      	ldrh	r3, [r3, #4]
 80066e2:	8afa      	ldrh	r2, [r7, #22]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d305      	bcc.n	80066f4 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	889b      	ldrh	r3, [r3, #4]
 80066ec:	8afa      	ldrh	r2, [r7, #22]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	82bb      	strh	r3, [r7, #20]
 80066f2:	e004      	b.n	80066fe <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	889a      	ldrh	r2, [r3, #4]
 80066f8:	8afb      	ldrh	r3, [r7, #22]
 80066fa:	4413      	add	r3, r2
 80066fc:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	8aba      	ldrh	r2, [r7, #20]
 8006702:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8006704:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8006706:	863b      	strh	r3, [r7, #48]	; 0x30
    cnt = f->depth;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	889b      	ldrh	r3, [r3, #4]
 800670c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 800670e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006710:	88fb      	ldrh	r3, [r7, #6]
 8006712:	429a      	cmp	r2, r3
 8006714:	d201      	bcs.n	800671a <_tu_fifo_peek_n+0xa2>
 8006716:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006718:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	889b      	ldrh	r3, [r3, #4]
 800671e:	827b      	strh	r3, [r7, #18]
 8006720:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006722:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8006724:	e003      	b.n	800672e <_tu_fifo_peek_n+0xb6>
 8006726:	8a3a      	ldrh	r2, [r7, #16]
 8006728:	8a7b      	ldrh	r3, [r7, #18]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	823b      	strh	r3, [r7, #16]
 800672e:	8a7a      	ldrh	r2, [r7, #18]
 8006730:	8a3b      	ldrh	r3, [r7, #16]
 8006732:	429a      	cmp	r2, r3
 8006734:	d9f7      	bls.n	8006726 <_tu_fifo_peek_n+0xae>
  return idx;
 8006736:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006738:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 800673a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800673c:	88fa      	ldrh	r2, [r7, #6]
 800673e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	460b      	mov	r3, r1
 8006746:	68b9      	ldr	r1, [r7, #8]
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f7ff fe29 	bl	80063a0 <_ff_pull_n>

  return n;
 800674e:	88fb      	ldrh	r3, [r7, #6]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3728      	adds	r7, #40	; 0x28
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b092      	sub	sp, #72	; 0x48
 800675c:	af02      	add	r7, sp, #8
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	4611      	mov	r1, r2
 8006764:	461a      	mov	r2, r3
 8006766:	460b      	mov	r3, r1
 8006768:	80fb      	strh	r3, [r7, #6]
 800676a:	4613      	mov	r3, r2
 800676c:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 800676e:	88fb      	ldrh	r3, [r7, #6]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <_tu_fifo_write_n+0x20>
 8006774:	2300      	movs	r3, #0
 8006776:	e0bc      	b.n	80068f2 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	891b      	ldrh	r3, [r3, #8]
 800677c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t rd_idx = f->rd_idx;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	895b      	ldrh	r3, [r3, #10]
 8006782:	86fb      	strh	r3, [r7, #54]	; 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	63bb      	str	r3, [r7, #56]	; 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	79db      	ldrb	r3, [r3, #7]
 800678c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006790:	b2db      	uxtb	r3, r3
 8006792:	f083 0301 	eor.w	r3, r3, #1
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d036      	beq.n	800680a <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	889b      	ldrh	r3, [r3, #4]
 80067a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80067a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80067a4:	853b      	strh	r3, [r7, #40]	; 0x28
 80067a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80067a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80067aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80067ac:	84bb      	strh	r3, [r7, #36]	; 0x24
 80067ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80067b0:	847b      	strh	r3, [r7, #34]	; 0x22
 80067b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067b4:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 80067b6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80067b8:	8c3b      	ldrh	r3, [r7, #32]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d304      	bcc.n	80067c8 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 80067be:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80067c0:	8c3b      	ldrh	r3, [r7, #32]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	e008      	b.n	80067da <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80067c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80067d0:	8c3b      	ldrh	r3, [r7, #32]
 80067d2:	1acb      	subs	r3, r1, r3
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	4413      	add	r3, r2
 80067d8:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 80067da:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 80067dc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80067de:	8bfb      	ldrh	r3, [r7, #30]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d904      	bls.n	80067ee <_tu_fifo_write_n+0x96>
 80067e4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80067e6:	8bfb      	ldrh	r3, [r7, #30]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	e000      	b.n	80067f0 <_tu_fifo_write_n+0x98>
 80067ee:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 80067f0:	867b      	strh	r3, [r7, #50]	; 0x32
 80067f2:	88fb      	ldrh	r3, [r7, #6]
 80067f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80067f6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80067f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80067fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80067fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80067fe:	4293      	cmp	r3, r2
 8006800:	bf28      	it	cs
 8006802:	4613      	movcs	r3, r2
 8006804:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 8006806:	80fb      	strh	r3, [r7, #6]
 8006808:	e04b      	b.n	80068a2 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	889b      	ldrh	r3, [r3, #4]
 800680e:	88fa      	ldrh	r2, [r7, #6]
 8006810:	429a      	cmp	r2, r3
 8006812:	d317      	bcc.n	8006844 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8006814:	797b      	ldrb	r3, [r7, #5]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10e      	bne.n	8006838 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 800681a:	88fb      	ldrh	r3, [r7, #6]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	8892      	ldrh	r2, [r2, #4]
 8006820:	1a9b      	subs	r3, r3, r2
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	88d2      	ldrh	r2, [r2, #6]
 8006826:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800682a:	b292      	uxth	r2, r2
 800682c:	fb02 f303 	mul.w	r3, r2, r3
 8006830:	461a      	mov	r2, r3
 8006832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006834:	4413      	add	r3, r2
 8006836:	63bb      	str	r3, [r7, #56]	; 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	889b      	ldrh	r3, [r3, #4]
 800683c:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 800683e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006840:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006842:	e02e      	b.n	80068a2 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	889b      	ldrh	r3, [r3, #4]
 8006848:	83bb      	strh	r3, [r7, #28]
 800684a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800684c:	837b      	strh	r3, [r7, #26]
 800684e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006850:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8006852:	8b7a      	ldrh	r2, [r7, #26]
 8006854:	8b3b      	ldrh	r3, [r7, #24]
 8006856:	429a      	cmp	r2, r3
 8006858:	d304      	bcc.n	8006864 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 800685a:	8b7a      	ldrh	r2, [r7, #26]
 800685c:	8b3b      	ldrh	r3, [r7, #24]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	b29b      	uxth	r3, r3
 8006862:	e008      	b.n	8006876 <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006864:	8bbb      	ldrh	r3, [r7, #28]
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	8b79      	ldrh	r1, [r7, #26]
 800686c:	8b3b      	ldrh	r3, [r7, #24]
 800686e:	1acb      	subs	r3, r1, r3
 8006870:	b29b      	uxth	r3, r3
 8006872:	4413      	add	r3, r2
 8006874:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8006876:	86bb      	strh	r3, [r7, #52]	; 0x34
      if (overflowable_count + n >= 2*f->depth)
 8006878:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	441a      	add	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	889b      	ldrh	r3, [r3, #4]
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	429a      	cmp	r2, r3
 8006886:	db0c      	blt.n	80068a2 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8898      	ldrh	r0, [r3, #4]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	889a      	ldrh	r2, [r3, #4]
 8006890:	88fb      	ldrh	r3, [r7, #6]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	b29a      	uxth	r2, r3
 8006896:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006898:	4619      	mov	r1, r3
 800689a:	f7ff fe61 	bl	8006560 <advance_index>
 800689e:	4603      	mov	r3, r0
 80068a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 80068a2:	88fb      	ldrh	r3, [r7, #6]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d023      	beq.n	80068f0 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	889b      	ldrh	r3, [r3, #4]
 80068ac:	82fb      	strh	r3, [r7, #22]
 80068ae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80068b0:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 80068b2:	e003      	b.n	80068bc <_tu_fifo_write_n+0x164>
 80068b4:	8aba      	ldrh	r2, [r7, #20]
 80068b6:	8afb      	ldrh	r3, [r7, #22]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	82bb      	strh	r3, [r7, #20]
 80068bc:	8afa      	ldrh	r2, [r7, #22]
 80068be:	8abb      	ldrh	r3, [r7, #20]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d9f7      	bls.n	80068b4 <_tu_fifo_write_n+0x15c>
  return idx;
 80068c4:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80068c6:	863b      	strh	r3, [r7, #48]	; 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 80068c8:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80068ca:	88fa      	ldrh	r2, [r7, #6]
 80068cc:	797b      	ldrb	r3, [r7, #5]
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	460b      	mov	r3, r1
 80068d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f7ff fc66 	bl	80061a6 <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	889b      	ldrh	r3, [r3, #4]
 80068de:	88fa      	ldrh	r2, [r7, #6]
 80068e0:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7ff fe3c 	bl	8006560 <advance_index>
 80068e8:	4603      	mov	r3, r0
 80068ea:	461a      	mov	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 80068f0:	88fb      	ldrh	r3, [r7, #6]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3740      	adds	r7, #64	; 0x40
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b086      	sub	sp, #24
 80068fe:	af02      	add	r7, sp, #8
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	60b9      	str	r1, [r7, #8]
 8006904:	4611      	mov	r1, r2
 8006906:	461a      	mov	r2, r3
 8006908:	460b      	mov	r3, r1
 800690a:	80fb      	strh	r3, [r7, #6]
 800690c:	4613      	mov	r3, r2
 800690e:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	891b      	ldrh	r3, [r3, #8]
 8006914:	b298      	uxth	r0, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	895b      	ldrh	r3, [r3, #10]
 800691a:	b29b      	uxth	r3, r3
 800691c:	88f9      	ldrh	r1, [r7, #6]
 800691e:	797a      	ldrb	r2, [r7, #5]
 8006920:	9201      	str	r2, [sp, #4]
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	4603      	mov	r3, r0
 8006926:	460a      	mov	r2, r1
 8006928:	68b9      	ldr	r1, [r7, #8]
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f7ff fea4 	bl	8006678 <_tu_fifo_peek_n>
 8006930:	4603      	mov	r3, r0
 8006932:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8898      	ldrh	r0, [r3, #4]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	895b      	ldrh	r3, [r3, #10]
 800693c:	b29b      	uxth	r3, r3
 800693e:	88fa      	ldrh	r2, [r7, #6]
 8006940:	4619      	mov	r1, r3
 8006942:	f7ff fe0d 	bl	8006560 <advance_index>
 8006946:	4603      	mov	r3, r0
 8006948:	461a      	mov	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 800694e:	88fb      	ldrh	r3, [r7, #6]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	8899      	ldrh	r1, [r3, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	891b      	ldrh	r3, [r3, #8]
 8006968:	b29a      	uxth	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	895b      	ldrh	r3, [r3, #10]
 800696e:	b29b      	uxth	r3, r3
 8006970:	8279      	strh	r1, [r7, #18]
 8006972:	823a      	strh	r2, [r7, #16]
 8006974:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 8006976:	8a3a      	ldrh	r2, [r7, #16]
 8006978:	89fb      	ldrh	r3, [r7, #14]
 800697a:	429a      	cmp	r2, r3
 800697c:	d304      	bcc.n	8006988 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 800697e:	8a3a      	ldrh	r2, [r7, #16]
 8006980:	89fb      	ldrh	r3, [r7, #14]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	b29b      	uxth	r3, r3
 8006986:	e008      	b.n	800699a <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006988:	8a7b      	ldrh	r3, [r7, #18]
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	b29a      	uxth	r2, r3
 800698e:	8a39      	ldrh	r1, [r7, #16]
 8006990:	89fb      	ldrh	r3, [r7, #14]
 8006992:	1acb      	subs	r3, r1, r3
 8006994:	b29b      	uxth	r3, r3
 8006996:	4413      	add	r3, r2
 8006998:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	8892      	ldrh	r2, [r2, #4]
 800699e:	82fb      	strh	r3, [r7, #22]
 80069a0:	4613      	mov	r3, r2
 80069a2:	82bb      	strh	r3, [r7, #20]
 80069a4:	8afa      	ldrh	r2, [r7, #22]
 80069a6:	8abb      	ldrh	r3, [r7, #20]
 80069a8:	4293      	cmp	r3, r2
 80069aa:	bf28      	it	cs
 80069ac:	4613      	movcs	r3, r2
 80069ae:	b29b      	uxth	r3, r3
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	371c      	adds	r7, #28
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	891b      	ldrh	r3, [r3, #8]
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	895b      	ldrh	r3, [r3, #10]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	429a      	cmp	r2, r3
 80069d2:	bf0c      	ite	eq
 80069d4:	2301      	moveq	r3, #1
 80069d6:	2300      	movne	r3, #0
 80069d8:	b2db      	uxtb	r3, r3
}
 80069da:	4618      	mov	r0, r3
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b085      	sub	sp, #20
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	8899      	ldrh	r1, [r3, #4]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	891b      	ldrh	r3, [r3, #8]
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	895b      	ldrh	r3, [r3, #10]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	81f9      	strh	r1, [r7, #14]
 8006a00:	81ba      	strh	r2, [r7, #12]
 8006a02:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8006a04:	89ba      	ldrh	r2, [r7, #12]
 8006a06:	897b      	ldrh	r3, [r7, #10]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d304      	bcc.n	8006a16 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8006a0c:	89ba      	ldrh	r2, [r7, #12]
 8006a0e:	897b      	ldrh	r3, [r7, #10]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	e008      	b.n	8006a28 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006a16:	89fb      	ldrh	r3, [r7, #14]
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	89b9      	ldrh	r1, [r7, #12]
 8006a1e:	897b      	ldrh	r3, [r7, #10]
 8006a20:	1acb      	subs	r3, r1, r3
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	4413      	add	r3, r2
 8006a26:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	8892      	ldrh	r2, [r2, #4]
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	bf2c      	ite	cs
 8006a30:	2301      	movcs	r3, #1
 8006a32:	2300      	movcc	r3, #0
 8006a34:	b2db      	uxtb	r3, r3
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b087      	sub	sp, #28
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	8899      	ldrh	r1, [r3, #4]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	891b      	ldrh	r3, [r3, #8]
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	895b      	ldrh	r3, [r3, #10]
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	82f9      	strh	r1, [r7, #22]
 8006a5c:	82ba      	strh	r2, [r7, #20]
 8006a5e:	827b      	strh	r3, [r7, #18]
 8006a60:	8afb      	ldrh	r3, [r7, #22]
 8006a62:	823b      	strh	r3, [r7, #16]
 8006a64:	8abb      	ldrh	r3, [r7, #20]
 8006a66:	81fb      	strh	r3, [r7, #14]
 8006a68:	8a7b      	ldrh	r3, [r7, #18]
 8006a6a:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8006a6c:	89fa      	ldrh	r2, [r7, #14]
 8006a6e:	89bb      	ldrh	r3, [r7, #12]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d304      	bcc.n	8006a7e <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8006a74:	89fa      	ldrh	r2, [r7, #14]
 8006a76:	89bb      	ldrh	r3, [r7, #12]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	e008      	b.n	8006a90 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006a7e:	8a3b      	ldrh	r3, [r7, #16]
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	89f9      	ldrh	r1, [r7, #14]
 8006a86:	89bb      	ldrh	r3, [r7, #12]
 8006a88:	1acb      	subs	r3, r1, r3
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	4413      	add	r3, r2
 8006a8e:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8006a90:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8006a92:	8afa      	ldrh	r2, [r7, #22]
 8006a94:	897b      	ldrh	r3, [r7, #10]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d904      	bls.n	8006aa4 <tu_fifo_remaining+0x62>
 8006a9a:	8afa      	ldrh	r2, [r7, #22]
 8006a9c:	897b      	ldrh	r3, [r7, #10]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	e000      	b.n	8006aa6 <tu_fifo_remaining+0x64>
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	371c      	adds	r7, #28
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b084      	sub	sp, #16
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	891b      	ldrh	r3, [r3, #8]
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	895b      	ldrh	r3, [r3, #10]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff fd6e 	bl	80065ac <_tu_fifo_peek>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	8898      	ldrh	r0, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	895b      	ldrh	r3, [r3, #10]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	7bfa      	ldrb	r2, [r7, #15]
 8006ae0:	b292      	uxth	r2, r2
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	f7ff fd3c 	bl	8006560 <advance_index>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	461a      	mov	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	4613      	mov	r3, r2
 8006b06:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8006b08:	88fa      	ldrh	r2, [r7, #6]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	68b9      	ldr	r1, [r7, #8]
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f7ff fef3 	bl	80068fa <_tu_fifo_read_n>
 8006b14:	4603      	mov	r3, r0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b084      	sub	sp, #16
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	60f8      	str	r0, [r7, #12]
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8006b2c:	88fa      	ldrh	r2, [r7, #6]
 8006b2e:	2301      	movs	r3, #1
 8006b30:	68b9      	ldr	r1, [r7, #8]
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f7ff fee1 	bl	80068fa <_tu_fifo_read_n>
 8006b38:	4603      	mov	r3, r0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b086      	sub	sp, #24
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	891b      	ldrh	r3, [r3, #8]
 8006b50:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7ff ff47 	bl	80069e6 <tu_fifo_full>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00c      	beq.n	8006b78 <tu_fifo_write+0x36>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	79db      	ldrb	r3, [r3, #7]
 8006b62:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	f083 0301 	eor.w	r3, r3, #1
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d002      	beq.n	8006b78 <tu_fifo_write+0x36>
  {
    ret = false;
 8006b72:	2300      	movs	r3, #0
 8006b74:	75fb      	strb	r3, [r7, #23]
 8006b76:	e022      	b.n	8006bbe <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	889b      	ldrh	r3, [r3, #4]
 8006b7c:	823b      	strh	r3, [r7, #16]
 8006b7e:	8abb      	ldrh	r3, [r7, #20]
 8006b80:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8006b82:	e003      	b.n	8006b8c <tu_fifo_write+0x4a>
 8006b84:	89fa      	ldrh	r2, [r7, #14]
 8006b86:	8a3b      	ldrh	r3, [r7, #16]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	81fb      	strh	r3, [r7, #14]
 8006b8c:	8a3a      	ldrh	r2, [r7, #16]
 8006b8e:	89fb      	ldrh	r3, [r7, #14]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d9f7      	bls.n	8006b84 <tu_fifo_write+0x42>
  return idx;
 8006b94:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006b96:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8006b98:	8a7b      	ldrh	r3, [r7, #18]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7ff fae2 	bl	8006168 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	889b      	ldrh	r3, [r3, #4]
 8006ba8:	8ab9      	ldrh	r1, [r7, #20]
 8006baa:	2201      	movs	r2, #1
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7ff fcd7 	bl	8006560 <advance_index>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	811a      	strh	r2, [r3, #8]

    ret = true;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8006bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3718      	adds	r7, #24
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8006bd6:	88fa      	ldrh	r2, [r7, #6]
 8006bd8:	2300      	movs	r3, #0
 8006bda:	68b9      	ldr	r1, [r7, #8]
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f7ff fdbb 	bl	8006758 <_tu_fifo_write_n>
 8006be2:	4603      	mov	r3, r0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8006bfa:	88fa      	ldrh	r2, [r7, #6]
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	68b9      	ldr	r1, [r7, #8]
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f7ff fda9 	bl	8006758 <_tu_fifo_write_n>
 8006c06:	4603      	mov	r3, r0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8006c24:	2301      	movs	r3, #1
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b083      	sub	sp, #12
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	79d3      	ldrb	r3, [r2, #7]
 8006c42:	78f9      	ldrb	r1, [r7, #3]
 8006c44:	f361 13c7 	bfi	r3, r1, #7, #1
 8006c48:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8006c4a:	2301      	movs	r3, #1
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <get_driver>:
tu_static uint8_t _app_driver_count = 0;

// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	4603      	mov	r3, r0
 8006c60:	71fb      	strb	r3, [r7, #7]
  // Application drivers
  if ( usbd_app_driver_get_cb )
 8006c62:	4b14      	ldr	r3, [pc, #80]	; (8006cb4 <get_driver+0x5c>)
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d012      	beq.n	8006c8e <get_driver+0x36>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8006c68:	4b13      	ldr	r3, [pc, #76]	; (8006cb8 <get_driver+0x60>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	79fa      	ldrb	r2, [r7, #7]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d208      	bcs.n	8006c84 <get_driver+0x2c>
 8006c72:	4b12      	ldr	r3, [pc, #72]	; (8006cbc <get_driver+0x64>)
 8006c74:	6819      	ldr	r1, [r3, #0]
 8006c76:	79fa      	ldrb	r2, [r7, #7]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	4413      	add	r3, r2
 8006c7e:	00db      	lsls	r3, r3, #3
 8006c80:	440b      	add	r3, r1
 8006c82:	e010      	b.n	8006ca6 <get_driver+0x4e>
    drvid -= _app_driver_count;
 8006c84:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <get_driver+0x60>)
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	79fa      	ldrb	r2, [r7, #7]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	71fb      	strb	r3, [r7, #7]
  }

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8006c8e:	79fb      	ldrb	r3, [r7, #7]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d807      	bhi.n	8006ca4 <get_driver+0x4c>
 8006c94:	79fa      	ldrb	r2, [r7, #7]
 8006c96:	4613      	mov	r3, r2
 8006c98:	005b      	lsls	r3, r3, #1
 8006c9a:	4413      	add	r3, r2
 8006c9c:	00db      	lsls	r3, r3, #3
 8006c9e:	4a08      	ldr	r2, [pc, #32]	; (8006cc0 <get_driver+0x68>)
 8006ca0:	4413      	add	r3, r2
 8006ca2:	e000      	b.n	8006ca6 <get_driver+0x4e>

  return NULL;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	00000000 	.word	0x00000000
 8006cb8:	240019dc 	.word	0x240019dc
 8006cbc:	240019d8 	.word	0x240019d8
 8006cc0:	0800b190 	.word	0x0800b190

08006cc4 <tud_mounted>:
{
  return _usbd_dev.connected;
}

bool tud_mounted(void)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8006cc8:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <tud_mounted+0x20>)
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	bf14      	ite	ne
 8006cd2:	2301      	movne	r3, #1
 8006cd4:	2300      	moveq	r3, #0
 8006cd6:	b2db      	uxtb	r3, r3
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	240019a0 	.word	0x240019a0

08006ce8 <tud_suspended>:

bool tud_suspended(void)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8006cec:	4b07      	ldr	r3, [pc, #28]	; (8006d0c <tud_suspended+0x24>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	bf14      	ite	ne
 8006cfa:	2301      	movne	r3, #1
 8006cfc:	2300      	moveq	r3, #0
 8006cfe:	b2db      	uxtb	r3, r3
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	240019a0 	.word	0x240019a0

08006d10 <tud_inited>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void)
{
 8006d10:	b480      	push	{r7}
 8006d12:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8006d14:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <tud_inited+0x1c>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2bff      	cmp	r3, #255	; 0xff
 8006d1a:	bf14      	ite	ne
 8006d1c:	2301      	movne	r3, #1
 8006d1e:	2300      	moveq	r3, #0
 8006d20:	b2db      	uxtb	r3, r3
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	24000035 	.word	0x24000035

08006d30 <tud_init>:

bool tud_init (uint8_t rhport)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b088      	sub	sp, #32
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	4603      	mov	r3, r0
 8006d38:	71fb      	strb	r3, [r7, #7]
  // skip if already initialized
  if ( tud_inited() ) return true;
 8006d3a:	f7ff ffe9 	bl	8006d10 <tud_inited>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <tud_init+0x18>
 8006d44:	2301      	movs	r3, #1
 8006d46:	e054      	b.n	8006df2 <tud_init+0xc2>
  TU_LOG(USBD_DBG, "USBD init on controller %u\r\n", rhport);
  TU_LOG_INT(USBD_DBG, sizeof(usbd_device_t));
  TU_LOG_INT(USBD_DBG, sizeof(tu_fifo_t));
  TU_LOG_INT(USBD_DBG, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8006d48:	2237      	movs	r2, #55	; 0x37
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	482b      	ldr	r0, [pc, #172]	; (8006dfc <tud_init+0xcc>)
 8006d4e:	f003 faff 	bl	800a350 <memset>
 8006d52:	4b2b      	ldr	r3, [pc, #172]	; (8006e00 <tud_init+0xd0>)
 8006d54:	60fb      	str	r3, [r7, #12]
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  tu_fifo_clear(&qdef->ff);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3304      	adds	r3, #4
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff ff58 	bl	8006c10 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8006d60:	68fb      	ldr	r3, [r7, #12]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8006d62:	4a28      	ldr	r2, [pc, #160]	; (8006e04 <tud_init+0xd4>)
 8006d64:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8006d66:	4b27      	ldr	r3, [pc, #156]	; (8006e04 <tud_init+0xd4>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10a      	bne.n	8006d84 <tud_init+0x54>
 8006d6e:	4b26      	ldr	r3, [pc, #152]	; (8006e08 <tud_init+0xd8>)
 8006d70:	613b      	str	r3, [r7, #16]
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d000      	beq.n	8006d80 <tud_init+0x50>
 8006d7e:	be00      	bkpt	0x0000
 8006d80:	2300      	movs	r3, #0
 8006d82:	e036      	b.n	8006df2 <tud_init+0xc2>

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
 8006d84:	4b21      	ldr	r3, [pc, #132]	; (8006e0c <tud_init+0xdc>)
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d005      	beq.n	8006d96 <tud_init+0x66>
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8006d8a:	4821      	ldr	r0, [pc, #132]	; (8006e10 <tud_init+0xe0>)
 8006d8c:	f3af 8000 	nop.w
 8006d90:	4603      	mov	r3, r0
 8006d92:	4a20      	ldr	r2, [pc, #128]	; (8006e14 <tud_init+0xe4>)
 8006d94:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8006d96:	2300      	movs	r3, #0
 8006d98:	77fb      	strb	r3, [r7, #31]
 8006d9a:	e018      	b.n	8006dce <tud_init+0x9e>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8006d9c:	7ffb      	ldrb	r3, [r7, #31]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff ff5a 	bl	8006c58 <get_driver>
 8006da4:	61b8      	str	r0, [r7, #24]
    TU_ASSERT(driver);
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10a      	bne.n	8006dc2 <tud_init+0x92>
 8006dac:	4b16      	ldr	r3, [pc, #88]	; (8006e08 <tud_init+0xd8>)
 8006dae:	617b      	str	r3, [r7, #20]
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d000      	beq.n	8006dbe <tud_init+0x8e>
 8006dbc:	be00      	bkpt	0x0000
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	e017      	b.n	8006df2 <tud_init+0xc2>
    TU_LOG(USBD_DBG, "%s init\r\n", driver->name);
    driver->init();
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8006dc8:	7ffb      	ldrb	r3, [r7, #31]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	77fb      	strb	r3, [r7, #31]
 8006dce:	4b10      	ldr	r3, [pc, #64]	; (8006e10 <tud_init+0xe0>)
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	1c5a      	adds	r2, r3, #1
 8006dd4:	7ffb      	ldrb	r3, [r7, #31]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	dae0      	bge.n	8006d9c <tud_init+0x6c>
  }

  _usbd_rhport = rhport;
 8006dda:	4a0f      	ldr	r2, [pc, #60]	; (8006e18 <tud_init+0xe8>)
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  dcd_init(rhport);
 8006de0:	79fb      	ldrb	r3, [r7, #7]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f002 f812 	bl	8008e0c <dcd_init>
  dcd_int_enable(rhport);
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f002 f876 	bl	8008edc <dcd_int_enable>

  return true;
 8006df0:	2301      	movs	r3, #1
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3720      	adds	r7, #32
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	240019a0 	.word	0x240019a0
 8006e00:	24000038 	.word	0x24000038
 8006e04:	24001aa0 	.word	0x24001aa0
 8006e08:	e000edf0 	.word	0xe000edf0
 8006e0c:	00000000 	.word	0x00000000
 8006e10:	240019dc 	.word	0x240019dc
 8006e14:	240019d8 	.word	0x240019d8
 8006e18:	24000035 	.word	0x24000035

08006e1c <configuration_reset>:

static void configuration_reset(uint8_t rhport)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	4603      	mov	r3, r0
 8006e24:	71fb      	strb	r3, [r7, #7]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8006e26:	2300      	movs	r3, #0
 8006e28:	75fb      	strb	r3, [r7, #23]
 8006e2a:	e019      	b.n	8006e60 <configuration_reset+0x44>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8006e2c:	7dfb      	ldrb	r3, [r7, #23]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7ff ff12 	bl	8006c58 <get_driver>
 8006e34:	6138      	str	r0, [r7, #16]
    TU_ASSERT(driver, );
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d109      	bne.n	8006e50 <configuration_reset+0x34>
 8006e3c:	4b15      	ldr	r3, [pc, #84]	; (8006e94 <configuration_reset+0x78>)
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d01f      	beq.n	8006e8c <configuration_reset+0x70>
 8006e4c:	be00      	bkpt	0x0000
 8006e4e:	e01d      	b.n	8006e8c <configuration_reset+0x70>
    driver->reset(rhport);
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	79fa      	ldrb	r2, [r7, #7]
 8006e56:	4610      	mov	r0, r2
 8006e58:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8006e5a:	7dfb      	ldrb	r3, [r7, #23]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	75fb      	strb	r3, [r7, #23]
 8006e60:	4b0d      	ldr	r3, [pc, #52]	; (8006e98 <configuration_reset+0x7c>)
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	7dfb      	ldrb	r3, [r7, #23]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	dadf      	bge.n	8006e2c <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8006e6c:	2237      	movs	r2, #55	; 0x37
 8006e6e:	2100      	movs	r1, #0
 8006e70:	480a      	ldr	r0, [pc, #40]	; (8006e9c <configuration_reset+0x80>)
 8006e72:	f003 fa6d 	bl	800a350 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8006e76:	2210      	movs	r2, #16
 8006e78:	21ff      	movs	r1, #255	; 0xff
 8006e7a:	4809      	ldr	r0, [pc, #36]	; (8006ea0 <configuration_reset+0x84>)
 8006e7c:	f003 fa68 	bl	800a350 <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 8006e80:	2212      	movs	r2, #18
 8006e82:	21ff      	movs	r1, #255	; 0xff
 8006e84:	4807      	ldr	r0, [pc, #28]	; (8006ea4 <configuration_reset+0x88>)
 8006e86:	f003 fa63 	bl	800a350 <memset>
 8006e8a:	e000      	b.n	8006e8e <configuration_reset+0x72>
    TU_ASSERT(driver, );
 8006e8c:	bf00      	nop
}
 8006e8e:	3718      	adds	r7, #24
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	e000edf0 	.word	0xe000edf0
 8006e98:	240019dc 	.word	0x240019dc
 8006e9c:	240019a0 	.word	0x240019a0
 8006ea0:	240019a3 	.word	0x240019a3
 8006ea4:	240019b3 	.word	0x240019b3

08006ea8 <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	4603      	mov	r3, r0
 8006eb0:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8006eb2:	79fb      	ldrb	r3, [r7, #7]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7ff ffb1 	bl	8006e1c <configuration_reset>
  usbd_control_reset();
 8006eba:	f001 fbfb 	bl	80086b4 <usbd_control_reset>
}
 8006ebe:	bf00      	nop
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
	...

08006ec8 <tud_task_ext>:
      }
    }
    @endcode
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr)
{
 8006ec8:	b590      	push	{r4, r7, lr}
 8006eca:	b091      	sub	sp, #68	; 0x44
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if ( !tud_inited() ) return;
 8006ed4:	f7ff ff1c 	bl	8006d10 <tud_inited>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	f083 0301 	eor.w	r3, r3, #1
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f040 812e 	bne.w	8007142 <tud_task_ext+0x27a>

  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8006ee6:	4b9b      	ldr	r3, [pc, #620]	; (8007154 <tud_task_ext+0x28c>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eec:	f107 0308 	add.w	r3, r7, #8
 8006ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef8:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2000      	movs	r0, #0
 8006f00:	4798      	blx	r3
}
 8006f02:	bf00      	nop
TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec)
{
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 8006f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f06:	3304      	adds	r3, #4
 8006f08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7ff fdd1 	bl	8006ab2 <tu_fifo_read>
 8006f10:	4603      	mov	r3, r0
 8006f12:	77fb      	strb	r3, [r7, #31]
 8006f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f16:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2001      	movs	r0, #1
 8006f1e:	4798      	blx	r3
}
 8006f20:	bf00      	nop
  _osal_q_unlock(qhdl);

  return success;
 8006f22:	7ffb      	ldrb	r3, [r7, #31]
 8006f24:	f083 0301 	eor.w	r3, r3, #1
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f040 810b 	bne.w	8007146 <tud_task_ext+0x27e>
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG(USBD_DBG, "\r\n"); // extra line for setup
    TU_LOG(USBD_DBG, "USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
 8006f30:	7a7b      	ldrb	r3, [r7, #9]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	2b07      	cmp	r3, #7
 8006f36:	f200 80ee 	bhi.w	8007116 <tud_task_ext+0x24e>
 8006f3a:	a201      	add	r2, pc, #4	; (adr r2, 8006f40 <tud_task_ext+0x78>)
 8006f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f40:	08006f61 	.word	0x08006f61
 8006f44:	08006f71 	.word	0x08006f71
 8006f48:	08007117 	.word	0x08007117
 8006f4c:	080070bd 	.word	0x080070bd
 8006f50:	080070ed 	.word	0x080070ed
 8006f54:	08006f87 	.word	0x08006f87
 8006f58:	08006ffd 	.word	0x08006ffd
 8006f5c:	08007107 	.word	0x08007107
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG(USBD_DBG, ": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8006f60:	7a3b      	ldrb	r3, [r7, #8]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7ff ffa0 	bl	8006ea8 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8006f68:	7b3a      	ldrb	r2, [r7, #12]
 8006f6a:	4b7b      	ldr	r3, [pc, #492]	; (8007158 <tud_task_ext+0x290>)
 8006f6c:	709a      	strb	r2, [r3, #2]
      break;
 8006f6e:	e0e7      	b.n	8007140 <tud_task_ext+0x278>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG(USBD_DBG, "\r\n");
        usbd_reset(event.rhport);
 8006f70:	7a3b      	ldrb	r3, [r7, #8]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff ff98 	bl	8006ea8 <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 8006f78:	4b78      	ldr	r3, [pc, #480]	; (800715c <tud_task_ext+0x294>)
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 80d5 	beq.w	800712a <tud_task_ext+0x262>
 8006f80:	f7f9 fa3c 	bl	80003fc <tud_umount_cb>
      break;
 8006f84:	e0d1      	b.n	800712a <tud_task_ext+0x262>
        TU_LOG_PTR(USBD_DBG, &event.setup_received);
        TU_LOG(USBD_DBG, "\r\n");

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8006f86:	4a74      	ldr	r2, [pc, #464]	; (8007158 <tud_task_ext+0x290>)
 8006f88:	7813      	ldrb	r3, [r2, #0]
 8006f8a:	f043 0301 	orr.w	r3, r3, #1
 8006f8e:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8006f90:	4a71      	ldr	r2, [pc, #452]	; (8007158 <tud_task_ext+0x290>)
 8006f92:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8006f96:	f36f 0300 	bfc	r3, #0, #1
 8006f9a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8006f9e:	4a6e      	ldr	r2, [pc, #440]	; (8007158 <tud_task_ext+0x290>)
 8006fa0:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8006fa4:	f36f 0382 	bfc	r3, #2, #1
 8006fa8:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = 0;
 8006fac:	4a6a      	ldr	r2, [pc, #424]	; (8007158 <tud_task_ext+0x290>)
 8006fae:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8006fb2:	f36f 0300 	bfc	r3, #0, #1
 8006fb6:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8006fba:	4a67      	ldr	r2, [pc, #412]	; (8007158 <tud_task_ext+0x290>)
 8006fbc:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8006fc0:	f36f 0382 	bfc	r3, #2, #1
 8006fc4:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8006fc8:	7a3a      	ldrb	r2, [r7, #8]
 8006fca:	f107 0308 	add.w	r3, r7, #8
 8006fce:	3304      	adds	r3, #4
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4610      	mov	r0, r2
 8006fd4:	f000 f8e2 	bl	800719c <process_control_request>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	f083 0301 	eor.w	r3, r3, #1
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 80a4 	beq.w	800712e <tud_task_ext+0x266>
        {
          TU_LOG(USBD_DBG, "  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8006fe6:	7a3b      	ldrb	r3, [r7, #8]
 8006fe8:	2100      	movs	r1, #0
 8006fea:	4618      	mov	r0, r3
 8006fec:	f002 fb54 	bl	8009698 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8006ff0:	7a3b      	ldrb	r3, [r7, #8]
 8006ff2:	2180      	movs	r1, #128	; 0x80
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f002 fb4f 	bl	8009698 <dcd_edpt_stall>
        }
      break;
 8006ffa:	e098      	b.n	800712e <tud_task_ext+0x266>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8006ffc:	7b3b      	ldrb	r3, [r7, #12]
 8006ffe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007002:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007006:	75bb      	strb	r3, [r7, #22]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007008:	7dbb      	ldrb	r3, [r7, #22]
 800700a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800700e:	b2db      	uxtb	r3, r3
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 8007010:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8007014:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007018:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800701a:	7dfb      	ldrb	r3, [r7, #23]
 800701c:	09db      	lsrs	r3, r3, #7
 800701e:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8007020:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

        TU_LOG(USBD_DBG, "on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8007024:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8007028:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800702c:	494a      	ldr	r1, [pc, #296]	; (8007158 <tud_task_ext+0x290>)
 800702e:	0052      	lsls	r2, r2, #1
 8007030:	440a      	add	r2, r1
 8007032:	4413      	add	r3, r2
 8007034:	f103 0220 	add.w	r2, r3, #32
 8007038:	7953      	ldrb	r3, [r2, #5]
 800703a:	f36f 0300 	bfc	r3, #0, #1
 800703e:	7153      	strb	r3, [r2, #5]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8007040:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8007044:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007048:	4943      	ldr	r1, [pc, #268]	; (8007158 <tud_task_ext+0x290>)
 800704a:	0052      	lsls	r2, r2, #1
 800704c:	440a      	add	r2, r1
 800704e:	4413      	add	r3, r2
 8007050:	f103 0220 	add.w	r2, r3, #32
 8007054:	7953      	ldrb	r3, [r2, #5]
 8007056:	f36f 0382 	bfc	r3, #2, #1
 800705a:	7153      	strb	r3, [r2, #5]

        if ( 0 == epnum )
 800705c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007060:	2b00      	cmp	r3, #0
 8007062:	d107      	bne.n	8007074 <tud_task_ext+0x1ac>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete
 8007064:	7a38      	ldrb	r0, [r7, #8]
 8007066:	7b7a      	ldrb	r2, [r7, #13]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800706e:	f001 fb57 	bl	8008720 <usbd_control_xfer_cb>

          TU_LOG(USBD_DBG, "  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 8007072:	e065      	b.n	8007140 <tud_task_ext+0x278>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 8007074:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8007078:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800707c:	4936      	ldr	r1, [pc, #216]	; (8007158 <tud_task_ext+0x290>)
 800707e:	0052      	lsls	r2, r2, #1
 8007080:	440a      	add	r2, r1
 8007082:	4413      	add	r3, r2
 8007084:	3313      	adds	r3, #19
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff fde5 	bl	8006c58 <get_driver>
 800708e:	63b8      	str	r0, [r7, #56]	; 0x38
          TU_ASSERT(driver, );
 8007090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007092:	2b00      	cmp	r3, #0
 8007094:	d109      	bne.n	80070aa <tud_task_ext+0x1e2>
 8007096:	4b32      	ldr	r3, [pc, #200]	; (8007160 <tud_task_ext+0x298>)
 8007098:	637b      	str	r3, [r7, #52]	; 0x34
 800709a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d051      	beq.n	800714a <tud_task_ext+0x282>
 80070a6:	be00      	bkpt	0x0000
 80070a8:	e04f      	b.n	800714a <tud_task_ext+0x282>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 80070aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ac:	691c      	ldr	r4, [r3, #16]
 80070ae:	7a38      	ldrb	r0, [r7, #8]
 80070b0:	7b7a      	ldrb	r2, [r7, #13]
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80070b8:	47a0      	blx	r4
      break;
 80070ba:	e041      	b.n	8007140 <tud_task_ext+0x278>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
 80070bc:	4b26      	ldr	r3, [pc, #152]	; (8007158 <tud_task_ext+0x290>)
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d033      	beq.n	8007132 <tud_task_ext+0x26a>
        {
          TU_LOG(USBD_DBG, ": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 80070ca:	4b26      	ldr	r3, [pc, #152]	; (8007164 <tud_task_ext+0x29c>)
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d030      	beq.n	8007132 <tud_task_ext+0x26a>
 80070d0:	4b21      	ldr	r3, [pc, #132]	; (8007158 <tud_task_ext+0x290>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	bf14      	ite	ne
 80070de:	2301      	movne	r3, #1
 80070e0:	2300      	moveq	r3, #0
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7f9 f995 	bl	8000414 <tud_suspend_cb>
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 80070ea:	e022      	b.n	8007132 <tud_task_ext+0x26a>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
 80070ec:	4b1a      	ldr	r3, [pc, #104]	; (8007158 <tud_task_ext+0x290>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d01d      	beq.n	8007136 <tud_task_ext+0x26e>
        {
          TU_LOG(USBD_DBG, "\r\n");
          if (tud_resume_cb) tud_resume_cb();
 80070fa:	4b1b      	ldr	r3, [pc, #108]	; (8007168 <tud_task_ext+0x2a0>)
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d01a      	beq.n	8007136 <tud_task_ext+0x26e>
 8007100:	f7f9 f99a 	bl	8000438 <tud_resume_cb>
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 8007104:	e017      	b.n	8007136 <tud_task_ext+0x26e>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG(USBD_DBG, "\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d016      	beq.n	800713a <tud_task_ext+0x272>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	4610      	mov	r0, r2
 8007112:	4798      	blx	r3
      break;
 8007114:	e011      	b.n	800713a <tud_task_ext+0x272>

      case DCD_EVENT_SOF:
      default:
        TU_BREAKPOINT();
 8007116:	4b12      	ldr	r3, [pc, #72]	; (8007160 <tud_task_ext+0x298>)
 8007118:	633b      	str	r3, [r7, #48]	; 0x30
 800711a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00b      	beq.n	800713e <tud_task_ext+0x276>
 8007126:	be00      	bkpt	0x0000
      break;
 8007128:	e009      	b.n	800713e <tud_task_ext+0x276>
      break;
 800712a:	bf00      	nop
 800712c:	e6db      	b.n	8006ee6 <tud_task_ext+0x1e>
      break;
 800712e:	bf00      	nop
 8007130:	e6d9      	b.n	8006ee6 <tud_task_ext+0x1e>
      break;
 8007132:	bf00      	nop
 8007134:	e6d7      	b.n	8006ee6 <tud_task_ext+0x1e>
      break;
 8007136:	bf00      	nop
 8007138:	e6d5      	b.n	8006ee6 <tud_task_ext+0x1e>
      break;
 800713a:	bf00      	nop
 800713c:	e6d3      	b.n	8006ee6 <tud_task_ext+0x1e>
      break;
 800713e:	bf00      	nop
  {
 8007140:	e6d1      	b.n	8006ee6 <tud_task_ext+0x1e>
  if ( !tud_inited() ) return;
 8007142:	bf00      	nop
 8007144:	e002      	b.n	800714c <tud_task_ext+0x284>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8007146:	bf00      	nop
 8007148:	e000      	b.n	800714c <tud_task_ext+0x284>
          TU_ASSERT(driver, );
 800714a:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 800714c:	3744      	adds	r7, #68	; 0x44
 800714e:	46bd      	mov	sp, r7
 8007150:	bd90      	pop	{r4, r7, pc}
 8007152:	bf00      	nop
 8007154:	24001aa0 	.word	0x24001aa0
 8007158:	240019a0 	.word	0x240019a0
 800715c:	080003fd 	.word	0x080003fd
 8007160:	e000edf0 	.word	0xe000edf0
 8007164:	08000415 	.word	0x08000415
 8007168:	08000439 	.word	0x08000439

0800716c <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	4603      	mov	r3, r0
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
 8007178:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	4618      	mov	r0, r3
 8007180:	f001 faa4 	bl	80086cc <usbd_control_set_complete_callback>
  TU_LOG(USBD_DBG, "  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	7bf8      	ldrb	r0, [r7, #15]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	2101      	movs	r1, #1
 800718e:	4798      	blx	r3
 8007190:	4603      	mov	r3, r0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
	...

0800719c <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b094      	sub	sp, #80	; 0x50
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	4603      	mov	r3, r0
 80071a4:	6039      	str	r1, [r7, #0]
 80071a6:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 80071a8:	2000      	movs	r0, #0
 80071aa:	f001 fa8f 	bl	80086cc <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b60      	cmp	r3, #96	; 0x60
 80071ba:	d10a      	bne.n	80071d2 <process_control_request+0x36>
 80071bc:	4ba4      	ldr	r3, [pc, #656]	; (8007450 <process_control_request+0x2b4>)
 80071be:	61bb      	str	r3, [r7, #24]
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d000      	beq.n	80071ce <process_control_request+0x32>
 80071cc:	be00      	bkpt	0x0000
 80071ce:	2300      	movs	r3, #0
 80071d0:	e247      	b.n	8007662 <process_control_request+0x4c6>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b40      	cmp	r3, #64	; 0x40
 80071de:	d10f      	bne.n	8007200 <process_control_request+0x64>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
 80071e0:	4b9c      	ldr	r3, [pc, #624]	; (8007454 <process_control_request+0x2b8>)
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <process_control_request+0x4e>
 80071e6:	2300      	movs	r3, #0
 80071e8:	e23b      	b.n	8007662 <process_control_request+0x4c6>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 80071ea:	489a      	ldr	r0, [pc, #616]	; (8007454 <process_control_request+0x2b8>)
 80071ec:	f001 fa6e 	bl	80086cc <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 80071f0:	79fb      	ldrb	r3, [r7, #7]
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	2101      	movs	r1, #1
 80071f6:	4618      	mov	r0, r3
 80071f8:	f3af 8000 	nop.w
 80071fc:	4603      	mov	r3, r0
 80071fe:	e230      	b.n	8007662 <process_control_request+0x4c6>
    TU_LOG(USBD_DBG, "  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG(USBD_DBG, "\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b02      	cmp	r3, #2
 800720c:	f000 8177 	beq.w	80074fe <process_control_request+0x362>
 8007210:	2b02      	cmp	r3, #2
 8007212:	f300 821a 	bgt.w	800764a <process_control_request+0x4ae>
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <process_control_request+0x86>
 800721a:	2b01      	cmp	r3, #1
 800721c:	f000 811e 	beq.w	800745c <process_control_request+0x2c0>
 8007220:	e213      	b.n	800764a <process_control_request+0x4ae>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b20      	cmp	r3, #32
 800722e:	d123      	bne.n	8007278 <process_control_request+0xdc>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	889b      	ldrh	r3, [r3, #4]
 8007234:	b29b      	uxth	r3, r3
 8007236:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8007238:	8afb      	ldrh	r3, [r7, #22]
 800723a:	b2db      	uxtb	r3, r3
 800723c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8007240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007244:	2b0f      	cmp	r3, #15
 8007246:	d901      	bls.n	800724c <process_control_request+0xb0>
 8007248:	2300      	movs	r3, #0
 800724a:	e20a      	b.n	8007662 <process_control_request+0x4c6>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800724c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007250:	4a81      	ldr	r2, [pc, #516]	; (8007458 <process_control_request+0x2bc>)
 8007252:	4413      	add	r3, r2
 8007254:	78db      	ldrb	r3, [r3, #3]
 8007256:	4618      	mov	r0, r3
 8007258:	f7ff fcfe 	bl	8006c58 <get_driver>
 800725c:	6238      	str	r0, [r7, #32]
        TU_VERIFY(driver);
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d101      	bne.n	8007268 <process_control_request+0xcc>
 8007264:	2300      	movs	r3, #0
 8007266:	e1fc      	b.n	8007662 <process_control_request+0x4c6>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 8007268:	79fb      	ldrb	r3, [r7, #7]
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	6a39      	ldr	r1, [r7, #32]
 800726e:	4618      	mov	r0, r3
 8007270:	f7ff ff7c 	bl	800716c <invoke_class_control>
 8007274:	4603      	mov	r3, r0
 8007276:	e1f4      	b.n	8007662 <process_control_request+0x4c6>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <process_control_request+0x100>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
 8007286:	4b72      	ldr	r3, [pc, #456]	; (8007450 <process_control_request+0x2b4>)
 8007288:	62bb      	str	r3, [r7, #40]	; 0x28
 800728a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d000      	beq.n	8007298 <process_control_request+0xfc>
 8007296:	be00      	bkpt	0x0000
        return false;
 8007298:	2300      	movs	r3, #0
 800729a:	e1e2      	b.n	8007662 <process_control_request+0x4c6>
      }

      switch ( p_request->bRequest )
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	785b      	ldrb	r3, [r3, #1]
 80072a0:	2b09      	cmp	r3, #9
 80072a2:	f200 80c8 	bhi.w	8007436 <process_control_request+0x29a>
 80072a6:	a201      	add	r2, pc, #4	; (adr r2, 80072ac <process_control_request+0x110>)
 80072a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ac:	08007401 	.word	0x08007401
 80072b0:	080073dd 	.word	0x080073dd
 80072b4:	08007437 	.word	0x08007437
 80072b8:	080073b9 	.word	0x080073b9
 80072bc:	08007437 	.word	0x08007437
 80072c0:	080072d5 	.word	0x080072d5
 80072c4:	0800739f 	.word	0x0800739f
 80072c8:	08007437 	.word	0x08007437
 80072cc:	080072f9 	.word	0x080072f9
 80072d0:	08007311 	.word	0x08007311
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 80072d4:	6838      	ldr	r0, [r7, #0]
 80072d6:	f001 fa09 	bl	80086ec <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	885b      	ldrh	r3, [r3, #2]
 80072de:	b29b      	uxth	r3, r3
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	79fb      	ldrb	r3, [r7, #7]
 80072e4:	4611      	mov	r1, r2
 80072e6:	4618      	mov	r0, r3
 80072e8:	f001 fe10 	bl	8008f0c <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 80072ec:	4a5a      	ldr	r2, [pc, #360]	; (8007458 <process_control_request+0x2bc>)
 80072ee:	7813      	ldrb	r3, [r2, #0]
 80072f0:	f043 0302 	orr.w	r3, r3, #2
 80072f4:	7013      	strb	r3, [r2, #0]
        break;
 80072f6:	e0aa      	b.n	800744e <process_control_request+0x2b2>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 80072f8:	4b57      	ldr	r3, [pc, #348]	; (8007458 <process_control_request+0x2bc>)
 80072fa:	785b      	ldrb	r3, [r3, #1]
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	73fb      	strb	r3, [r7, #15]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8007300:	f107 020f 	add.w	r2, r7, #15
 8007304:	79f8      	ldrb	r0, [r7, #7]
 8007306:	2301      	movs	r3, #1
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	f001 f963 	bl	80085d4 <tud_control_xfer>
        }
        break;
 800730e:	e09e      	b.n	800744e <process_control_request+0x2b2>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	885b      	ldrh	r3, [r3, #2]
 8007314:	b29b      	uxth	r3, r3
 8007316:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
 800731a:	4b4f      	ldr	r3, [pc, #316]	; (8007458 <process_control_request+0x2bc>)
 800731c:	785b      	ldrb	r3, [r3, #1]
 800731e:	b2db      	uxtb	r3, r3
 8007320:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007324:	429a      	cmp	r2, r3
 8007326:	d030      	beq.n	800738a <process_control_request+0x1ee>
          {
            if ( _usbd_dev.cfg_num )
 8007328:	4b4b      	ldr	r3, [pc, #300]	; (8007458 <process_control_request+0x2bc>)
 800732a:	785b      	ldrb	r3, [r3, #1]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00f      	beq.n	8007352 <process_control_request+0x1b6>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG(USBD_DBG, "  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8007332:	79fb      	ldrb	r3, [r7, #7]
 8007334:	4618      	mov	r0, r3
 8007336:	f001 ff47 	bl	80091c8 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 800733a:	4b47      	ldr	r3, [pc, #284]	; (8007458 <process_control_request+0x2bc>)
 800733c:	789b      	ldrb	r3, [r3, #2]
 800733e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
              configuration_reset(rhport);
 8007342:	79fb      	ldrb	r3, [r7, #7]
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff fd69 	bl	8006e1c <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 800734a:	4a43      	ldr	r2, [pc, #268]	; (8007458 <process_control_request+0x2bc>)
 800734c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007350:	7093      	strb	r3, [r2, #2]
            }

            // switch to new configuration if not zero
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 8007352:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007356:	2b00      	cmp	r3, #0
 8007358:	d017      	beq.n	800738a <process_control_request+0x1ee>
 800735a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	4611      	mov	r1, r2
 8007362:	4618      	mov	r0, r3
 8007364:	f000 f986 	bl	8007674 <process_set_config>
 8007368:	4603      	mov	r3, r0
 800736a:	f083 0301 	eor.w	r3, r3, #1
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00a      	beq.n	800738a <process_control_request+0x1ee>
 8007374:	4b36      	ldr	r3, [pc, #216]	; (8007450 <process_control_request+0x2b4>)
 8007376:	633b      	str	r3, [r7, #48]	; 0x30
 8007378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	2b00      	cmp	r3, #0
 8007382:	d000      	beq.n	8007386 <process_control_request+0x1ea>
 8007384:	be00      	bkpt	0x0000
 8007386:	2300      	movs	r3, #0
 8007388:	e16b      	b.n	8007662 <process_control_request+0x4c6>
          }

          _usbd_dev.cfg_num = cfg_num;
 800738a:	4a33      	ldr	r2, [pc, #204]	; (8007458 <process_control_request+0x2bc>)
 800738c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007390:	7053      	strb	r3, [r2, #1]
          tud_control_status(rhport, p_request);
 8007392:	79fb      	ldrb	r3, [r7, #7]
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	4618      	mov	r0, r3
 8007398:	f001 f8aa 	bl	80084f0 <tud_control_status>
        }
        break;
 800739c:	e057      	b.n	800744e <process_control_request+0x2b2>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 800739e:	79fb      	ldrb	r3, [r7, #7]
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 fa82 	bl	80078ac <process_get_descriptor>
 80073a8:	4603      	mov	r3, r0
 80073aa:	f083 0301 	eor.w	r3, r3, #1
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d04b      	beq.n	800744c <process_control_request+0x2b0>
 80073b4:	2300      	movs	r3, #0
 80073b6:	e154      	b.n	8007662 <process_control_request+0x4c6>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	885b      	ldrh	r3, [r3, #2]
 80073bc:	b29b      	uxth	r3, r3
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d001      	beq.n	80073c6 <process_control_request+0x22a>
 80073c2:	2300      	movs	r3, #0
 80073c4:	e14d      	b.n	8007662 <process_control_request+0x4c6>

          TU_LOG(USBD_DBG, "    Enable Remote Wakeup\r\n");

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 80073c6:	4a24      	ldr	r2, [pc, #144]	; (8007458 <process_control_request+0x2bc>)
 80073c8:	7813      	ldrb	r3, [r2, #0]
 80073ca:	f043 0308 	orr.w	r3, r3, #8
 80073ce:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 80073d0:	79fb      	ldrb	r3, [r7, #7]
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f001 f88b 	bl	80084f0 <tud_control_status>
        break;
 80073da:	e038      	b.n	800744e <process_control_request+0x2b2>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	885b      	ldrh	r3, [r3, #2]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d001      	beq.n	80073ea <process_control_request+0x24e>
 80073e6:	2300      	movs	r3, #0
 80073e8:	e13b      	b.n	8007662 <process_control_request+0x4c6>

          TU_LOG(USBD_DBG, "    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 80073ea:	4a1b      	ldr	r2, [pc, #108]	; (8007458 <process_control_request+0x2bc>)
 80073ec:	7813      	ldrb	r3, [r2, #0]
 80073ee:	f36f 03c3 	bfc	r3, #3, #1
 80073f2:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 80073f4:	79fb      	ldrb	r3, [r7, #7]
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f001 f879 	bl	80084f0 <tud_control_status>
        break;
 80073fe:	e026      	b.n	800744e <process_control_request+0x2b2>
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8007400:	4b15      	ldr	r3, [pc, #84]	; (8007458 <process_control_request+0x2bc>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	095b      	lsrs	r3, r3, #5
 8007406:	b2db      	uxtb	r3, r3
 8007408:	b29b      	uxth	r3, r3
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	b29a      	uxth	r2, r3
 8007410:	4b11      	ldr	r3, [pc, #68]	; (8007458 <process_control_request+0x2bc>)
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	089b      	lsrs	r3, r3, #2
 8007416:	b2db      	uxtb	r3, r3
 8007418:	b29b      	uxth	r3, r3
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	b29b      	uxth	r3, r3
 8007420:	4313      	orrs	r3, r2
 8007422:	b29b      	uxth	r3, r3
 8007424:	81bb      	strh	r3, [r7, #12]
          tud_control_xfer(rhport, p_request, &status, 2);
 8007426:	f107 020c 	add.w	r2, r7, #12
 800742a:	79f8      	ldrb	r0, [r7, #7]
 800742c:	2302      	movs	r3, #2
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	f001 f8d0 	bl	80085d4 <tud_control_xfer>
        }
        break;
 8007434:	e00b      	b.n	800744e <process_control_request+0x2b2>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 8007436:	4b06      	ldr	r3, [pc, #24]	; (8007450 <process_control_request+0x2b4>)
 8007438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800743a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	2b00      	cmp	r3, #0
 8007444:	d000      	beq.n	8007448 <process_control_request+0x2ac>
 8007446:	be00      	bkpt	0x0000
 8007448:	2300      	movs	r3, #0
 800744a:	e10a      	b.n	8007662 <process_control_request+0x4c6>
        break;
 800744c:	bf00      	nop
      }
    break;
 800744e:	e107      	b.n	8007660 <process_control_request+0x4c4>
 8007450:	e000edf0 	.word	0xe000edf0
 8007454:	00000000 	.word	0x00000000
 8007458:	240019a0 	.word	0x240019a0

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	889b      	ldrh	r3, [r3, #4]
 8007460:	b29b      	uxth	r3, r3
 8007462:	82bb      	strh	r3, [r7, #20]
 8007464:	8abb      	ldrh	r3, [r7, #20]
 8007466:	b2db      	uxtb	r3, r3
 8007468:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 800746c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007470:	2b0f      	cmp	r3, #15
 8007472:	d901      	bls.n	8007478 <process_control_request+0x2dc>
 8007474:	2300      	movs	r3, #0
 8007476:	e0f4      	b.n	8007662 <process_control_request+0x4c6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8007478:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800747c:	4a7b      	ldr	r2, [pc, #492]	; (800766c <process_control_request+0x4d0>)
 800747e:	4413      	add	r3, r2
 8007480:	78db      	ldrb	r3, [r3, #3]
 8007482:	4618      	mov	r0, r3
 8007484:	f7ff fbe8 	bl	8006c58 <get_driver>
 8007488:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(driver);
 800748a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <process_control_request+0x2f8>
 8007490:	2300      	movs	r3, #0
 8007492:	e0e6      	b.n	8007662 <process_control_request+0x4c6>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
 8007494:	79fb      	ldrb	r3, [r7, #7]
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800749a:	4618      	mov	r0, r3
 800749c:	f7ff fe66 	bl	800716c <invoke_class_control>
 80074a0:	4603      	mov	r3, r0
 80074a2:	f083 0301 	eor.w	r3, r3, #1
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d026      	beq.n	80074fa <process_control_request+0x35e>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <process_control_request+0x322>
 80074ba:	2300      	movs	r3, #0
 80074bc:	e0d1      	b.n	8007662 <process_control_request+0x4c6>

        switch(p_request->bRequest)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	785b      	ldrb	r3, [r3, #1]
 80074c2:	3b0a      	subs	r3, #10
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d816      	bhi.n	80074f6 <process_control_request+0x35a>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 80074c8:	2000      	movs	r0, #0
 80074ca:	f001 f8ff 	bl	80086cc <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	785b      	ldrb	r3, [r3, #1]
 80074d2:	2b0a      	cmp	r3, #10
 80074d4:	d109      	bne.n	80074ea <process_control_request+0x34e>
            {
              uint8_t alternate = 0;
 80074d6:	2300      	movs	r3, #0
 80074d8:	72fb      	strb	r3, [r7, #11]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 80074da:	f107 020b 	add.w	r2, r7, #11
 80074de:	79f8      	ldrb	r0, [r7, #7]
 80074e0:	2301      	movs	r3, #1
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	f001 f876 	bl	80085d4 <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
 80074e8:	e008      	b.n	80074fc <process_control_request+0x360>
              tud_control_status(rhport, p_request);
 80074ea:	79fb      	ldrb	r3, [r7, #7]
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f000 fffe 	bl	80084f0 <tud_control_status>
          break;
 80074f4:	e002      	b.n	80074fc <process_control_request+0x360>

          default: return false;
 80074f6:	2300      	movs	r3, #0
 80074f8:	e0b3      	b.n	8007662 <process_control_request+0x4c6>
        }
      }
 80074fa:	bf00      	nop
    }
    break;
 80074fc:	e0b0      	b.n	8007660 <process_control_request+0x4c4>

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	889b      	ldrh	r3, [r3, #4]
 8007502:	b29b      	uxth	r3, r3
 8007504:	823b      	strh	r3, [r7, #16]
 8007506:	8a3b      	ldrh	r3, [r7, #16]
 8007508:	b2db      	uxtb	r3, r3
 800750a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800750e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007512:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007514:	7cbb      	ldrb	r3, [r7, #18]
 8007516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800751a:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 800751c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8007520:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007524:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007526:	7cfb      	ldrb	r3, [r7, #19]
 8007528:	09db      	lsrs	r3, r3, #7
 800752a:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 800752c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8007530:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8007534:	2b08      	cmp	r3, #8
 8007536:	d90a      	bls.n	800754e <process_control_request+0x3b2>
 8007538:	4b4d      	ldr	r3, [pc, #308]	; (8007670 <process_control_request+0x4d4>)
 800753a:	643b      	str	r3, [r7, #64]	; 0x40
 800753c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b00      	cmp	r3, #0
 8007546:	d000      	beq.n	800754a <process_control_request+0x3ae>
 8007548:	be00      	bkpt	0x0000
 800754a:	2300      	movs	r3, #0
 800754c:	e089      	b.n	8007662 <process_control_request+0x4c6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 800754e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8007552:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007556:	4945      	ldr	r1, [pc, #276]	; (800766c <process_control_request+0x4d0>)
 8007558:	0052      	lsls	r2, r2, #1
 800755a:	440a      	add	r2, r1
 800755c:	4413      	add	r3, r2
 800755e:	3313      	adds	r3, #19
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f7ff fb78 	bl	8006c58 <get_driver>
 8007568:	64b8      	str	r0, [r7, #72]	; 0x48

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00c      	beq.n	8007592 <process_control_request+0x3f6>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
 8007578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <process_control_request+0x3e6>
 800757e:	2300      	movs	r3, #0
 8007580:	e06f      	b.n	8007662 <process_control_request+0x4c6>
        return invoke_class_control(rhport, driver, p_request);
 8007582:	79fb      	ldrb	r3, [r7, #7]
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007588:	4618      	mov	r0, r3
 800758a:	f7ff fdef 	bl	800716c <invoke_class_control>
 800758e:	4603      	mov	r3, r0
 8007590:	e067      	b.n	8007662 <process_control_request+0x4c6>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	785b      	ldrb	r3, [r3, #1]
 8007596:	2b03      	cmp	r3, #3
 8007598:	d018      	beq.n	80075cc <process_control_request+0x430>
 800759a:	2b03      	cmp	r3, #3
 800759c:	dc48      	bgt.n	8007630 <process_control_request+0x494>
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d002      	beq.n	80075a8 <process_control_request+0x40c>
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d012      	beq.n	80075cc <process_control_request+0x430>
 80075a6:	e043      	b.n	8007630 <process_control_request+0x494>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 80075a8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80075ac:	79fb      	ldrb	r3, [r7, #7]
 80075ae:	4611      	mov	r1, r2
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 fef7 	bl	80083a4 <usbd_edpt_stalled>
 80075b6:	4603      	mov	r3, r0
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	813b      	strh	r3, [r7, #8]
            tud_control_xfer(rhport, p_request, &status, 2);
 80075bc:	f107 0208 	add.w	r2, r7, #8
 80075c0:	79f8      	ldrb	r0, [r7, #7]
 80075c2:	2302      	movs	r3, #2
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	f001 f805 	bl	80085d4 <tud_control_xfer>
          }
          break;
 80075ca:	e03d      	b.n	8007648 <process_control_request+0x4ac>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	885b      	ldrh	r3, [r3, #2]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d112      	bne.n	80075fc <process_control_request+0x460>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	785b      	ldrb	r3, [r3, #1]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d107      	bne.n	80075ee <process_control_request+0x452>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
 80075de:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80075e2:	79fb      	ldrb	r3, [r7, #7]
 80075e4:	4611      	mov	r1, r2
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 fe90 	bl	800830c <usbd_edpt_clear_stall>
 80075ec:	e006      	b.n	80075fc <process_control_request+0x460>
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
 80075ee:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80075f2:	79fb      	ldrb	r3, [r7, #7]
 80075f4:	4611      	mov	r1, r2
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 fe3c 	bl	8008274 <usbd_edpt_stall>
              }
            }

            if (driver)
 80075fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d021      	beq.n	8007646 <process_control_request+0x4aa>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8007602:	79fb      	ldrb	r3, [r7, #7]
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007608:	4618      	mov	r0, r3
 800760a:	f7ff fdaf 	bl	800716c <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 800760e:	2000      	movs	r0, #0
 8007610:	f001 f85c 	bl	80086cc <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8007614:	4b15      	ldr	r3, [pc, #84]	; (800766c <process_control_request+0x4d0>)
 8007616:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800761a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b00      	cmp	r3, #0
 8007622:	d110      	bne.n	8007646 <process_control_request+0x4aa>
 8007624:	79fb      	ldrb	r3, [r7, #7]
 8007626:	6839      	ldr	r1, [r7, #0]
 8007628:	4618      	mov	r0, r3
 800762a:	f000 ff61 	bl	80084f0 <tud_control_status>
            }
          }
          break;
 800762e:	e00a      	b.n	8007646 <process_control_request+0x4aa>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 8007630:	4b0f      	ldr	r3, [pc, #60]	; (8007670 <process_control_request+0x4d4>)
 8007632:	647b      	str	r3, [r7, #68]	; 0x44
 8007634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	d000      	beq.n	8007642 <process_control_request+0x4a6>
 8007640:	be00      	bkpt	0x0000
 8007642:	2300      	movs	r3, #0
 8007644:	e00d      	b.n	8007662 <process_control_request+0x4c6>
          break;
 8007646:	bf00      	nop
        }
      }
    }
    break;
 8007648:	e00a      	b.n	8007660 <process_control_request+0x4c4>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 800764a:	4b09      	ldr	r3, [pc, #36]	; (8007670 <process_control_request+0x4d4>)
 800764c:	61fb      	str	r3, [r7, #28]
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b00      	cmp	r3, #0
 8007658:	d000      	beq.n	800765c <process_control_request+0x4c0>
 800765a:	be00      	bkpt	0x0000
 800765c:	2300      	movs	r3, #0
 800765e:	e000      	b.n	8007662 <process_control_request+0x4c6>
  }

  return true;
 8007660:	2301      	movs	r3, #1
}
 8007662:	4618      	mov	r0, r3
 8007664:	3750      	adds	r7, #80	; 0x50
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	240019a0 	.word	0x240019a0
 8007670:	e000edf0 	.word	0xe000edf0

08007674 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b094      	sub	sp, #80	; 0x50
 8007678:	af00      	add	r7, sp, #0
 800767a:	4603      	mov	r3, r0
 800767c:	460a      	mov	r2, r1
 800767e:	71fb      	strb	r3, [r7, #7]
 8007680:	4613      	mov	r3, r2
 8007682:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8007684:	79bb      	ldrb	r3, [r7, #6]
 8007686:	3b01      	subs	r3, #1
 8007688:	b2db      	uxtb	r3, r3
 800768a:	4618      	mov	r0, r3
 800768c:	f7f9 fc36 	bl	8000efc <tud_descriptor_configuration_cb>
 8007690:	6478      	str	r0, [r7, #68]	; 0x44
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8007692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007694:	2b00      	cmp	r3, #0
 8007696:	d003      	beq.n	80076a0 <process_set_config+0x2c>
 8007698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800769a:	785b      	ldrb	r3, [r3, #1]
 800769c:	2b02      	cmp	r3, #2
 800769e:	d00a      	beq.n	80076b6 <process_set_config+0x42>
 80076a0:	4b7c      	ldr	r3, [pc, #496]	; (8007894 <process_set_config+0x220>)
 80076a2:	61bb      	str	r3, [r7, #24]
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d000      	beq.n	80076b2 <process_set_config+0x3e>
 80076b0:	be00      	bkpt	0x0000
 80076b2:	2300      	movs	r3, #0
 80076b4:	e0e9      	b.n	800788a <process_set_config+0x216>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 80076b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076b8:	79db      	ldrb	r3, [r3, #7]
 80076ba:	115b      	asrs	r3, r3, #5
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	b2d9      	uxtb	r1, r3
 80076c2:	4a75      	ldr	r2, [pc, #468]	; (8007898 <process_set_config+0x224>)
 80076c4:	7813      	ldrb	r3, [r2, #0]
 80076c6:	f361 1304 	bfi	r3, r1, #4, #1
 80076ca:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 80076cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ce:	79db      	ldrb	r3, [r3, #7]
 80076d0:	119b      	asrs	r3, r3, #6
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	b2d9      	uxtb	r1, r3
 80076d8:	4a6f      	ldr	r2, [pc, #444]	; (8007898 <process_set_config+0x224>)
 80076da:	7813      	ldrb	r3, [r2, #0]
 80076dc:	f361 1345 	bfi	r3, r1, #5, #1
 80076e0:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 80076e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076e4:	3309      	adds	r3, #9
 80076e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 80076e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ea:	885b      	ldrh	r3, [r3, #2]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	461a      	mov	r2, r3
 80076f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076f2:	4413      	add	r3, r2
 80076f4:	643b      	str	r3, [r7, #64]	; 0x40

  while( p_desc < desc_end )
 80076f6:	e0bd      	b.n	8007874 <process_set_config+0x200>
  {
    uint8_t assoc_itf_count = 1;
 80076f8:	2301      	movs	r3, #1
 80076fa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80076fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007700:	617b      	str	r3, [r7, #20]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	3301      	adds	r3, #1
 8007706:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8007708:	2b0b      	cmp	r3, #11
 800770a:	d10f      	bne.n	800772c <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 800770c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800770e:	63fb      	str	r3, [r7, #60]	; 0x3c
      assoc_itf_count = desc_iad->bInterfaceCount;
 8007710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007712:	78db      	ldrb	r3, [r3, #3]
 8007714:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800771a:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	461a      	mov	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 800772a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800772c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800772e:	60bb      	str	r3, [r7, #8]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	3301      	adds	r3, #1
 8007734:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8007736:	2b04      	cmp	r3, #4
 8007738:	d00a      	beq.n	8007750 <process_set_config+0xdc>
 800773a:	4b56      	ldr	r3, [pc, #344]	; (8007894 <process_set_config+0x220>)
 800773c:	61fb      	str	r3, [r7, #28]
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	2b00      	cmp	r3, #0
 8007748:	d000      	beq.n	800774c <process_set_config+0xd8>
 800774a:	be00      	bkpt	0x0000
 800774c:	2300      	movs	r3, #0
 800774e:	e09c      	b.n	800788a <process_set_config+0x216>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8007750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007752:	63bb      	str	r3, [r7, #56]	; 0x38

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8007754:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 800775c:	2300      	movs	r3, #0
 800775e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8007762:	e06e      	b.n	8007842 <process_set_config+0x1ce>
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8007764:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff fa75 	bl	8006c58 <get_driver>
 800776e:	6338      	str	r0, [r7, #48]	; 0x30
      TU_ASSERT(driver);
 8007770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10a      	bne.n	800778c <process_set_config+0x118>
 8007776:	4b47      	ldr	r3, [pc, #284]	; (8007894 <process_set_config+0x220>)
 8007778:	627b      	str	r3, [r7, #36]	; 0x24
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	d000      	beq.n	8007788 <process_set_config+0x114>
 8007786:	be00      	bkpt	0x0000
 8007788:	2300      	movs	r3, #0
 800778a:	e07e      	b.n	800788a <process_set_config+0x216>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 800778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007792:	79f8      	ldrb	r0, [r7, #7]
 8007794:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007796:	4798      	blx	r3
 8007798:	4603      	mov	r3, r0
 800779a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 800779c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800779e:	2b08      	cmp	r3, #8
 80077a0:	d94a      	bls.n	8007838 <process_set_config+0x1c4>
 80077a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80077a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d846      	bhi.n	8007838 <process_set_config+0x1c4>
        // Open successfully
        TU_LOG(USBD_DBG, "  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 80077aa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d107      	bne.n	80077c2 <process_set_config+0x14e>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	4a39      	ldr	r2, [pc, #228]	; (800789c <process_set_config+0x228>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d102      	bne.n	80077c2 <process_set_config+0x14e>
 80077bc:	2302      	movs	r3, #2
 80077be:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80077c2:	2300      	movs	r3, #0
 80077c4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80077c8:	e024      	b.n	8007814 <process_set_config+0x1a0>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 80077ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077cc:	789a      	ldrb	r2, [r3, #2]
 80077ce:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80077d2:	4413      	add	r3, r2
 80077d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 80077d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80077dc:	4a2e      	ldr	r2, [pc, #184]	; (8007898 <process_set_config+0x224>)
 80077de:	4413      	add	r3, r2
 80077e0:	78db      	ldrb	r3, [r3, #3]
 80077e2:	2bff      	cmp	r3, #255	; 0xff
 80077e4:	d00a      	beq.n	80077fc <process_set_config+0x188>
 80077e6:	4b2b      	ldr	r3, [pc, #172]	; (8007894 <process_set_config+0x220>)
 80077e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80077ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d000      	beq.n	80077f8 <process_set_config+0x184>
 80077f6:	be00      	bkpt	0x0000
 80077f8:	2300      	movs	r3, #0
 80077fa:	e046      	b.n	800788a <process_set_config+0x216>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 80077fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007800:	4a25      	ldr	r2, [pc, #148]	; (8007898 <process_set_config+0x224>)
 8007802:	4413      	add	r3, r2
 8007804:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8007808:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 800780a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800780e:	3301      	adds	r3, #1
 8007810:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8007814:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8007818:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800781c:	429a      	cmp	r2, r3
 800781e:	d3d4      	bcc.n	80077ca <process_set_config+0x156>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8007820:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007824:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007826:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007828:	481d      	ldr	r0, [pc, #116]	; (80078a0 <process_set_config+0x22c>)
 800782a:	f002 fd19 	bl	800a260 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 800782e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007830:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007832:	4413      	add	r3, r2
 8007834:	64fb      	str	r3, [r7, #76]	; 0x4c

        break; // exit driver find loop
 8007836:	e00b      	b.n	8007850 <process_set_config+0x1dc>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8007838:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800783c:	3301      	adds	r3, #1
 800783e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8007842:	4b18      	ldr	r3, [pc, #96]	; (80078a4 <process_set_config+0x230>)
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	1c5a      	adds	r2, r3, #1
 8007848:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800784c:	429a      	cmp	r2, r3
 800784e:	da89      	bge.n	8007764 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8007850:	4b14      	ldr	r3, [pc, #80]	; (80078a4 <process_set_config+0x230>)
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	1c5a      	adds	r2, r3, #1
 8007856:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800785a:	429a      	cmp	r2, r3
 800785c:	da0a      	bge.n	8007874 <process_set_config+0x200>
 800785e:	4b0d      	ldr	r3, [pc, #52]	; (8007894 <process_set_config+0x220>)
 8007860:	623b      	str	r3, [r7, #32]
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	2b00      	cmp	r3, #0
 800786c:	d000      	beq.n	8007870 <process_set_config+0x1fc>
 800786e:	be00      	bkpt	0x0000
 8007870:	2300      	movs	r3, #0
 8007872:	e00a      	b.n	800788a <process_set_config+0x216>
  while( p_desc < desc_end )
 8007874:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007878:	429a      	cmp	r2, r3
 800787a:	f4ff af3d 	bcc.w	80076f8 <process_set_config+0x84>
  }

  // invoke callback
  if (tud_mount_cb) tud_mount_cb();
 800787e:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <process_set_config+0x234>)
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <process_set_config+0x214>
 8007884:	f7f8 fdac 	bl	80003e0 <tud_mount_cb>

  return true;
 8007888:	2301      	movs	r3, #1
}
 800788a:	4618      	mov	r0, r3
 800788c:	3750      	adds	r7, #80	; 0x50
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	e000edf0 	.word	0xe000edf0
 8007898:	240019a0 	.word	0x240019a0
 800789c:	08005ad5 	.word	0x08005ad5
 80078a0:	240019b3 	.word	0x240019b3
 80078a4:	240019dc 	.word	0x240019dc
 80078a8:	080003e1 	.word	0x080003e1

080078ac <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b094      	sub	sp, #80	; 0x50
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	4603      	mov	r3, r0
 80078b4:	6039      	str	r1, [r7, #0]
 80078b6:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	885b      	ldrh	r3, [r3, #2]
 80078bc:	b29b      	uxth	r3, r3
 80078be:	84bb      	strh	r3, [r7, #36]	; 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80078c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078c2:	0a1b      	lsrs	r3, r3, #8
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	885b      	ldrh	r3, [r3, #2]
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	84fb      	strh	r3, [r7, #38]	; 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80078d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

  switch(desc_type)
 80078dc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80078e0:	3b01      	subs	r3, #1
 80078e2:	2b0e      	cmp	r3, #14
 80078e4:	f200 80bc 	bhi.w	8007a60 <process_get_descriptor+0x1b4>
 80078e8:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <process_get_descriptor+0x44>)
 80078ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ee:	bf00      	nop
 80078f0:	0800792d 	.word	0x0800792d
 80078f4:	08007991 	.word	0x08007991
 80078f8:	080079f9 	.word	0x080079f9
 80078fc:	08007a61 	.word	0x08007a61
 8007900:	08007a61 	.word	0x08007a61
 8007904:	08007a2f 	.word	0x08007a2f
 8007908:	08007991 	.word	0x08007991
 800790c:	08007a61 	.word	0x08007a61
 8007910:	08007a61 	.word	0x08007a61
 8007914:	08007a61 	.word	0x08007a61
 8007918:	08007a61 	.word	0x08007a61
 800791c:	08007a61 	.word	0x08007a61
 8007920:	08007a61 	.word	0x08007a61
 8007924:	08007a61 	.word	0x08007a61
 8007928:	08007943 	.word	0x08007943
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG(USBD_DBG, " Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 800792c:	f7f9 fadc 	bl	8000ee8 <tud_descriptor_device_cb>
 8007930:	62b8      	str	r0, [r7, #40]	; 0x28
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8007932:	79f8      	ldrb	r0, [r7, #7]
 8007934:	2312      	movs	r3, #18
 8007936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	f000 fe4b 	bl	80085d4 <tud_control_xfer>
 800793e:	4603      	mov	r3, r0
 8007940:	e08f      	b.n	8007a62 <process_get_descriptor+0x1b6>
    case TUSB_DESC_BOS:
    {
      TU_LOG(USBD_DBG, " BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 8007942:	4b4a      	ldr	r3, [pc, #296]	; (8007a6c <process_get_descriptor+0x1c0>)
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <process_get_descriptor+0xa0>
 8007948:	2300      	movs	r3, #0
 800794a:	e08a      	b.n	8007a62 <process_get_descriptor+0x1b6>

      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 800794c:	f3af 8000 	nop.w
 8007950:	4603      	mov	r3, r0
 8007952:	647b      	str	r3, [r7, #68]	; 0x44
      TU_ASSERT(desc_bos);
 8007954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10a      	bne.n	8007970 <process_get_descriptor+0xc4>
 800795a:	4b45      	ldr	r3, [pc, #276]	; (8007a70 <process_get_descriptor+0x1c4>)
 800795c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800795e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b00      	cmp	r3, #0
 8007968:	d000      	beq.n	800796c <process_get_descriptor+0xc0>
 800796a:	be00      	bkpt	0x0000
 800796c:	2300      	movs	r3, #0
 800796e:	e078      	b.n	8007a62 <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8007970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007972:	3302      	adds	r3, #2
 8007974:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 800797e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007980:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007984:	79f8      	ldrb	r0, [r7, #7]
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	f000 fe24 	bl	80085d4 <tud_control_xfer>
 800798c:	4603      	mov	r3, r0
 800798e:	e068      	b.n	8007a62 <process_get_descriptor+0x1b6>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
 8007990:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007994:	2b02      	cmp	r3, #2
 8007996:	d107      	bne.n	80079a8 <process_get_descriptor+0xfc>
      {
        TU_LOG(USBD_DBG, " Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8007998:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800799c:	4618      	mov	r0, r3
 800799e:	f7f9 faad 	bl	8000efc <tud_descriptor_configuration_cb>
 80079a2:	4603      	mov	r3, r0
 80079a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079a6:	e00b      	b.n	80079c0 <process_get_descriptor+0x114>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG(USBD_DBG, " Other Speed Configuration\r\n");
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 80079a8:	4b32      	ldr	r3, [pc, #200]	; (8007a74 <process_get_descriptor+0x1c8>)
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <process_get_descriptor+0x106>
 80079ae:	2300      	movs	r3, #0
 80079b0:	e057      	b.n	8007a62 <process_get_descriptor+0x1b6>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 80079b2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80079b6:	4618      	mov	r0, r3
 80079b8:	f3af 8000 	nop.w
 80079bc:	4603      	mov	r3, r0
 80079be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      TU_ASSERT(desc_config);
 80079c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10a      	bne.n	80079dc <process_get_descriptor+0x130>
 80079c6:	4b2a      	ldr	r3, [pc, #168]	; (8007a70 <process_get_descriptor+0x1c4>)
 80079c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d000      	beq.n	80079d8 <process_get_descriptor+0x12c>
 80079d6:	be00      	bkpt	0x0000
 80079d8:	2300      	movs	r3, #0
 80079da:	e042      	b.n	8007a62 <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 80079dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079de:	3302      	adds	r3, #2
 80079e0:	61fb      	str	r3, [r7, #28]
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	867b      	strh	r3, [r7, #50]	; 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 80079e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079ea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80079ec:	79f8      	ldrb	r0, [r7, #7]
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	f000 fdf0 	bl	80085d4 <tud_control_xfer>
 80079f4:	4603      	mov	r3, r0
 80079f6:	e034      	b.n	8007a62 <process_get_descriptor+0x1b6>
    case TUSB_DESC_STRING:
    {
      TU_LOG(USBD_DBG, " String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	889b      	ldrh	r3, [r3, #4]
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007a02:	4611      	mov	r1, r2
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7f9 fa87 	bl	8000f18 <tud_descriptor_string_cb>
 8007a0a:	6378      	str	r0, [r7, #52]	; 0x34
      TU_VERIFY(desc_str);
 8007a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <process_get_descriptor+0x16a>
 8007a12:	2300      	movs	r3, #0
 8007a14:	e025      	b.n	8007a62 <process_get_descriptor+0x1b6>
 8007a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a18:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	79f8      	ldrb	r0, [r7, #7]
 8007a22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	f000 fdd5 	bl	80085d4 <tud_control_xfer>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	e019      	b.n	8007a62 <process_get_descriptor+0x1b6>

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG(USBD_DBG, " Device Qualifier\r\n");

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 8007a2e:	4b12      	ldr	r3, [pc, #72]	; (8007a78 <process_get_descriptor+0x1cc>)
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <process_get_descriptor+0x18c>
 8007a34:	2300      	movs	r3, #0
 8007a36:	e014      	b.n	8007a62 <process_get_descriptor+0x1b6>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8007a38:	f3af 8000 	nop.w
 8007a3c:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(desc_qualifier);
 8007a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d101      	bne.n	8007a48 <process_get_descriptor+0x19c>
 8007a44:	2300      	movs	r3, #0
 8007a46:	e00c      	b.n	8007a62 <process_get_descriptor+0x1b6>
 8007a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4a:	617b      	str	r3, [r7, #20]
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	79f8      	ldrb	r0, [r7, #7]
 8007a54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	f000 fdbc 	bl	80085d4 <tud_control_xfer>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	e000      	b.n	8007a62 <process_get_descriptor+0x1b6>
    }
    // break; // unreachable

    default: return false;
 8007a60:	2300      	movs	r3, #0
  }
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3750      	adds	r7, #80	; 0x50
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	00000000 	.word	0x00000000
 8007a70:	e000edf0 	.word	0xe000edf0
	...

08007a7c <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const * event, bool in_isr)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b0aa      	sub	sp, #168	; 0xa8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70fb      	strb	r3, [r7, #3]
  switch (event->event_id)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	785b      	ldrb	r3, [r3, #1]
 8007a8c:	3b02      	subs	r3, #2
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	f200 8198 	bhi.w	8007dc4 <dcd_event_handler+0x348>
 8007a94:	a201      	add	r2, pc, #4	; (adr r2, 8007a9c <dcd_event_handler+0x20>)
 8007a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9a:	bf00      	nop
 8007a9c:	08007aad 	.word	0x08007aad
 8007aa0:	08007cb1 	.word	0x08007cb1
 8007aa4:	08007b6d 	.word	0x08007b6d
 8007aa8:	08007c13 	.word	0x08007c13
  {
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected  = 0;
 8007aac:	4a82      	ldr	r2, [pc, #520]	; (8007cb8 <dcd_event_handler+0x23c>)
 8007aae:	7813      	ldrb	r3, [r2, #0]
 8007ab0:	f36f 0300 	bfc	r3, #0, #1
 8007ab4:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed  = 0;
 8007ab6:	4a80      	ldr	r2, [pc, #512]	; (8007cb8 <dcd_event_handler+0x23c>)
 8007ab8:	7813      	ldrb	r3, [r2, #0]
 8007aba:	f36f 0341 	bfc	r3, #1, #1
 8007abe:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num    = 0;
 8007ac0:	4b7d      	ldr	r3, [pc, #500]	; (8007cb8 <dcd_event_handler+0x23c>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
 8007ac6:	4a7c      	ldr	r2, [pc, #496]	; (8007cb8 <dcd_event_handler+0x23c>)
 8007ac8:	7813      	ldrb	r3, [r2, #0]
 8007aca:	f36f 0382 	bfc	r3, #2, #1
 8007ace:	7013      	strb	r3, [r2, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 8007ad0:	4b7a      	ldr	r3, [pc, #488]	; (8007cbc <dcd_event_handler+0x240>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ade:	78fb      	ldrb	r3, [r7, #3]
 8007ae0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if (!in_isr) {
 8007ae4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007ae8:	f083 0301 	eor.w	r3, r3, #1
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d009      	beq.n	8007b06 <dcd_event_handler+0x8a>
 8007af2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007af6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  qhdl->interrupt_set(false);
 8007afa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2000      	movs	r0, #0
 8007b02:	4798      	blx	r3
}
 8007b04:	bf00      	nop
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 8007b06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7ff f816 	bl	8006b42 <tu_fifo_write>
 8007b16:	4603      	mov	r3, r0
 8007b18:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

  if (!in_isr) {
 8007b1c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007b20:	f083 0301 	eor.w	r3, r3, #1
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d009      	beq.n	8007b3e <dcd_event_handler+0xc2>
 8007b2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  qhdl->interrupt_set(true);
 8007b32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2001      	movs	r0, #1
 8007b3a:	4798      	blx	r3
}
 8007b3c:	bf00      	nop
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 8007b3e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007b42:	f083 0301 	eor.w	r3, r3, #1
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00b      	beq.n	8007b64 <dcd_event_handler+0xe8>
 8007b4c:	4b5c      	ldr	r3, [pc, #368]	; (8007cc0 <dcd_event_handler+0x244>)
 8007b4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d003      	beq.n	8007b68 <dcd_event_handler+0xec>
 8007b60:	be00      	bkpt	0x0000
 8007b62:	e001      	b.n	8007b68 <dcd_event_handler+0xec>

  return success;
 8007b64:	bf00      	nop
 8007b66:	e172      	b.n	8007e4e <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 8007b68:	bf00      	nop
    break;
 8007b6a:	e170      	b.n	8007e4e <dcd_event_handler+0x3d2>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if ( _usbd_dev.connected )
 8007b6c:	4b52      	ldr	r3, [pc, #328]	; (8007cb8 <dcd_event_handler+0x23c>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f000 8164 	beq.w	8007e44 <dcd_event_handler+0x3c8>
      {
        _usbd_dev.suspended = 1;
 8007b7c:	4a4e      	ldr	r2, [pc, #312]	; (8007cb8 <dcd_event_handler+0x23c>)
 8007b7e:	7813      	ldrb	r3, [r2, #0]
 8007b80:	f043 0304 	orr.w	r3, r3, #4
 8007b84:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8007b86:	4b4d      	ldr	r3, [pc, #308]	; (8007cbc <dcd_event_handler+0x240>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b92:	78fb      	ldrb	r3, [r7, #3]
 8007b94:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  if (!in_isr) {
 8007b98:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8007b9c:	f083 0301 	eor.w	r3, r3, #1
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d007      	beq.n	8007bb6 <dcd_event_handler+0x13a>
 8007ba6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007baa:	677b      	str	r3, [r7, #116]	; 0x74
  qhdl->interrupt_set(false);
 8007bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	4798      	blx	r3
}
 8007bb4:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8007bb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007bba:	3304      	adds	r3, #4
 8007bbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fe ffbf 	bl	8006b42 <tu_fifo_write>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  if (!in_isr) {
 8007bca:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8007bce:	f083 0301 	eor.w	r3, r3, #1
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d007      	beq.n	8007be8 <dcd_event_handler+0x16c>
 8007bd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007bdc:	66fb      	str	r3, [r7, #108]	; 0x6c
  qhdl->interrupt_set(true);
 8007bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2001      	movs	r0, #1
 8007be4:	4798      	blx	r3
}
 8007be6:	bf00      	nop
  TU_ASSERT(success);
 8007be8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8007bec:	f083 0301 	eor.w	r3, r3, #1
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d009      	beq.n	8007c0a <dcd_event_handler+0x18e>
 8007bf6:	4b32      	ldr	r3, [pc, #200]	; (8007cc0 <dcd_event_handler+0x244>)
 8007bf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <dcd_event_handler+0x192>
 8007c06:	be00      	bkpt	0x0000
 8007c08:	e001      	b.n	8007c0e <dcd_event_handler+0x192>
  return success;
 8007c0a:	bf00      	nop
 8007c0c:	e11a      	b.n	8007e44 <dcd_event_handler+0x3c8>
  TU_ASSERT(success);
 8007c0e:	bf00      	nop
      }
    break;
 8007c10:	e118      	b.n	8007e44 <dcd_event_handler+0x3c8>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if ( _usbd_dev.connected )
 8007c12:	4b29      	ldr	r3, [pc, #164]	; (8007cb8 <dcd_event_handler+0x23c>)
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 8113 	beq.w	8007e48 <dcd_event_handler+0x3cc>
      {
        _usbd_dev.suspended = 0;
 8007c22:	4a25      	ldr	r2, [pc, #148]	; (8007cb8 <dcd_event_handler+0x23c>)
 8007c24:	7813      	ldrb	r3, [r2, #0]
 8007c26:	f36f 0382 	bfc	r3, #2, #1
 8007c2a:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8007c2c:	4b23      	ldr	r3, [pc, #140]	; (8007cbc <dcd_event_handler+0x240>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	667b      	str	r3, [r7, #100]	; 0x64
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	663b      	str	r3, [r7, #96]	; 0x60
 8007c36:	78fb      	ldrb	r3, [r7, #3]
 8007c38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (!in_isr) {
 8007c3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c40:	f083 0301 	eor.w	r3, r3, #1
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d006      	beq.n	8007c58 <dcd_event_handler+0x1dc>
 8007c4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c4c:	65bb      	str	r3, [r7, #88]	; 0x58
  qhdl->interrupt_set(false);
 8007c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2000      	movs	r0, #0
 8007c54:	4798      	blx	r3
}
 8007c56:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8007c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fe ff6f 	bl	8006b42 <tu_fifo_write>
 8007c64:	4603      	mov	r3, r0
 8007c66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (!in_isr) {
 8007c6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c6e:	f083 0301 	eor.w	r3, r3, #1
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d006      	beq.n	8007c86 <dcd_event_handler+0x20a>
 8007c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c7a:	653b      	str	r3, [r7, #80]	; 0x50
  qhdl->interrupt_set(true);
 8007c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2001      	movs	r0, #1
 8007c82:	4798      	blx	r3
}
 8007c84:	bf00      	nop
  TU_ASSERT(success);
 8007c86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c8a:	f083 0301 	eor.w	r3, r3, #1
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d009      	beq.n	8007ca8 <dcd_event_handler+0x22c>
 8007c94:	4b0a      	ldr	r3, [pc, #40]	; (8007cc0 <dcd_event_handler+0x244>)
 8007c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d003      	beq.n	8007cac <dcd_event_handler+0x230>
 8007ca4:	be00      	bkpt	0x0000
 8007ca6:	e001      	b.n	8007cac <dcd_event_handler+0x230>
  return success;
 8007ca8:	bf00      	nop
 8007caa:	e0cd      	b.n	8007e48 <dcd_event_handler+0x3cc>
  TU_ASSERT(success);
 8007cac:	bf00      	nop
      }
    break;
 8007cae:	e0cb      	b.n	8007e48 <dcd_event_handler+0x3cc>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8007cb6:	e023      	b.n	8007d00 <dcd_event_handler+0x284>
 8007cb8:	240019a0 	.word	0x240019a0
 8007cbc:	24001aa0 	.word	0x24001aa0
 8007cc0:	e000edf0 	.word	0xe000edf0
      {
        usbd_class_driver_t const * driver = get_driver(i);
 8007cc4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7fe ffc5 	bl	8006c58 <get_driver>
 8007cce:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
        if (driver && driver->sof)
 8007cd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00d      	beq.n	8007cf6 <dcd_event_handler+0x27a>
 8007cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cde:	695b      	ldr	r3, [r3, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d008      	beq.n	8007cf6 <dcd_event_handler+0x27a>
        {
          driver->sof(event->rhport, event->sof.frame_count);
 8007ce4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	7810      	ldrb	r0, [r2, #0]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	6852      	ldr	r2, [r2, #4]
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8007cf6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8007d00:	4b55      	ldr	r3, [pc, #340]	; (8007e58 <dcd_event_handler+0x3dc>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	dada      	bge.n	8007cc4 <dcd_event_handler+0x248>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if ( _usbd_dev.suspended )
 8007d0e:	4b53      	ldr	r3, [pc, #332]	; (8007e5c <dcd_event_handler+0x3e0>)
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 8097 	beq.w	8007e4c <dcd_event_handler+0x3d0>
      {
        _usbd_dev.suspended = 0;
 8007d1e:	4a4f      	ldr	r2, [pc, #316]	; (8007e5c <dcd_event_handler+0x3e0>)
 8007d20:	7813      	ldrb	r3, [r2, #0]
 8007d22:	f36f 0382 	bfc	r3, #2, #1
 8007d26:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8007d28:	f107 0308 	add.w	r3, r7, #8
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	601a      	str	r2, [r3, #0]
 8007d30:	605a      	str	r2, [r3, #4]
 8007d32:	609a      	str	r2, [r3, #8]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	723b      	strb	r3, [r7, #8]
 8007d3a:	2305      	movs	r3, #5
 8007d3c:	727b      	strb	r3, [r7, #9]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 8007d3e:	4b48      	ldr	r3, [pc, #288]	; (8007e60 <dcd_event_handler+0x3e4>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d44:	f107 0308 	add.w	r3, r7, #8
 8007d48:	647b      	str	r3, [r7, #68]	; 0x44
 8007d4a:	78fb      	ldrb	r3, [r7, #3]
 8007d4c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (!in_isr) {
 8007d50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007d54:	f083 0301 	eor.w	r3, r3, #1
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d006      	beq.n	8007d6c <dcd_event_handler+0x2f0>
 8007d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d60:	63fb      	str	r3, [r7, #60]	; 0x3c
  qhdl->interrupt_set(false);
 8007d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2000      	movs	r0, #0
 8007d68:	4798      	blx	r3
}
 8007d6a:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8007d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d6e:	3304      	adds	r3, #4
 8007d70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe fee5 	bl	8006b42 <tu_fifo_write>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (!in_isr) {
 8007d7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007d82:	f083 0301 	eor.w	r3, r3, #1
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d006      	beq.n	8007d9a <dcd_event_handler+0x31e>
 8007d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d8e:	637b      	str	r3, [r7, #52]	; 0x34
  qhdl->interrupt_set(true);
 8007d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2001      	movs	r0, #1
 8007d96:	4798      	blx	r3
}
 8007d98:	bf00      	nop
  TU_ASSERT(success);
 8007d9a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007d9e:	f083 0301 	eor.w	r3, r3, #1
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d009      	beq.n	8007dbc <dcd_event_handler+0x340>
 8007da8:	4b2e      	ldr	r3, [pc, #184]	; (8007e64 <dcd_event_handler+0x3e8>)
 8007daa:	633b      	str	r3, [r7, #48]	; 0x30
 8007dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d003      	beq.n	8007dc0 <dcd_event_handler+0x344>
 8007db8:	be00      	bkpt	0x0000
 8007dba:	e001      	b.n	8007dc0 <dcd_event_handler+0x344>
  return success;
 8007dbc:	bf00      	nop
 8007dbe:	e045      	b.n	8007e4c <dcd_event_handler+0x3d0>
  TU_ASSERT(success);
 8007dc0:	bf00      	nop
      }

      // skip osal queue for SOF in usbd task
    break;
 8007dc2:	e043      	b.n	8007e4c <dcd_event_handler+0x3d0>

    default:
      osal_queue_send(_usbd_q, event, in_isr);
 8007dc4:	4b26      	ldr	r3, [pc, #152]	; (8007e60 <dcd_event_handler+0x3e4>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dce:	78fb      	ldrb	r3, [r7, #3]
 8007dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (!in_isr) {
 8007dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dd8:	f083 0301 	eor.w	r3, r3, #1
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d006      	beq.n	8007df0 <dcd_event_handler+0x374>
 8007de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de4:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2000      	movs	r0, #0
 8007dec:	4798      	blx	r3
}
 8007dee:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8007df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df2:	3304      	adds	r3, #4
 8007df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fe fea3 	bl	8006b42 <tu_fifo_write>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	77fb      	strb	r3, [r7, #31]
  if (!in_isr) {
 8007e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e04:	f083 0301 	eor.w	r3, r3, #1
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d006      	beq.n	8007e1c <dcd_event_handler+0x3a0>
 8007e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e10:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2001      	movs	r0, #1
 8007e18:	4798      	blx	r3
}
 8007e1a:	bf00      	nop
  TU_ASSERT(success);
 8007e1c:	7ffb      	ldrb	r3, [r7, #31]
 8007e1e:	f083 0301 	eor.w	r3, r3, #1
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d009      	beq.n	8007e3c <dcd_event_handler+0x3c0>
 8007e28:	4b0e      	ldr	r3, [pc, #56]	; (8007e64 <dcd_event_handler+0x3e8>)
 8007e2a:	617b      	str	r3, [r7, #20]
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d003      	beq.n	8007e40 <dcd_event_handler+0x3c4>
 8007e38:	be00      	bkpt	0x0000
 8007e3a:	e001      	b.n	8007e40 <dcd_event_handler+0x3c4>
  return success;
 8007e3c:	bf00      	nop
 8007e3e:	e006      	b.n	8007e4e <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 8007e40:	bf00      	nop
    break;
 8007e42:	e004      	b.n	8007e4e <dcd_event_handler+0x3d2>
    break;
 8007e44:	bf00      	nop
 8007e46:	e002      	b.n	8007e4e <dcd_event_handler+0x3d2>
    break;
 8007e48:	bf00      	nop
 8007e4a:	e000      	b.n	8007e4e <dcd_event_handler+0x3d2>
    break;
 8007e4c:	bf00      	nop
  }
}
 8007e4e:	bf00      	nop
 8007e50:	37a8      	adds	r7, #168	; 0xa8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	240019dc 	.word	0x240019dc
 8007e5c:	240019a0 	.word	0x240019a0
 8007e60:	24001aa0 	.word	0x24001aa0
 8007e64:	e000edf0 	.word	0xe000edf0

08007e68 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 8007e72:	79fb      	ldrb	r3, [r7, #7]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d005      	beq.n	8007e84 <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 8007e78:	4b07      	ldr	r3, [pc, #28]	; (8007e98 <usbd_int_set+0x30>)
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 f82d 	bl	8008edc <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 8007e82:	e004      	b.n	8007e8e <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8007e84:	4b04      	ldr	r3, [pc, #16]	; (8007e98 <usbd_int_set+0x30>)
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f001 f833 	bl	8008ef4 <dcd_int_disable>
}
 8007e8e:	bf00      	nop
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	24000035 	.word	0x24000035

08007e9c <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08a      	sub	sp, #40	; 0x28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6039      	str	r1, [r7, #0]
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	71fb      	strb	r3, [r7, #7]
 8007eac:	460b      	mov	r3, r1
 8007eae:	71bb      	strb	r3, [r7, #6]
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8007eb8:	e04d      	b.n	8007f56 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8007ebe:	6a3b      	ldr	r3, [r7, #32]
 8007ec0:	785b      	ldrb	r3, [r3, #1]
 8007ec2:	2b05      	cmp	r3, #5
 8007ec4:	d108      	bne.n	8007ed8 <usbd_open_edpt_pair+0x3c>
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	78db      	ldrb	r3, [r3, #3]
 8007eca:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	797b      	ldrb	r3, [r7, #5]
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d00a      	beq.n	8007eee <usbd_open_edpt_pair+0x52>
 8007ed8:	4b23      	ldr	r3, [pc, #140]	; (8007f68 <usbd_open_edpt_pair+0xcc>)
 8007eda:	61bb      	str	r3, [r7, #24]
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d000      	beq.n	8007eea <usbd_open_edpt_pair+0x4e>
 8007ee8:	be00      	bkpt	0x0000
 8007eea:	2300      	movs	r3, #0
 8007eec:	e038      	b.n	8007f60 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8007eee:	79fb      	ldrb	r3, [r7, #7]
 8007ef0:	6a39      	ldr	r1, [r7, #32]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 f83a 	bl	8007f6c <usbd_edpt_open>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	f083 0301 	eor.w	r3, r3, #1
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00a      	beq.n	8007f1a <usbd_open_edpt_pair+0x7e>
 8007f04:	4b18      	ldr	r3, [pc, #96]	; (8007f68 <usbd_open_edpt_pair+0xcc>)
 8007f06:	61fb      	str	r3, [r7, #28]
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d000      	beq.n	8007f16 <usbd_open_edpt_pair+0x7a>
 8007f14:	be00      	bkpt	0x0000
 8007f16:	2300      	movs	r3, #0
 8007f18:	e022      	b.n	8007f60 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	789b      	ldrb	r3, [r3, #2]
 8007f1e:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007f20:	7dfb      	ldrb	r3, [r7, #23]
 8007f22:	09db      	lsrs	r3, r3, #7
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d104      	bne.n	8007f34 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	789a      	ldrb	r2, [r3, #2]
 8007f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f30:	701a      	strb	r2, [r3, #0]
 8007f32:	e003      	b.n	8007f3c <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8007f34:	6a3b      	ldr	r3, [r7, #32]
 8007f36:	789a      	ldrb	r2, [r3, #2]
 8007f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3a:	701a      	strb	r2, [r3, #0]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	461a      	mov	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8007f4e:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	3301      	adds	r3, #1
 8007f54:	627b      	str	r3, [r7, #36]	; 0x24
 8007f56:	79bb      	ldrb	r3, [r7, #6]
 8007f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	dbad      	blt.n	8007eba <usbd_open_edpt_pair+0x1e>
  }

  return true;
 8007f5e:	2301      	movs	r3, #1
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3728      	adds	r7, #40	; 0x28
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	e000edf0 	.word	0xe000edf0

08007f6c <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	4603      	mov	r3, r0
 8007f74:	6039      	str	r1, [r7, #0]
 8007f76:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8007f78:	4b1b      	ldr	r3, [pc, #108]	; (8007fe8 <usbd_edpt_open+0x7c>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	789b      	ldrb	r3, [r3, #2]
 8007f82:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
 8007f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b08      	cmp	r3, #8
 8007f8e:	d90a      	bls.n	8007fa6 <usbd_edpt_open+0x3a>
 8007f90:	4b16      	ldr	r3, [pc, #88]	; (8007fec <usbd_edpt_open+0x80>)
 8007f92:	613b      	str	r3, [r7, #16]
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d000      	beq.n	8007fa2 <usbd_edpt_open+0x36>
 8007fa0:	be00      	bkpt	0x0000
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	e01c      	b.n	8007fe0 <usbd_edpt_open+0x74>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8007fa6:	4b12      	ldr	r3, [pc, #72]	; (8007ff0 <usbd_edpt_open+0x84>)
 8007fa8:	789b      	ldrb	r3, [r3, #2]
 8007faa:	4619      	mov	r1, r3
 8007fac:	6838      	ldr	r0, [r7, #0]
 8007fae:	f002 f8db 	bl	800a168 <tu_edpt_validate>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	f083 0301 	eor.w	r3, r3, #1
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <usbd_edpt_open+0x68>
 8007fbe:	4b0b      	ldr	r3, [pc, #44]	; (8007fec <usbd_edpt_open+0x80>)
 8007fc0:	617b      	str	r3, [r7, #20]
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d000      	beq.n	8007fd0 <usbd_edpt_open+0x64>
 8007fce:	be00      	bkpt	0x0000
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	e005      	b.n	8007fe0 <usbd_edpt_open+0x74>

  return dcd_edpt_open(rhport, desc_ep);
 8007fd4:	79fb      	ldrb	r3, [r7, #7]
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 ffdb 	bl	8008f94 <dcd_edpt_open>
 8007fde:	4603      	mov	r3, r0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3718      	adds	r7, #24
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	24000035 	.word	0x24000035
 8007fec:	e000edf0 	.word	0xe000edf0
 8007ff0:	240019a0 	.word	0x240019a0

08007ff4 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	460a      	mov	r2, r1
 8007ffe:	71fb      	strb	r3, [r7, #7]
 8008000:	4613      	mov	r3, r2
 8008002:	71bb      	strb	r3, [r7, #6]
 8008004:	79bb      	ldrb	r3, [r7, #6]
 8008006:	73bb      	strb	r3, [r7, #14]
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800800e:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 8008010:	75fb      	strb	r3, [r7, #23]
 8008012:	79bb      	ldrb	r3, [r7, #6]
 8008014:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008016:	7bfb      	ldrb	r3, [r7, #15]
 8008018:	09db      	lsrs	r3, r3, #7
 800801a:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 800801c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800801e:	7dfa      	ldrb	r2, [r7, #23]
 8008020:	7dbb      	ldrb	r3, [r7, #22]
 8008022:	0052      	lsls	r2, r2, #1
 8008024:	4413      	add	r3, r2
 8008026:	3320      	adds	r3, #32
 8008028:	4a06      	ldr	r2, [pc, #24]	; (8008044 <usbd_edpt_claim+0x50>)
 800802a:	4413      	add	r3, r2
 800802c:	3305      	adds	r3, #5
 800802e:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 8008030:	2100      	movs	r1, #0
 8008032:	6938      	ldr	r0, [r7, #16]
 8008034:	f002 f834 	bl	800a0a0 <tu_edpt_claim>
 8008038:	4603      	mov	r3, r0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3718      	adds	r7, #24
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	240019a0 	.word	0x240019a0

08008048 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	4603      	mov	r3, r0
 8008050:	460a      	mov	r2, r1
 8008052:	71fb      	strb	r3, [r7, #7]
 8008054:	4613      	mov	r3, r2
 8008056:	71bb      	strb	r3, [r7, #6]
 8008058:	79bb      	ldrb	r3, [r7, #6]
 800805a:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008062:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 8008064:	75fb      	strb	r3, [r7, #23]
 8008066:	79bb      	ldrb	r3, [r7, #6]
 8008068:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800806a:	7bfb      	ldrb	r3, [r7, #15]
 800806c:	09db      	lsrs	r3, r3, #7
 800806e:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 8008070:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8008072:	7dfa      	ldrb	r2, [r7, #23]
 8008074:	7dbb      	ldrb	r3, [r7, #22]
 8008076:	0052      	lsls	r2, r2, #1
 8008078:	4413      	add	r3, r2
 800807a:	3320      	adds	r3, #32
 800807c:	4a06      	ldr	r2, [pc, #24]	; (8008098 <usbd_edpt_release+0x50>)
 800807e:	4413      	add	r3, r2
 8008080:	3305      	adds	r3, #5
 8008082:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 8008084:	2100      	movs	r1, #0
 8008086:	6938      	ldr	r0, [r7, #16]
 8008088:	f002 f844 	bl	800a114 <tu_edpt_release>
 800808c:	4603      	mov	r3, r0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3718      	adds	r7, #24
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	240019a0 	.word	0x240019a0

0800809c <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	603a      	str	r2, [r7, #0]
 80080a4:	461a      	mov	r2, r3
 80080a6:	4603      	mov	r3, r0
 80080a8:	71fb      	strb	r3, [r7, #7]
 80080aa:	460b      	mov	r3, r1
 80080ac:	71bb      	strb	r3, [r7, #6]
 80080ae:	4613      	mov	r3, r2
 80080b0:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 80080b2:	4b32      	ldr	r3, [pc, #200]	; (800817c <usbd_edpt_xfer+0xe0>)
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	71fb      	strb	r3, [r7, #7]
 80080b8:	79bb      	ldrb	r3, [r7, #6]
 80080ba:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80080bc:	7abb      	ldrb	r3, [r7, #10]
 80080be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080c2:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80080c4:	75fb      	strb	r3, [r7, #23]
 80080c6:	79bb      	ldrb	r3, [r7, #6]
 80080c8:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80080ca:	7afb      	ldrb	r3, [r7, #11]
 80080cc:	09db      	lsrs	r3, r3, #7
 80080ce:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80080d0:	75bb      	strb	r3, [r7, #22]
  // TU_VERIFY(tud_ready());

  TU_LOG(USBD_DBG, "  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80080d2:	7dfa      	ldrb	r2, [r7, #23]
 80080d4:	7dbb      	ldrb	r3, [r7, #22]
 80080d6:	492a      	ldr	r1, [pc, #168]	; (8008180 <usbd_edpt_xfer+0xe4>)
 80080d8:	0052      	lsls	r2, r2, #1
 80080da:	440a      	add	r2, r1
 80080dc:	4413      	add	r3, r2
 80080de:	3320      	adds	r3, #32
 80080e0:	795b      	ldrb	r3, [r3, #5]
 80080e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00a      	beq.n	8008102 <usbd_edpt_xfer+0x66>
 80080ec:	4b25      	ldr	r3, [pc, #148]	; (8008184 <usbd_edpt_xfer+0xe8>)
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0301 	and.w	r3, r3, #1
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d000      	beq.n	80080fe <usbd_edpt_xfer+0x62>
 80080fc:	be00      	bkpt	0x0000
 80080fe:	2300      	movs	r3, #0
 8008100:	e038      	b.n	8008174 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8008102:	7dfa      	ldrb	r2, [r7, #23]
 8008104:	7dbb      	ldrb	r3, [r7, #22]
 8008106:	491e      	ldr	r1, [pc, #120]	; (8008180 <usbd_edpt_xfer+0xe4>)
 8008108:	0052      	lsls	r2, r2, #1
 800810a:	440a      	add	r2, r1
 800810c:	4413      	add	r3, r2
 800810e:	f103 0220 	add.w	r2, r3, #32
 8008112:	7953      	ldrb	r3, [r2, #5]
 8008114:	f043 0301 	orr.w	r3, r3, #1
 8008118:	7153      	strb	r3, [r2, #5]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 800811a:	88bb      	ldrh	r3, [r7, #4]
 800811c:	79b9      	ldrb	r1, [r7, #6]
 800811e:	79f8      	ldrb	r0, [r7, #7]
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	f001 f897 	bl	8009254 <dcd_edpt_xfer>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <usbd_edpt_xfer+0x94>
  {
    return true;
 800812c:	2301      	movs	r3, #1
 800812e:	e021      	b.n	8008174 <usbd_edpt_xfer+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8008130:	7dfa      	ldrb	r2, [r7, #23]
 8008132:	7dbb      	ldrb	r3, [r7, #22]
 8008134:	4912      	ldr	r1, [pc, #72]	; (8008180 <usbd_edpt_xfer+0xe4>)
 8008136:	0052      	lsls	r2, r2, #1
 8008138:	440a      	add	r2, r1
 800813a:	4413      	add	r3, r2
 800813c:	f103 0220 	add.w	r2, r3, #32
 8008140:	7953      	ldrb	r3, [r2, #5]
 8008142:	f36f 0300 	bfc	r3, #0, #1
 8008146:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8008148:	7dfa      	ldrb	r2, [r7, #23]
 800814a:	7dbb      	ldrb	r3, [r7, #22]
 800814c:	490c      	ldr	r1, [pc, #48]	; (8008180 <usbd_edpt_xfer+0xe4>)
 800814e:	0052      	lsls	r2, r2, #1
 8008150:	440a      	add	r2, r1
 8008152:	4413      	add	r3, r2
 8008154:	f103 0220 	add.w	r2, r3, #32
 8008158:	7953      	ldrb	r3, [r2, #5]
 800815a:	f36f 0382 	bfc	r3, #2, #1
 800815e:	7153      	strb	r3, [r2, #5]
    TU_LOG(USBD_DBG, "FAILED\r\n");
    TU_BREAKPOINT();
 8008160:	4b08      	ldr	r3, [pc, #32]	; (8008184 <usbd_edpt_xfer+0xe8>)
 8008162:	613b      	str	r3, [r7, #16]
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	2b00      	cmp	r3, #0
 800816e:	d000      	beq.n	8008172 <usbd_edpt_xfer+0xd6>
 8008170:	be00      	bkpt	0x0000
    return false;
 8008172:	2300      	movs	r3, #0
  }
}
 8008174:	4618      	mov	r0, r3
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	24000035 	.word	0x24000035
 8008180:	240019a0 	.word	0x240019a0
 8008184:	e000edf0 	.word	0xe000edf0

08008188 <usbd_edpt_xfer_fifo>:
// The number of bytes has to be given explicitly to allow more flexible control of how many
// bytes should be written and second to keep the return value free to give back a boolean
// success message. If total_bytes is too big, the FIFO will copy only what is available
// into the USB buffer!
bool usbd_edpt_xfer_fifo(uint8_t rhport, uint8_t ep_addr, tu_fifo_t * ff, uint16_t total_bytes)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	603a      	str	r2, [r7, #0]
 8008190:	461a      	mov	r2, r3
 8008192:	4603      	mov	r3, r0
 8008194:	71fb      	strb	r3, [r7, #7]
 8008196:	460b      	mov	r3, r1
 8008198:	71bb      	strb	r3, [r7, #6]
 800819a:	4613      	mov	r3, r2
 800819c:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 800819e:	4b32      	ldr	r3, [pc, #200]	; (8008268 <usbd_edpt_xfer_fifo+0xe0>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	71fb      	strb	r3, [r7, #7]
 80081a4:	79bb      	ldrb	r3, [r7, #6]
 80081a6:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80081a8:	7abb      	ldrb	r3, [r7, #10]
 80081aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ae:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80081b0:	75fb      	strb	r3, [r7, #23]
 80081b2:	79bb      	ldrb	r3, [r7, #6]
 80081b4:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80081b6:	7afb      	ldrb	r3, [r7, #11]
 80081b8:	09db      	lsrs	r3, r3, #7
 80081ba:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80081bc:	75bb      	strb	r3, [r7, #22]

  TU_LOG(USBD_DBG, "  Queue ISO EP %02X with %u bytes ... ", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80081be:	7dfa      	ldrb	r2, [r7, #23]
 80081c0:	7dbb      	ldrb	r3, [r7, #22]
 80081c2:	492a      	ldr	r1, [pc, #168]	; (800826c <usbd_edpt_xfer_fifo+0xe4>)
 80081c4:	0052      	lsls	r2, r2, #1
 80081c6:	440a      	add	r2, r1
 80081c8:	4413      	add	r3, r2
 80081ca:	3320      	adds	r3, #32
 80081cc:	795b      	ldrb	r3, [r3, #5]
 80081ce:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00a      	beq.n	80081ee <usbd_edpt_xfer_fifo+0x66>
 80081d8:	4b25      	ldr	r3, [pc, #148]	; (8008270 <usbd_edpt_xfer_fifo+0xe8>)
 80081da:	60fb      	str	r3, [r7, #12]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d000      	beq.n	80081ea <usbd_edpt_xfer_fifo+0x62>
 80081e8:	be00      	bkpt	0x0000
 80081ea:	2300      	movs	r3, #0
 80081ec:	e038      	b.n	8008260 <usbd_edpt_xfer_fifo+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer() could return
  // and usbd task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 80081ee:	7dfa      	ldrb	r2, [r7, #23]
 80081f0:	7dbb      	ldrb	r3, [r7, #22]
 80081f2:	491e      	ldr	r1, [pc, #120]	; (800826c <usbd_edpt_xfer_fifo+0xe4>)
 80081f4:	0052      	lsls	r2, r2, #1
 80081f6:	440a      	add	r2, r1
 80081f8:	4413      	add	r3, r2
 80081fa:	f103 0220 	add.w	r2, r3, #32
 80081fe:	7953      	ldrb	r3, [r2, #5]
 8008200:	f043 0301 	orr.w	r3, r3, #1
 8008204:	7153      	strb	r3, [r2, #5]

  if (dcd_edpt_xfer_fifo(rhport, ep_addr, ff, total_bytes))
 8008206:	88bb      	ldrh	r3, [r7, #4]
 8008208:	79b9      	ldrb	r1, [r7, #6]
 800820a:	79f8      	ldrb	r0, [r7, #7]
 800820c:	683a      	ldr	r2, [r7, #0]
 800820e:	f001 f889 	bl	8009324 <dcd_edpt_xfer_fifo>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <usbd_edpt_xfer_fifo+0x94>
  {
    TU_LOG(USBD_DBG, "OK\r\n");
    return true;
 8008218:	2301      	movs	r3, #1
 800821a:	e021      	b.n	8008260 <usbd_edpt_xfer_fifo+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 800821c:	7dfa      	ldrb	r2, [r7, #23]
 800821e:	7dbb      	ldrb	r3, [r7, #22]
 8008220:	4912      	ldr	r1, [pc, #72]	; (800826c <usbd_edpt_xfer_fifo+0xe4>)
 8008222:	0052      	lsls	r2, r2, #1
 8008224:	440a      	add	r2, r1
 8008226:	4413      	add	r3, r2
 8008228:	f103 0220 	add.w	r2, r3, #32
 800822c:	7953      	ldrb	r3, [r2, #5]
 800822e:	f36f 0300 	bfc	r3, #0, #1
 8008232:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8008234:	7dfa      	ldrb	r2, [r7, #23]
 8008236:	7dbb      	ldrb	r3, [r7, #22]
 8008238:	490c      	ldr	r1, [pc, #48]	; (800826c <usbd_edpt_xfer_fifo+0xe4>)
 800823a:	0052      	lsls	r2, r2, #1
 800823c:	440a      	add	r2, r1
 800823e:	4413      	add	r3, r2
 8008240:	f103 0220 	add.w	r2, r3, #32
 8008244:	7953      	ldrb	r3, [r2, #5]
 8008246:	f36f 0382 	bfc	r3, #2, #1
 800824a:	7153      	strb	r3, [r2, #5]
    TU_LOG(USBD_DBG, "failed\r\n");
    TU_BREAKPOINT();
 800824c:	4b08      	ldr	r3, [pc, #32]	; (8008270 <usbd_edpt_xfer_fifo+0xe8>)
 800824e:	613b      	str	r3, [r7, #16]
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	2b00      	cmp	r3, #0
 800825a:	d000      	beq.n	800825e <usbd_edpt_xfer_fifo+0xd6>
 800825c:	be00      	bkpt	0x0000
    return false;
 800825e:	2300      	movs	r3, #0
  }
}
 8008260:	4618      	mov	r0, r3
 8008262:	3718      	adds	r7, #24
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	24000035 	.word	0x24000035
 800826c:	240019a0 	.word	0x240019a0
 8008270:	e000edf0 	.word	0xe000edf0

08008274 <usbd_edpt_stall>:

  return _usbd_dev.ep_status[epnum][dir].busy;
}

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	4603      	mov	r3, r0
 800827c:	460a      	mov	r2, r1
 800827e:	71fb      	strb	r3, [r7, #7]
 8008280:	4613      	mov	r3, r2
 8008282:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8008284:	4b1f      	ldr	r3, [pc, #124]	; (8008304 <usbd_edpt_stall+0x90>)
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	71fb      	strb	r3, [r7, #7]
 800828a:	79bb      	ldrb	r3, [r7, #6]
 800828c:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800828e:	7b3b      	ldrb	r3, [r7, #12]
 8008290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008294:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008296:	73fb      	strb	r3, [r7, #15]
 8008298:	79bb      	ldrb	r3, [r7, #6]
 800829a:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800829c:	7b7b      	ldrb	r3, [r7, #13]
 800829e:	09db      	lsrs	r3, r3, #7
 80082a0:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80082a2:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 80082a4:	7bfa      	ldrb	r2, [r7, #15]
 80082a6:	7bbb      	ldrb	r3, [r7, #14]
 80082a8:	4917      	ldr	r1, [pc, #92]	; (8008308 <usbd_edpt_stall+0x94>)
 80082aa:	0052      	lsls	r2, r2, #1
 80082ac:	440a      	add	r2, r1
 80082ae:	4413      	add	r3, r2
 80082b0:	3320      	adds	r3, #32
 80082b2:	795b      	ldrb	r3, [r3, #5]
 80082b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d11d      	bne.n	80082fa <usbd_edpt_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 80082be:	79ba      	ldrb	r2, [r7, #6]
 80082c0:	79fb      	ldrb	r3, [r7, #7]
 80082c2:	4611      	mov	r1, r2
 80082c4:	4618      	mov	r0, r3
 80082c6:	f001 f9e7 	bl	8009698 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 1;
 80082ca:	7bfa      	ldrb	r2, [r7, #15]
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
 80082ce:	490e      	ldr	r1, [pc, #56]	; (8008308 <usbd_edpt_stall+0x94>)
 80082d0:	0052      	lsls	r2, r2, #1
 80082d2:	440a      	add	r2, r1
 80082d4:	4413      	add	r3, r2
 80082d6:	f103 0220 	add.w	r2, r3, #32
 80082da:	7953      	ldrb	r3, [r2, #5]
 80082dc:	f043 0302 	orr.w	r3, r3, #2
 80082e0:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].busy = 1;
 80082e2:	7bfa      	ldrb	r2, [r7, #15]
 80082e4:	7bbb      	ldrb	r3, [r7, #14]
 80082e6:	4908      	ldr	r1, [pc, #32]	; (8008308 <usbd_edpt_stall+0x94>)
 80082e8:	0052      	lsls	r2, r2, #1
 80082ea:	440a      	add	r2, r1
 80082ec:	4413      	add	r3, r2
 80082ee:	f103 0220 	add.w	r2, r3, #32
 80082f2:	7953      	ldrb	r3, [r2, #5]
 80082f4:	f043 0301 	orr.w	r3, r3, #1
 80082f8:	7153      	strb	r3, [r2, #5]
  }
}
 80082fa:	bf00      	nop
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	24000035 	.word	0x24000035
 8008308:	240019a0 	.word	0x240019a0

0800830c <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	4603      	mov	r3, r0
 8008314:	460a      	mov	r2, r1
 8008316:	71fb      	strb	r3, [r7, #7]
 8008318:	4613      	mov	r3, r2
 800831a:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 800831c:	4b1f      	ldr	r3, [pc, #124]	; (800839c <usbd_edpt_clear_stall+0x90>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	71fb      	strb	r3, [r7, #7]
 8008322:	79bb      	ldrb	r3, [r7, #6]
 8008324:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008326:	7b3b      	ldrb	r3, [r7, #12]
 8008328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800832c:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800832e:	73fb      	strb	r3, [r7, #15]
 8008330:	79bb      	ldrb	r3, [r7, #6]
 8008332:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008334:	7b7b      	ldrb	r3, [r7, #13]
 8008336:	09db      	lsrs	r3, r3, #7
 8008338:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800833a:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 800833c:	7bfa      	ldrb	r2, [r7, #15]
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	4917      	ldr	r1, [pc, #92]	; (80083a0 <usbd_edpt_clear_stall+0x94>)
 8008342:	0052      	lsls	r2, r2, #1
 8008344:	440a      	add	r2, r1
 8008346:	4413      	add	r3, r2
 8008348:	3320      	adds	r3, #32
 800834a:	795b      	ldrb	r3, [r3, #5]
 800834c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d01d      	beq.n	8008392 <usbd_edpt_clear_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 8008356:	79ba      	ldrb	r2, [r7, #6]
 8008358:	79fb      	ldrb	r3, [r7, #7]
 800835a:	4611      	mov	r1, r2
 800835c:	4618      	mov	r0, r3
 800835e:	f001 f9ad 	bl	80096bc <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8008362:	7bfa      	ldrb	r2, [r7, #15]
 8008364:	7bbb      	ldrb	r3, [r7, #14]
 8008366:	490e      	ldr	r1, [pc, #56]	; (80083a0 <usbd_edpt_clear_stall+0x94>)
 8008368:	0052      	lsls	r2, r2, #1
 800836a:	440a      	add	r2, r1
 800836c:	4413      	add	r3, r2
 800836e:	f103 0220 	add.w	r2, r3, #32
 8008372:	7953      	ldrb	r3, [r2, #5]
 8008374:	f36f 0341 	bfc	r3, #1, #1
 8008378:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 800837a:	7bfa      	ldrb	r2, [r7, #15]
 800837c:	7bbb      	ldrb	r3, [r7, #14]
 800837e:	4908      	ldr	r1, [pc, #32]	; (80083a0 <usbd_edpt_clear_stall+0x94>)
 8008380:	0052      	lsls	r2, r2, #1
 8008382:	440a      	add	r2, r1
 8008384:	4413      	add	r3, r2
 8008386:	f103 0220 	add.w	r2, r3, #32
 800838a:	7953      	ldrb	r3, [r2, #5]
 800838c:	f36f 0300 	bfc	r3, #0, #1
 8008390:	7153      	strb	r3, [r2, #5]
  }
}
 8008392:	bf00      	nop
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	24000035 	.word	0x24000035
 80083a0:	240019a0 	.word	0x240019a0

080083a4 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	4603      	mov	r3, r0
 80083ac:	460a      	mov	r2, r1
 80083ae:	71fb      	strb	r3, [r7, #7]
 80083b0:	4613      	mov	r3, r2
 80083b2:	71bb      	strb	r3, [r7, #6]
 80083b4:	79bb      	ldrb	r3, [r7, #6]
 80083b6:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80083b8:	7b3b      	ldrb	r3, [r7, #12]
 80083ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083be:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80083c0:	73fb      	strb	r3, [r7, #15]
 80083c2:	79bb      	ldrb	r3, [r7, #6]
 80083c4:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80083c6:	7b7b      	ldrb	r3, [r7, #13]
 80083c8:	09db      	lsrs	r3, r3, #7
 80083ca:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80083cc:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 80083ce:	7bfa      	ldrb	r2, [r7, #15]
 80083d0:	7bbb      	ldrb	r3, [r7, #14]
 80083d2:	490a      	ldr	r1, [pc, #40]	; (80083fc <usbd_edpt_stalled+0x58>)
 80083d4:	0052      	lsls	r2, r2, #1
 80083d6:	440a      	add	r2, r1
 80083d8:	4413      	add	r3, r2
 80083da:	3320      	adds	r3, #32
 80083dc:	795b      	ldrb	r3, [r3, #5]
 80083de:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	bf14      	ite	ne
 80083e8:	2301      	movne	r3, #1
 80083ea:	2300      	moveq	r3, #0
 80083ec:	b2db      	uxtb	r3, r3
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	240019a0 	.word	0x240019a0

08008400 <usbd_edpt_close>:
 *
 * In progress transfers on this EP may be delivered after this call.
 *
 */
void usbd_edpt_close(uint8_t rhport, uint8_t ep_addr)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	4603      	mov	r3, r0
 8008408:	460a      	mov	r2, r1
 800840a:	71fb      	strb	r3, [r7, #7]
 800840c:	4613      	mov	r3, r2
 800840e:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8008410:	4b25      	ldr	r3, [pc, #148]	; (80084a8 <usbd_edpt_close+0xa8>)
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(dcd_edpt_close, /**/);
 8008416:	4b25      	ldr	r3, [pc, #148]	; (80084ac <usbd_edpt_close+0xac>)
 8008418:	2b00      	cmp	r3, #0
 800841a:	d109      	bne.n	8008430 <usbd_edpt_close+0x30>
 800841c:	4b24      	ldr	r3, [pc, #144]	; (80084b0 <usbd_edpt_close+0xb0>)
 800841e:	613b      	str	r3, [r7, #16]
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0301 	and.w	r3, r3, #1
 8008428:	2b00      	cmp	r3, #0
 800842a:	d039      	beq.n	80084a0 <usbd_edpt_close+0xa0>
 800842c:	be00      	bkpt	0x0000
 800842e:	e037      	b.n	80084a0 <usbd_edpt_close+0xa0>
 8008430:	79bb      	ldrb	r3, [r7, #6]
 8008432:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008434:	7bbb      	ldrb	r3, [r7, #14]
 8008436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800843a:	b2db      	uxtb	r3, r3
  TU_LOG(USBD_DBG, "  CLOSING Endpoint: 0x%02X\r\n", ep_addr);

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800843c:	75fb      	strb	r3, [r7, #23]
 800843e:	79bb      	ldrb	r3, [r7, #6]
 8008440:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008442:	7bfb      	ldrb	r3, [r7, #15]
 8008444:	09db      	lsrs	r3, r3, #7
 8008446:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8008448:	75bb      	strb	r3, [r7, #22]

  dcd_edpt_close(rhport, ep_addr);
 800844a:	79ba      	ldrb	r2, [r7, #6]
 800844c:	79fb      	ldrb	r3, [r7, #7]
 800844e:	4611      	mov	r1, r2
 8008450:	4618      	mov	r0, r3
 8008452:	f001 f8bb 	bl	80095cc <dcd_edpt_close>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8008456:	7dfa      	ldrb	r2, [r7, #23]
 8008458:	7dbb      	ldrb	r3, [r7, #22]
 800845a:	4916      	ldr	r1, [pc, #88]	; (80084b4 <usbd_edpt_close+0xb4>)
 800845c:	0052      	lsls	r2, r2, #1
 800845e:	440a      	add	r2, r1
 8008460:	4413      	add	r3, r2
 8008462:	f103 0220 	add.w	r2, r3, #32
 8008466:	7953      	ldrb	r3, [r2, #5]
 8008468:	f36f 0341 	bfc	r3, #1, #1
 800846c:	7153      	strb	r3, [r2, #5]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 800846e:	7dfa      	ldrb	r2, [r7, #23]
 8008470:	7dbb      	ldrb	r3, [r7, #22]
 8008472:	4910      	ldr	r1, [pc, #64]	; (80084b4 <usbd_edpt_close+0xb4>)
 8008474:	0052      	lsls	r2, r2, #1
 8008476:	440a      	add	r2, r1
 8008478:	4413      	add	r3, r2
 800847a:	f103 0220 	add.w	r2, r3, #32
 800847e:	7953      	ldrb	r3, [r2, #5]
 8008480:	f36f 0300 	bfc	r3, #0, #1
 8008484:	7153      	strb	r3, [r2, #5]
  _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8008486:	7dfa      	ldrb	r2, [r7, #23]
 8008488:	7dbb      	ldrb	r3, [r7, #22]
 800848a:	490a      	ldr	r1, [pc, #40]	; (80084b4 <usbd_edpt_close+0xb4>)
 800848c:	0052      	lsls	r2, r2, #1
 800848e:	440a      	add	r2, r1
 8008490:	4413      	add	r3, r2
 8008492:	f103 0220 	add.w	r2, r3, #32
 8008496:	7953      	ldrb	r3, [r2, #5]
 8008498:	f36f 0382 	bfc	r3, #2, #1
 800849c:	7153      	strb	r3, [r2, #5]

  return;
 800849e:	e000      	b.n	80084a2 <usbd_edpt_close+0xa2>
  TU_ASSERT(dcd_edpt_close, /**/);
 80084a0:	bf00      	nop
}
 80084a2:	3718      	adds	r7, #24
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	24000035 	.word	0x24000035
 80084ac:	080095cd 	.word	0x080095cd
 80084b0:	e000edf0 	.word	0xe000edf0
 80084b4:	240019a0 	.word	0x240019a0

080084b8 <_status_stage_xact>:
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	4603      	mov	r3, r0
 80084c0:	6039      	str	r1, [r7, #0]
 80084c2:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <_status_stage_xact+0x1e>
 80084d2:	2300      	movs	r3, #0
 80084d4:	e000      	b.n	80084d8 <_status_stage_xact+0x20>
 80084d6:	2380      	movs	r3, #128	; 0x80
 80084d8:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80084da:	7bf9      	ldrb	r1, [r7, #15]
 80084dc:	79f8      	ldrb	r0, [r7, #7]
 80084de:	2300      	movs	r3, #0
 80084e0:	2200      	movs	r2, #0
 80084e2:	f7ff fddb 	bl	800809c <usbd_edpt_xfer>
 80084e6:	4603      	mov	r3, r0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	6039      	str	r1, [r7, #0]
 80084fa:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request       = (*request);
 80084fc:	4b0b      	ldr	r3, [pc, #44]	; (800852c <tud_control_status+0x3c>)
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	6810      	ldr	r0, [r2, #0]
 8008502:	6851      	ldr	r1, [r2, #4]
 8008504:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8008506:	4b09      	ldr	r3, [pc, #36]	; (800852c <tud_control_status+0x3c>)
 8008508:	2200      	movs	r2, #0
 800850a:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800850c:	4b07      	ldr	r3, [pc, #28]	; (800852c <tud_control_status+0x3c>)
 800850e:	2200      	movs	r2, #0
 8008510:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8008512:	4b06      	ldr	r3, [pc, #24]	; (800852c <tud_control_status+0x3c>)
 8008514:	2200      	movs	r2, #0
 8008516:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 8008518:	79fb      	ldrb	r3, [r7, #7]
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	4618      	mov	r0, r3
 800851e:	f7ff ffcb 	bl	80084b8 <_status_stage_xact>
 8008522:	4603      	mov	r3, r0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	24001aa4 	.word	0x24001aa4

08008530 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af00      	add	r7, sp, #0
 8008536:	4603      	mov	r3, r0
 8008538:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 800853a:	4b24      	ldr	r3, [pc, #144]	; (80085cc <_data_stage_xact+0x9c>)
 800853c:	899a      	ldrh	r2, [r3, #12]
 800853e:	4b23      	ldr	r3, [pc, #140]	; (80085cc <_data_stage_xact+0x9c>)
 8008540:	89db      	ldrh	r3, [r3, #14]
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	b29b      	uxth	r3, r3
 8008546:	837b      	strh	r3, [r7, #26]
 8008548:	2340      	movs	r3, #64	; 0x40
 800854a:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800854c:	8b7a      	ldrh	r2, [r7, #26]
 800854e:	8b3b      	ldrh	r3, [r7, #24]
 8008550:	4293      	cmp	r3, r2
 8008552:	bf28      	it	cs
 8008554:	4613      	movcs	r3, r2
 8008556:	b29b      	uxth	r3, r3
 8008558:	83bb      	strh	r3, [r7, #28]

  uint8_t ep_addr = EDPT_CTRL_OUT;
 800855a:	2300      	movs	r3, #0
 800855c:	77fb      	strb	r3, [r7, #31]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 800855e:	4b1b      	ldr	r3, [pc, #108]	; (80085cc <_data_stage_xact+0x9c>)
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008566:	b2db      	uxtb	r3, r3
 8008568:	2b00      	cmp	r3, #0
 800856a:	d01e      	beq.n	80085aa <_data_stage_xact+0x7a>
  {
    ep_addr = EDPT_CTRL_IN;
 800856c:	2380      	movs	r3, #128	; 0x80
 800856e:	77fb      	strb	r3, [r7, #31]
    if ( xact_len ) {
 8008570:	8bbb      	ldrh	r3, [r7, #28]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d019      	beq.n	80085aa <_data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_usbd_ctrl_buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 8008576:	4b15      	ldr	r3, [pc, #84]	; (80085cc <_data_stage_xact+0x9c>)
 8008578:	689a      	ldr	r2, [r3, #8]
 800857a:	8bbb      	ldrh	r3, [r7, #28]
 800857c:	4914      	ldr	r1, [pc, #80]	; (80085d0 <_data_stage_xact+0xa0>)
 800857e:	6179      	str	r1, [r7, #20]
 8008580:	2140      	movs	r1, #64	; 0x40
 8008582:	6139      	str	r1, [r7, #16]
 8008584:	60fa      	str	r2, [r7, #12]
 8008586:	60bb      	str	r3, [r7, #8]
  if (count > destsz) {
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	429a      	cmp	r2, r3
 800858e:	d202      	bcs.n	8008596 <_data_stage_xact+0x66>
    return -1;
 8008590:	f04f 33ff 	mov.w	r3, #4294967295
 8008594:	e005      	b.n	80085a2 <_data_stage_xact+0x72>
  memcpy(dest, src, count);
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	68f9      	ldr	r1, [r7, #12]
 800859a:	6978      	ldr	r0, [r7, #20]
 800859c:	f001 feca 	bl	800a334 <memcpy>
  return 0;
 80085a0:	2300      	movs	r3, #0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <_data_stage_xact+0x7a>
 80085a6:	2300      	movs	r3, #0
 80085a8:	e00b      	b.n	80085c2 <_data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 80085aa:	8bbb      	ldrh	r3, [r7, #28]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <_data_stage_xact+0x84>
 80085b0:	4a07      	ldr	r2, [pc, #28]	; (80085d0 <_data_stage_xact+0xa0>)
 80085b2:	e000      	b.n	80085b6 <_data_stage_xact+0x86>
 80085b4:	2200      	movs	r2, #0
 80085b6:	8bbb      	ldrh	r3, [r7, #28]
 80085b8:	7ff9      	ldrb	r1, [r7, #31]
 80085ba:	79f8      	ldrb	r0, [r7, #7]
 80085bc:	f7ff fd6e 	bl	800809c <usbd_edpt_xfer>
 80085c0:	4603      	mov	r3, r0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3720      	adds	r7, #32
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	24001aa4 	.word	0x24001aa4
 80085d0:	24001ab8 	.word	0x24001ab8

080085d4 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b088      	sub	sp, #32
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60b9      	str	r1, [r7, #8]
 80085dc:	607a      	str	r2, [r7, #4]
 80085de:	461a      	mov	r2, r3
 80085e0:	4603      	mov	r3, r0
 80085e2:	73fb      	strb	r3, [r7, #15]
 80085e4:	4613      	mov	r3, r2
 80085e6:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request       = (*request);
 80085e8:	4b30      	ldr	r3, [pc, #192]	; (80086ac <tud_control_xfer+0xd8>)
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	6810      	ldr	r0, [r2, #0]
 80085ee:	6851      	ldr	r1, [r2, #4]
 80085f0:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 80085f2:	4a2e      	ldr	r2, [pc, #184]	; (80086ac <tud_control_xfer+0xd8>)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 80085f8:	4b2c      	ldr	r3, [pc, #176]	; (80086ac <tud_control_xfer+0xd8>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	88db      	ldrh	r3, [r3, #6]
 8008602:	b29a      	uxth	r2, r3
 8008604:	89bb      	ldrh	r3, [r7, #12]
 8008606:	827b      	strh	r3, [r7, #18]
 8008608:	4613      	mov	r3, r2
 800860a:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800860c:	8a7a      	ldrh	r2, [r7, #18]
 800860e:	8a3b      	ldrh	r3, [r7, #16]
 8008610:	4293      	cmp	r3, r2
 8008612:	bf28      	it	cs
 8008614:	4613      	movcs	r3, r2
 8008616:	b29a      	uxth	r2, r3
 8008618:	4b24      	ldr	r3, [pc, #144]	; (80086ac <tud_control_xfer+0xd8>)
 800861a:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	88db      	ldrh	r3, [r3, #6]
 8008620:	b29b      	uxth	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d026      	beq.n	8008674 <tud_control_xfer+0xa0>
  {
    if(_ctrl_xfer.data_len > 0U)
 8008626:	4b21      	ldr	r3, [pc, #132]	; (80086ac <tud_control_xfer+0xd8>)
 8008628:	899b      	ldrh	r3, [r3, #12]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00d      	beq.n	800864a <tud_control_xfer+0x76>
    {
      TU_ASSERT(buffer);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10a      	bne.n	800864a <tud_control_xfer+0x76>
 8008634:	4b1e      	ldr	r3, [pc, #120]	; (80086b0 <tud_control_xfer+0xdc>)
 8008636:	61bb      	str	r3, [r7, #24]
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0301 	and.w	r3, r3, #1
 8008640:	2b00      	cmp	r3, #0
 8008642:	d000      	beq.n	8008646 <tud_control_xfer+0x72>
 8008644:	be00      	bkpt	0x0000
 8008646:	2300      	movs	r3, #0
 8008648:	e02b      	b.n	80086a2 <tud_control_xfer+0xce>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 800864a:	7bfb      	ldrb	r3, [r7, #15]
 800864c:	4618      	mov	r0, r3
 800864e:	f7ff ff6f 	bl	8008530 <_data_stage_xact>
 8008652:	4603      	mov	r3, r0
 8008654:	f083 0301 	eor.w	r3, r3, #1
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d020      	beq.n	80086a0 <tud_control_xfer+0xcc>
 800865e:	4b14      	ldr	r3, [pc, #80]	; (80086b0 <tud_control_xfer+0xdc>)
 8008660:	617b      	str	r3, [r7, #20]
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d000      	beq.n	8008670 <tud_control_xfer+0x9c>
 800866e:	be00      	bkpt	0x0000
 8008670:	2300      	movs	r3, #0
 8008672:	e016      	b.n	80086a2 <tud_control_xfer+0xce>
  }
  else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
 8008674:	7bfb      	ldrb	r3, [r7, #15]
 8008676:	68b9      	ldr	r1, [r7, #8]
 8008678:	4618      	mov	r0, r3
 800867a:	f7ff ff1d 	bl	80084b8 <_status_stage_xact>
 800867e:	4603      	mov	r3, r0
 8008680:	f083 0301 	eor.w	r3, r3, #1
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00a      	beq.n	80086a0 <tud_control_xfer+0xcc>
 800868a:	4b09      	ldr	r3, [pc, #36]	; (80086b0 <tud_control_xfer+0xdc>)
 800868c:	61fb      	str	r3, [r7, #28]
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	2b00      	cmp	r3, #0
 8008698:	d000      	beq.n	800869c <tud_control_xfer+0xc8>
 800869a:	be00      	bkpt	0x0000
 800869c:	2300      	movs	r3, #0
 800869e:	e000      	b.n	80086a2 <tud_control_xfer+0xce>
  }

  return true;
 80086a0:	2301      	movs	r3, #1
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3720      	adds	r7, #32
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	24001aa4 	.word	0x24001aa4
 80086b0:	e000edf0 	.word	0xe000edf0

080086b4 <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 80086b8:	2214      	movs	r2, #20
 80086ba:	2100      	movs	r1, #0
 80086bc:	4802      	ldr	r0, [pc, #8]	; (80086c8 <usbd_control_reset+0x14>)
 80086be:	f001 fe47 	bl	800a350 <memset>
}
 80086c2:	bf00      	nop
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	24001aa4 	.word	0x24001aa4

080086cc <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 80086d4:	4a04      	ldr	r2, [pc, #16]	; (80086e8 <usbd_control_set_complete_callback+0x1c>)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6113      	str	r3, [r2, #16]
}
 80086da:	bf00      	nop
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	24001aa4 	.word	0x24001aa4

080086ec <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request       = (*request);
 80086f4:	4b09      	ldr	r3, [pc, #36]	; (800871c <usbd_control_set_request+0x30>)
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	6810      	ldr	r0, [r2, #0]
 80086fa:	6851      	ldr	r1, [r2, #4]
 80086fc:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 80086fe:	4b07      	ldr	r3, [pc, #28]	; (800871c <usbd_control_set_request+0x30>)
 8008700:	2200      	movs	r2, #0
 8008702:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8008704:	4b05      	ldr	r3, [pc, #20]	; (800871c <usbd_control_set_request+0x30>)
 8008706:	2200      	movs	r2, #0
 8008708:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 800870a:	4b04      	ldr	r3, [pc, #16]	; (800871c <usbd_control_set_request+0x30>)
 800870c:	2200      	movs	r2, #0
 800870e:	819a      	strh	r2, [r3, #12]
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	24001aa4 	.word	0x24001aa4

08008720 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b088      	sub	sp, #32
 8008724:	af00      	add	r7, sp, #0
 8008726:	603b      	str	r3, [r7, #0]
 8008728:	4603      	mov	r3, r0
 800872a:	71fb      	strb	r3, [r7, #7]
 800872c:	460b      	mov	r3, r1
 800872e:	71bb      	strb	r3, [r7, #6]
 8008730:	4613      	mov	r3, r2
 8008732:	717b      	strb	r3, [r7, #5]
 8008734:	79bb      	ldrb	r3, [r7, #6]
 8008736:	73fb      	strb	r3, [r7, #15]
 8008738:	7bfb      	ldrb	r3, [r7, #15]
 800873a:	09db      	lsrs	r3, r3, #7
 800873c:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 800873e:	4a50      	ldr	r2, [pc, #320]	; (8008880 <usbd_control_xfer_cb+0x160>)
 8008740:	7812      	ldrb	r2, [r2, #0]
 8008742:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8008746:	b2d2      	uxtb	r2, r2
 8008748:	4293      	cmp	r3, r2
 800874a:	d021      	beq.n	8008790 <usbd_control_xfer_cb+0x70>
  {
    TU_ASSERT(0 == xferred_bytes);
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00a      	beq.n	8008768 <usbd_control_xfer_cb+0x48>
 8008752:	4b4c      	ldr	r3, [pc, #304]	; (8008884 <usbd_control_xfer_cb+0x164>)
 8008754:	613b      	str	r3, [r7, #16]
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0301 	and.w	r3, r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	d000      	beq.n	8008764 <usbd_control_xfer_cb+0x44>
 8008762:	be00      	bkpt	0x0000
 8008764:	2300      	movs	r3, #0
 8008766:	e087      	b.n	8008878 <usbd_control_xfer_cb+0x158>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8008768:	4b47      	ldr	r3, [pc, #284]	; (8008888 <usbd_control_xfer_cb+0x168>)
 800876a:	2b00      	cmp	r3, #0
 800876c:	d004      	beq.n	8008778 <usbd_control_xfer_cb+0x58>
 800876e:	79fb      	ldrb	r3, [r7, #7]
 8008770:	4943      	ldr	r1, [pc, #268]	; (8008880 <usbd_control_xfer_cb+0x160>)
 8008772:	4618      	mov	r0, r3
 8008774:	f3af 8000 	nop.w

    if (_ctrl_xfer.complete_cb)
 8008778:	4b41      	ldr	r3, [pc, #260]	; (8008880 <usbd_control_xfer_cb+0x160>)
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d005      	beq.n	800878c <usbd_control_xfer_cb+0x6c>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8008780:	4b3f      	ldr	r3, [pc, #252]	; (8008880 <usbd_control_xfer_cb+0x160>)
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	79f8      	ldrb	r0, [r7, #7]
 8008786:	4a3e      	ldr	r2, [pc, #248]	; (8008880 <usbd_control_xfer_cb+0x160>)
 8008788:	2103      	movs	r1, #3
 800878a:	4798      	blx	r3
    }

    return true;
 800878c:	2301      	movs	r3, #1
 800878e:	e073      	b.n	8008878 <usbd_control_xfer_cb+0x158>
  }

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8008790:	4b3b      	ldr	r3, [pc, #236]	; (8008880 <usbd_control_xfer_cb+0x160>)
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10c      	bne.n	80087b8 <usbd_control_xfer_cb+0x98>
  {
    TU_VERIFY(_ctrl_xfer.buffer);
 800879e:	4b38      	ldr	r3, [pc, #224]	; (8008880 <usbd_control_xfer_cb+0x160>)
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <usbd_control_xfer_cb+0x8a>
 80087a6:	2300      	movs	r3, #0
 80087a8:	e066      	b.n	8008878 <usbd_control_xfer_cb+0x158>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 80087aa:	4b35      	ldr	r3, [pc, #212]	; (8008880 <usbd_control_xfer_cb+0x160>)
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	4936      	ldr	r1, [pc, #216]	; (800888c <usbd_control_xfer_cb+0x16c>)
 80087b2:	4618      	mov	r0, r3
 80087b4:	f001 fdbe 	bl	800a334 <memcpy>
    TU_LOG_MEM(USBD_CONTROL_DEBUG, _usbd_ctrl_buf, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 80087b8:	4b31      	ldr	r3, [pc, #196]	; (8008880 <usbd_control_xfer_cb+0x160>)
 80087ba:	89da      	ldrh	r2, [r3, #14]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	b29b      	uxth	r3, r3
 80087c0:	4413      	add	r3, r2
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	4b2e      	ldr	r3, [pc, #184]	; (8008880 <usbd_control_xfer_cb+0x160>)
 80087c6:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 80087c8:	4b2d      	ldr	r3, [pc, #180]	; (8008880 <usbd_control_xfer_cb+0x160>)
 80087ca:	689a      	ldr	r2, [r3, #8]
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	4413      	add	r3, r2
 80087d0:	4a2b      	ldr	r2, [pc, #172]	; (8008880 <usbd_control_xfer_cb+0x160>)
 80087d2:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 80087d4:	4b2a      	ldr	r3, [pc, #168]	; (8008880 <usbd_control_xfer_cb+0x160>)
 80087d6:	88da      	ldrh	r2, [r3, #6]
 80087d8:	4b29      	ldr	r3, [pc, #164]	; (8008880 <usbd_control_xfer_cb+0x160>)
 80087da:	89db      	ldrh	r3, [r3, #14]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d002      	beq.n	80087e6 <usbd_control_xfer_cb+0xc6>
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	2b3f      	cmp	r3, #63	; 0x3f
 80087e4:	d831      	bhi.n	800884a <usbd_control_xfer_cb+0x12a>
  {
    // DATA stage is complete
    bool is_ok = true;
 80087e6:	2301      	movs	r3, #1
 80087e8:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if ( _ctrl_xfer.complete_cb )
 80087ea:	4b25      	ldr	r3, [pc, #148]	; (8008880 <usbd_control_xfer_cb+0x160>)
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d007      	beq.n	8008802 <usbd_control_xfer_cb+0xe2>
    {
      #if CFG_TUSB_DEBUG >= USBD_CONTROL_DEBUG
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 80087f2:	4b23      	ldr	r3, [pc, #140]	; (8008880 <usbd_control_xfer_cb+0x160>)
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	79f8      	ldrb	r0, [r7, #7]
 80087f8:	4a21      	ldr	r2, [pc, #132]	; (8008880 <usbd_control_xfer_cb+0x160>)
 80087fa:	2102      	movs	r1, #2
 80087fc:	4798      	blx	r3
 80087fe:	4603      	mov	r3, r0
 8008800:	77fb      	strb	r3, [r7, #31]
    }

    if ( is_ok )
 8008802:	7ffb      	ldrb	r3, [r7, #31]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d015      	beq.n	8008834 <usbd_control_xfer_cb+0x114>
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 8008808:	79fb      	ldrb	r3, [r7, #7]
 800880a:	491d      	ldr	r1, [pc, #116]	; (8008880 <usbd_control_xfer_cb+0x160>)
 800880c:	4618      	mov	r0, r3
 800880e:	f7ff fe53 	bl	80084b8 <_status_stage_xact>
 8008812:	4603      	mov	r3, r0
 8008814:	f083 0301 	eor.w	r3, r3, #1
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	d02a      	beq.n	8008874 <usbd_control_xfer_cb+0x154>
 800881e:	4b19      	ldr	r3, [pc, #100]	; (8008884 <usbd_control_xfer_cb+0x164>)
 8008820:	617b      	str	r3, [r7, #20]
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b00      	cmp	r3, #0
 800882c:	d000      	beq.n	8008830 <usbd_control_xfer_cb+0x110>
 800882e:	be00      	bkpt	0x0000
 8008830:	2300      	movs	r3, #0
 8008832:	e021      	b.n	8008878 <usbd_control_xfer_cb+0x158>
    }else
    {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	2100      	movs	r1, #0
 8008838:	4618      	mov	r0, r3
 800883a:	f000 ff2d 	bl	8009698 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 800883e:	79fb      	ldrb	r3, [r7, #7]
 8008840:	2180      	movs	r1, #128	; 0x80
 8008842:	4618      	mov	r0, r3
 8008844:	f000 ff28 	bl	8009698 <dcd_edpt_stall>
  {
 8008848:	e014      	b.n	8008874 <usbd_control_xfer_cb+0x154>
    }
  }
  else
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
 800884a:	79fb      	ldrb	r3, [r7, #7]
 800884c:	4618      	mov	r0, r3
 800884e:	f7ff fe6f 	bl	8008530 <_data_stage_xact>
 8008852:	4603      	mov	r3, r0
 8008854:	f083 0301 	eor.w	r3, r3, #1
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00b      	beq.n	8008876 <usbd_control_xfer_cb+0x156>
 800885e:	4b09      	ldr	r3, [pc, #36]	; (8008884 <usbd_control_xfer_cb+0x164>)
 8008860:	61bb      	str	r3, [r7, #24]
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	2b00      	cmp	r3, #0
 800886c:	d000      	beq.n	8008870 <usbd_control_xfer_cb+0x150>
 800886e:	be00      	bkpt	0x0000
 8008870:	2300      	movs	r3, #0
 8008872:	e001      	b.n	8008878 <usbd_control_xfer_cb+0x158>
  {
 8008874:	bf00      	nop
  }

  return true;
 8008876:	2301      	movs	r3, #1
}
 8008878:	4618      	mov	r0, r3
 800887a:	3720      	adds	r7, #32
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	24001aa4 	.word	0x24001aa4
 8008884:	e000edf0 	.word	0xe000edf0
 8008888:	00000000 	.word	0x00000000
 800888c:	24001ab8 	.word	0x24001ab8

08008890 <__NVIC_EnableIRQ>:
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	4603      	mov	r3, r0
 8008898:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800889a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	db0b      	blt.n	80088ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80088a2:	88fb      	ldrh	r3, [r7, #6]
 80088a4:	f003 021f 	and.w	r2, r3, #31
 80088a8:	4907      	ldr	r1, [pc, #28]	; (80088c8 <__NVIC_EnableIRQ+0x38>)
 80088aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088ae:	095b      	lsrs	r3, r3, #5
 80088b0:	2001      	movs	r0, #1
 80088b2:	fa00 f202 	lsl.w	r2, r0, r2
 80088b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80088ba:	bf00      	nop
 80088bc:	370c      	adds	r7, #12
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	e000e100 	.word	0xe000e100

080088cc <__NVIC_DisableIRQ>:
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	4603      	mov	r3, r0
 80088d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80088d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	db12      	blt.n	8008904 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80088de:	88fb      	ldrh	r3, [r7, #6]
 80088e0:	f003 021f 	and.w	r2, r3, #31
 80088e4:	490a      	ldr	r1, [pc, #40]	; (8008910 <__NVIC_DisableIRQ+0x44>)
 80088e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088ea:	095b      	lsrs	r3, r3, #5
 80088ec:	2001      	movs	r0, #1
 80088ee:	fa00 f202 	lsl.w	r2, r0, r2
 80088f2:	3320      	adds	r3, #32
 80088f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80088f8:	f3bf 8f4f 	dsb	sy
}
 80088fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80088fe:	f3bf 8f6f 	isb	sy
}
 8008902:	bf00      	nop
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	e000e100 	.word	0xe000e100

08008914 <calc_rx_ff_size>:
static uint16_t _allocated_fifo_words_tx;         // TX FIFO size in words (IN EPs)
static bool _out_ep_closed;                       // Flag to check if RX FIFO size needs an update (reduce its size)

// Calculate the RX FIFO size according to recommendations from reference manual
static inline uint16_t calc_rx_ff_size(uint16_t ep_size)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	4603      	mov	r3, r0
 800891c:	80fb      	strh	r3, [r7, #6]
  return 15 + 2*(ep_size/4) + 2*EP_MAX;
 800891e:	88fb      	ldrh	r3, [r7, #6]
 8008920:	089b      	lsrs	r3, r3, #2
 8008922:	b29b      	uxth	r3, r3
 8008924:	005b      	lsls	r3, r3, #1
 8008926:	b29b      	uxth	r3, r3
 8008928:	3321      	adds	r3, #33	; 0x21
 800892a:	b29b      	uxth	r3, r3
}
 800892c:	4618      	mov	r0, r3
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <update_grxfsiz>:

static void update_grxfsiz(uint8_t rhport)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	4603      	mov	r3, r0
 8008940:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8008942:	4b15      	ldr	r3, [pc, #84]	; (8008998 <update_grxfsiz+0x60>)
 8008944:	613b      	str	r3, [r7, #16]

  // Determine largest EP size for RX FIFO
  uint16_t max_epsize = 0;
 8008946:	2300      	movs	r3, #0
 8008948:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < EP_MAX; epnum++)
 800894a:	2300      	movs	r3, #0
 800894c:	757b      	strb	r3, [r7, #21]
 800894e:	e013      	b.n	8008978 <update_grxfsiz+0x40>
  {
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 8008950:	7d7b      	ldrb	r3, [r7, #21]
 8008952:	4a12      	ldr	r2, [pc, #72]	; (800899c <update_grxfsiz+0x64>)
 8008954:	015b      	lsls	r3, r3, #5
 8008956:	4413      	add	r3, r2
 8008958:	330a      	adds	r3, #10
 800895a:	881a      	ldrh	r2, [r3, #0]
 800895c:	8afb      	ldrh	r3, [r7, #22]
 800895e:	81fb      	strh	r3, [r7, #14]
 8008960:	4613      	mov	r3, r2
 8008962:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 8008964:	89fa      	ldrh	r2, [r7, #14]
 8008966:	89bb      	ldrh	r3, [r7, #12]
 8008968:	4293      	cmp	r3, r2
 800896a:	bf38      	it	cc
 800896c:	4613      	movcc	r3, r2
 800896e:	b29b      	uxth	r3, r3
 8008970:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < EP_MAX; epnum++)
 8008972:	7d7b      	ldrb	r3, [r7, #21]
 8008974:	3301      	adds	r3, #1
 8008976:	757b      	strb	r3, [r7, #21]
 8008978:	7d7b      	ldrb	r3, [r7, #21]
 800897a:	2b08      	cmp	r3, #8
 800897c:	d9e8      	bls.n	8008950 <update_grxfsiz+0x18>
  }

  // Update size of RX FIFO
  usb_otg->GRXFSIZ = calc_rx_ff_size(max_epsize);
 800897e:	8afb      	ldrh	r3, [r7, #22]
 8008980:	4618      	mov	r0, r3
 8008982:	f7ff ffc7 	bl	8008914 <calc_rx_ff_size>
 8008986:	4603      	mov	r3, r0
 8008988:	461a      	mov	r2, r3
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800898e:	bf00      	nop
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	40040000 	.word	0x40040000
 800899c:	24001b00 	.word	0x24001b00

080089a0 <bus_reset>:

// Setup the control endpoint 0.
static void bus_reset(uint8_t rhport)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b088      	sub	sp, #32
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	4603      	mov	r3, r0
 80089a8:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 80089aa:	4b33      	ldr	r3, [pc, #204]	; (8008a78 <bus_reset+0xd8>)
 80089ac:	61bb      	str	r3, [r7, #24]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 80089ae:	4b33      	ldr	r3, [pc, #204]	; (8008a7c <bus_reset+0xdc>)
 80089b0:	617b      	str	r3, [r7, #20]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 80089b2:	4b33      	ldr	r3, [pc, #204]	; (8008a80 <bus_reset+0xe0>)
 80089b4:	613b      	str	r3, [r7, #16]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 80089b6:	4b33      	ldr	r3, [pc, #204]	; (8008a84 <bus_reset+0xe4>)
 80089b8:	60fb      	str	r3, [r7, #12]

  tu_memclr(xfer_status, sizeof(xfer_status));
 80089ba:	f44f 7290 	mov.w	r2, #288	; 0x120
 80089be:	2100      	movs	r1, #0
 80089c0:	4831      	ldr	r0, [pc, #196]	; (8008a88 <bus_reset+0xe8>)
 80089c2:	f001 fcc5 	bl	800a350 <memset>
  _out_ep_closed = false;
 80089c6:	4b31      	ldr	r3, [pc, #196]	; (8008a8c <bus_reset+0xec>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	701a      	strb	r2, [r3, #0]

  // clear device address
  dev->DCFG &= ~USB_OTG_DCFG_DAD_Msk;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	601a      	str	r2, [r3, #0]

  // 1. NAK for all OUT endpoints
  for(uint8_t n = 0; n < EP_MAX; n++) {
 80089d8:	2300      	movs	r3, #0
 80089da:	77fb      	strb	r3, [r7, #31]
 80089dc:	e00e      	b.n	80089fc <bus_reset+0x5c>
    out_ep[n].DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80089de:	7ffb      	ldrb	r3, [r7, #31]
 80089e0:	015b      	lsls	r3, r3, #5
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	4413      	add	r3, r2
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	7ffb      	ldrb	r3, [r7, #31]
 80089ea:	015b      	lsls	r3, r3, #5
 80089ec:	6939      	ldr	r1, [r7, #16]
 80089ee:	440b      	add	r3, r1
 80089f0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80089f4:	601a      	str	r2, [r3, #0]
  for(uint8_t n = 0; n < EP_MAX; n++) {
 80089f6:	7ffb      	ldrb	r3, [r7, #31]
 80089f8:	3301      	adds	r3, #1
 80089fa:	77fb      	strb	r3, [r7, #31]
 80089fc:	7ffb      	ldrb	r3, [r7, #31]
 80089fe:	2b08      	cmp	r3, #8
 8008a00:	d9ed      	bls.n	80089de <bus_reset+0x3e>
  }

  // 2. Un-mask interrupt bits
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8008a08:	61da      	str	r2, [r3, #28]
  dev->DOEPMSK = USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM;
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2209      	movs	r2, #9
 8008a0e:	615a      	str	r2, [r3, #20]
  dev->DIEPMSK = USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	2209      	movs	r2, #9
 8008a14:	611a      	str	r2, [r3, #16]
  //
  //   For Isochronous, largest EP size can be 1023/1024 for FS/HS respectively. In addition if multiple ISO
  //   are enabled at least "2 x (Largest-EPsize/4) + 1" are recommended.  Maybe provide a macro for application to
  //   overwrite this.

  usb_otg->GRXFSIZ = calc_rx_ff_size(TUD_OPT_HIGH_SPEED ? 512 : 64);
 8008a16:	2040      	movs	r0, #64	; 0x40
 8008a18:	f7ff ff7c 	bl	8008914 <calc_rx_ff_size>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	461a      	mov	r2, r3
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	625a      	str	r2, [r3, #36]	; 0x24

  _allocated_fifo_words_tx = 16;
 8008a24:	4b1a      	ldr	r3, [pc, #104]	; (8008a90 <bus_reset+0xf0>)
 8008a26:	2210      	movs	r2, #16
 8008a28:	801a      	strh	r2, [r3, #0]

  // Control IN uses FIFO 0 with 64 bytes ( 16 32-bit word )
  usb_otg->DIEPTXF0_HNPTXFSIZ = (16 << USB_OTG_TX0FD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8008a2a:	4b19      	ldr	r3, [pc, #100]	; (8008a90 <bus_reset+0xf0>)
 8008a2c:	881b      	ldrh	r3, [r3, #0]
 8008a2e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8008a32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a36:	461a      	mov	r2, r3
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	629a      	str	r2, [r3, #40]	; 0x28

  // Fixed control EP0 size to 64 bytes
  in_ep[0].DIEPCTL &= ~(0x03 << USB_OTG_DIEPCTL_MPSIZ_Pos);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f023 0203 	bic.w	r2, r3, #3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	601a      	str	r2, [r3, #0]
  xfer_status[0][TUSB_DIR_OUT].max_size = xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8008a48:	4b0f      	ldr	r3, [pc, #60]	; (8008a88 <bus_reset+0xe8>)
 8008a4a:	2240      	movs	r2, #64	; 0x40
 8008a4c:	835a      	strh	r2, [r3, #26]
 8008a4e:	4b0e      	ldr	r3, [pc, #56]	; (8008a88 <bus_reset+0xe8>)
 8008a50:	8b5a      	ldrh	r2, [r3, #26]
 8008a52:	4b0d      	ldr	r3, [pc, #52]	; (8008a88 <bus_reset+0xe8>)
 8008a54:	815a      	strh	r2, [r3, #10]

  out_ep[0].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	611a      	str	r2, [r3, #16]

  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IEPINT;
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	619a      	str	r2, [r3, #24]
}
 8008a6e:	bf00      	nop
 8008a70:	3720      	adds	r7, #32
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	40040000 	.word	0x40040000
 8008a7c:	40040800 	.word	0x40040800
 8008a80:	40040b00 	.word	0x40040b00
 8008a84:	40040900 	.word	0x40040900
 8008a88:	24001b00 	.word	0x24001b00
 8008a8c:	24001c26 	.word	0x24001c26
 8008a90:	24001c24 	.word	0x24001c24

08008a94 <set_turnaround>:

// Set turn-around timeout according to link speed
extern uint32_t SystemCoreClock;
static void set_turnaround(USB_OTG_GlobalTypeDef * usb_otg, tusb_speed_t speed)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	70fb      	strb	r3, [r7, #3]
  usb_otg->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	60da      	str	r2, [r3, #12]

  if ( speed == TUSB_SPEED_HIGH )
 8008aac:	78fb      	ldrb	r3, [r7, #3]
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d106      	bne.n	8008ac0 <set_turnaround+0x2c>
  {
    // Use fixed 0x09 for Highspeed
    usb_otg->GUSBCFG |= (0x09 << USB_OTG_GUSBCFG_TRDT_Pos);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	f443 5210 	orr.w	r2, r3, #9216	; 0x2400
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	60da      	str	r2, [r3, #12]
      turnaround = 0xFU;

    // Fullspeed depends on MCU clocks, but we will use 0x06 for 32+ Mhz
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
  }
}
 8008abe:	e050      	b.n	8008b62 <set_turnaround+0xce>
    if ( SystemCoreClock >= 32000000U )
 8008ac0:	4b2b      	ldr	r3, [pc, #172]	; (8008b70 <set_turnaround+0xdc>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a2b      	ldr	r2, [pc, #172]	; (8008b74 <set_turnaround+0xe0>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d302      	bcc.n	8008ad0 <set_turnaround+0x3c>
      turnaround = 0x6U;
 8008aca:	2306      	movs	r3, #6
 8008acc:	60fb      	str	r3, [r7, #12]
 8008ace:	e041      	b.n	8008b54 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 27500000U )
 8008ad0:	4b27      	ldr	r3, [pc, #156]	; (8008b70 <set_turnaround+0xdc>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a28      	ldr	r2, [pc, #160]	; (8008b78 <set_turnaround+0xe4>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d902      	bls.n	8008ae0 <set_turnaround+0x4c>
      turnaround = 0x7U;
 8008ada:	2307      	movs	r3, #7
 8008adc:	60fb      	str	r3, [r7, #12]
 8008ade:	e039      	b.n	8008b54 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 24000000U )
 8008ae0:	4b23      	ldr	r3, [pc, #140]	; (8008b70 <set_turnaround+0xdc>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a25      	ldr	r2, [pc, #148]	; (8008b7c <set_turnaround+0xe8>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d302      	bcc.n	8008af0 <set_turnaround+0x5c>
      turnaround = 0x8U;
 8008aea:	2308      	movs	r3, #8
 8008aec:	60fb      	str	r3, [r7, #12]
 8008aee:	e031      	b.n	8008b54 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 21800000U )
 8008af0:	4b1f      	ldr	r3, [pc, #124]	; (8008b70 <set_turnaround+0xdc>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a22      	ldr	r2, [pc, #136]	; (8008b80 <set_turnaround+0xec>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d902      	bls.n	8008b00 <set_turnaround+0x6c>
      turnaround = 0x9U;
 8008afa:	2309      	movs	r3, #9
 8008afc:	60fb      	str	r3, [r7, #12]
 8008afe:	e029      	b.n	8008b54 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 20000000U )
 8008b00:	4b1b      	ldr	r3, [pc, #108]	; (8008b70 <set_turnaround+0xdc>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a1f      	ldr	r2, [pc, #124]	; (8008b84 <set_turnaround+0xf0>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d902      	bls.n	8008b10 <set_turnaround+0x7c>
      turnaround = 0xAU;
 8008b0a:	230a      	movs	r3, #10
 8008b0c:	60fb      	str	r3, [r7, #12]
 8008b0e:	e021      	b.n	8008b54 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 18500000U )
 8008b10:	4b17      	ldr	r3, [pc, #92]	; (8008b70 <set_turnaround+0xdc>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a1c      	ldr	r2, [pc, #112]	; (8008b88 <set_turnaround+0xf4>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d902      	bls.n	8008b20 <set_turnaround+0x8c>
      turnaround = 0xBU;
 8008b1a:	230b      	movs	r3, #11
 8008b1c:	60fb      	str	r3, [r7, #12]
 8008b1e:	e019      	b.n	8008b54 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 17200000U )
 8008b20:	4b13      	ldr	r3, [pc, #76]	; (8008b70 <set_turnaround+0xdc>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a19      	ldr	r2, [pc, #100]	; (8008b8c <set_turnaround+0xf8>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d302      	bcc.n	8008b30 <set_turnaround+0x9c>
      turnaround = 0xCU;
 8008b2a:	230c      	movs	r3, #12
 8008b2c:	60fb      	str	r3, [r7, #12]
 8008b2e:	e011      	b.n	8008b54 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 16000000U )
 8008b30:	4b0f      	ldr	r3, [pc, #60]	; (8008b70 <set_turnaround+0xdc>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a16      	ldr	r2, [pc, #88]	; (8008b90 <set_turnaround+0xfc>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d302      	bcc.n	8008b40 <set_turnaround+0xac>
      turnaround = 0xDU;
 8008b3a:	230d      	movs	r3, #13
 8008b3c:	60fb      	str	r3, [r7, #12]
 8008b3e:	e009      	b.n	8008b54 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 15000000U )
 8008b40:	4b0b      	ldr	r3, [pc, #44]	; (8008b70 <set_turnaround+0xdc>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a13      	ldr	r2, [pc, #76]	; (8008b94 <set_turnaround+0x100>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d302      	bcc.n	8008b50 <set_turnaround+0xbc>
      turnaround = 0xEU;
 8008b4a:	230e      	movs	r3, #14
 8008b4c:	60fb      	str	r3, [r7, #12]
 8008b4e:	e001      	b.n	8008b54 <set_turnaround+0xc0>
      turnaround = 0xFU;
 8008b50:	230f      	movs	r3, #15
 8008b52:	60fb      	str	r3, [r7, #12]
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	68da      	ldr	r2, [r3, #12]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	029b      	lsls	r3, r3, #10
 8008b5c:	431a      	orrs	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	60da      	str	r2, [r3, #12]
}
 8008b62:	bf00      	nop
 8008b64:	3714      	adds	r7, #20
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	2400000c 	.word	0x2400000c
 8008b74:	01e84800 	.word	0x01e84800
 8008b78:	01a39ddf 	.word	0x01a39ddf
 8008b7c:	016e3600 	.word	0x016e3600
 8008b80:	014ca43f 	.word	0x014ca43f
 8008b84:	01312cff 	.word	0x01312cff
 8008b88:	011a499f 	.word	0x011a499f
 8008b8c:	01067380 	.word	0x01067380
 8008b90:	00f42400 	.word	0x00f42400
 8008b94:	00e4e1c0 	.word	0x00e4e1c0

08008b98 <get_speed>:

static tusb_speed_t get_speed(uint8_t rhport)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8008ba2:	4b0a      	ldr	r3, [pc, #40]	; (8008bcc <get_speed+0x34>)
 8008ba4:	60fb      	str	r3, [r7, #12]
  uint32_t const enum_spd = (dev->DSTS & USB_OTG_DSTS_ENUMSPD_Msk) >> USB_OTG_DSTS_ENUMSPD_Pos;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	085b      	lsrs	r3, r3, #1
 8008bac:	f003 0303 	and.w	r3, r3, #3
 8008bb0:	60bb      	str	r3, [r7, #8]
  return (enum_spd == DCD_HIGH_SPEED) ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d101      	bne.n	8008bbc <get_speed+0x24>
 8008bb8:	2302      	movs	r3, #2
 8008bba:	e000      	b.n	8008bbe <get_speed+0x26>
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3714      	adds	r7, #20
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	40040800 	.word	0x40040800

08008bd0 <set_speed>:

static void set_speed(uint8_t rhport, tusb_speed_t speed)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	460a      	mov	r2, r1
 8008bda:	71fb      	strb	r3, [r7, #7]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	71bb      	strb	r3, [r7, #6]
  uint32_t bitvalue;

  if ( rhport == 1 )
 8008be0:	79fb      	ldrb	r3, [r7, #7]
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d107      	bne.n	8008bf6 <set_speed+0x26>
  {
    bitvalue = ((TUSB_SPEED_HIGH == speed) ? DCD_HIGH_SPEED : DCD_FULL_SPEED_USE_HS);
 8008be6:	79bb      	ldrb	r3, [r7, #6]
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	bf14      	ite	ne
 8008bec:	2301      	movne	r3, #1
 8008bee:	2300      	moveq	r3, #0
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	60fb      	str	r3, [r7, #12]
 8008bf4:	e001      	b.n	8008bfa <set_speed+0x2a>
  }
  else
  {
    bitvalue = DCD_FULL_SPEED;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	60fb      	str	r3, [r7, #12]
  }

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8008bfa:	4b0a      	ldr	r3, [pc, #40]	; (8008c24 <set_speed+0x54>)
 8008bfc:	60bb      	str	r3, [r7, #8]

  // Clear and set speed bits
  dev->DCFG &= ~(3 << USB_OTG_DCFG_DSPD_Pos);
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f023 0203 	bic.w	r2, r3, #3
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	601a      	str	r2, [r3, #0]
  dev->DCFG |= (bitvalue << USB_OTG_DCFG_DSPD_Pos);
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	431a      	orrs	r2, r3
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	601a      	str	r2, [r3, #0]
}
 8008c16:	bf00      	nop
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	40040800 	.word	0x40040800

08008c28 <edpt_schedule_packets>:
  return true;
}
#endif

static void edpt_schedule_packets(uint8_t rhport, uint8_t const epnum, uint8_t const dir, uint16_t const num_packets, uint16_t total_bytes)
{
 8008c28:	b490      	push	{r4, r7}
 8008c2a:	b08a      	sub	sp, #40	; 0x28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	4604      	mov	r4, r0
 8008c30:	4608      	mov	r0, r1
 8008c32:	4611      	mov	r1, r2
 8008c34:	461a      	mov	r2, r3
 8008c36:	4623      	mov	r3, r4
 8008c38:	71fb      	strb	r3, [r7, #7]
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	71bb      	strb	r3, [r7, #6]
 8008c3e:	460b      	mov	r3, r1
 8008c40:	717b      	strb	r3, [r7, #5]
 8008c42:	4613      	mov	r3, r2
 8008c44:	807b      	strh	r3, [r7, #2]
  (void) rhport;

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8008c46:	4b6c      	ldr	r3, [pc, #432]	; (8008df8 <edpt_schedule_packets+0x1d0>)
 8008c48:	627b      	str	r3, [r7, #36]	; 0x24
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8008c4a:	4b6c      	ldr	r3, [pc, #432]	; (8008dfc <edpt_schedule_packets+0x1d4>)
 8008c4c:	623b      	str	r3, [r7, #32]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8008c4e:	4b6c      	ldr	r3, [pc, #432]	; (8008e00 <edpt_schedule_packets+0x1d8>)
 8008c50:	61fb      	str	r3, [r7, #28]

  // EP0 is limited to one packet each xfer
  // We use multiple transaction of xfer->max_size length to get a whole transfer done
  if(epnum == 0) {
 8008c52:	79bb      	ldrb	r3, [r7, #6]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d121      	bne.n	8008c9c <edpt_schedule_packets+0x74>
    xfer_ctl_t * const xfer = XFER_CTL_BASE(epnum, dir);
 8008c58:	79ba      	ldrb	r2, [r7, #6]
 8008c5a:	797b      	ldrb	r3, [r7, #5]
 8008c5c:	0052      	lsls	r2, r2, #1
 8008c5e:	4413      	add	r3, r2
 8008c60:	011b      	lsls	r3, r3, #4
 8008c62:	4a68      	ldr	r2, [pc, #416]	; (8008e04 <edpt_schedule_packets+0x1dc>)
 8008c64:	4413      	add	r3, r2
 8008c66:	61bb      	str	r3, [r7, #24]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 8008c68:	797b      	ldrb	r3, [r7, #5]
 8008c6a:	4a67      	ldr	r2, [pc, #412]	; (8008e08 <edpt_schedule_packets+0x1e0>)
 8008c6c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	895b      	ldrh	r3, [r3, #10]
 8008c74:	81fa      	strh	r2, [r7, #14]
 8008c76:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008c78:	89fa      	ldrh	r2, [r7, #14]
 8008c7a:	89bb      	ldrh	r3, [r7, #12]
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	bf28      	it	cs
 8008c80:	4613      	movcs	r3, r2
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	863b      	strh	r3, [r7, #48]	; 0x30
    ep0_pending[dir] -= total_bytes;
 8008c86:	797b      	ldrb	r3, [r7, #5]
 8008c88:	4a5f      	ldr	r2, [pc, #380]	; (8008e08 <edpt_schedule_packets+0x1e0>)
 8008c8a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8008c8e:	797b      	ldrb	r3, [r7, #5]
 8008c90:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8008c92:	1a8a      	subs	r2, r1, r2
 8008c94:	b291      	uxth	r1, r2
 8008c96:	4a5c      	ldr	r2, [pc, #368]	; (8008e08 <edpt_schedule_packets+0x1e0>)
 8008c98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  }

  // IN and OUT endpoint xfers are interrupt-driven, we just schedule them here.
  if(dir == TUSB_DIR_IN) {
 8008c9c:	797b      	ldrb	r3, [r7, #5]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d14f      	bne.n	8008d42 <edpt_schedule_packets+0x11a>
    // A full IN transfer (multiple packets, possibly) triggers XFRC.
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8008ca2:	887b      	ldrh	r3, [r7, #2]
 8008ca4:	04db      	lsls	r3, r3, #19
 8008ca6:	4618      	mov	r0, r3
        ((total_bytes << USB_OTG_DIEPTSIZ_XFRSIZ_Pos) & USB_OTG_DIEPTSIZ_XFRSIZ_Msk);
 8008ca8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8008caa:	79bb      	ldrb	r3, [r7, #6]
 8008cac:	015b      	lsls	r3, r3, #5
 8008cae:	69f9      	ldr	r1, [r7, #28]
 8008cb0:	440b      	add	r3, r1
 8008cb2:	4302      	orrs	r2, r0
 8008cb4:	611a      	str	r2, [r3, #16]

    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8008cb6:	79bb      	ldrb	r3, [r7, #6]
 8008cb8:	015b      	lsls	r3, r3, #5
 8008cba:	69fa      	ldr	r2, [r7, #28]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	79bb      	ldrb	r3, [r7, #6]
 8008cc2:	015b      	lsls	r3, r3, #5
 8008cc4:	69f9      	ldr	r1, [r7, #28]
 8008cc6:	440b      	add	r3, r1
 8008cc8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8008ccc:	601a      	str	r2, [r3, #0]
    // For ISO endpoint set correct odd/even bit for next frame.
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8008cce:	79bb      	ldrb	r3, [r7, #6]
 8008cd0:	015b      	lsls	r3, r3, #5
 8008cd2:	69fa      	ldr	r2, [r7, #28]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008cdc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ce0:	d122      	bne.n	8008d28 <edpt_schedule_packets+0x100>
 8008ce2:	79ba      	ldrb	r2, [r7, #6]
 8008ce4:	797b      	ldrb	r3, [r7, #5]
 8008ce6:	4947      	ldr	r1, [pc, #284]	; (8008e04 <edpt_schedule_packets+0x1dc>)
 8008ce8:	0052      	lsls	r2, r2, #1
 8008cea:	4413      	add	r3, r2
 8008cec:	011b      	lsls	r3, r3, #4
 8008cee:	440b      	add	r3, r1
 8008cf0:	330c      	adds	r3, #12
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d117      	bne.n	8008d28 <edpt_schedule_packets+0x100>
    {
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d00:	613b      	str	r3, [r7, #16]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 8008d02:	79bb      	ldrb	r3, [r7, #6]
 8008d04:	015b      	lsls	r3, r3, #5
 8008d06:	69fa      	ldr	r2, [r7, #28]
 8008d08:	4413      	add	r3, r2
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d002      	beq.n	8008d18 <edpt_schedule_packets+0xf0>
 8008d12:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8008d16:	e001      	b.n	8008d1c <edpt_schedule_packets+0xf4>
 8008d18:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8008d1c:	79bb      	ldrb	r3, [r7, #6]
 8008d1e:	015b      	lsls	r3, r3, #5
 8008d20:	69f8      	ldr	r0, [r7, #28]
 8008d22:	4403      	add	r3, r0
 8008d24:	430a      	orrs	r2, r1
 8008d26:	601a      	str	r2, [r3, #0]
    }
    // Enable fifo empty interrupt only if there are something to put in the fifo.
    if(total_bytes != 0) {
 8008d28:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d05e      	beq.n	8008dec <edpt_schedule_packets+0x1c4>
      dev->DIEPEMPMSK |= (1 << epnum);
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d32:	79ba      	ldrb	r2, [r7, #6]
 8008d34:	2101      	movs	r1, #1
 8008d36:	fa01 f202 	lsl.w	r2, r1, r2
 8008d3a:	431a      	orrs	r2, r3
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3e:	635a      	str	r2, [r3, #52]	; 0x34
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
    }
  }
}
 8008d40:	e054      	b.n	8008dec <edpt_schedule_packets+0x1c4>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 8008d42:	79bb      	ldrb	r3, [r7, #6]
 8008d44:	015b      	lsls	r3, r3, #5
 8008d46:	6a3a      	ldr	r2, [r7, #32]
 8008d48:	4413      	add	r3, r2
 8008d4a:	691a      	ldr	r2, [r3, #16]
 8008d4c:	79bb      	ldrb	r3, [r7, #6]
 8008d4e:	015b      	lsls	r3, r3, #5
 8008d50:	6a39      	ldr	r1, [r7, #32]
 8008d52:	440b      	add	r3, r1
 8008d54:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8008d58:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8008d5a:	79bb      	ldrb	r3, [r7, #6]
 8008d5c:	015b      	lsls	r3, r3, #5
 8008d5e:	6a3a      	ldr	r2, [r7, #32]
 8008d60:	4413      	add	r3, r2
 8008d62:	6919      	ldr	r1, [r3, #16]
 8008d64:	887b      	ldrh	r3, [r7, #2]
 8008d66:	04db      	lsls	r3, r3, #19
 8008d68:	461a      	mov	r2, r3
        ((total_bytes << USB_OTG_DOEPTSIZ_XFRSIZ_Pos) & USB_OTG_DOEPTSIZ_XFRSIZ_Msk);
 8008d6a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8008d6c:	431a      	orrs	r2, r3
 8008d6e:	79bb      	ldrb	r3, [r7, #6]
 8008d70:	015b      	lsls	r3, r3, #5
 8008d72:	6a38      	ldr	r0, [r7, #32]
 8008d74:	4403      	add	r3, r0
 8008d76:	430a      	orrs	r2, r1
 8008d78:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 8008d7a:	79bb      	ldrb	r3, [r7, #6]
 8008d7c:	015b      	lsls	r3, r3, #5
 8008d7e:	6a3a      	ldr	r2, [r7, #32]
 8008d80:	4413      	add	r3, r2
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	79bb      	ldrb	r3, [r7, #6]
 8008d86:	015b      	lsls	r3, r3, #5
 8008d88:	6a39      	ldr	r1, [r7, #32]
 8008d8a:	440b      	add	r3, r1
 8008d8c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8008d90:	601a      	str	r2, [r3, #0]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8008d92:	79bb      	ldrb	r3, [r7, #6]
 8008d94:	015b      	lsls	r3, r3, #5
 8008d96:	6a3a      	ldr	r2, [r7, #32]
 8008d98:	4413      	add	r3, r2
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008da0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008da4:	d122      	bne.n	8008dec <edpt_schedule_packets+0x1c4>
 8008da6:	79ba      	ldrb	r2, [r7, #6]
 8008da8:	797b      	ldrb	r3, [r7, #5]
 8008daa:	4916      	ldr	r1, [pc, #88]	; (8008e04 <edpt_schedule_packets+0x1dc>)
 8008dac:	0052      	lsls	r2, r2, #1
 8008dae:	4413      	add	r3, r2
 8008db0:	011b      	lsls	r3, r3, #4
 8008db2:	440b      	add	r3, r1
 8008db4:	330c      	adds	r3, #12
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d117      	bne.n	8008dec <edpt_schedule_packets+0x1c4>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dc4:	617b      	str	r3, [r7, #20]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 8008dc6:	79bb      	ldrb	r3, [r7, #6]
 8008dc8:	015b      	lsls	r3, r3, #5
 8008dca:	6a3a      	ldr	r2, [r7, #32]
 8008dcc:	4413      	add	r3, r2
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d002      	beq.n	8008ddc <edpt_schedule_packets+0x1b4>
 8008dd6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8008dda:	e001      	b.n	8008de0 <edpt_schedule_packets+0x1b8>
 8008ddc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8008de0:	79bb      	ldrb	r3, [r7, #6]
 8008de2:	015b      	lsls	r3, r3, #5
 8008de4:	6a38      	ldr	r0, [r7, #32]
 8008de6:	4403      	add	r3, r0
 8008de8:	430a      	orrs	r2, r1
 8008dea:	601a      	str	r2, [r3, #0]
}
 8008dec:	bf00      	nop
 8008dee:	3728      	adds	r7, #40	; 0x28
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bc90      	pop	{r4, r7}
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	40040800 	.word	0x40040800
 8008dfc:	40040b00 	.word	0x40040b00
 8008e00:	40040900 	.word	0x40040900
 8008e04:	24001b00 	.word	0x24001b00
 8008e08:	24001c20 	.word	0x24001c20

08008e0c <dcd_init>:

/*------------------------------------------------------------------*/
/* Controller API
 *------------------------------------------------------------------*/
void dcd_init (uint8_t rhport)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	4603      	mov	r3, r0
 8008e14:	71fb      	strb	r3, [r7, #7]
  // Programming model begins in the last section of the chapter on the USB
  // peripheral in each Reference Manual.

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8008e16:	4b2d      	ldr	r3, [pc, #180]	; (8008ecc <dcd_init+0xc0>)
 8008e18:	60fb      	str	r3, [r7, #12]

  // No HNP/SRP (no OTG support), program timeout later.
  if ( rhport == 1 )
 8008e1a:	79fb      	ldrb	r3, [r7, #7]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d106      	bne.n	8008e2e <dcd_init+0x22>
    usb_otg->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    // Select default internal VBUS Indicator and Drive for ULPI
    usb_otg->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
#else
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	60da      	str	r2, [r3, #12]
 8008e2c:	e005      	b.n	8008e3a <dcd_init+0x2e>
    USB_HS_PHYCInit();
#endif
  } else
  {
    // Enable internal PHY
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	60da      	str	r2, [r3, #12]
  }

  // Reset core after selecting PHY
  // Wait AHB IDLE, reset then wait until it is cleared
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U) {}
 8008e3a:	bf00      	nop
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	dafb      	bge.n	8008e3c <dcd_init+0x30>
  usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	f043 0201 	orr.w	r2, r3, #1
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	611a      	str	r2, [r3, #16]
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST) {}
 8008e50:	bf00      	nop
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d0f9      	beq.n	8008e52 <dcd_init+0x46>

  // Restart PHY clock
  *((volatile uint32_t *)(RHPORT_REGS_BASE + USB_OTG_PCGCCTL_BASE)) = 0;
 8008e5e:	4b1c      	ldr	r3, [pc, #112]	; (8008ed0 <dcd_init+0xc4>)
 8008e60:	2200      	movs	r2, #0
 8008e62:	601a      	str	r2, [r3, #0]

  // Clear all interrupts
  usb_otg->GINTSTS |= usb_otg->GINTSTS;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	695a      	ldr	r2, [r3, #20]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	695b      	ldr	r3, [r3, #20]
 8008e6c:	431a      	orrs	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	615a      	str	r2, [r3, #20]

  // Required as part of core initialization.
  // TODO: How should mode mismatch be handled? It will cause
  // the core to stop working/require reset.
  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OTGINT | USB_OTG_GINTMSK_MMISM;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	f043 0206 	orr.w	r2, r3, #6
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	619a      	str	r2, [r3, #24]

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8008e7e:	4b15      	ldr	r3, [pc, #84]	; (8008ed4 <dcd_init+0xc8>)
 8008e80:	60bb      	str	r3, [r7, #8]

  // If USB host misbehaves during status portion of control xfer
  // (non zero-length packet), send STALL back and discard.
  dev->DCFG |=  USB_OTG_DCFG_NZLSOHSK;
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f043 0204 	orr.w	r2, r3, #4
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	601a      	str	r2, [r3, #0]

  set_speed(rhport, TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL);
 8008e8e:	79fb      	ldrb	r3, [r7, #7]
 8008e90:	2100      	movs	r1, #0
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7ff fe9c 	bl	8008bd0 <set_speed>

  // Enable internal USB transceiver, unless using HS core (port 1) with external PHY.
  if (!(rhport == 1 && (CFG_TUSB_RHPORT1_MODE & OPT_MODE_HIGH_SPEED))) usb_otg->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	639a      	str	r2, [r3, #56]	; 0x38

  usb_otg->GINTMSK |= USB_OTG_GINTMSK_USBRST   | USB_OTG_GINTMSK_ENUMDNEM |
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	699a      	ldr	r2, [r3, #24]
 8008ea8:	4b0b      	ldr	r3, [pc, #44]	; (8008ed8 <dcd_init+0xcc>)
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	6193      	str	r3, [r2, #24]
      USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_WUIM     |
      USB_OTG_GINTMSK_RXFLVLM  | (USE_SOF ? USB_OTG_GINTMSK_SOFM : 0);

  // Enable global interrupt
  usb_otg->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	f043 0201 	orr.w	r2, r3, #1
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 8008ebc:	79fb      	ldrb	r3, [r7, #7]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 f852 	bl	8008f68 <dcd_connect>
}
 8008ec4:	bf00      	nop
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	40040000 	.word	0x40040000
 8008ed0:	40040e00 	.word	0x40040e00
 8008ed4:	40040800 	.word	0x40040800
 8008ed8:	80003810 	.word	0x80003810

08008edc <dcd_int_enable>:

void dcd_int_enable (uint8_t rhport)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  NVIC_EnableIRQ(RHPORT_IRQn);
 8008ee6:	204d      	movs	r0, #77	; 0x4d
 8008ee8:	f7ff fcd2 	bl	8008890 <__NVIC_EnableIRQ>
}
 8008eec:	bf00      	nop
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <dcd_int_disable>:

void dcd_int_disable (uint8_t rhport)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	4603      	mov	r3, r0
 8008efc:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  NVIC_DisableIRQ(RHPORT_IRQn);
 8008efe:	204d      	movs	r0, #77	; 0x4d
 8008f00:	f7ff fce4 	bl	80088cc <__NVIC_DisableIRQ>
}
 8008f04:	bf00      	nop
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <dcd_set_address>:

void dcd_set_address (uint8_t rhport, uint8_t dev_addr)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	4603      	mov	r3, r0
 8008f14:	460a      	mov	r2, r1
 8008f16:	71fb      	strb	r3, [r7, #7]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	71bb      	strb	r3, [r7, #6]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8008f1c:	4b11      	ldr	r3, [pc, #68]	; (8008f64 <dcd_set_address+0x58>)
 8008f1e:	60fb      	str	r3, [r7, #12]
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008f28:	79ba      	ldrb	r2, [r7, #6]
 8008f2a:	0112      	lsls	r2, r2, #4
 8008f2c:	431a      	orrs	r2, r3
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	601a      	str	r2, [r3, #0]
 8008f32:	2300      	movs	r3, #0
 8008f34:	72fb      	strb	r3, [r7, #11]
 8008f36:	2301      	movs	r3, #1
 8008f38:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8008f3a:	7abb      	ldrb	r3, [r7, #10]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <dcd_set_address+0x3a>
 8008f40:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8008f44:	e000      	b.n	8008f48 <dcd_set_address+0x3c>
 8008f46:	2300      	movs	r3, #0
 8008f48:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	b25b      	sxtb	r3, r3
 8008f50:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8008f52:	79f8      	ldrb	r0, [r7, #7]
 8008f54:	2300      	movs	r3, #0
 8008f56:	2200      	movs	r2, #0
 8008f58:	f000 f97c 	bl	8009254 <dcd_edpt_xfer>
}
 8008f5c:	bf00      	nop
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	40040800 	.word	0x40040800

08008f68 <dcd_connect>:

  dev->DCTL &= ~USB_OTG_DCTL_RWUSIG;
}

void dcd_connect(uint8_t rhport)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	4603      	mov	r3, r0
 8008f70:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8008f72:	4b07      	ldr	r3, [pc, #28]	; (8008f90 <dcd_connect+0x28>)
 8008f74:	60fb      	str	r3, [r7, #12]
  dev->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	f023 0202 	bic.w	r2, r3, #2
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	605a      	str	r2, [r3, #4]
}
 8008f82:	bf00      	nop
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	40040800 	.word	0x40040800

08008f94 <dcd_edpt_open>:
/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b090      	sub	sp, #64	; 0x40
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	6039      	str	r1, [r7, #0]
 8008f9e:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8008fa0:	4b82      	ldr	r3, [pc, #520]	; (80091ac <dcd_edpt_open+0x218>)
 8008fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8008fa4:	4b82      	ldr	r3, [pc, #520]	; (80091b0 <dcd_edpt_open+0x21c>)
 8008fa6:	63bb      	str	r3, [r7, #56]	; 0x38
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8008fa8:	4b82      	ldr	r3, [pc, #520]	; (80091b4 <dcd_edpt_open+0x220>)
 8008faa:	637b      	str	r3, [r7, #52]	; 0x34
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8008fac:	4b82      	ldr	r3, [pc, #520]	; (80091b8 <dcd_edpt_open+0x224>)
 8008fae:	633b      	str	r3, [r7, #48]	; 0x30

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	789b      	ldrb	r3, [r3, #2]
 8008fb4:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008fb6:	7cbb      	ldrb	r3, [r7, #18]
 8008fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t const dir   = tu_edpt_dir(desc_edpt->bEndpointAddress);
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	789b      	ldrb	r3, [r3, #2]
 8008fc6:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008fc8:	7cfb      	ldrb	r3, [r7, #19]
 8008fca:	09db      	lsrs	r3, r3, #7
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

  TU_ASSERT(epnum < EP_MAX);
 8008fd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008fd6:	2b08      	cmp	r3, #8
 8008fd8:	d90a      	bls.n	8008ff0 <dcd_edpt_open+0x5c>
 8008fda:	4b78      	ldr	r3, [pc, #480]	; (80091bc <dcd_edpt_open+0x228>)
 8008fdc:	617b      	str	r3, [r7, #20]
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0301 	and.w	r3, r3, #1
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d000      	beq.n	8008fec <dcd_edpt_open+0x58>
 8008fea:	be00      	bkpt	0x0000
 8008fec:	2300      	movs	r3, #0
 8008fee:	e0d8      	b.n	80091a2 <dcd_edpt_open+0x20e>

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 8008ff0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008ff4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008ff8:	0052      	lsls	r2, r2, #1
 8008ffa:	4413      	add	r3, r2
 8008ffc:	011b      	lsls	r3, r3, #4
 8008ffe:	4a70      	ldr	r2, [pc, #448]	; (80091c0 <dcd_edpt_open+0x22c>)
 8009000:	4413      	add	r3, r2
 8009002:	62bb      	str	r3, [r7, #40]	; 0x28
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	889b      	ldrh	r3, [r3, #4]
 800900c:	b29b      	uxth	r3, r3
 800900e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009012:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8009014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009016:	815a      	strh	r2, [r3, #10]
  xfer->interval = desc_edpt->bInterval;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	799a      	ldrb	r2, [r3, #6]
 800901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901e:	731a      	strb	r2, [r3, #12]

  uint16_t const fifo_size = (xfer->max_size + 3) / 4; // Round up to next full word
 8009020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009022:	895b      	ldrh	r3, [r3, #10]
 8009024:	3303      	adds	r3, #3
 8009026:	2b00      	cmp	r3, #0
 8009028:	da00      	bge.n	800902c <dcd_edpt_open+0x98>
 800902a:	3303      	adds	r3, #3
 800902c:	109b      	asrs	r3, r3, #2
 800902e:	84fb      	strh	r3, [r7, #38]	; 0x26

  if(dir == TUSB_DIR_OUT)
 8009030:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009034:	2b00      	cmp	r3, #0
 8009036:	d152      	bne.n	80090de <dcd_edpt_open+0x14a>
  {
    // Calculate required size of RX FIFO
    uint16_t const sz = calc_rx_ff_size(4*fifo_size);
 8009038:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	b29b      	uxth	r3, r3
 800903e:	4618      	mov	r0, r3
 8009040:	f7ff fc68 	bl	8008914 <calc_rx_ff_size>
 8009044:	4603      	mov	r3, r0
 8009046:	83fb      	strh	r3, [r7, #30]

    // If size_rx needs to be extended check if possible and if so enlarge it
    if (usb_otg->GRXFSIZ < sz)
 8009048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800904a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800904c:	8bfb      	ldrh	r3, [r7, #30]
 800904e:	429a      	cmp	r2, r3
 8009050:	d214      	bcs.n	800907c <dcd_edpt_open+0xe8>
    {
      TU_ASSERT(sz + _allocated_fifo_words_tx <= EP_FIFO_SIZE/4);
 8009052:	8bfb      	ldrh	r3, [r7, #30]
 8009054:	4a5b      	ldr	r2, [pc, #364]	; (80091c4 <dcd_edpt_open+0x230>)
 8009056:	8812      	ldrh	r2, [r2, #0]
 8009058:	4413      	add	r3, r2
 800905a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800905e:	dd0a      	ble.n	8009076 <dcd_edpt_open+0xe2>
 8009060:	4b56      	ldr	r3, [pc, #344]	; (80091bc <dcd_edpt_open+0x228>)
 8009062:	61bb      	str	r3, [r7, #24]
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 0301 	and.w	r3, r3, #1
 800906c:	2b00      	cmp	r3, #0
 800906e:	d000      	beq.n	8009072 <dcd_edpt_open+0xde>
 8009070:	be00      	bkpt	0x0000
 8009072:	2300      	movs	r3, #0
 8009074:	e095      	b.n	80091a2 <dcd_edpt_open+0x20e>

      // Enlarge RX FIFO
      usb_otg->GRXFSIZ = sz;
 8009076:	8bfa      	ldrh	r2, [r7, #30]
 8009078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 800907c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009080:	015b      	lsls	r3, r3, #5
 8009082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009084:	4413      	add	r3, r2
 8009086:	681a      	ldr	r2, [r3, #0]
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	78db      	ldrb	r3, [r3, #3]
 800908c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009090:	b2db      	uxtb	r3, r3
 8009092:	049b      	lsls	r3, r3, #18
 8009094:	4619      	mov	r1, r3
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	78db      	ldrb	r3, [r3, #3]
 800909a:	f003 0303 	and.w	r3, r3, #3
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d002      	beq.n	80090aa <dcd_edpt_open+0x116>
 80090a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80090a8:	e000      	b.n	80090ac <dcd_edpt_open+0x118>
 80090aa:	2300      	movs	r3, #0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 80090ac:	430b      	orrs	r3, r1
        (xfer->max_size << USB_OTG_DOEPCTL_MPSIZ_Pos);
 80090ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090b0:	8949      	ldrh	r1, [r1, #10]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 80090b2:	430b      	orrs	r3, r1
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 80090b4:	431a      	orrs	r2, r3
 80090b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80090ba:	015b      	lsls	r3, r3, #5
 80090bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80090be:	440b      	add	r3, r1
 80090c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090c4:	601a      	str	r2, [r3, #0]

    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_OEPM_Pos + epnum));
 80090c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c8:	69db      	ldr	r3, [r3, #28]
 80090ca:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80090ce:	3210      	adds	r2, #16
 80090d0:	2101      	movs	r1, #1
 80090d2:	fa01 f202 	lsl.w	r2, r1, r2
 80090d6:	431a      	orrs	r2, r3
 80090d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090da:	61da      	str	r2, [r3, #28]
 80090dc:	e060      	b.n	80091a0 <dcd_edpt_open+0x20c>
    //
    // In FIFO is allocated by following rules:
    // - IN EP 1 gets FIFO 1, IN EP "n" gets FIFO "n".

    // Check if free space is available
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + usb_otg->GRXFSIZ <= EP_FIFO_SIZE/4);
 80090de:	4b39      	ldr	r3, [pc, #228]	; (80091c4 <dcd_edpt_open+0x230>)
 80090e0:	881b      	ldrh	r3, [r3, #0]
 80090e2:	461a      	mov	r2, r3
 80090e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090e6:	4413      	add	r3, r2
 80090e8:	461a      	mov	r2, r3
 80090ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ee:	4413      	add	r3, r2
 80090f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090f4:	d90a      	bls.n	800910c <dcd_edpt_open+0x178>
 80090f6:	4b31      	ldr	r3, [pc, #196]	; (80091bc <dcd_edpt_open+0x228>)
 80090f8:	623b      	str	r3, [r7, #32]
 80090fa:	6a3b      	ldr	r3, [r7, #32]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b00      	cmp	r3, #0
 8009104:	d000      	beq.n	8009108 <dcd_edpt_open+0x174>
 8009106:	be00      	bkpt	0x0000
 8009108:	2300      	movs	r3, #0
 800910a:	e04a      	b.n	80091a2 <dcd_edpt_open+0x20e>

    _allocated_fifo_words_tx += fifo_size;
 800910c:	4b2d      	ldr	r3, [pc, #180]	; (80091c4 <dcd_edpt_open+0x230>)
 800910e:	881a      	ldrh	r2, [r3, #0]
 8009110:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009112:	4413      	add	r3, r2
 8009114:	b29a      	uxth	r2, r3
 8009116:	4b2b      	ldr	r3, [pc, #172]	; (80091c4 <dcd_edpt_open+0x230>)
 8009118:	801a      	strh	r2, [r3, #0]

    TU_LOG(2, "    Allocated %u bytes at offset %u", fifo_size*4, EP_FIFO_SIZE-_allocated_fifo_words_tx*4);

    // DIEPTXF starts at FIFO #1.
    // Both TXFD and TXSA are in unit of 32-bit words.
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 800911a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800911c:	041a      	lsls	r2, r3, #16
 800911e:	4b29      	ldr	r3, [pc, #164]	; (80091c4 <dcd_edpt_open+0x230>)
 8009120:	881b      	ldrh	r3, [r3, #0]
 8009122:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8009126:	431a      	orrs	r2, r3
 8009128:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800912c:	3b01      	subs	r3, #1
 800912e:	4611      	mov	r1, r2
 8009130:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009132:	3340      	adds	r3, #64	; 0x40
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4413      	add	r3, r2
 8009138:	6059      	str	r1, [r3, #4]

    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 800913a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800913e:	015b      	lsls	r3, r3, #5
 8009140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009142:	4413      	add	r3, r2
 8009144:	6819      	ldr	r1, [r3, #0]
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 8009146:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800914a:	059b      	lsls	r3, r3, #22
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 800914c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	78db      	ldrb	r3, [r3, #3]
 8009154:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009158:	b2db      	uxtb	r3, r3
 800915a:	049b      	lsls	r3, r3, #18
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 800915c:	4313      	orrs	r3, r2
 800915e:	461a      	mov	r2, r3
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	78db      	ldrb	r3, [r3, #3]
 8009164:	f003 0303 	and.w	r3, r3, #3
 8009168:	b2db      	uxtb	r3, r3
 800916a:	2b01      	cmp	r3, #1
 800916c:	d002      	beq.n	8009174 <dcd_edpt_open+0x1e0>
 800916e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009172:	e000      	b.n	8009176 <dcd_edpt_open+0x1e2>
 8009174:	2300      	movs	r3, #0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 8009176:	4313      	orrs	r3, r2
        (xfer->max_size << USB_OTG_DIEPCTL_MPSIZ_Pos);
 8009178:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800917a:	8952      	ldrh	r2, [r2, #10]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 800917c:	431a      	orrs	r2, r3
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 800917e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009182:	015b      	lsls	r3, r3, #5
 8009184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009186:	4403      	add	r3, r0
 8009188:	430a      	orrs	r2, r1
 800918a:	601a      	str	r2, [r3, #0]

    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_IEPM_Pos + epnum));
 800918c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918e:	69db      	ldr	r3, [r3, #28]
 8009190:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009194:	2101      	movs	r1, #1
 8009196:	fa01 f202 	lsl.w	r2, r1, r2
 800919a:	431a      	orrs	r2, r3
 800919c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919e:	61da      	str	r2, [r3, #28]
  }

  return true;
 80091a0:	2301      	movs	r3, #1
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3740      	adds	r7, #64	; 0x40
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	40040000 	.word	0x40040000
 80091b0:	40040800 	.word	0x40040800
 80091b4:	40040b00 	.word	0x40040b00
 80091b8:	40040900 	.word	0x40040900
 80091bc:	e000edf0 	.word	0xe000edf0
 80091c0:	24001b00 	.word	0x24001b00
 80091c4:	24001c24 	.word	0x24001c24

080091c8 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all (uint8_t rhport)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b087      	sub	sp, #28
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	4603      	mov	r3, r0
 80091d0:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

//  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 80091d2:	4b1b      	ldr	r3, [pc, #108]	; (8009240 <dcd_edpt_close_all+0x78>)
 80091d4:	613b      	str	r3, [r7, #16]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 80091d6:	4b1b      	ldr	r3, [pc, #108]	; (8009244 <dcd_edpt_close_all+0x7c>)
 80091d8:	60fb      	str	r3, [r7, #12]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 80091da:	4b1b      	ldr	r3, [pc, #108]	; (8009248 <dcd_edpt_close_all+0x80>)
 80091dc:	60bb      	str	r3, [r7, #8]

  // Disable non-control interrupt
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80091e4:	61da      	str	r2, [r3, #28]

  for(uint8_t n = 1; n < EP_MAX; n++)
 80091e6:	2301      	movs	r3, #1
 80091e8:	75fb      	strb	r3, [r7, #23]
 80091ea:	e01c      	b.n	8009226 <dcd_edpt_close_all+0x5e>
  {
    // disable OUT endpoint
    out_ep[n].DOEPCTL = 0;
 80091ec:	7dfb      	ldrb	r3, [r7, #23]
 80091ee:	015b      	lsls	r3, r3, #5
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	4413      	add	r3, r2
 80091f4:	2200      	movs	r2, #0
 80091f6:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
 80091fa:	4a14      	ldr	r2, [pc, #80]	; (800924c <dcd_edpt_close_all+0x84>)
 80091fc:	015b      	lsls	r3, r3, #5
 80091fe:	4413      	add	r3, r2
 8009200:	330a      	adds	r3, #10
 8009202:	2200      	movs	r2, #0
 8009204:	801a      	strh	r2, [r3, #0]

    // disable IN endpoint
    in_ep[n].DIEPCTL = 0;
 8009206:	7dfb      	ldrb	r3, [r7, #23]
 8009208:	015b      	lsls	r3, r3, #5
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	4413      	add	r3, r2
 800920e:	2200      	movs	r2, #0
 8009210:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8009212:	7dfb      	ldrb	r3, [r7, #23]
 8009214:	4a0d      	ldr	r2, [pc, #52]	; (800924c <dcd_edpt_close_all+0x84>)
 8009216:	015b      	lsls	r3, r3, #5
 8009218:	4413      	add	r3, r2
 800921a:	331a      	adds	r3, #26
 800921c:	2200      	movs	r2, #0
 800921e:	801a      	strh	r2, [r3, #0]
  for(uint8_t n = 1; n < EP_MAX; n++)
 8009220:	7dfb      	ldrb	r3, [r7, #23]
 8009222:	3301      	adds	r3, #1
 8009224:	75fb      	strb	r3, [r7, #23]
 8009226:	7dfb      	ldrb	r3, [r7, #23]
 8009228:	2b08      	cmp	r3, #8
 800922a:	d9df      	bls.n	80091ec <dcd_edpt_close_all+0x24>
  }

  // reset allocated fifo IN
  _allocated_fifo_words_tx = 16;
 800922c:	4b08      	ldr	r3, [pc, #32]	; (8009250 <dcd_edpt_close_all+0x88>)
 800922e:	2210      	movs	r2, #16
 8009230:	801a      	strh	r2, [r3, #0]
}
 8009232:	bf00      	nop
 8009234:	371c      	adds	r7, #28
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	40040800 	.word	0x40040800
 8009244:	40040b00 	.word	0x40040b00
 8009248:	40040900 	.word	0x40040900
 800924c:	24001b00 	.word	0x24001b00
 8009250:	24001c24 	.word	0x24001c24

08009254 <dcd_edpt_xfer>:

bool dcd_edpt_xfer (uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8009254:	b590      	push	{r4, r7, lr}
 8009256:	b089      	sub	sp, #36	; 0x24
 8009258:	af02      	add	r7, sp, #8
 800925a:	603a      	str	r2, [r7, #0]
 800925c:	461a      	mov	r2, r3
 800925e:	4603      	mov	r3, r0
 8009260:	71fb      	strb	r3, [r7, #7]
 8009262:	460b      	mov	r3, r1
 8009264:	71bb      	strb	r3, [r7, #6]
 8009266:	4613      	mov	r3, r2
 8009268:	80bb      	strh	r3, [r7, #4]
 800926a:	79bb      	ldrb	r3, [r7, #6]
 800926c:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800926e:	7b3b      	ldrb	r3, [r7, #12]
 8009270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009274:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009276:	757b      	strb	r3, [r7, #21]
 8009278:	79bb      	ldrb	r3, [r7, #6]
 800927a:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800927c:	7b7b      	ldrb	r3, [r7, #13]
 800927e:	09db      	lsrs	r3, r3, #7
 8009280:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8009282:	753b      	strb	r3, [r7, #20]

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 8009284:	7d7a      	ldrb	r2, [r7, #21]
 8009286:	7d3b      	ldrb	r3, [r7, #20]
 8009288:	0052      	lsls	r2, r2, #1
 800928a:	4413      	add	r3, r2
 800928c:	011b      	lsls	r3, r3, #4
 800928e:	4a23      	ldr	r2, [pc, #140]	; (800931c <dcd_edpt_xfer+0xc8>)
 8009290:	4413      	add	r3, r2
 8009292:	613b      	str	r3, [r7, #16]
  xfer->buffer      = buffer;
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	683a      	ldr	r2, [r7, #0]
 8009298:	601a      	str	r2, [r3, #0]
  xfer->ff          = NULL;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	2200      	movs	r2, #0
 800929e:	605a      	str	r2, [r3, #4]
  xfer->total_len   = total_bytes;
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	88ba      	ldrh	r2, [r7, #4]
 80092a4:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if(epnum == 0) {
 80092a6:	7d7b      	ldrb	r3, [r7, #21]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d111      	bne.n	80092d0 <dcd_edpt_xfer+0x7c>
    ep0_pending[dir] = total_bytes;
 80092ac:	7d3b      	ldrb	r3, [r7, #20]
 80092ae:	491c      	ldr	r1, [pc, #112]	; (8009320 <dcd_edpt_xfer+0xcc>)
 80092b0:	88ba      	ldrh	r2, [r7, #4]
 80092b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
 80092b6:	7d3b      	ldrb	r3, [r7, #20]
 80092b8:	4a19      	ldr	r2, [pc, #100]	; (8009320 <dcd_edpt_xfer+0xcc>)
 80092ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092be:	7d3a      	ldrb	r2, [r7, #20]
 80092c0:	7d79      	ldrb	r1, [r7, #21]
 80092c2:	79f8      	ldrb	r0, [r7, #7]
 80092c4:	9300      	str	r3, [sp, #0]
 80092c6:	2301      	movs	r3, #1
 80092c8:	f7ff fcae 	bl	8008c28 <edpt_schedule_packets>
    return true;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e021      	b.n	8009314 <dcd_edpt_xfer+0xc0>
  }

  uint16_t num_packets = (total_bytes / xfer->max_size);
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	895b      	ldrh	r3, [r3, #10]
 80092d4:	88ba      	ldrh	r2, [r7, #4]
 80092d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80092da:	82fb      	strh	r3, [r7, #22]
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	895a      	ldrh	r2, [r3, #10]
 80092e0:	88bb      	ldrh	r3, [r7, #4]
 80092e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80092e6:	fb01 f202 	mul.w	r2, r1, r2
 80092ea:	1a9b      	subs	r3, r3, r2
 80092ec:	81fb      	strh	r3, [r7, #14]

  // Zero-size packet is special case.
  if(short_packet_size > 0 || (total_bytes == 0)) {
 80092ee:	89fb      	ldrh	r3, [r7, #14]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d102      	bne.n	80092fa <dcd_edpt_xfer+0xa6>
 80092f4:	88bb      	ldrh	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d102      	bne.n	8009300 <dcd_edpt_xfer+0xac>
    num_packets++;
 80092fa:	8afb      	ldrh	r3, [r7, #22]
 80092fc:	3301      	adds	r3, #1
 80092fe:	82fb      	strh	r3, [r7, #22]
  }

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 8009300:	8afc      	ldrh	r4, [r7, #22]
 8009302:	7d3a      	ldrb	r2, [r7, #20]
 8009304:	7d79      	ldrb	r1, [r7, #21]
 8009306:	79f8      	ldrb	r0, [r7, #7]
 8009308:	88bb      	ldrh	r3, [r7, #4]
 800930a:	9300      	str	r3, [sp, #0]
 800930c:	4623      	mov	r3, r4
 800930e:	f7ff fc8b 	bl	8008c28 <edpt_schedule_packets>

  return true;
 8009312:	2301      	movs	r3, #1
}
 8009314:	4618      	mov	r0, r3
 8009316:	371c      	adds	r7, #28
 8009318:	46bd      	mov	sp, r7
 800931a:	bd90      	pop	{r4, r7, pc}
 800931c:	24001b00 	.word	0x24001b00
 8009320:	24001c20 	.word	0x24001c20

08009324 <dcd_edpt_xfer_fifo>:
// The number of bytes has to be given explicitly to allow more flexible control of how many
// bytes should be written and second to keep the return value free to give back a boolean
// success message. If total_bytes is too big, the FIFO will copy only what is available
// into the USB buffer!
bool dcd_edpt_xfer_fifo (uint8_t rhport, uint8_t ep_addr, tu_fifo_t * ff, uint16_t total_bytes)
{
 8009324:	b590      	push	{r4, r7, lr}
 8009326:	b08b      	sub	sp, #44	; 0x2c
 8009328:	af02      	add	r7, sp, #8
 800932a:	603a      	str	r2, [r7, #0]
 800932c:	461a      	mov	r2, r3
 800932e:	4603      	mov	r3, r0
 8009330:	71fb      	strb	r3, [r7, #7]
 8009332:	460b      	mov	r3, r1
 8009334:	71bb      	strb	r3, [r7, #6]
 8009336:	4613      	mov	r3, r2
 8009338:	80bb      	strh	r3, [r7, #4]
  // USB buffers always work in bytes so to avoid unnecessary divisions we demand item_size = 1
  TU_ASSERT(ff->item_size == 1);
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	88db      	ldrh	r3, [r3, #6]
 800933e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009342:	b29b      	uxth	r3, r3
 8009344:	2b01      	cmp	r3, #1
 8009346:	d00a      	beq.n	800935e <dcd_edpt_xfer_fifo+0x3a>
 8009348:	4b27      	ldr	r3, [pc, #156]	; (80093e8 <dcd_edpt_xfer_fifo+0xc4>)
 800934a:	613b      	str	r3, [r7, #16]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 0301 	and.w	r3, r3, #1
 8009354:	2b00      	cmp	r3, #0
 8009356:	d000      	beq.n	800935a <dcd_edpt_xfer_fifo+0x36>
 8009358:	be00      	bkpt	0x0000
 800935a:	2300      	movs	r3, #0
 800935c:	e03f      	b.n	80093de <dcd_edpt_xfer_fifo+0xba>
 800935e:	79bb      	ldrb	r3, [r7, #6]
 8009360:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009362:	7bbb      	ldrb	r3, [r7, #14]
 8009364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009368:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800936a:	777b      	strb	r3, [r7, #29]
 800936c:	79bb      	ldrb	r3, [r7, #6]
 800936e:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009370:	7bfb      	ldrb	r3, [r7, #15]
 8009372:	09db      	lsrs	r3, r3, #7
 8009374:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8009376:	773b      	strb	r3, [r7, #28]

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 8009378:	7f7a      	ldrb	r2, [r7, #29]
 800937a:	7f3b      	ldrb	r3, [r7, #28]
 800937c:	0052      	lsls	r2, r2, #1
 800937e:	4413      	add	r3, r2
 8009380:	011b      	lsls	r3, r3, #4
 8009382:	4a1a      	ldr	r2, [pc, #104]	; (80093ec <dcd_edpt_xfer_fifo+0xc8>)
 8009384:	4413      	add	r3, r2
 8009386:	61bb      	str	r3, [r7, #24]
  xfer->buffer      = NULL;
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	2200      	movs	r2, #0
 800938c:	601a      	str	r2, [r3, #0]
  xfer->ff          = ff;
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	683a      	ldr	r2, [r7, #0]
 8009392:	605a      	str	r2, [r3, #4]
  xfer->total_len   = total_bytes;
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	88ba      	ldrh	r2, [r7, #4]
 8009398:	811a      	strh	r2, [r3, #8]

  uint16_t num_packets = (total_bytes / xfer->max_size);
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	895b      	ldrh	r3, [r3, #10]
 800939e:	88ba      	ldrh	r2, [r7, #4]
 80093a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80093a4:	83fb      	strh	r3, [r7, #30]
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	895a      	ldrh	r2, [r3, #10]
 80093aa:	88bb      	ldrh	r3, [r7, #4]
 80093ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80093b0:	fb01 f202 	mul.w	r2, r1, r2
 80093b4:	1a9b      	subs	r3, r3, r2
 80093b6:	82fb      	strh	r3, [r7, #22]

  // Zero-size packet is special case.
  if(short_packet_size > 0 || (total_bytes == 0)) num_packets++;
 80093b8:	8afb      	ldrh	r3, [r7, #22]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d102      	bne.n	80093c4 <dcd_edpt_xfer_fifo+0xa0>
 80093be:	88bb      	ldrh	r3, [r7, #4]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d102      	bne.n	80093ca <dcd_edpt_xfer_fifo+0xa6>
 80093c4:	8bfb      	ldrh	r3, [r7, #30]
 80093c6:	3301      	adds	r3, #1
 80093c8:	83fb      	strh	r3, [r7, #30]

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 80093ca:	8bfc      	ldrh	r4, [r7, #30]
 80093cc:	7f3a      	ldrb	r2, [r7, #28]
 80093ce:	7f79      	ldrb	r1, [r7, #29]
 80093d0:	79f8      	ldrb	r0, [r7, #7]
 80093d2:	88bb      	ldrh	r3, [r7, #4]
 80093d4:	9300      	str	r3, [sp, #0]
 80093d6:	4623      	mov	r3, r4
 80093d8:	f7ff fc26 	bl	8008c28 <edpt_schedule_packets>

  return true;
 80093dc:	2301      	movs	r3, #1
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3724      	adds	r7, #36	; 0x24
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd90      	pop	{r4, r7, pc}
 80093e6:	bf00      	nop
 80093e8:	e000edf0 	.word	0xe000edf0
 80093ec:	24001b00 	.word	0x24001b00

080093f0 <dcd_edpt_disable>:

static void dcd_edpt_disable (uint8_t rhport, uint8_t ep_addr, bool stall)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b089      	sub	sp, #36	; 0x24
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	4603      	mov	r3, r0
 80093f8:	71fb      	strb	r3, [r7, #7]
 80093fa:	460b      	mov	r3, r1
 80093fc:	71bb      	strb	r3, [r7, #6]
 80093fe:	4613      	mov	r3, r2
 8009400:	717b      	strb	r3, [r7, #5]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8009402:	4b6d      	ldr	r3, [pc, #436]	; (80095b8 <dcd_edpt_disable+0x1c8>)
 8009404:	61fb      	str	r3, [r7, #28]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8009406:	4b6d      	ldr	r3, [pc, #436]	; (80095bc <dcd_edpt_disable+0x1cc>)
 8009408:	61bb      	str	r3, [r7, #24]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 800940a:	4b6d      	ldr	r3, [pc, #436]	; (80095c0 <dcd_edpt_disable+0x1d0>)
 800940c:	617b      	str	r3, [r7, #20]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 800940e:	4b6d      	ldr	r3, [pc, #436]	; (80095c4 <dcd_edpt_disable+0x1d4>)
 8009410:	613b      	str	r3, [r7, #16]
 8009412:	79bb      	ldrb	r3, [r7, #6]
 8009414:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009416:	7b3b      	ldrb	r3, [r7, #12]
 8009418:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800941c:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800941e:	73fb      	strb	r3, [r7, #15]
 8009420:	79bb      	ldrb	r3, [r7, #6]
 8009422:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009424:	7b7b      	ldrb	r3, [r7, #13]
 8009426:	09db      	lsrs	r3, r3, #7
 8009428:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800942a:	73bb      	strb	r3, [r7, #14]

  if(dir == TUSB_DIR_IN) {
 800942c:	7bbb      	ldrb	r3, [r7, #14]
 800942e:	2b01      	cmp	r3, #1
 8009430:	d16a      	bne.n	8009508 <dcd_edpt_disable+0x118>
    // Only disable currently enabled non-control endpoint
    if ( (epnum == 0) || !(in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPENA) ){
 8009432:	7bfb      	ldrb	r3, [r7, #15]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d006      	beq.n	8009446 <dcd_edpt_disable+0x56>
 8009438:	7bfb      	ldrb	r3, [r7, #15]
 800943a:	015b      	lsls	r3, r3, #5
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	4413      	add	r3, r2
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	db13      	blt.n	800946e <dcd_edpt_disable+0x7e>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 8009446:	7bfb      	ldrb	r3, [r7, #15]
 8009448:	015b      	lsls	r3, r3, #5
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	4413      	add	r3, r2
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	797b      	ldrb	r3, [r7, #5]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d002      	beq.n	800945c <dcd_edpt_disable+0x6c>
 8009456:	f04f 6102 	mov.w	r1, #136314880	; 0x8200000
 800945a:	e001      	b.n	8009460 <dcd_edpt_disable+0x70>
 800945c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8009460:	7bfb      	ldrb	r3, [r7, #15]
 8009462:	015b      	lsls	r3, r3, #5
 8009464:	6938      	ldr	r0, [r7, #16]
 8009466:	4403      	add	r3, r0
 8009468:	430a      	orrs	r2, r1
 800946a:	601a      	str	r2, [r3, #0]
 800946c:	e037      	b.n	80094de <dcd_edpt_disable+0xee>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800946e:	7bfb      	ldrb	r3, [r7, #15]
 8009470:	015b      	lsls	r3, r3, #5
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	4413      	add	r3, r2
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	7bfb      	ldrb	r3, [r7, #15]
 800947a:	015b      	lsls	r3, r3, #5
 800947c:	6939      	ldr	r1, [r7, #16]
 800947e:	440b      	add	r3, r1
 8009480:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8009484:	601a      	str	r2, [r3, #0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_INEPNE) == 0);
 8009486:	bf00      	nop
 8009488:	7bfb      	ldrb	r3, [r7, #15]
 800948a:	015b      	lsls	r3, r3, #5
 800948c:	693a      	ldr	r2, [r7, #16]
 800948e:	4413      	add	r3, r2
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009496:	2b00      	cmp	r3, #0
 8009498:	d0f6      	beq.n	8009488 <dcd_edpt_disable+0x98>

      // Disable the endpoint.
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPDIS | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 800949a:	7bfb      	ldrb	r3, [r7, #15]
 800949c:	015b      	lsls	r3, r3, #5
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	4413      	add	r3, r2
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	797b      	ldrb	r3, [r7, #5]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d001      	beq.n	80094ae <dcd_edpt_disable+0xbe>
 80094aa:	4947      	ldr	r1, [pc, #284]	; (80095c8 <dcd_edpt_disable+0x1d8>)
 80094ac:	e001      	b.n	80094b2 <dcd_edpt_disable+0xc2>
 80094ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80094b2:	7bfb      	ldrb	r3, [r7, #15]
 80094b4:	015b      	lsls	r3, r3, #5
 80094b6:	6938      	ldr	r0, [r7, #16]
 80094b8:	4403      	add	r3, r0
 80094ba:	430a      	orrs	r2, r1
 80094bc:	601a      	str	r2, [r3, #0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_EPDISD_Msk) == 0);
 80094be:	bf00      	nop
 80094c0:	7bfb      	ldrb	r3, [r7, #15]
 80094c2:	015b      	lsls	r3, r3, #5
 80094c4:	693a      	ldr	r2, [r7, #16]
 80094c6:	4413      	add	r3, r2
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	f003 0302 	and.w	r3, r3, #2
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d0f6      	beq.n	80094c0 <dcd_edpt_disable+0xd0>
      in_ep[epnum].DIEPINT = USB_OTG_DIEPINT_EPDISD;
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
 80094d4:	015b      	lsls	r3, r3, #5
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	4413      	add	r3, r2
 80094da:	2202      	movs	r2, #2
 80094dc:	609a      	str	r2, [r3, #8]
    }

    // Flush the FIFO, and wait until we have confirmed it cleared.
    usb_otg->GRSTCTL |= (epnum << USB_OTG_GRSTCTL_TXFNUM_Pos);
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	7bfa      	ldrb	r2, [r7, #15]
 80094e4:	0192      	lsls	r2, r2, #6
 80094e6:	431a      	orrs	r2, r3
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	611a      	str	r2, [r3, #16]
    usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	f043 0220 	orr.w	r2, r3, #32
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	611a      	str	r2, [r3, #16]
    while((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH_Msk) != 0);
 80094f8:	bf00      	nop
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	f003 0320 	and.w	r3, r3, #32
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1f9      	bne.n	80094fa <dcd_edpt_disable+0x10a>

      // Allow other OUT endpoints to keep receiving.
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
    }
  }
}
 8009506:	e051      	b.n	80095ac <dcd_edpt_disable+0x1bc>
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 8009508:	7bfb      	ldrb	r3, [r7, #15]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d006      	beq.n	800951c <dcd_edpt_disable+0x12c>
 800950e:	7bfb      	ldrb	r3, [r7, #15]
 8009510:	015b      	lsls	r3, r3, #5
 8009512:	697a      	ldr	r2, [r7, #20]
 8009514:	4413      	add	r3, r2
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	db12      	blt.n	8009542 <dcd_edpt_disable+0x152>
      out_ep[epnum].DOEPCTL |= stall ? USB_OTG_DOEPCTL_STALL : 0;
 800951c:	7bfb      	ldrb	r3, [r7, #15]
 800951e:	015b      	lsls	r3, r3, #5
 8009520:	697a      	ldr	r2, [r7, #20]
 8009522:	4413      	add	r3, r2
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	797b      	ldrb	r3, [r7, #5]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d002      	beq.n	8009532 <dcd_edpt_disable+0x142>
 800952c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009530:	e000      	b.n	8009534 <dcd_edpt_disable+0x144>
 8009532:	2100      	movs	r1, #0
 8009534:	7bfb      	ldrb	r3, [r7, #15]
 8009536:	015b      	lsls	r3, r3, #5
 8009538:	6978      	ldr	r0, [r7, #20]
 800953a:	4403      	add	r3, r0
 800953c:	430a      	orrs	r2, r1
 800953e:	601a      	str	r2, [r3, #0]
}
 8009540:	e034      	b.n	80095ac <dcd_edpt_disable+0x1bc>
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	605a      	str	r2, [r3, #4]
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 800954e:	bf00      	nop
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	695b      	ldr	r3, [r3, #20]
 8009554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009558:	2b00      	cmp	r3, #0
 800955a:	d0f9      	beq.n	8009550 <dcd_edpt_disable+0x160>
      out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPDIS | (stall ? USB_OTG_DOEPCTL_STALL : 0);
 800955c:	7bfb      	ldrb	r3, [r7, #15]
 800955e:	015b      	lsls	r3, r3, #5
 8009560:	697a      	ldr	r2, [r7, #20]
 8009562:	4413      	add	r3, r2
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	797b      	ldrb	r3, [r7, #5]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d001      	beq.n	8009570 <dcd_edpt_disable+0x180>
 800956c:	4916      	ldr	r1, [pc, #88]	; (80095c8 <dcd_edpt_disable+0x1d8>)
 800956e:	e001      	b.n	8009574 <dcd_edpt_disable+0x184>
 8009570:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009574:	7bfb      	ldrb	r3, [r7, #15]
 8009576:	015b      	lsls	r3, r3, #5
 8009578:	6978      	ldr	r0, [r7, #20]
 800957a:	4403      	add	r3, r0
 800957c:	430a      	orrs	r2, r1
 800957e:	601a      	str	r2, [r3, #0]
      while((out_ep[epnum].DOEPINT & USB_OTG_DOEPINT_EPDISD_Msk) == 0);
 8009580:	bf00      	nop
 8009582:	7bfb      	ldrb	r3, [r7, #15]
 8009584:	015b      	lsls	r3, r3, #5
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	4413      	add	r3, r2
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	f003 0302 	and.w	r3, r3, #2
 8009590:	2b00      	cmp	r3, #0
 8009592:	d0f6      	beq.n	8009582 <dcd_edpt_disable+0x192>
      out_ep[epnum].DOEPINT = USB_OTG_DOEPINT_EPDISD;
 8009594:	7bfb      	ldrb	r3, [r7, #15]
 8009596:	015b      	lsls	r3, r3, #5
 8009598:	697a      	ldr	r2, [r7, #20]
 800959a:	4413      	add	r3, r2
 800959c:	2202      	movs	r2, #2
 800959e:	609a      	str	r2, [r3, #8]
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	605a      	str	r2, [r3, #4]
}
 80095ac:	bf00      	nop
 80095ae:	3724      	adds	r7, #36	; 0x24
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	40040000 	.word	0x40040000
 80095bc:	40040800 	.word	0x40040800
 80095c0:	40040b00 	.word	0x40040b00
 80095c4:	40040900 	.word	0x40040900
 80095c8:	40200000 	.word	0x40200000

080095cc <dcd_edpt_close>:

/**
 * Close an endpoint.
 */
void dcd_edpt_close (uint8_t rhport, uint8_t ep_addr)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b088      	sub	sp, #32
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	4603      	mov	r3, r0
 80095d4:	460a      	mov	r2, r1
 80095d6:	71fb      	strb	r3, [r7, #7]
 80095d8:	4613      	mov	r3, r2
 80095da:	71bb      	strb	r3, [r7, #6]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 80095dc:	4b29      	ldr	r3, [pc, #164]	; (8009684 <dcd_edpt_close+0xb8>)
 80095de:	61fb      	str	r3, [r7, #28]
 80095e0:	79bb      	ldrb	r3, [r7, #6]
 80095e2:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
 80095e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ea:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80095ec:	76fb      	strb	r3, [r7, #27]
 80095ee:	79bb      	ldrb	r3, [r7, #6]
 80095f0:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
 80095f4:	09db      	lsrs	r3, r3, #7
 80095f6:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80095f8:	76bb      	strb	r3, [r7, #26]

  dcd_edpt_disable(rhport, ep_addr, false);
 80095fa:	79b9      	ldrb	r1, [r7, #6]
 80095fc:	79fb      	ldrb	r3, [r7, #7]
 80095fe:	2200      	movs	r2, #0
 8009600:	4618      	mov	r0, r3
 8009602:	f7ff fef5 	bl	80093f0 <dcd_edpt_disable>

  // Update max_size
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 8009606:	7efa      	ldrb	r2, [r7, #27]
 8009608:	7ebb      	ldrb	r3, [r7, #26]
 800960a:	491f      	ldr	r1, [pc, #124]	; (8009688 <dcd_edpt_close+0xbc>)
 800960c:	0052      	lsls	r2, r2, #1
 800960e:	4413      	add	r3, r2
 8009610:	011b      	lsls	r3, r3, #4
 8009612:	440b      	add	r3, r1
 8009614:	330a      	adds	r3, #10
 8009616:	2200      	movs	r2, #0
 8009618:	801a      	strh	r2, [r3, #0]

  if (dir == TUSB_DIR_IN)
 800961a:	7ebb      	ldrb	r3, [r7, #26]
 800961c:	2b01      	cmp	r3, #1
 800961e:	d129      	bne.n	8009674 <dcd_edpt_close+0xa8>
  {
    uint16_t const fifo_size = (usb_otg->DIEPTXF[epnum - 1] & USB_OTG_DIEPTXF_INEPTXFD_Msk) >> USB_OTG_DIEPTXF_INEPTXFD_Pos;
 8009620:	7efb      	ldrb	r3, [r7, #27]
 8009622:	3b01      	subs	r3, #1
 8009624:	69fa      	ldr	r2, [r7, #28]
 8009626:	3340      	adds	r3, #64	; 0x40
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	4413      	add	r3, r2
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	0c1b      	lsrs	r3, r3, #16
 8009630:	833b      	strh	r3, [r7, #24]
    uint16_t const fifo_start = (usb_otg->DIEPTXF[epnum - 1] & USB_OTG_DIEPTXF_INEPTXSA_Msk) >> USB_OTG_DIEPTXF_INEPTXSA_Pos;
 8009632:	7efb      	ldrb	r3, [r7, #27]
 8009634:	3b01      	subs	r3, #1
 8009636:	69fa      	ldr	r2, [r7, #28]
 8009638:	3340      	adds	r3, #64	; 0x40
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	82fb      	strh	r3, [r7, #22]
    // For now only the last opened endpoint can be closed without fuss.
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
 8009642:	8afa      	ldrh	r2, [r7, #22]
 8009644:	4b11      	ldr	r3, [pc, #68]	; (800968c <dcd_edpt_close+0xc0>)
 8009646:	881b      	ldrh	r3, [r3, #0]
 8009648:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800964c:	429a      	cmp	r2, r3
 800964e:	d009      	beq.n	8009664 <dcd_edpt_close+0x98>
 8009650:	4b0f      	ldr	r3, [pc, #60]	; (8009690 <dcd_edpt_close+0xc4>)
 8009652:	613b      	str	r3, [r7, #16]
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 0301 	and.w	r3, r3, #1
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00d      	beq.n	800967c <dcd_edpt_close+0xb0>
 8009660:	be00      	bkpt	0x0000
 8009662:	e00b      	b.n	800967c <dcd_edpt_close+0xb0>
    _allocated_fifo_words_tx -= fifo_size;
 8009664:	4b09      	ldr	r3, [pc, #36]	; (800968c <dcd_edpt_close+0xc0>)
 8009666:	881a      	ldrh	r2, [r3, #0]
 8009668:	8b3b      	ldrh	r3, [r7, #24]
 800966a:	1ad3      	subs	r3, r2, r3
 800966c:	b29a      	uxth	r2, r3
 800966e:	4b07      	ldr	r3, [pc, #28]	; (800968c <dcd_edpt_close+0xc0>)
 8009670:	801a      	strh	r2, [r3, #0]
 8009672:	e004      	b.n	800967e <dcd_edpt_close+0xb2>
  }
  else
  {
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
 8009674:	4b07      	ldr	r3, [pc, #28]	; (8009694 <dcd_edpt_close+0xc8>)
 8009676:	2201      	movs	r2, #1
 8009678:	701a      	strb	r2, [r3, #0]
 800967a:	e000      	b.n	800967e <dcd_edpt_close+0xb2>
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
 800967c:	bf00      	nop
  }
}
 800967e:	3720      	adds	r7, #32
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	40040000 	.word	0x40040000
 8009688:	24001b00 	.word	0x24001b00
 800968c:	24001c24 	.word	0x24001c24
 8009690:	e000edf0 	.word	0xe000edf0
 8009694:	24001c26 	.word	0x24001c26

08009698 <dcd_edpt_stall>:

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	4603      	mov	r3, r0
 80096a0:	460a      	mov	r2, r1
 80096a2:	71fb      	strb	r3, [r7, #7]
 80096a4:	4613      	mov	r3, r2
 80096a6:	71bb      	strb	r3, [r7, #6]
  dcd_edpt_disable(rhport, ep_addr, true);
 80096a8:	79b9      	ldrb	r1, [r7, #6]
 80096aa:	79fb      	ldrb	r3, [r7, #7]
 80096ac:	2201      	movs	r2, #1
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7ff fe9e 	bl	80093f0 <dcd_edpt_disable>
}
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
 80096bc:	b480      	push	{r7}
 80096be:	b087      	sub	sp, #28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	4603      	mov	r3, r0
 80096c4:	460a      	mov	r2, r1
 80096c6:	71fb      	strb	r3, [r7, #7]
 80096c8:	4613      	mov	r3, r2
 80096ca:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 80096cc:	4b25      	ldr	r3, [pc, #148]	; (8009764 <dcd_edpt_clear_stall+0xa8>)
 80096ce:	617b      	str	r3, [r7, #20]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 80096d0:	4b25      	ldr	r3, [pc, #148]	; (8009768 <dcd_edpt_clear_stall+0xac>)
 80096d2:	613b      	str	r3, [r7, #16]
 80096d4:	79bb      	ldrb	r3, [r7, #6]
 80096d6:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80096d8:	7b3b      	ldrb	r3, [r7, #12]
 80096da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096de:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80096e0:	73fb      	strb	r3, [r7, #15]
 80096e2:	79bb      	ldrb	r3, [r7, #6]
 80096e4:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80096e6:	7b7b      	ldrb	r3, [r7, #13]
 80096e8:	09db      	lsrs	r3, r3, #7
 80096ea:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80096ec:	73bb      	strb	r3, [r7, #14]

  // Clear stall and reset data toggle
  if(dir == TUSB_DIR_IN) {
 80096ee:	7bbb      	ldrb	r3, [r7, #14]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d118      	bne.n	8009726 <dcd_edpt_clear_stall+0x6a>
    in_ep[epnum].DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
 80096f6:	015b      	lsls	r3, r3, #5
 80096f8:	693a      	ldr	r2, [r7, #16]
 80096fa:	4413      	add	r3, r2
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	015b      	lsls	r3, r3, #5
 8009702:	6939      	ldr	r1, [r7, #16]
 8009704:	440b      	add	r3, r1
 8009706:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800970a:	601a      	str	r2, [r3, #0]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800970c:	7bfb      	ldrb	r3, [r7, #15]
 800970e:	015b      	lsls	r3, r3, #5
 8009710:	693a      	ldr	r2, [r7, #16]
 8009712:	4413      	add	r3, r2
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	7bfb      	ldrb	r3, [r7, #15]
 8009718:	015b      	lsls	r3, r3, #5
 800971a:	6939      	ldr	r1, [r7, #16]
 800971c:	440b      	add	r3, r1
 800971e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009722:	601a      	str	r2, [r3, #0]
  } else {
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
  }
}
 8009724:	e017      	b.n	8009756 <dcd_edpt_clear_stall+0x9a>
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009726:	7bfb      	ldrb	r3, [r7, #15]
 8009728:	015b      	lsls	r3, r3, #5
 800972a:	697a      	ldr	r2, [r7, #20]
 800972c:	4413      	add	r3, r2
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	7bfb      	ldrb	r3, [r7, #15]
 8009732:	015b      	lsls	r3, r3, #5
 8009734:	6979      	ldr	r1, [r7, #20]
 8009736:	440b      	add	r3, r1
 8009738:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800973c:	601a      	str	r2, [r3, #0]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800973e:	7bfb      	ldrb	r3, [r7, #15]
 8009740:	015b      	lsls	r3, r3, #5
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	4413      	add	r3, r2
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	7bfb      	ldrb	r3, [r7, #15]
 800974a:	015b      	lsls	r3, r3, #5
 800974c:	6979      	ldr	r1, [r7, #20]
 800974e:	440b      	add	r3, r1
 8009750:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009754:	601a      	str	r2, [r3, #0]
}
 8009756:	bf00      	nop
 8009758:	371c      	adds	r7, #28
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	40040b00 	.word	0x40040b00
 8009768:	40040900 	.word	0x40040900

0800976c <read_fifo_packet>:

/*------------------------------------------------------------------*/

// Read a single data packet from receive FIFO
static void read_fifo_packet(uint8_t rhport, uint8_t * dst, uint16_t len)
{
 800976c:	b480      	push	{r7}
 800976e:	b089      	sub	sp, #36	; 0x24
 8009770:	af00      	add	r7, sp, #0
 8009772:	4603      	mov	r3, r0
 8009774:	6039      	str	r1, [r7, #0]
 8009776:	71fb      	strb	r3, [r7, #7]
 8009778:	4613      	mov	r3, r2
 800977a:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  usb_fifo_t rx_fifo = FIFO_BASE(rhport, 0);
 800977c:	4b28      	ldr	r3, [pc, #160]	; (8009820 <read_fifo_packet+0xb4>)
 800977e:	61bb      	str	r3, [r7, #24]

  // Reading full available 32 bit words from fifo
  uint16_t full_words = len >> 2;
 8009780:	88bb      	ldrh	r3, [r7, #4]
 8009782:	089b      	lsrs	r3, r3, #2
 8009784:	82fb      	strh	r3, [r7, #22]
  for(uint16_t i = 0; i < full_words; i++) {
 8009786:	2300      	movs	r3, #0
 8009788:	83fb      	strh	r3, [r7, #30]
 800978a:	e01e      	b.n	80097ca <read_fifo_packet+0x5e>
    uint32_t tmp = *rx_fifo;
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	60fb      	str	r3, [r7, #12]
    dst[0] = tmp & 0x000000FF;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	b2da      	uxtb	r2, r3
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	701a      	strb	r2, [r3, #0]
    dst[1] = (tmp & 0x0000FF00) >> 8;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	0a1a      	lsrs	r2, r3, #8
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	3301      	adds	r3, #1
 80097a2:	b2d2      	uxtb	r2, r2
 80097a4:	701a      	strb	r2, [r3, #0]
    dst[2] = (tmp & 0x00FF0000) >> 16;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	0c1a      	lsrs	r2, r3, #16
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	3302      	adds	r3, #2
 80097ae:	b2d2      	uxtb	r2, r2
 80097b0:	701a      	strb	r2, [r3, #0]
    dst[3] = (tmp & 0xFF000000) >> 24;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	0e1a      	lsrs	r2, r3, #24
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	3303      	adds	r3, #3
 80097ba:	b2d2      	uxtb	r2, r2
 80097bc:	701a      	strb	r2, [r3, #0]
    dst += 4;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	3304      	adds	r3, #4
 80097c2:	603b      	str	r3, [r7, #0]
  for(uint16_t i = 0; i < full_words; i++) {
 80097c4:	8bfb      	ldrh	r3, [r7, #30]
 80097c6:	3301      	adds	r3, #1
 80097c8:	83fb      	strh	r3, [r7, #30]
 80097ca:	8bfa      	ldrh	r2, [r7, #30]
 80097cc:	8afb      	ldrh	r3, [r7, #22]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d3dc      	bcc.n	800978c <read_fifo_packet+0x20>
  }

  // Read the remaining 1-3 bytes from fifo
  uint8_t bytes_rem = len & 0x03;
 80097d2:	88bb      	ldrh	r3, [r7, #4]
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	f003 0303 	and.w	r3, r3, #3
 80097da:	757b      	strb	r3, [r7, #21]
  if(bytes_rem != 0) {
 80097dc:	7d7b      	ldrb	r3, [r7, #21]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d018      	beq.n	8009814 <read_fifo_packet+0xa8>
    uint32_t tmp = *rx_fifo;
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	613b      	str	r3, [r7, #16]
    dst[0] = tmp & 0x000000FF;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	b2da      	uxtb	r2, r3
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	701a      	strb	r2, [r3, #0]
    if(bytes_rem > 1) {
 80097f0:	7d7b      	ldrb	r3, [r7, #21]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d905      	bls.n	8009802 <read_fifo_packet+0x96>
      dst[1] = (tmp & 0x0000FF00) >> 8;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	0a1a      	lsrs	r2, r3, #8
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	3301      	adds	r3, #1
 80097fe:	b2d2      	uxtb	r2, r2
 8009800:	701a      	strb	r2, [r3, #0]
    }
    if(bytes_rem > 2) {
 8009802:	7d7b      	ldrb	r3, [r7, #21]
 8009804:	2b02      	cmp	r3, #2
 8009806:	d905      	bls.n	8009814 <read_fifo_packet+0xa8>
      dst[2] = (tmp & 0x00FF0000) >> 16;
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	0c1a      	lsrs	r2, r3, #16
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	3302      	adds	r3, #2
 8009810:	b2d2      	uxtb	r2, r2
 8009812:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8009814:	bf00      	nop
 8009816:	3724      	adds	r7, #36	; 0x24
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	40041000 	.word	0x40041000

08009824 <write_fifo_packet>:

// Write a single data packet to EPIN FIFO
static void write_fifo_packet(uint8_t rhport, uint8_t fifo_num, uint8_t * src, uint16_t len)
{
 8009824:	b480      	push	{r7}
 8009826:	b087      	sub	sp, #28
 8009828:	af00      	add	r7, sp, #0
 800982a:	603a      	str	r2, [r7, #0]
 800982c:	461a      	mov	r2, r3
 800982e:	4603      	mov	r3, r0
 8009830:	71fb      	strb	r3, [r7, #7]
 8009832:	460b      	mov	r3, r1
 8009834:	71bb      	strb	r3, [r7, #6]
 8009836:	4613      	mov	r3, r2
 8009838:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  usb_fifo_t tx_fifo = FIFO_BASE(rhport, fifo_num);
 800983a:	79ba      	ldrb	r2, [r7, #6]
 800983c:	4b2b      	ldr	r3, [pc, #172]	; (80098ec <write_fifo_packet+0xc8>)
 800983e:	4413      	add	r3, r2
 8009840:	031b      	lsls	r3, r3, #12
 8009842:	60fb      	str	r3, [r7, #12]

  // Pushing full available 32 bit words to fifo
  uint16_t full_words = len >> 2;
 8009844:	88bb      	ldrh	r3, [r7, #4]
 8009846:	089b      	lsrs	r3, r3, #2
 8009848:	817b      	strh	r3, [r7, #10]
  for(uint16_t i = 0; i < full_words; i++){
 800984a:	2300      	movs	r3, #0
 800984c:	82fb      	strh	r3, [r7, #22]
 800984e:	e019      	b.n	8009884 <write_fifo_packet+0x60>
    *tx_fifo = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	3303      	adds	r3, #3
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	061a      	lsls	r2, r3, #24
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	3302      	adds	r3, #2
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	041b      	lsls	r3, r3, #16
 8009860:	431a      	orrs	r2, r3
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	3301      	adds	r3, #1
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	021b      	lsls	r3, r3, #8
 800986a:	4313      	orrs	r3, r2
 800986c:	683a      	ldr	r2, [r7, #0]
 800986e:	7812      	ldrb	r2, [r2, #0]
 8009870:	4313      	orrs	r3, r2
 8009872:	461a      	mov	r2, r3
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	601a      	str	r2, [r3, #0]
    src += 4;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	3304      	adds	r3, #4
 800987c:	603b      	str	r3, [r7, #0]
  for(uint16_t i = 0; i < full_words; i++){
 800987e:	8afb      	ldrh	r3, [r7, #22]
 8009880:	3301      	adds	r3, #1
 8009882:	82fb      	strh	r3, [r7, #22]
 8009884:	8afa      	ldrh	r2, [r7, #22]
 8009886:	897b      	ldrh	r3, [r7, #10]
 8009888:	429a      	cmp	r2, r3
 800988a:	d3e1      	bcc.n	8009850 <write_fifo_packet+0x2c>
  }

  // Write the remaining 1-3 bytes into fifo
  uint8_t bytes_rem = len & 0x03;
 800988c:	88bb      	ldrh	r3, [r7, #4]
 800988e:	b2db      	uxtb	r3, r3
 8009890:	f003 0303 	and.w	r3, r3, #3
 8009894:	727b      	strb	r3, [r7, #9]
  if(bytes_rem){
 8009896:	7a7b      	ldrb	r3, [r7, #9]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d020      	beq.n	80098de <write_fifo_packet+0xba>
    uint32_t tmp_word = 0;
 800989c:	2300      	movs	r3, #0
 800989e:	613b      	str	r3, [r7, #16]
    tmp_word |= src[0];
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	461a      	mov	r2, r3
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	4313      	orrs	r3, r2
 80098aa:	613b      	str	r3, [r7, #16]
    if(bytes_rem > 1){
 80098ac:	7a7b      	ldrb	r3, [r7, #9]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d907      	bls.n	80098c2 <write_fifo_packet+0x9e>
      tmp_word |= src[1] << 8;
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	3301      	adds	r3, #1
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	021b      	lsls	r3, r3, #8
 80098ba:	461a      	mov	r2, r3
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	4313      	orrs	r3, r2
 80098c0:	613b      	str	r3, [r7, #16]
    }
    if(bytes_rem > 2){
 80098c2:	7a7b      	ldrb	r3, [r7, #9]
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d907      	bls.n	80098d8 <write_fifo_packet+0xb4>
      tmp_word |= src[2] << 16;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	3302      	adds	r3, #2
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	041b      	lsls	r3, r3, #16
 80098d0:	461a      	mov	r2, r3
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	613b      	str	r3, [r7, #16]
    }
    *tx_fifo = tmp_word;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	693a      	ldr	r2, [r7, #16]
 80098dc:	601a      	str	r2, [r3, #0]
  }
}
 80098de:	bf00      	nop
 80098e0:	371c      	adds	r7, #28
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	00040041 	.word	0x00040041

080098f0 <handle_rxflvl_ints>:

static void handle_rxflvl_ints(uint8_t rhport, USB_OTG_OUTEndpointTypeDef * out_ep) {
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b088      	sub	sp, #32
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	4603      	mov	r3, r0
 80098f8:	6039      	str	r1, [r7, #0]
 80098fa:	71fb      	strb	r3, [r7, #7]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 80098fc:	4b4a      	ldr	r3, [pc, #296]	; (8009a28 <handle_rxflvl_ints+0x138>)
 80098fe:	61fb      	str	r3, [r7, #28]
  usb_fifo_t rx_fifo = FIFO_BASE(rhport, 0);
 8009900:	4b4a      	ldr	r3, [pc, #296]	; (8009a2c <handle_rxflvl_ints+0x13c>)
 8009902:	61bb      	str	r3, [r7, #24]

  // Pop control word off FIFO
  uint32_t ctl_word = usb_otg->GRXSTSP;
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	6a1b      	ldr	r3, [r3, #32]
 8009908:	617b      	str	r3, [r7, #20]
  uint8_t pktsts = (ctl_word & USB_OTG_GRXSTSP_PKTSTS_Msk) >> USB_OTG_GRXSTSP_PKTSTS_Pos;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	0c5b      	lsrs	r3, r3, #17
 800990e:	b2db      	uxtb	r3, r3
 8009910:	f003 030f 	and.w	r3, r3, #15
 8009914:	74fb      	strb	r3, [r7, #19]
  uint8_t epnum = (ctl_word &  USB_OTG_GRXSTSP_EPNUM_Msk) >>  USB_OTG_GRXSTSP_EPNUM_Pos;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	b2db      	uxtb	r3, r3
 800991a:	f003 030f 	and.w	r3, r3, #15
 800991e:	74bb      	strb	r3, [r7, #18]
  uint16_t bcnt = (ctl_word & USB_OTG_GRXSTSP_BCNT_Msk) >> USB_OTG_GRXSTSP_BCNT_Pos;
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	091b      	lsrs	r3, r3, #4
 8009924:	b29b      	uxth	r3, r3
 8009926:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800992a:	823b      	strh	r3, [r7, #16]

  switch(pktsts) {
 800992c:	7cfb      	ldrb	r3, [r7, #19]
 800992e:	3b01      	subs	r3, #1
 8009930:	2b05      	cmp	r3, #5
 8009932:	d865      	bhi.n	8009a00 <handle_rxflvl_ints+0x110>
 8009934:	a201      	add	r2, pc, #4	; (adr r2, 800993c <handle_rxflvl_ints+0x4c>)
 8009936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993a:	bf00      	nop
 800993c:	08009a15 	.word	0x08009a15
 8009940:	08009955 	.word	0x08009955
 8009944:	08009a15 	.word	0x08009a15
 8009948:	080099d5 	.word	0x080099d5
 800994c:	08009a01 	.word	0x08009a01
 8009950:	080099ef 	.word	0x080099ef
    case 0x01: // Global OUT NAK (Interrupt)
      break;

    case 0x02: // Out packet recvd
    {
      xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8009954:	7cbb      	ldrb	r3, [r7, #18]
 8009956:	015b      	lsls	r3, r3, #5
 8009958:	4a35      	ldr	r2, [pc, #212]	; (8009a30 <handle_rxflvl_ints+0x140>)
 800995a:	4413      	add	r3, r2
 800995c:	60fb      	str	r3, [r7, #12]

      // Read packet off RxFIFO
      if (xfer->ff)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d007      	beq.n	8009976 <handle_rxflvl_ints+0x86>
      {
        // Ring buffer
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void *)(uintptr_t) rx_fifo, bcnt);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	8a3a      	ldrh	r2, [r7, #16]
 800996c:	69b9      	ldr	r1, [r7, #24]
 800996e:	4618      	mov	r0, r3
 8009970:	f7fd f93c 	bl	8006bec <tu_fifo_write_n_const_addr_full_words>
 8009974:	e00c      	b.n	8009990 <handle_rxflvl_ints+0xa0>
      }
      else
      {
        // Linear buffer
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6819      	ldr	r1, [r3, #0]
 800997a:	8a3a      	ldrh	r2, [r7, #16]
 800997c:	79fb      	ldrb	r3, [r7, #7]
 800997e:	4618      	mov	r0, r3
 8009980:	f7ff fef4 	bl	800976c <read_fifo_packet>

        // Increment pointer to xfer data
        xfer->buffer += bcnt;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	8a3b      	ldrh	r3, [r7, #16]
 800998a:	441a      	add	r2, r3
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	601a      	str	r2, [r3, #0]
      }

      // Truncate transfer length in case of short packet
      if(bcnt < xfer->max_size) {
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	895b      	ldrh	r3, [r3, #10]
 8009994:	8a3a      	ldrh	r2, [r7, #16]
 8009996:	429a      	cmp	r2, r3
 8009998:	d23e      	bcs.n	8009a18 <handle_rxflvl_ints+0x128>
        xfer->total_len -= (out_ep[epnum].DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DOEPTSIZ_XFRSIZ_Pos;
 800999a:	7cbb      	ldrb	r3, [r7, #18]
 800999c:	015b      	lsls	r3, r3, #5
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	4413      	add	r3, r2
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	f3c3 0112 	ubfx	r1, r3, #0, #19
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	891a      	ldrh	r2, [r3, #8]
 80099ac:	b28b      	uxth	r3, r1
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	811a      	strh	r2, [r3, #8]
        if(epnum == 0) {
 80099b6:	7cbb      	ldrb	r3, [r7, #18]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d12d      	bne.n	8009a18 <handle_rxflvl_ints+0x128>
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	891a      	ldrh	r2, [r3, #8]
 80099c0:	4b1c      	ldr	r3, [pc, #112]	; (8009a34 <handle_rxflvl_ints+0x144>)
 80099c2:	881b      	ldrh	r3, [r3, #0]
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 80099cc:	4b19      	ldr	r3, [pc, #100]	; (8009a34 <handle_rxflvl_ints+0x144>)
 80099ce:	2200      	movs	r2, #0
 80099d0:	801a      	strh	r2, [r3, #0]
        }
      }
    }
    break;
 80099d2:	e021      	b.n	8009a18 <handle_rxflvl_ints+0x128>

    case 0x03: // Out packet done (Interrupt)
      break;

    case 0x04: // Setup packet done (Interrupt)
      out_ep[epnum].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 80099d4:	7cbb      	ldrb	r3, [r7, #18]
 80099d6:	015b      	lsls	r3, r3, #5
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	4413      	add	r3, r2
 80099dc:	691a      	ldr	r2, [r3, #16]
 80099de:	7cbb      	ldrb	r3, [r7, #18]
 80099e0:	015b      	lsls	r3, r3, #5
 80099e2:	6839      	ldr	r1, [r7, #0]
 80099e4:	440b      	add	r3, r1
 80099e6:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 80099ea:	611a      	str	r2, [r3, #16]
      break;
 80099ec:	e017      	b.n	8009a1e <handle_rxflvl_ints+0x12e>

    case 0x06: // Setup packet recvd
      // We can receive up to three setup packets in succession, but
      // only the last one is valid.
      _setup_packet[0] = (* rx_fifo);
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a11      	ldr	r2, [pc, #68]	; (8009a38 <handle_rxflvl_ints+0x148>)
 80099f4:	6013      	str	r3, [r2, #0]
      _setup_packet[1] = (* rx_fifo);
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a0f      	ldr	r2, [pc, #60]	; (8009a38 <handle_rxflvl_ints+0x148>)
 80099fc:	6053      	str	r3, [r2, #4]
      break;
 80099fe:	e00e      	b.n	8009a1e <handle_rxflvl_ints+0x12e>

    default: // Invalid
      TU_BREAKPOINT();
 8009a00:	4b0e      	ldr	r3, [pc, #56]	; (8009a3c <handle_rxflvl_ints+0x14c>)
 8009a02:	60bb      	str	r3, [r7, #8]
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0301 	and.w	r3, r3, #1
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d005      	beq.n	8009a1c <handle_rxflvl_ints+0x12c>
 8009a10:	be00      	bkpt	0x0000
      break;
 8009a12:	e003      	b.n	8009a1c <handle_rxflvl_ints+0x12c>
      break;
 8009a14:	bf00      	nop
 8009a16:	e002      	b.n	8009a1e <handle_rxflvl_ints+0x12e>
    break;
 8009a18:	bf00      	nop
 8009a1a:	e000      	b.n	8009a1e <handle_rxflvl_ints+0x12e>
      break;
 8009a1c:	bf00      	nop
  }
}
 8009a1e:	bf00      	nop
 8009a20:	3720      	adds	r7, #32
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	40040000 	.word	0x40040000
 8009a2c:	40041000 	.word	0x40041000
 8009a30:	24001b00 	.word	0x24001b00
 8009a34:	24001c20 	.word	0x24001c20
 8009a38:	24001af8 	.word	0x24001af8
 8009a3c:	e000edf0 	.word	0xe000edf0

08009a40 <handle_epout_ints>:

static void handle_epout_ints(uint8_t rhport, USB_OTG_DeviceTypeDef * dev, USB_OTG_OUTEndpointTypeDef * out_ep) {
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b094      	sub	sp, #80	; 0x50
 8009a44:	af02      	add	r7, sp, #8
 8009a46:	4603      	mov	r3, r0
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
 8009a4c:	73fb      	strb	r3, [r7, #15]
  // DAINT for a given EP clears when DOEPINTx is cleared.
  // OEPINT will be cleared when DAINT's out bits are cleared.
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8009a4e:	2300      	movs	r3, #0
 8009a50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009a54:	e09e      	b.n	8009b94 <handle_epout_ints+0x154>
    xfer_ctl_t * xfer = XFER_CTL_BASE(n, TUSB_DIR_OUT);
 8009a56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009a5a:	015b      	lsls	r3, r3, #5
 8009a5c:	4a52      	ldr	r2, [pc, #328]	; (8009ba8 <handle_epout_ints+0x168>)
 8009a5e:	4413      	add	r3, r2
 8009a60:	643b      	str	r3, [r7, #64]	; 0x40

    if(dev->DAINT & (1 << (USB_OTG_DAINT_OEPINT_Pos + n))) {
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	699b      	ldr	r3, [r3, #24]
 8009a66:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8009a6a:	3210      	adds	r2, #16
 8009a6c:	2101      	movs	r1, #1
 8009a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8009a72:	4013      	ands	r3, r2
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f000 8088 	beq.w	8009b8a <handle_epout_ints+0x14a>
      // SETUP packet Setup Phase done.
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_STUP) {
 8009a7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009a7e:	015b      	lsls	r3, r3, #5
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	4413      	add	r3, r2
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	f003 0308 	and.w	r3, r3, #8
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d028      	beq.n	8009ae0 <handle_epout_ints+0xa0>
        out_ep[n].DOEPINT =  USB_OTG_DOEPINT_STUP;
 8009a8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009a92:	015b      	lsls	r3, r3, #5
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	4413      	add	r3, r2
 8009a98:	2208      	movs	r2, #8
 8009a9a:	609a      	str	r2, [r3, #8]
 8009a9c:	7bfb      	ldrb	r3, [r7, #15]
 8009a9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009aa2:	4b42      	ldr	r3, [pc, #264]	; (8009bac <handle_epout_ints+0x16c>)
 8009aa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
}

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8009aac:	f107 0314 	add.w	r3, r7, #20
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	605a      	str	r2, [r3, #4]
 8009ab6:	609a      	str	r2, [r3, #8]
 8009ab8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009abc:	753b      	strb	r3, [r7, #20]
 8009abe:	2306      	movs	r3, #6
 8009ac0:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8009ac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ac4:	f107 0318 	add.w	r3, r7, #24
 8009ac8:	6810      	ldr	r0, [r2, #0]
 8009aca:	6851      	ldr	r1, [r2, #4]
 8009acc:	c303      	stmia	r3!, {r0, r1}

  dcd_event_handler(&event, in_isr);
 8009ace:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009ad2:	f107 0314 	add.w	r3, r7, #20
 8009ad6:	4611      	mov	r1, r2
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7fd ffcf 	bl	8007a7c <dcd_event_handler>
}
 8009ade:	bf00      	nop
        dcd_event_setup_received(rhport, (uint8_t*) &_setup_packet[0], true);
      }

      // OUT XFER complete
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_XFRC) {
 8009ae0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009ae4:	015b      	lsls	r3, r3, #5
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	4413      	add	r3, r2
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	f003 0301 	and.w	r3, r3, #1
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d04a      	beq.n	8009b8a <handle_epout_ints+0x14a>
        out_ep[n].DOEPINT = USB_OTG_DOEPINT_XFRC;
 8009af4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009af8:	015b      	lsls	r3, r3, #5
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	4413      	add	r3, r2
 8009afe:	2201      	movs	r2, #1
 8009b00:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if((n == 0) && ep0_pending[TUSB_DIR_OUT]) {
 8009b02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10e      	bne.n	8009b28 <handle_epout_ints+0xe8>
 8009b0a:	4b29      	ldr	r3, [pc, #164]	; (8009bb0 <handle_epout_ints+0x170>)
 8009b0c:	881b      	ldrh	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00a      	beq.n	8009b28 <handle_epout_ints+0xe8>
          // Schedule another packet to be received.
          edpt_schedule_packets(rhport, n, TUSB_DIR_OUT, 1, ep0_pending[TUSB_DIR_OUT]);
 8009b12:	4b27      	ldr	r3, [pc, #156]	; (8009bb0 <handle_epout_ints+0x170>)
 8009b14:	881b      	ldrh	r3, [r3, #0]
 8009b16:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8009b1a:	7bf8      	ldrb	r0, [r7, #15]
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	2301      	movs	r3, #1
 8009b20:	2200      	movs	r2, #0
 8009b22:	f7ff f881 	bl	8008c28 <edpt_schedule_packets>
 8009b26:	e030      	b.n	8009b8a <handle_epout_ints+0x14a>
        } else {
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8009b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b2a:	891b      	ldrh	r3, [r3, #8]
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
 8009b30:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8009b34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009b38:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009b3c:	633a      	str	r2, [r7, #48]	; 0x30
 8009b3e:	2300      	movs	r3, #0
 8009b40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009b44:	2301      	movs	r3, #1
 8009b46:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8009b4a:	f107 0320 	add.w	r3, r7, #32
 8009b4e:	2200      	movs	r2, #0
 8009b50:	601a      	str	r2, [r3, #0]
 8009b52:	605a      	str	r2, [r3, #4]
 8009b54:	609a      	str	r2, [r3, #8]
 8009b56:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009b5a:	f887 3020 	strb.w	r3, [r7, #32]
 8009b5e:	2307      	movs	r3, #7
 8009b60:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  event.xfer_complete.ep_addr = ep_addr;
 8009b64:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009b68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  event.xfer_complete.len     = xferred_bytes;
 8009b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  event.xfer_complete.result  = result;
 8009b70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  dcd_event_handler(&event, in_isr);
 8009b78:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009b7c:	f107 0320 	add.w	r3, r7, #32
 8009b80:	4611      	mov	r1, r2
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fd ff7a 	bl	8007a7c <dcd_event_handler>
}
 8009b88:	bf00      	nop
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8009b8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009b8e:	3301      	adds	r3, #1
 8009b90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009b94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009b98:	2b08      	cmp	r3, #8
 8009b9a:	f67f af5c 	bls.w	8009a56 <handle_epout_ints+0x16>
        }
      }
    }
  }
}
 8009b9e:	bf00      	nop
 8009ba0:	bf00      	nop
 8009ba2:	3748      	adds	r7, #72	; 0x48
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	24001b00 	.word	0x24001b00
 8009bac:	24001af8 	.word	0x24001af8
 8009bb0:	24001c20 	.word	0x24001c20

08009bb4 <handle_epin_ints>:

static void handle_epin_ints(uint8_t rhport, USB_OTG_DeviceTypeDef * dev, USB_OTG_INEndpointTypeDef * in_ep) {
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b092      	sub	sp, #72	; 0x48
 8009bb8:	af02      	add	r7, sp, #8
 8009bba:	4603      	mov	r3, r0
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
 8009bc0:	73fb      	strb	r3, [r7, #15]
  // DAINT for a given EP clears when DIEPINTx is cleared.
  // IEPINT will be cleared when DAINT's out bits are cleared.
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009bc8:	e0eb      	b.n	8009da2 <handle_epin_ints+0x1ee>
  {
    xfer_ctl_t *xfer = XFER_CTL_BASE(n, TUSB_DIR_IN);
 8009bca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009bce:	015b      	lsls	r3, r3, #5
 8009bd0:	3310      	adds	r3, #16
 8009bd2:	4a79      	ldr	r2, [pc, #484]	; (8009db8 <handle_epin_ints+0x204>)
 8009bd4:	4413      	add	r3, r2
 8009bd6:	63bb      	str	r3, [r7, #56]	; 0x38

    if ( dev->DAINT & (1 << (USB_OTG_DAINT_IEPINT_Pos + n)) )
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009be0:	2101      	movs	r1, #1
 8009be2:	fa01 f202 	lsl.w	r2, r1, r2
 8009be6:	4013      	ands	r3, r2
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 80d5 	beq.w	8009d98 <handle_epin_ints+0x1e4>
    {
      // IN XFER complete (entire xfer).
      if ( in_ep[n].DIEPINT & USB_OTG_DIEPINT_XFRC )
 8009bee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009bf2:	015b      	lsls	r3, r3, #5
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d04a      	beq.n	8009c98 <handle_epin_ints+0xe4>
      {
        in_ep[n].DIEPINT = USB_OTG_DIEPINT_XFRC;
 8009c02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009c06:	015b      	lsls	r3, r3, #5
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if((n == 0) && ep0_pending[TUSB_DIR_IN]) {
 8009c10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10e      	bne.n	8009c36 <handle_epin_ints+0x82>
 8009c18:	4b68      	ldr	r3, [pc, #416]	; (8009dbc <handle_epin_ints+0x208>)
 8009c1a:	885b      	ldrh	r3, [r3, #2]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00a      	beq.n	8009c36 <handle_epin_ints+0x82>
          // Schedule another packet to be transmitted.
          edpt_schedule_packets(rhport, n, TUSB_DIR_IN, 1, ep0_pending[TUSB_DIR_IN]);
 8009c20:	4b66      	ldr	r3, [pc, #408]	; (8009dbc <handle_epin_ints+0x208>)
 8009c22:	885b      	ldrh	r3, [r3, #2]
 8009c24:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8009c28:	7bf8      	ldrb	r0, [r7, #15]
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f7fe fffa 	bl	8008c28 <edpt_schedule_packets>
 8009c34:	e030      	b.n	8009c98 <handle_epin_ints+0xe4>
        } else {
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8009c36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009c3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c3e:	b2d9      	uxtb	r1, r3
 8009c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c42:	891b      	ldrh	r3, [r3, #8]
 8009c44:	461a      	mov	r2, r3
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
 8009c48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009c52:	627a      	str	r2, [r7, #36]	; 0x24
 8009c54:	2300      	movs	r3, #0
 8009c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8009c60:	f107 0310 	add.w	r3, r7, #16
 8009c64:	2200      	movs	r2, #0
 8009c66:	601a      	str	r2, [r3, #0]
 8009c68:	605a      	str	r2, [r3, #4]
 8009c6a:	609a      	str	r2, [r3, #8]
 8009c6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009c70:	743b      	strb	r3, [r7, #16]
 8009c72:	2307      	movs	r3, #7
 8009c74:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 8009c76:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009c7a:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7e:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 8009c80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c84:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8009c86:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009c8a:	f107 0310 	add.w	r3, r7, #16
 8009c8e:	4611      	mov	r1, r2
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fd fef3 	bl	8007a7c <dcd_event_handler>
}
 8009c96:	bf00      	nop
        }
      }

      // XFER FIFO empty
      if ( (in_ep[n].DIEPINT & USB_OTG_DIEPINT_TXFE) && (dev->DIEPEMPMSK & (1 << n)) )
 8009c98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009c9c:	015b      	lsls	r3, r3, #5
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d075      	beq.n	8009d98 <handle_epin_ints+0x1e4>
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009cb4:	2101      	movs	r1, #1
 8009cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8009cba:	4013      	ands	r3, r2
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d06b      	beq.n	8009d98 <handle_epin_ints+0x1e4>
        // DIEPINT's TXFE bit is read-only, software cannot clear it.
        // It will only be cleared by hardware when written bytes is more than
        // - 64 bytes or
        // - Half of TX FIFO size (configured by DIEPTXF)

        uint16_t remaining_packets = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_PKTCNT_Msk) >> USB_OTG_DIEPTSIZ_PKTCNT_Pos;
 8009cc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009cc4:	015b      	lsls	r3, r3, #5
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	4413      	add	r3, r2
 8009cca:	691b      	ldr	r3, [r3, #16]
 8009ccc:	0cdb      	lsrs	r3, r3, #19
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cd4:	86fb      	strh	r3, [r7, #54]	; 0x36

        // Process every single packet (only whole packets can be written to fifo)
        for(uint16_t i = 0; i < remaining_packets; i++)
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009cda:	e042      	b.n	8009d62 <handle_epin_ints+0x1ae>
        {
          uint16_t const remaining_bytes = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos;
 8009cdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ce0:	015b      	lsls	r3, r3, #5
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	691b      	ldr	r3, [r3, #16]
 8009ce8:	86bb      	strh	r3, [r7, #52]	; 0x34

          // Packet can not be larger than ep max size
          uint16_t const packet_size = tu_min16(remaining_bytes, xfer->max_size);
 8009cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cec:	895a      	ldrh	r2, [r3, #10]
 8009cee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009cf0:	843b      	strh	r3, [r7, #32]
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	83fb      	strh	r3, [r7, #30]
 8009cf6:	8c3a      	ldrh	r2, [r7, #32]
 8009cf8:	8bfb      	ldrh	r3, [r7, #30]
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	bf28      	it	cs
 8009cfe:	4613      	movcs	r3, r2
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	867b      	strh	r3, [r7, #50]	; 0x32

          // It's only possible to write full packets into FIFO. Therefore DTXFSTS register of current
          // EP has to be checked if the buffer can take another WHOLE packet
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8009d04:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009d06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009d0a:	015b      	lsls	r3, r3, #5
 8009d0c:	6879      	ldr	r1, [r7, #4]
 8009d0e:	440b      	add	r3, r1
 8009d10:	699b      	ldr	r3, [r3, #24]
 8009d12:	0099      	lsls	r1, r3, #2
 8009d14:	4b2a      	ldr	r3, [pc, #168]	; (8009dc0 <handle_epin_ints+0x20c>)
 8009d16:	400b      	ands	r3, r1
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d827      	bhi.n	8009d6c <handle_epin_ints+0x1b8>

          // Push packet to Tx-FIFO
          if (xfer->ff)
 8009d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d00d      	beq.n	8009d40 <handle_epin_ints+0x18c>
          {
            usb_fifo_t tx_fifo = FIFO_BASE(rhport, n);
 8009d24:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009d28:	4b26      	ldr	r3, [pc, #152]	; (8009dc4 <handle_epin_ints+0x210>)
 8009d2a:	4413      	add	r3, r2
 8009d2c:	031b      	lsls	r3, r3, #12
 8009d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void *)(uintptr_t) tx_fifo, packet_size);
 8009d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009d36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7fc fef0 	bl	8006b1e <tu_fifo_read_n_const_addr_full_words>
 8009d3e:	e00d      	b.n	8009d5c <handle_epin_ints+0x1a8>
          }
          else
          {
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 8009d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009d46:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8009d4a:	7bf8      	ldrb	r0, [r7, #15]
 8009d4c:	f7ff fd6a 	bl	8009824 <write_fifo_packet>

            // Increment pointer to xfer data
            xfer->buffer += packet_size;
 8009d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009d56:	441a      	add	r2, r3
 8009d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5a:	601a      	str	r2, [r3, #0]
        for(uint16_t i = 0; i < remaining_packets; i++)
 8009d5c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009d5e:	3301      	adds	r3, #1
 8009d60:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009d62:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8009d64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d3b8      	bcc.n	8009cdc <handle_epin_ints+0x128>
 8009d6a:	e000      	b.n	8009d6e <handle_epin_ints+0x1ba>
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8009d6c:	bf00      	nop
          }
        }

        // Turn off TXFE if all bytes are written.
        if (((in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos) == 0)
 8009d6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009d72:	015b      	lsls	r3, r3, #5
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	4413      	add	r3, r2
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10a      	bne.n	8009d98 <handle_epin_ints+0x1e4>
        {
          dev->DIEPEMPMSK &= ~(1 << n);
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d86:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009d8a:	2101      	movs	r1, #1
 8009d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8009d90:	43d2      	mvns	r2, r2
 8009d92:	401a      	ands	r2, r3
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	635a      	str	r2, [r3, #52]	; 0x34
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 8009d98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009da2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009da6:	2b08      	cmp	r3, #8
 8009da8:	f67f af0f 	bls.w	8009bca <handle_epin_ints+0x16>
        }
      }
    }
  }
}
 8009dac:	bf00      	nop
 8009dae:	bf00      	nop
 8009db0:	3740      	adds	r7, #64	; 0x40
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	24001b00 	.word	0x24001b00
 8009dbc:	24001c20 	.word	0x24001c20
 8009dc0:	0003fffc 	.word	0x0003fffc
 8009dc4:	00040041 	.word	0x00040041

08009dc8 <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b09c      	sub	sp, #112	; 0x70
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	4603      	mov	r3, r0
 8009dd0:	71fb      	strb	r3, [r7, #7]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8009dd2:	4b9f      	ldr	r3, [pc, #636]	; (800a050 <dcd_int_handler+0x288>)
 8009dd4:	66fb      	str	r3, [r7, #108]	; 0x6c
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8009dd6:	4b9f      	ldr	r3, [pc, #636]	; (800a054 <dcd_int_handler+0x28c>)
 8009dd8:	66bb      	str	r3, [r7, #104]	; 0x68
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8009dda:	4b9f      	ldr	r3, [pc, #636]	; (800a058 <dcd_int_handler+0x290>)
 8009ddc:	667b      	str	r3, [r7, #100]	; 0x64
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8009dde:	4b9f      	ldr	r3, [pc, #636]	; (800a05c <dcd_int_handler+0x294>)
 8009de0:	663b      	str	r3, [r7, #96]	; 0x60

  uint32_t const int_status = usb_otg->GINTSTS & usb_otg->GINTMSK;
 8009de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009de4:	695a      	ldr	r2, [r3, #20]
 8009de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	4013      	ands	r3, r2
 8009dec:	65fb      	str	r3, [r7, #92]	; 0x5c

  if(int_status & USB_OTG_GINTSTS_USBRST)
 8009dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d007      	beq.n	8009e08 <dcd_int_handler+0x40>
  {
    // USBRST is start of reset.
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBRST;
 8009df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dfa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009dfe:	615a      	str	r2, [r3, #20]
    bus_reset(rhport);
 8009e00:	79fb      	ldrb	r3, [r7, #7]
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fe fdcc 	bl	80089a0 <bus_reset>
  }

  if(int_status & USB_OTG_GINTSTS_ENUMDNE)
 8009e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d031      	beq.n	8009e76 <dcd_int_handler+0xae>
  {
    // ENUMDNE is the end of reset where speed of the link is detected

    usb_otg->GINTSTS = USB_OTG_GINTSTS_ENUMDNE;
 8009e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009e18:	615a      	str	r2, [r3, #20]

    tusb_speed_t const speed = get_speed(rhport);
 8009e1a:	79fb      	ldrb	r3, [r7, #7]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7fe febb 	bl	8008b98 <get_speed>
 8009e22:	4603      	mov	r3, r0
 8009e24:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

    set_turnaround(usb_otg, speed);
 8009e28:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009e30:	f7fe fe30 	bl	8008a94 <set_turnaround>
 8009e34:	79fb      	ldrb	r3, [r7, #7]
 8009e36:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8009e3a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009e3e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8009e42:	2301      	movs	r3, #1
 8009e44:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8009e48:	f107 0314 	add.w	r3, r7, #20
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	601a      	str	r2, [r3, #0]
 8009e50:	605a      	str	r2, [r3, #4]
 8009e52:	609a      	str	r2, [r3, #8]
 8009e54:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009e58:	753b      	strb	r3, [r7, #20]
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	757b      	strb	r3, [r7, #21]
  event.bus_reset.speed = speed;
 8009e5e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8009e62:	763b      	strb	r3, [r7, #24]
  dcd_event_handler(&event, in_isr);
 8009e64:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8009e68:	f107 0314 	add.w	r3, r7, #20
 8009e6c:	4611      	mov	r1, r2
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7fd fe04 	bl	8007a7c <dcd_event_handler>
}
 8009e74:	bf00      	nop
    dcd_event_bus_reset(rhport, speed, true);
  }

  if(int_status & USB_OTG_GINTSTS_USBSUSP)
 8009e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d023      	beq.n	8009ec8 <dcd_int_handler+0x100>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBSUSP;
 8009e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e86:	615a      	str	r2, [r3, #20]
 8009e88:	79fb      	ldrb	r3, [r7, #7]
 8009e8a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8009e8e:	2304      	movs	r3, #4
 8009e90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009e94:	2301      	movs	r3, #1
 8009e96:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8009e9a:	f107 0320 	add.w	r3, r7, #32
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	601a      	str	r2, [r3, #0]
 8009ea2:	605a      	str	r2, [r3, #4]
 8009ea4:	609a      	str	r2, [r3, #8]
 8009ea6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8009eaa:	f887 3020 	strb.w	r3, [r7, #32]
 8009eae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009eb2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  dcd_event_handler(&event, in_isr);
 8009eb6:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8009eba:	f107 0320 	add.w	r3, r7, #32
 8009ebe:	4611      	mov	r1, r2
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7fd fddb 	bl	8007a7c <dcd_event_handler>
}
 8009ec6:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if(int_status & USB_OTG_GINTSTS_WKUINT)
 8009ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	da23      	bge.n	8009f16 <dcd_int_handler+0x14e>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_WKUINT;
 8009ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ed0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ed4:	615a      	str	r2, [r3, #20]
 8009ed6:	79fb      	ldrb	r3, [r7, #7]
 8009ed8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8009edc:	2305      	movs	r3, #5
 8009ede:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8009ee8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009eec:	2200      	movs	r2, #0
 8009eee:	601a      	str	r2, [r3, #0]
 8009ef0:	605a      	str	r2, [r3, #4]
 8009ef2:	609a      	str	r2, [r3, #8]
 8009ef4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009ef8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8009efc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8009f00:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dcd_event_handler(&event, in_isr);
 8009f04:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8009f08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7fd fdb4 	bl	8007a7c <dcd_event_handler>
}
 8009f14:	bf00      	nop
  }

  // TODO check USB_OTG_GINTSTS_DISCINT for disconnect detection
  // if(int_status & USB_OTG_GINTSTS_DISCINT)

  if(int_status & USB_OTG_GINTSTS_OTGINT)
 8009f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f18:	f003 0304 	and.w	r3, r3, #4
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d028      	beq.n	8009f72 <dcd_int_handler+0x1aa>
  {
    // OTG INT bit is read-only
    uint32_t const otg_int = usb_otg->GOTGINT;
 8009f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	657b      	str	r3, [r7, #84]	; 0x54

    if (otg_int & USB_OTG_GOTGINT_SEDET)
 8009f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f28:	f003 0304 	and.w	r3, r3, #4
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d01d      	beq.n	8009f6c <dcd_int_handler+0x1a4>
 8009f30:	79fb      	ldrb	r3, [r7, #7]
 8009f32:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8009f36:	2302      	movs	r3, #2
 8009f38:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8009f42:	f107 0308 	add.w	r3, r7, #8
 8009f46:	2200      	movs	r2, #0
 8009f48:	601a      	str	r2, [r3, #0]
 8009f4a:	605a      	str	r2, [r3, #4]
 8009f4c:	609a      	str	r2, [r3, #8]
 8009f4e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8009f52:	723b      	strb	r3, [r7, #8]
 8009f54:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8009f58:	727b      	strb	r3, [r7, #9]
  dcd_event_handler(&event, in_isr);
 8009f5a:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8009f5e:	f107 0308 	add.w	r3, r7, #8
 8009f62:	4611      	mov	r1, r2
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7fd fd89 	bl	8007a7c <dcd_event_handler>
}
 8009f6a:	bf00      	nop
    {
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    usb_otg->GOTGINT = otg_int;
 8009f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f70:	605a      	str	r2, [r3, #4]
  }

  if(int_status & USB_OTG_GINTSTS_SOF)
 8009f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f74:	f003 0308 	and.w	r3, r3, #8
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d028      	beq.n	8009fce <dcd_int_handler+0x206>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_SOF;
 8009f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f7e:	2208      	movs	r2, #8
 8009f80:	615a      	str	r2, [r3, #20]

    // Disable SOF interrupt since currently only used for remote wakeup detection
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_SOFM;
 8009f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f84:	699b      	ldr	r3, [r3, #24]
 8009f86:	f023 0208 	bic.w	r2, r3, #8
 8009f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f8c:	619a      	str	r2, [r3, #24]
 8009f8e:	79fb      	ldrb	r3, [r7, #7]
 8009f90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009f94:	2303      	movs	r3, #3
 8009f96:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8009fa0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	601a      	str	r2, [r3, #0]
 8009fa8:	605a      	str	r2, [r3, #4]
 8009faa:	609a      	str	r2, [r3, #8]
 8009fac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009fb0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8009fb4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009fb8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  dcd_event_handler(&event, in_isr);
 8009fbc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009fc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009fc4:	4611      	mov	r1, r2
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7fd fd58 	bl	8007a7c <dcd_event_handler>
}
 8009fcc:	bf00      	nop

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if(int_status & USB_OTG_GINTSTS_RXFLVL)
 8009fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fd0:	f003 0310 	and.w	r3, r3, #16
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d021      	beq.n	800a01c <dcd_int_handler+0x254>
  {
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_RXFLVLM;
 8009fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	f023 0210 	bic.w	r2, r3, #16
 8009fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fe2:	619a      	str	r2, [r3, #24]

    // Loop until all available packets were handled
    do
    {
      handle_rxflvl_ints(rhport, out_ep);
 8009fe4:	79fb      	ldrb	r3, [r7, #7]
 8009fe6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7ff fc81 	bl	80098f0 <handle_rxflvl_ints>
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 8009fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ff0:	695b      	ldr	r3, [r3, #20]
 8009ff2:	f003 0310 	and.w	r3, r3, #16
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d1f4      	bne.n	8009fe4 <dcd_int_handler+0x21c>

    // Manage RX FIFO size
    if (_out_ep_closed)
 8009ffa:	4b19      	ldr	r3, [pc, #100]	; (800a060 <dcd_int_handler+0x298>)
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d006      	beq.n	800a010 <dcd_int_handler+0x248>
    {
      update_grxfsiz(rhport);
 800a002:	79fb      	ldrb	r3, [r7, #7]
 800a004:	4618      	mov	r0, r3
 800a006:	f7fe fc97 	bl	8008938 <update_grxfsiz>

      // Disable flag
      _out_ep_closed = false;
 800a00a:	4b15      	ldr	r3, [pc, #84]	; (800a060 <dcd_int_handler+0x298>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	701a      	strb	r2, [r3, #0]
    }

    usb_otg->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	f043 0210 	orr.w	r2, r3, #16
 800a018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a01a:	619a      	str	r2, [r3, #24]
  }

  // OUT endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_OEPINT)
 800a01c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a01e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a022:	2b00      	cmp	r3, #0
 800a024:	d005      	beq.n	800a032 <dcd_int_handler+0x26a>
  {
    // OEPINT is read-only
    handle_epout_ints(rhport, dev, out_ep);
 800a026:	79fb      	ldrb	r3, [r7, #7]
 800a028:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a02a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7ff fd07 	bl	8009a40 <handle_epout_ints>
  }

  // IN endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_IEPINT)
 800a032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a034:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d005      	beq.n	800a048 <dcd_int_handler+0x280>
  {
    // IEPINT bit read-only
    handle_epin_ints(rhport, dev, in_ep);
 800a03c:	79fb      	ldrb	r3, [r7, #7]
 800a03e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a040:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a042:	4618      	mov	r0, r3
 800a044:	f7ff fdb6 	bl	8009bb4 <handle_epin_ints>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & USB_OTG_GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG2("      IISOIXFR!\r\n");
  //  }
}
 800a048:	bf00      	nop
 800a04a:	3770      	adds	r7, #112	; 0x70
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	40040000 	.word	0x40040000
 800a054:	40040800 	.word	0x40040800
 800a058:	40040b00 	.word	0x40040b00
 800a05c:	40040900 	.word	0x40040900
 800a060:	24001c26 	.word	0x24001c26

0800a064 <tusb_init>:
//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+

bool tusb_init(void)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
#if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
  // init device stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
 800a06a:	2001      	movs	r0, #1
 800a06c:	f7fc fe60 	bl	8006d30 <tud_init>
 800a070:	4603      	mov	r3, r0
 800a072:	f083 0301 	eor.w	r3, r3, #1
 800a076:	b2db      	uxtb	r3, r3
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00a      	beq.n	800a092 <tusb_init+0x2e>
 800a07c:	4b07      	ldr	r3, [pc, #28]	; (800a09c <tusb_init+0x38>)
 800a07e:	607b      	str	r3, [r7, #4]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 0301 	and.w	r3, r3, #1
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d000      	beq.n	800a08e <tusb_init+0x2a>
 800a08c:	be00      	bkpt	0x0000
 800a08e:	2300      	movs	r3, #0
 800a090:	e000      	b.n	800a094 <tusb_init+0x30>
#if CFG_TUH_ENABLED && defined(TUH_OPT_RHPORT)
  // init host stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) );
#endif

  return true;
 800a092:	2301      	movs	r3, #1
}
 800a094:	4618      	mov	r0, r3
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	e000edf0 	.word	0xe000edf0

0800a0a0 <tu_edpt_claim>:
//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d106      	bne.n	800a0c6 <tu_edpt_claim+0x26>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d001      	beq.n	800a0ca <tu_edpt_claim+0x2a>
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	e01e      	b.n	800a108 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d108      	bne.n	800a0ea <tu_edpt_claim+0x4a>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d101      	bne.n	800a0ea <tu_edpt_claim+0x4a>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e000      	b.n	800a0ec <tu_edpt_claim+0x4c>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	73fb      	strb	r3, [r7, #15]
 800a0ee:	7bfb      	ldrb	r3, [r7, #15]
 800a0f0:	f003 0301 	and.w	r3, r3, #1
 800a0f4:	73fb      	strb	r3, [r7, #15]
  if (available)
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d004      	beq.n	800a106 <tu_edpt_claim+0x66>
  {
    ep_state->claimed = 1;
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	7813      	ldrb	r3, [r2, #0]
 800a100:	f043 0304 	orr.w	r3, r3, #4
 800a104:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return available;
 800a106:	7bfb      	ldrb	r3, [r7, #15]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3714      	adds	r7, #20
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 800a114:	b480      	push	{r7}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  (void) mutex;

  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a126:	b2db      	uxtb	r3, r3
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d108      	bne.n	800a13e <tu_edpt_release+0x2a>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a134:	b2db      	uxtb	r3, r3
 800a136:	2b00      	cmp	r3, #0
 800a138:	d101      	bne.n	800a13e <tu_edpt_release+0x2a>
 800a13a:	2301      	movs	r3, #1
 800a13c:	e000      	b.n	800a140 <tu_edpt_release+0x2c>
 800a13e:	2300      	movs	r3, #0
 800a140:	73fb      	strb	r3, [r7, #15]
 800a142:	7bfb      	ldrb	r3, [r7, #15]
 800a144:	f003 0301 	and.w	r3, r3, #1
 800a148:	73fb      	strb	r3, [r7, #15]
  if (ret)
 800a14a:	7bfb      	ldrb	r3, [r7, #15]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d004      	beq.n	800a15a <tu_edpt_release+0x46>
  {
    ep_state->claimed = 0;
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	7813      	ldrb	r3, [r2, #0]
 800a154:	f36f 0382 	bfc	r3, #2, #1
 800a158:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return ret;
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3714      	adds	r7, #20
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 800a168:	b480      	push	{r7}
 800a16a:	b08b      	sub	sp, #44	; 0x2c
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	460b      	mov	r3, r1
 800a172:	70fb      	strb	r3, [r7, #3]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	889b      	ldrh	r3, [r3, #4]
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a182:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800a184:	84fb      	strh	r3, [r7, #38]	; 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	78db      	ldrb	r3, [r3, #3]
 800a18a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	2b03      	cmp	r3, #3
 800a192:	d03e      	beq.n	800a212 <tu_edpt_validate+0xaa>
 800a194:	2b03      	cmp	r3, #3
 800a196:	dc53      	bgt.n	800a240 <tu_edpt_validate+0xd8>
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d002      	beq.n	800a1a2 <tu_edpt_validate+0x3a>
 800a19c:	2b02      	cmp	r3, #2
 800a19e:	d018      	beq.n	800a1d2 <tu_edpt_validate+0x6a>
 800a1a0:	e04e      	b.n	800a240 <tu_edpt_validate+0xd8>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800a1a2:	78fb      	ldrb	r3, [r7, #3]
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d102      	bne.n	800a1ae <tu_edpt_validate+0x46>
 800a1a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1ac:	e001      	b.n	800a1b2 <tu_edpt_validate+0x4a>
 800a1ae:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800a1b2:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 800a1b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a1b6:	8afb      	ldrh	r3, [r7, #22]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d943      	bls.n	800a244 <tu_edpt_validate+0xdc>
 800a1bc:	4b27      	ldr	r3, [pc, #156]	; (800a25c <tu_edpt_validate+0xf4>)
 800a1be:	613b      	str	r3, [r7, #16]
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f003 0301 	and.w	r3, r3, #1
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d000      	beq.n	800a1ce <tu_edpt_validate+0x66>
 800a1cc:	be00      	bkpt	0x0000
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	e03e      	b.n	800a250 <tu_edpt_validate+0xe8>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 800a1d2:	78fb      	ldrb	r3, [r7, #3]
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	d10e      	bne.n	800a1f6 <tu_edpt_validate+0x8e>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 800a1d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1de:	d033      	beq.n	800a248 <tu_edpt_validate+0xe0>
 800a1e0:	4b1e      	ldr	r3, [pc, #120]	; (800a25c <tu_edpt_validate+0xf4>)
 800a1e2:	61bb      	str	r3, [r7, #24]
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 0301 	and.w	r3, r3, #1
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d000      	beq.n	800a1f2 <tu_edpt_validate+0x8a>
 800a1f0:	be00      	bkpt	0x0000
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	e02c      	b.n	800a250 <tu_edpt_validate+0xe8>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 800a1f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1f8:	2b40      	cmp	r3, #64	; 0x40
 800a1fa:	d925      	bls.n	800a248 <tu_edpt_validate+0xe0>
 800a1fc:	4b17      	ldr	r3, [pc, #92]	; (800a25c <tu_edpt_validate+0xf4>)
 800a1fe:	61fb      	str	r3, [r7, #28]
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 0301 	and.w	r3, r3, #1
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d000      	beq.n	800a20e <tu_edpt_validate+0xa6>
 800a20c:	be00      	bkpt	0x0000
 800a20e:	2300      	movs	r3, #0
 800a210:	e01e      	b.n	800a250 <tu_edpt_validate+0xe8>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800a212:	78fb      	ldrb	r3, [r7, #3]
 800a214:	2b02      	cmp	r3, #2
 800a216:	d102      	bne.n	800a21e <tu_edpt_validate+0xb6>
 800a218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a21c:	e000      	b.n	800a220 <tu_edpt_validate+0xb8>
 800a21e:	2340      	movs	r3, #64	; 0x40
 800a220:	84bb      	strh	r3, [r7, #36]	; 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800a222:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a224:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a226:	429a      	cmp	r2, r3
 800a228:	d910      	bls.n	800a24c <tu_edpt_validate+0xe4>
 800a22a:	4b0c      	ldr	r3, [pc, #48]	; (800a25c <tu_edpt_validate+0xf4>)
 800a22c:	623b      	str	r3, [r7, #32]
 800a22e:	6a3b      	ldr	r3, [r7, #32]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f003 0301 	and.w	r3, r3, #1
 800a236:	2b00      	cmp	r3, #0
 800a238:	d000      	beq.n	800a23c <tu_edpt_validate+0xd4>
 800a23a:	be00      	bkpt	0x0000
 800a23c:	2300      	movs	r3, #0
 800a23e:	e007      	b.n	800a250 <tu_edpt_validate+0xe8>
    }
    break;

    default: return false;
 800a240:	2300      	movs	r3, #0
 800a242:	e005      	b.n	800a250 <tu_edpt_validate+0xe8>
    break;
 800a244:	bf00      	nop
 800a246:	e002      	b.n	800a24e <tu_edpt_validate+0xe6>
    break;
 800a248:	bf00      	nop
 800a24a:	e000      	b.n	800a24e <tu_edpt_validate+0xe6>
    break;
 800a24c:	bf00      	nop
  }

  return true;
 800a24e:	2301      	movs	r3, #1
}
 800a250:	4618      	mov	r0, r3
 800a252:	372c      	adds	r7, #44	; 0x2c
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	e000edf0 	.word	0xe000edf0

0800a260 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 800a260:	b480      	push	{r7}
 800a262:	b08d      	sub	sp, #52	; 0x34
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	4611      	mov	r1, r2
 800a26c:	461a      	mov	r2, r3
 800a26e:	460b      	mov	r3, r1
 800a270:	80fb      	strh	r3, [r7, #6]
 800a272:	4613      	mov	r3, r2
 800a274:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800a27a:	88fb      	ldrh	r3, [r7, #6]
 800a27c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a27e:	4413      	add	r3, r2
 800a280:	62bb      	str	r3, [r7, #40]	; 0x28

  while( p_desc < desc_end )
 800a282:	e027      	b.n	800a2d4 <tu_edpt_bind_driver+0x74>
 800a284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a286:	623b      	str	r3, [r7, #32]
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800a288:	6a3b      	ldr	r3, [r7, #32]
 800a28a:	3301      	adds	r3, #1
 800a28c:	781b      	ldrb	r3, [r3, #0]
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 800a28e:	2b05      	cmp	r3, #5
 800a290:	d116      	bne.n	800a2c0 <tu_edpt_bind_driver+0x60>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800a292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a294:	789b      	ldrb	r3, [r3, #2]
 800a296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a29a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a29e:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a2a0:	7fbb      	ldrb	r3, [r7, #30]
 800a2a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2a6:	b2db      	uxtb	r3, r3

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800a2a8:	005b      	lsls	r3, r3, #1
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a2b2:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a2b4:	7ffa      	ldrb	r2, [r7, #31]
 800a2b6:	09d2      	lsrs	r2, r2, #7
 800a2b8:	b2d2      	uxtb	r2, r2
 800a2ba:	4611      	mov	r1, r2
 800a2bc:	797a      	ldrb	r2, [r7, #5]
 800a2be:	545a      	strb	r2, [r3, r1]
 800a2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c2:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 800a2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while( p_desc < desc_end )
 800a2d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d3d3      	bcc.n	800a284 <tu_edpt_bind_driver+0x24>
  }
}
 800a2dc:	bf00      	nop
 800a2de:	bf00      	nop
 800a2e0:	3734      	adds	r7, #52	; 0x34
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
	...

0800a2ec <__libc_init_array>:
 800a2ec:	b570      	push	{r4, r5, r6, lr}
 800a2ee:	4d0d      	ldr	r5, [pc, #52]	; (800a324 <__libc_init_array+0x38>)
 800a2f0:	4c0d      	ldr	r4, [pc, #52]	; (800a328 <__libc_init_array+0x3c>)
 800a2f2:	1b64      	subs	r4, r4, r5
 800a2f4:	10a4      	asrs	r4, r4, #2
 800a2f6:	2600      	movs	r6, #0
 800a2f8:	42a6      	cmp	r6, r4
 800a2fa:	d109      	bne.n	800a310 <__libc_init_array+0x24>
 800a2fc:	4d0b      	ldr	r5, [pc, #44]	; (800a32c <__libc_init_array+0x40>)
 800a2fe:	4c0c      	ldr	r4, [pc, #48]	; (800a330 <__libc_init_array+0x44>)
 800a300:	f000 fe24 	bl	800af4c <_init>
 800a304:	1b64      	subs	r4, r4, r5
 800a306:	10a4      	asrs	r4, r4, #2
 800a308:	2600      	movs	r6, #0
 800a30a:	42a6      	cmp	r6, r4
 800a30c:	d105      	bne.n	800a31a <__libc_init_array+0x2e>
 800a30e:	bd70      	pop	{r4, r5, r6, pc}
 800a310:	f855 3b04 	ldr.w	r3, [r5], #4
 800a314:	4798      	blx	r3
 800a316:	3601      	adds	r6, #1
 800a318:	e7ee      	b.n	800a2f8 <__libc_init_array+0xc>
 800a31a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a31e:	4798      	blx	r3
 800a320:	3601      	adds	r6, #1
 800a322:	e7f2      	b.n	800a30a <__libc_init_array+0x1e>
 800a324:	0800b398 	.word	0x0800b398
 800a328:	0800b398 	.word	0x0800b398
 800a32c:	0800b398 	.word	0x0800b398
 800a330:	0800b39c 	.word	0x0800b39c

0800a334 <memcpy>:
 800a334:	440a      	add	r2, r1
 800a336:	4291      	cmp	r1, r2
 800a338:	f100 33ff 	add.w	r3, r0, #4294967295
 800a33c:	d100      	bne.n	800a340 <memcpy+0xc>
 800a33e:	4770      	bx	lr
 800a340:	b510      	push	{r4, lr}
 800a342:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a346:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a34a:	4291      	cmp	r1, r2
 800a34c:	d1f9      	bne.n	800a342 <memcpy+0xe>
 800a34e:	bd10      	pop	{r4, pc}

0800a350 <memset>:
 800a350:	4402      	add	r2, r0
 800a352:	4603      	mov	r3, r0
 800a354:	4293      	cmp	r3, r2
 800a356:	d100      	bne.n	800a35a <memset+0xa>
 800a358:	4770      	bx	lr
 800a35a:	f803 1b01 	strb.w	r1, [r3], #1
 800a35e:	e7f9      	b.n	800a354 <memset+0x4>

0800a360 <sin>:
 800a360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a362:	eeb0 7b40 	vmov.f64	d7, d0
 800a366:	ee17 3a90 	vmov	r3, s15
 800a36a:	4a21      	ldr	r2, [pc, #132]	; (800a3f0 <sin+0x90>)
 800a36c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a370:	4293      	cmp	r3, r2
 800a372:	dc07      	bgt.n	800a384 <sin+0x24>
 800a374:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800a3e8 <sin+0x88>
 800a378:	2000      	movs	r0, #0
 800a37a:	b005      	add	sp, #20
 800a37c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a380:	f000 bc82 	b.w	800ac88 <__kernel_sin>
 800a384:	4a1b      	ldr	r2, [pc, #108]	; (800a3f4 <sin+0x94>)
 800a386:	4293      	cmp	r3, r2
 800a388:	dd04      	ble.n	800a394 <sin+0x34>
 800a38a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800a38e:	b005      	add	sp, #20
 800a390:	f85d fb04 	ldr.w	pc, [sp], #4
 800a394:	4668      	mov	r0, sp
 800a396:	f000 f82f 	bl	800a3f8 <__ieee754_rem_pio2>
 800a39a:	f000 0003 	and.w	r0, r0, #3
 800a39e:	2801      	cmp	r0, #1
 800a3a0:	d00a      	beq.n	800a3b8 <sin+0x58>
 800a3a2:	2802      	cmp	r0, #2
 800a3a4:	d00f      	beq.n	800a3c6 <sin+0x66>
 800a3a6:	b9c0      	cbnz	r0, 800a3da <sin+0x7a>
 800a3a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a3ac:	ed9d 0b00 	vldr	d0, [sp]
 800a3b0:	2001      	movs	r0, #1
 800a3b2:	f000 fc69 	bl	800ac88 <__kernel_sin>
 800a3b6:	e7ea      	b.n	800a38e <sin+0x2e>
 800a3b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a3bc:	ed9d 0b00 	vldr	d0, [sp]
 800a3c0:	f000 f95e 	bl	800a680 <__kernel_cos>
 800a3c4:	e7e3      	b.n	800a38e <sin+0x2e>
 800a3c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a3ca:	ed9d 0b00 	vldr	d0, [sp]
 800a3ce:	2001      	movs	r0, #1
 800a3d0:	f000 fc5a 	bl	800ac88 <__kernel_sin>
 800a3d4:	eeb1 0b40 	vneg.f64	d0, d0
 800a3d8:	e7d9      	b.n	800a38e <sin+0x2e>
 800a3da:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a3de:	ed9d 0b00 	vldr	d0, [sp]
 800a3e2:	f000 f94d 	bl	800a680 <__kernel_cos>
 800a3e6:	e7f5      	b.n	800a3d4 <sin+0x74>
	...
 800a3f0:	3fe921fb 	.word	0x3fe921fb
 800a3f4:	7fefffff 	.word	0x7fefffff

0800a3f8 <__ieee754_rem_pio2>:
 800a3f8:	b570      	push	{r4, r5, r6, lr}
 800a3fa:	eeb0 7b40 	vmov.f64	d7, d0
 800a3fe:	ee17 5a90 	vmov	r5, s15
 800a402:	4b99      	ldr	r3, [pc, #612]	; (800a668 <__ieee754_rem_pio2+0x270>)
 800a404:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a408:	429e      	cmp	r6, r3
 800a40a:	b088      	sub	sp, #32
 800a40c:	4604      	mov	r4, r0
 800a40e:	dc07      	bgt.n	800a420 <__ieee754_rem_pio2+0x28>
 800a410:	2200      	movs	r2, #0
 800a412:	2300      	movs	r3, #0
 800a414:	ed84 0b00 	vstr	d0, [r4]
 800a418:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a41c:	2000      	movs	r0, #0
 800a41e:	e01b      	b.n	800a458 <__ieee754_rem_pio2+0x60>
 800a420:	4b92      	ldr	r3, [pc, #584]	; (800a66c <__ieee754_rem_pio2+0x274>)
 800a422:	429e      	cmp	r6, r3
 800a424:	dc3b      	bgt.n	800a49e <__ieee754_rem_pio2+0xa6>
 800a426:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800a42a:	2d00      	cmp	r5, #0
 800a42c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800a628 <__ieee754_rem_pio2+0x230>
 800a430:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800a434:	dd19      	ble.n	800a46a <__ieee754_rem_pio2+0x72>
 800a436:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a43a:	429e      	cmp	r6, r3
 800a43c:	d00e      	beq.n	800a45c <__ieee754_rem_pio2+0x64>
 800a43e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800a630 <__ieee754_rem_pio2+0x238>
 800a442:	ee37 5b46 	vsub.f64	d5, d7, d6
 800a446:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a44a:	ed84 5b00 	vstr	d5, [r4]
 800a44e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a452:	ed84 7b02 	vstr	d7, [r4, #8]
 800a456:	2001      	movs	r0, #1
 800a458:	b008      	add	sp, #32
 800a45a:	bd70      	pop	{r4, r5, r6, pc}
 800a45c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800a638 <__ieee754_rem_pio2+0x240>
 800a460:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a464:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800a640 <__ieee754_rem_pio2+0x248>
 800a468:	e7eb      	b.n	800a442 <__ieee754_rem_pio2+0x4a>
 800a46a:	429e      	cmp	r6, r3
 800a46c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800a470:	d00e      	beq.n	800a490 <__ieee754_rem_pio2+0x98>
 800a472:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800a630 <__ieee754_rem_pio2+0x238>
 800a476:	ee37 5b06 	vadd.f64	d5, d7, d6
 800a47a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a47e:	ed84 5b00 	vstr	d5, [r4]
 800a482:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a486:	f04f 30ff 	mov.w	r0, #4294967295
 800a48a:	ed84 7b02 	vstr	d7, [r4, #8]
 800a48e:	e7e3      	b.n	800a458 <__ieee754_rem_pio2+0x60>
 800a490:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800a638 <__ieee754_rem_pio2+0x240>
 800a494:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a498:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800a640 <__ieee754_rem_pio2+0x248>
 800a49c:	e7eb      	b.n	800a476 <__ieee754_rem_pio2+0x7e>
 800a49e:	4b74      	ldr	r3, [pc, #464]	; (800a670 <__ieee754_rem_pio2+0x278>)
 800a4a0:	429e      	cmp	r6, r3
 800a4a2:	dc70      	bgt.n	800a586 <__ieee754_rem_pio2+0x18e>
 800a4a4:	f000 fc48 	bl	800ad38 <fabs>
 800a4a8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800a4ac:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800a648 <__ieee754_rem_pio2+0x250>
 800a4b0:	eea0 7b06 	vfma.f64	d7, d0, d6
 800a4b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a4b8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800a4bc:	ee17 0a90 	vmov	r0, s15
 800a4c0:	eeb1 4b45 	vneg.f64	d4, d5
 800a4c4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800a628 <__ieee754_rem_pio2+0x230>
 800a4c8:	eea5 0b47 	vfms.f64	d0, d5, d7
 800a4cc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800a630 <__ieee754_rem_pio2+0x238>
 800a4d0:	281f      	cmp	r0, #31
 800a4d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a4d6:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a4da:	dc08      	bgt.n	800a4ee <__ieee754_rem_pio2+0xf6>
 800a4dc:	4b65      	ldr	r3, [pc, #404]	; (800a674 <__ieee754_rem_pio2+0x27c>)
 800a4de:	1e42      	subs	r2, r0, #1
 800a4e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e4:	42b3      	cmp	r3, r6
 800a4e6:	d002      	beq.n	800a4ee <__ieee754_rem_pio2+0xf6>
 800a4e8:	ed84 6b00 	vstr	d6, [r4]
 800a4ec:	e026      	b.n	800a53c <__ieee754_rem_pio2+0x144>
 800a4ee:	ee16 3a90 	vmov	r3, s13
 800a4f2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a4f6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800a4fa:	2b10      	cmp	r3, #16
 800a4fc:	ea4f 5226 	mov.w	r2, r6, asr #20
 800a500:	ddf2      	ble.n	800a4e8 <__ieee754_rem_pio2+0xf0>
 800a502:	eeb0 6b40 	vmov.f64	d6, d0
 800a506:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800a638 <__ieee754_rem_pio2+0x240>
 800a50a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800a640 <__ieee754_rem_pio2+0x248>
 800a50e:	eea4 6b07 	vfma.f64	d6, d4, d7
 800a512:	ee30 0b46 	vsub.f64	d0, d0, d6
 800a516:	eea4 0b07 	vfma.f64	d0, d4, d7
 800a51a:	eeb0 7b40 	vmov.f64	d7, d0
 800a51e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800a522:	ee36 3b47 	vsub.f64	d3, d6, d7
 800a526:	ee13 3a90 	vmov	r3, s7
 800a52a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a52e:	1ad3      	subs	r3, r2, r3
 800a530:	2b31      	cmp	r3, #49	; 0x31
 800a532:	dc17      	bgt.n	800a564 <__ieee754_rem_pio2+0x16c>
 800a534:	eeb0 0b46 	vmov.f64	d0, d6
 800a538:	ed84 3b00 	vstr	d3, [r4]
 800a53c:	ed94 6b00 	vldr	d6, [r4]
 800a540:	2d00      	cmp	r5, #0
 800a542:	ee30 0b46 	vsub.f64	d0, d0, d6
 800a546:	ee30 0b47 	vsub.f64	d0, d0, d7
 800a54a:	ed84 0b02 	vstr	d0, [r4, #8]
 800a54e:	da83      	bge.n	800a458 <__ieee754_rem_pio2+0x60>
 800a550:	eeb1 6b46 	vneg.f64	d6, d6
 800a554:	eeb1 0b40 	vneg.f64	d0, d0
 800a558:	ed84 6b00 	vstr	d6, [r4]
 800a55c:	ed84 0b02 	vstr	d0, [r4, #8]
 800a560:	4240      	negs	r0, r0
 800a562:	e779      	b.n	800a458 <__ieee754_rem_pio2+0x60>
 800a564:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800a650 <__ieee754_rem_pio2+0x258>
 800a568:	eeb0 0b46 	vmov.f64	d0, d6
 800a56c:	eea4 0b03 	vfma.f64	d0, d4, d3
 800a570:	ee36 7b40 	vsub.f64	d7, d6, d0
 800a574:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800a658 <__ieee754_rem_pio2+0x260>
 800a578:	eea4 7b03 	vfma.f64	d7, d4, d3
 800a57c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800a580:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a584:	e7b0      	b.n	800a4e8 <__ieee754_rem_pio2+0xf0>
 800a586:	4b3c      	ldr	r3, [pc, #240]	; (800a678 <__ieee754_rem_pio2+0x280>)
 800a588:	429e      	cmp	r6, r3
 800a58a:	dd06      	ble.n	800a59a <__ieee754_rem_pio2+0x1a2>
 800a58c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800a590:	ed80 7b02 	vstr	d7, [r0, #8]
 800a594:	ed80 7b00 	vstr	d7, [r0]
 800a598:	e740      	b.n	800a41c <__ieee754_rem_pio2+0x24>
 800a59a:	1532      	asrs	r2, r6, #20
 800a59c:	ee10 0a10 	vmov	r0, s0
 800a5a0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800a5a4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800a5a8:	ec41 0b17 	vmov	d7, r0, r1
 800a5ac:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800a5b0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800a660 <__ieee754_rem_pio2+0x268>
 800a5b4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800a5b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a5bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a5c0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a5c4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800a5c8:	a902      	add	r1, sp, #8
 800a5ca:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800a5ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a5d2:	ed8d 6b04 	vstr	d6, [sp, #16]
 800a5d6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a5da:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a5de:	2603      	movs	r6, #3
 800a5e0:	4608      	mov	r0, r1
 800a5e2:	ed91 7b04 	vldr	d7, [r1, #16]
 800a5e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5ee:	4633      	mov	r3, r6
 800a5f0:	f1a1 0108 	sub.w	r1, r1, #8
 800a5f4:	f106 36ff 	add.w	r6, r6, #4294967295
 800a5f8:	d0f3      	beq.n	800a5e2 <__ieee754_rem_pio2+0x1ea>
 800a5fa:	4920      	ldr	r1, [pc, #128]	; (800a67c <__ieee754_rem_pio2+0x284>)
 800a5fc:	9101      	str	r1, [sp, #4]
 800a5fe:	2102      	movs	r1, #2
 800a600:	9100      	str	r1, [sp, #0]
 800a602:	4621      	mov	r1, r4
 800a604:	f000 f8a8 	bl	800a758 <__kernel_rem_pio2>
 800a608:	2d00      	cmp	r5, #0
 800a60a:	f6bf af25 	bge.w	800a458 <__ieee754_rem_pio2+0x60>
 800a60e:	ed94 7b00 	vldr	d7, [r4]
 800a612:	eeb1 7b47 	vneg.f64	d7, d7
 800a616:	ed84 7b00 	vstr	d7, [r4]
 800a61a:	ed94 7b02 	vldr	d7, [r4, #8]
 800a61e:	eeb1 7b47 	vneg.f64	d7, d7
 800a622:	ed84 7b02 	vstr	d7, [r4, #8]
 800a626:	e79b      	b.n	800a560 <__ieee754_rem_pio2+0x168>
 800a628:	54400000 	.word	0x54400000
 800a62c:	3ff921fb 	.word	0x3ff921fb
 800a630:	1a626331 	.word	0x1a626331
 800a634:	3dd0b461 	.word	0x3dd0b461
 800a638:	1a600000 	.word	0x1a600000
 800a63c:	3dd0b461 	.word	0x3dd0b461
 800a640:	2e037073 	.word	0x2e037073
 800a644:	3ba3198a 	.word	0x3ba3198a
 800a648:	6dc9c883 	.word	0x6dc9c883
 800a64c:	3fe45f30 	.word	0x3fe45f30
 800a650:	2e000000 	.word	0x2e000000
 800a654:	3ba3198a 	.word	0x3ba3198a
 800a658:	252049c1 	.word	0x252049c1
 800a65c:	397b839a 	.word	0x397b839a
 800a660:	00000000 	.word	0x00000000
 800a664:	41700000 	.word	0x41700000
 800a668:	3fe921fb 	.word	0x3fe921fb
 800a66c:	4002d97b 	.word	0x4002d97b
 800a670:	413921fb 	.word	0x413921fb
 800a674:	0800b1c0 	.word	0x0800b1c0
 800a678:	7fefffff 	.word	0x7fefffff
 800a67c:	0800b240 	.word	0x0800b240

0800a680 <__kernel_cos>:
 800a680:	ee10 1a90 	vmov	r1, s1
 800a684:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800a688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a68c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800a690:	da05      	bge.n	800a69e <__kernel_cos+0x1e>
 800a692:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800a696:	ee17 3a90 	vmov	r3, s15
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d03d      	beq.n	800a71a <__kernel_cos+0x9a>
 800a69e:	ee20 3b00 	vmul.f64	d3, d0, d0
 800a6a2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800a720 <__kernel_cos+0xa0>
 800a6a6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800a728 <__kernel_cos+0xa8>
 800a6aa:	eea3 6b07 	vfma.f64	d6, d3, d7
 800a6ae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800a730 <__kernel_cos+0xb0>
 800a6b2:	eea6 7b03 	vfma.f64	d7, d6, d3
 800a6b6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800a738 <__kernel_cos+0xb8>
 800a6ba:	eea7 6b03 	vfma.f64	d6, d7, d3
 800a6be:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800a740 <__kernel_cos+0xc0>
 800a6c2:	4b23      	ldr	r3, [pc, #140]	; (800a750 <__kernel_cos+0xd0>)
 800a6c4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800a6c8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800a748 <__kernel_cos+0xc8>
 800a6cc:	4299      	cmp	r1, r3
 800a6ce:	eea7 6b03 	vfma.f64	d6, d7, d3
 800a6d2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800a6d6:	ee26 5b03 	vmul.f64	d5, d6, d3
 800a6da:	ee23 7b07 	vmul.f64	d7, d3, d7
 800a6de:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800a6e2:	eea3 6b05 	vfma.f64	d6, d3, d5
 800a6e6:	dc04      	bgt.n	800a6f2 <__kernel_cos+0x72>
 800a6e8:	ee37 6b46 	vsub.f64	d6, d7, d6
 800a6ec:	ee34 0b46 	vsub.f64	d0, d4, d6
 800a6f0:	4770      	bx	lr
 800a6f2:	4b18      	ldr	r3, [pc, #96]	; (800a754 <__kernel_cos+0xd4>)
 800a6f4:	4299      	cmp	r1, r3
 800a6f6:	dc0d      	bgt.n	800a714 <__kernel_cos+0x94>
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800a6fe:	ec43 2b15 	vmov	d5, r2, r3
 800a702:	ee34 0b45 	vsub.f64	d0, d4, d5
 800a706:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a70a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a70e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800a712:	4770      	bx	lr
 800a714:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800a718:	e7f3      	b.n	800a702 <__kernel_cos+0x82>
 800a71a:	eeb0 0b44 	vmov.f64	d0, d4
 800a71e:	4770      	bx	lr
 800a720:	be8838d4 	.word	0xbe8838d4
 800a724:	bda8fae9 	.word	0xbda8fae9
 800a728:	bdb4b1c4 	.word	0xbdb4b1c4
 800a72c:	3e21ee9e 	.word	0x3e21ee9e
 800a730:	809c52ad 	.word	0x809c52ad
 800a734:	be927e4f 	.word	0xbe927e4f
 800a738:	19cb1590 	.word	0x19cb1590
 800a73c:	3efa01a0 	.word	0x3efa01a0
 800a740:	16c15177 	.word	0x16c15177
 800a744:	bf56c16c 	.word	0xbf56c16c
 800a748:	5555554c 	.word	0x5555554c
 800a74c:	3fa55555 	.word	0x3fa55555
 800a750:	3fd33332 	.word	0x3fd33332
 800a754:	3fe90000 	.word	0x3fe90000

0800a758 <__kernel_rem_pio2>:
 800a758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a75c:	ed2d 8b06 	vpush	{d8-d10}
 800a760:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800a764:	460f      	mov	r7, r1
 800a766:	9002      	str	r0, [sp, #8]
 800a768:	49c5      	ldr	r1, [pc, #788]	; (800aa80 <__kernel_rem_pio2+0x328>)
 800a76a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800a76c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800a770:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800a774:	9301      	str	r3, [sp, #4]
 800a776:	f112 0f14 	cmn.w	r2, #20
 800a77a:	bfa8      	it	ge
 800a77c:	2018      	movge	r0, #24
 800a77e:	f103 31ff 	add.w	r1, r3, #4294967295
 800a782:	bfb8      	it	lt
 800a784:	2000      	movlt	r0, #0
 800a786:	f06f 0417 	mvn.w	r4, #23
 800a78a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800aa68 <__kernel_rem_pio2+0x310>
 800a78e:	bfa4      	itt	ge
 800a790:	f1a2 0a03 	subge.w	sl, r2, #3
 800a794:	fb9a f0f0 	sdivge	r0, sl, r0
 800a798:	fb00 4404 	mla	r4, r0, r4, r4
 800a79c:	1a46      	subs	r6, r0, r1
 800a79e:	4414      	add	r4, r2
 800a7a0:	eb09 0c01 	add.w	ip, r9, r1
 800a7a4:	ad1a      	add	r5, sp, #104	; 0x68
 800a7a6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	4562      	cmp	r2, ip
 800a7ae:	dd10      	ble.n	800a7d2 <__kernel_rem_pio2+0x7a>
 800a7b0:	9a01      	ldr	r2, [sp, #4]
 800a7b2:	ab1a      	add	r3, sp, #104	; 0x68
 800a7b4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800a7b8:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800a7bc:	f04f 0c00 	mov.w	ip, #0
 800a7c0:	45cc      	cmp	ip, r9
 800a7c2:	dc26      	bgt.n	800a812 <__kernel_rem_pio2+0xba>
 800a7c4:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800aa68 <__kernel_rem_pio2+0x310>
 800a7c8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a7cc:	4616      	mov	r6, r2
 800a7ce:	2500      	movs	r5, #0
 800a7d0:	e015      	b.n	800a7fe <__kernel_rem_pio2+0xa6>
 800a7d2:	42d6      	cmn	r6, r2
 800a7d4:	d409      	bmi.n	800a7ea <__kernel_rem_pio2+0x92>
 800a7d6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800a7da:	ee07 3a90 	vmov	s15, r3
 800a7de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a7e2:	eca5 7b02 	vstmia	r5!, {d7}
 800a7e6:	3201      	adds	r2, #1
 800a7e8:	e7e0      	b.n	800a7ac <__kernel_rem_pio2+0x54>
 800a7ea:	eeb0 7b46 	vmov.f64	d7, d6
 800a7ee:	e7f8      	b.n	800a7e2 <__kernel_rem_pio2+0x8a>
 800a7f0:	ecb8 5b02 	vldmia	r8!, {d5}
 800a7f4:	ed96 6b00 	vldr	d6, [r6]
 800a7f8:	3501      	adds	r5, #1
 800a7fa:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a7fe:	428d      	cmp	r5, r1
 800a800:	f1a6 0608 	sub.w	r6, r6, #8
 800a804:	ddf4      	ble.n	800a7f0 <__kernel_rem_pio2+0x98>
 800a806:	ecaa 7b02 	vstmia	sl!, {d7}
 800a80a:	f10c 0c01 	add.w	ip, ip, #1
 800a80e:	3208      	adds	r2, #8
 800a810:	e7d6      	b.n	800a7c0 <__kernel_rem_pio2+0x68>
 800a812:	ab06      	add	r3, sp, #24
 800a814:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800aa70 <__kernel_rem_pio2+0x318>
 800a818:	ed9f ab97 	vldr	d10, [pc, #604]	; 800aa78 <__kernel_rem_pio2+0x320>
 800a81c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800a820:	9303      	str	r3, [sp, #12]
 800a822:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800a826:	464d      	mov	r5, r9
 800a828:	00eb      	lsls	r3, r5, #3
 800a82a:	9304      	str	r3, [sp, #16]
 800a82c:	ab92      	add	r3, sp, #584	; 0x248
 800a82e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800a832:	f10d 0b18 	add.w	fp, sp, #24
 800a836:	ab6a      	add	r3, sp, #424	; 0x1a8
 800a838:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800a83c:	465e      	mov	r6, fp
 800a83e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800a842:	4628      	mov	r0, r5
 800a844:	2800      	cmp	r0, #0
 800a846:	f1a2 0208 	sub.w	r2, r2, #8
 800a84a:	dc4c      	bgt.n	800a8e6 <__kernel_rem_pio2+0x18e>
 800a84c:	4620      	mov	r0, r4
 800a84e:	9105      	str	r1, [sp, #20]
 800a850:	f000 faf2 	bl	800ae38 <scalbn>
 800a854:	eeb0 8b40 	vmov.f64	d8, d0
 800a858:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800a85c:	ee28 0b00 	vmul.f64	d0, d8, d0
 800a860:	f000 fa76 	bl	800ad50 <floor>
 800a864:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800a868:	eea0 8b47 	vfms.f64	d8, d0, d7
 800a86c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800a870:	2c00      	cmp	r4, #0
 800a872:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800a876:	ee17 8a90 	vmov	r8, s15
 800a87a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800a87e:	9905      	ldr	r1, [sp, #20]
 800a880:	dd43      	ble.n	800a90a <__kernel_rem_pio2+0x1b2>
 800a882:	1e68      	subs	r0, r5, #1
 800a884:	ab06      	add	r3, sp, #24
 800a886:	f1c4 0c18 	rsb	ip, r4, #24
 800a88a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800a88e:	fa46 f20c 	asr.w	r2, r6, ip
 800a892:	4490      	add	r8, r2
 800a894:	fa02 f20c 	lsl.w	r2, r2, ip
 800a898:	1ab6      	subs	r6, r6, r2
 800a89a:	f1c4 0217 	rsb	r2, r4, #23
 800a89e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800a8a2:	4116      	asrs	r6, r2
 800a8a4:	2e00      	cmp	r6, #0
 800a8a6:	dd3f      	ble.n	800a928 <__kernel_rem_pio2+0x1d0>
 800a8a8:	f04f 0c00 	mov.w	ip, #0
 800a8ac:	f108 0801 	add.w	r8, r8, #1
 800a8b0:	4660      	mov	r0, ip
 800a8b2:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800a8b6:	4565      	cmp	r5, ip
 800a8b8:	dc6e      	bgt.n	800a998 <__kernel_rem_pio2+0x240>
 800a8ba:	2c00      	cmp	r4, #0
 800a8bc:	dd04      	ble.n	800a8c8 <__kernel_rem_pio2+0x170>
 800a8be:	2c01      	cmp	r4, #1
 800a8c0:	d07f      	beq.n	800a9c2 <__kernel_rem_pio2+0x26a>
 800a8c2:	2c02      	cmp	r4, #2
 800a8c4:	f000 8087 	beq.w	800a9d6 <__kernel_rem_pio2+0x27e>
 800a8c8:	2e02      	cmp	r6, #2
 800a8ca:	d12d      	bne.n	800a928 <__kernel_rem_pio2+0x1d0>
 800a8cc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a8d0:	ee30 8b48 	vsub.f64	d8, d0, d8
 800a8d4:	b340      	cbz	r0, 800a928 <__kernel_rem_pio2+0x1d0>
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	9105      	str	r1, [sp, #20]
 800a8da:	f000 faad 	bl	800ae38 <scalbn>
 800a8de:	9905      	ldr	r1, [sp, #20]
 800a8e0:	ee38 8b40 	vsub.f64	d8, d8, d0
 800a8e4:	e020      	b.n	800a928 <__kernel_rem_pio2+0x1d0>
 800a8e6:	ee20 7b09 	vmul.f64	d7, d0, d9
 800a8ea:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800a8ee:	3801      	subs	r0, #1
 800a8f0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800a8f4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800a8f8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800a8fc:	eca6 0a01 	vstmia	r6!, {s0}
 800a900:	ed92 0b00 	vldr	d0, [r2]
 800a904:	ee37 0b00 	vadd.f64	d0, d7, d0
 800a908:	e79c      	b.n	800a844 <__kernel_rem_pio2+0xec>
 800a90a:	d105      	bne.n	800a918 <__kernel_rem_pio2+0x1c0>
 800a90c:	1e6a      	subs	r2, r5, #1
 800a90e:	ab06      	add	r3, sp, #24
 800a910:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800a914:	15f6      	asrs	r6, r6, #23
 800a916:	e7c5      	b.n	800a8a4 <__kernel_rem_pio2+0x14c>
 800a918:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800a91c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a924:	da36      	bge.n	800a994 <__kernel_rem_pio2+0x23c>
 800a926:	2600      	movs	r6, #0
 800a928:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a930:	f040 80aa 	bne.w	800aa88 <__kernel_rem_pio2+0x330>
 800a934:	f105 3bff 	add.w	fp, r5, #4294967295
 800a938:	4658      	mov	r0, fp
 800a93a:	2200      	movs	r2, #0
 800a93c:	4548      	cmp	r0, r9
 800a93e:	da52      	bge.n	800a9e6 <__kernel_rem_pio2+0x28e>
 800a940:	2a00      	cmp	r2, #0
 800a942:	f000 8081 	beq.w	800aa48 <__kernel_rem_pio2+0x2f0>
 800a946:	ab06      	add	r3, sp, #24
 800a948:	3c18      	subs	r4, #24
 800a94a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	f000 8087 	beq.w	800aa62 <__kernel_rem_pio2+0x30a>
 800a954:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a958:	4620      	mov	r0, r4
 800a95a:	f000 fa6d 	bl	800ae38 <scalbn>
 800a95e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a962:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800aa70 <__kernel_rem_pio2+0x318>
 800a966:	a96a      	add	r1, sp, #424	; 0x1a8
 800a968:	f103 0208 	add.w	r2, r3, #8
 800a96c:	1888      	adds	r0, r1, r2
 800a96e:	4659      	mov	r1, fp
 800a970:	2900      	cmp	r1, #0
 800a972:	f280 80b7 	bge.w	800aae4 <__kernel_rem_pio2+0x38c>
 800a976:	4659      	mov	r1, fp
 800a978:	2900      	cmp	r1, #0
 800a97a:	f2c0 80d5 	blt.w	800ab28 <__kernel_rem_pio2+0x3d0>
 800a97e:	a86a      	add	r0, sp, #424	; 0x1a8
 800a980:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800a984:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800aa68 <__kernel_rem_pio2+0x310>
 800a988:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800aa84 <__kernel_rem_pio2+0x32c>
 800a98c:	2400      	movs	r4, #0
 800a98e:	ebab 0001 	sub.w	r0, fp, r1
 800a992:	e0be      	b.n	800ab12 <__kernel_rem_pio2+0x3ba>
 800a994:	2602      	movs	r6, #2
 800a996:	e787      	b.n	800a8a8 <__kernel_rem_pio2+0x150>
 800a998:	f8db 2000 	ldr.w	r2, [fp]
 800a99c:	b958      	cbnz	r0, 800a9b6 <__kernel_rem_pio2+0x25e>
 800a99e:	b122      	cbz	r2, 800a9aa <__kernel_rem_pio2+0x252>
 800a9a0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800a9a4:	f8cb 2000 	str.w	r2, [fp]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	f10c 0c01 	add.w	ip, ip, #1
 800a9ae:	f10b 0b04 	add.w	fp, fp, #4
 800a9b2:	4610      	mov	r0, r2
 800a9b4:	e77f      	b.n	800a8b6 <__kernel_rem_pio2+0x15e>
 800a9b6:	ebae 0202 	sub.w	r2, lr, r2
 800a9ba:	f8cb 2000 	str.w	r2, [fp]
 800a9be:	4602      	mov	r2, r0
 800a9c0:	e7f3      	b.n	800a9aa <__kernel_rem_pio2+0x252>
 800a9c2:	f105 3cff 	add.w	ip, r5, #4294967295
 800a9c6:	ab06      	add	r3, sp, #24
 800a9c8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800a9cc:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800a9d0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800a9d4:	e778      	b.n	800a8c8 <__kernel_rem_pio2+0x170>
 800a9d6:	f105 3cff 	add.w	ip, r5, #4294967295
 800a9da:	ab06      	add	r3, sp, #24
 800a9dc:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800a9e0:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800a9e4:	e7f4      	b.n	800a9d0 <__kernel_rem_pio2+0x278>
 800a9e6:	ab06      	add	r3, sp, #24
 800a9e8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a9ec:	3801      	subs	r0, #1
 800a9ee:	431a      	orrs	r2, r3
 800a9f0:	e7a4      	b.n	800a93c <__kernel_rem_pio2+0x1e4>
 800a9f2:	f10c 0c01 	add.w	ip, ip, #1
 800a9f6:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	d0f9      	beq.n	800a9f2 <__kernel_rem_pio2+0x29a>
 800a9fe:	9b04      	ldr	r3, [sp, #16]
 800aa00:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800aa04:	eb0d 0203 	add.w	r2, sp, r3
 800aa08:	9b01      	ldr	r3, [sp, #4]
 800aa0a:	18e8      	adds	r0, r5, r3
 800aa0c:	ab1a      	add	r3, sp, #104	; 0x68
 800aa0e:	1c6e      	adds	r6, r5, #1
 800aa10:	3a98      	subs	r2, #152	; 0x98
 800aa12:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800aa16:	4465      	add	r5, ip
 800aa18:	42b5      	cmp	r5, r6
 800aa1a:	f6ff af05 	blt.w	800a828 <__kernel_rem_pio2+0xd0>
 800aa1e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800aa22:	f8dd e008 	ldr.w	lr, [sp, #8]
 800aa26:	ee07 3a90 	vmov	s15, r3
 800aa2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800aa2e:	f04f 0c00 	mov.w	ip, #0
 800aa32:	eca0 7b02 	vstmia	r0!, {d7}
 800aa36:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800aa68 <__kernel_rem_pio2+0x310>
 800aa3a:	4680      	mov	r8, r0
 800aa3c:	458c      	cmp	ip, r1
 800aa3e:	dd07      	ble.n	800aa50 <__kernel_rem_pio2+0x2f8>
 800aa40:	eca2 7b02 	vstmia	r2!, {d7}
 800aa44:	3601      	adds	r6, #1
 800aa46:	e7e7      	b.n	800aa18 <__kernel_rem_pio2+0x2c0>
 800aa48:	9a03      	ldr	r2, [sp, #12]
 800aa4a:	f04f 0c01 	mov.w	ip, #1
 800aa4e:	e7d2      	b.n	800a9f6 <__kernel_rem_pio2+0x29e>
 800aa50:	ecbe 5b02 	vldmia	lr!, {d5}
 800aa54:	ed38 6b02 	vldmdb	r8!, {d6}
 800aa58:	f10c 0c01 	add.w	ip, ip, #1
 800aa5c:	eea5 7b06 	vfma.f64	d7, d5, d6
 800aa60:	e7ec      	b.n	800aa3c <__kernel_rem_pio2+0x2e4>
 800aa62:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa66:	e76e      	b.n	800a946 <__kernel_rem_pio2+0x1ee>
	...
 800aa74:	3e700000 	.word	0x3e700000
 800aa78:	00000000 	.word	0x00000000
 800aa7c:	41700000 	.word	0x41700000
 800aa80:	0800b388 	.word	0x0800b388
 800aa84:	0800b348 	.word	0x0800b348
 800aa88:	4260      	negs	r0, r4
 800aa8a:	eeb0 0b48 	vmov.f64	d0, d8
 800aa8e:	f000 f9d3 	bl	800ae38 <scalbn>
 800aa92:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800ac70 <__kernel_rem_pio2+0x518>
 800aa96:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800aa9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa9e:	db18      	blt.n	800aad2 <__kernel_rem_pio2+0x37a>
 800aaa0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800ac78 <__kernel_rem_pio2+0x520>
 800aaa4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800aaa8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800aaac:	aa06      	add	r2, sp, #24
 800aaae:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800aab2:	eea5 0b46 	vfms.f64	d0, d5, d6
 800aab6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800aaba:	f105 0b01 	add.w	fp, r5, #1
 800aabe:	ee10 3a10 	vmov	r3, s0
 800aac2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800aac6:	ee17 3a10 	vmov	r3, s14
 800aaca:	3418      	adds	r4, #24
 800aacc:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800aad0:	e740      	b.n	800a954 <__kernel_rem_pio2+0x1fc>
 800aad2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800aad6:	aa06      	add	r2, sp, #24
 800aad8:	ee10 3a10 	vmov	r3, s0
 800aadc:	46ab      	mov	fp, r5
 800aade:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800aae2:	e737      	b.n	800a954 <__kernel_rem_pio2+0x1fc>
 800aae4:	ac06      	add	r4, sp, #24
 800aae6:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800aaea:	9401      	str	r4, [sp, #4]
 800aaec:	ee07 4a90 	vmov	s15, r4
 800aaf0:	3901      	subs	r1, #1
 800aaf2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800aaf6:	ee27 7b00 	vmul.f64	d7, d7, d0
 800aafa:	ee20 0b06 	vmul.f64	d0, d0, d6
 800aafe:	ed20 7b02 	vstmdb	r0!, {d7}
 800ab02:	e735      	b.n	800a970 <__kernel_rem_pio2+0x218>
 800ab04:	ecbc 5b02 	vldmia	ip!, {d5}
 800ab08:	ecb5 6b02 	vldmia	r5!, {d6}
 800ab0c:	3401      	adds	r4, #1
 800ab0e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ab12:	454c      	cmp	r4, r9
 800ab14:	dc01      	bgt.n	800ab1a <__kernel_rem_pio2+0x3c2>
 800ab16:	4284      	cmp	r4, r0
 800ab18:	ddf4      	ble.n	800ab04 <__kernel_rem_pio2+0x3ac>
 800ab1a:	ac42      	add	r4, sp, #264	; 0x108
 800ab1c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800ab20:	ed80 7b00 	vstr	d7, [r0]
 800ab24:	3901      	subs	r1, #1
 800ab26:	e727      	b.n	800a978 <__kernel_rem_pio2+0x220>
 800ab28:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800ab2a:	2902      	cmp	r1, #2
 800ab2c:	dc0a      	bgt.n	800ab44 <__kernel_rem_pio2+0x3ec>
 800ab2e:	2900      	cmp	r1, #0
 800ab30:	dc2c      	bgt.n	800ab8c <__kernel_rem_pio2+0x434>
 800ab32:	d045      	beq.n	800abc0 <__kernel_rem_pio2+0x468>
 800ab34:	f008 0007 	and.w	r0, r8, #7
 800ab38:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800ab3c:	ecbd 8b06 	vpop	{d8-d10}
 800ab40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab44:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800ab46:	2a03      	cmp	r2, #3
 800ab48:	d1f4      	bne.n	800ab34 <__kernel_rem_pio2+0x3dc>
 800ab4a:	aa42      	add	r2, sp, #264	; 0x108
 800ab4c:	4413      	add	r3, r2
 800ab4e:	461a      	mov	r2, r3
 800ab50:	4619      	mov	r1, r3
 800ab52:	4658      	mov	r0, fp
 800ab54:	2800      	cmp	r0, #0
 800ab56:	f1a1 0108 	sub.w	r1, r1, #8
 800ab5a:	dc54      	bgt.n	800ac06 <__kernel_rem_pio2+0x4ae>
 800ab5c:	4659      	mov	r1, fp
 800ab5e:	2901      	cmp	r1, #1
 800ab60:	f1a2 0208 	sub.w	r2, r2, #8
 800ab64:	dc5f      	bgt.n	800ac26 <__kernel_rem_pio2+0x4ce>
 800ab66:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800ac80 <__kernel_rem_pio2+0x528>
 800ab6a:	3308      	adds	r3, #8
 800ab6c:	f1bb 0f01 	cmp.w	fp, #1
 800ab70:	dc69      	bgt.n	800ac46 <__kernel_rem_pio2+0x4ee>
 800ab72:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800ab76:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800ab7a:	2e00      	cmp	r6, #0
 800ab7c:	d16a      	bne.n	800ac54 <__kernel_rem_pio2+0x4fc>
 800ab7e:	ed87 5b00 	vstr	d5, [r7]
 800ab82:	ed87 6b02 	vstr	d6, [r7, #8]
 800ab86:	ed87 7b04 	vstr	d7, [r7, #16]
 800ab8a:	e7d3      	b.n	800ab34 <__kernel_rem_pio2+0x3dc>
 800ab8c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800ac80 <__kernel_rem_pio2+0x528>
 800ab90:	ab42      	add	r3, sp, #264	; 0x108
 800ab92:	441a      	add	r2, r3
 800ab94:	465b      	mov	r3, fp
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	da26      	bge.n	800abe8 <__kernel_rem_pio2+0x490>
 800ab9a:	b35e      	cbz	r6, 800abf4 <__kernel_rem_pio2+0x49c>
 800ab9c:	eeb1 7b46 	vneg.f64	d7, d6
 800aba0:	ed87 7b00 	vstr	d7, [r7]
 800aba4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800aba8:	aa44      	add	r2, sp, #272	; 0x110
 800abaa:	2301      	movs	r3, #1
 800abac:	ee37 7b46 	vsub.f64	d7, d7, d6
 800abb0:	459b      	cmp	fp, r3
 800abb2:	da22      	bge.n	800abfa <__kernel_rem_pio2+0x4a2>
 800abb4:	b10e      	cbz	r6, 800abba <__kernel_rem_pio2+0x462>
 800abb6:	eeb1 7b47 	vneg.f64	d7, d7
 800abba:	ed87 7b02 	vstr	d7, [r7, #8]
 800abbe:	e7b9      	b.n	800ab34 <__kernel_rem_pio2+0x3dc>
 800abc0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800ac80 <__kernel_rem_pio2+0x528>
 800abc4:	ab42      	add	r3, sp, #264	; 0x108
 800abc6:	441a      	add	r2, r3
 800abc8:	f1bb 0f00 	cmp.w	fp, #0
 800abcc:	da05      	bge.n	800abda <__kernel_rem_pio2+0x482>
 800abce:	b10e      	cbz	r6, 800abd4 <__kernel_rem_pio2+0x47c>
 800abd0:	eeb1 7b47 	vneg.f64	d7, d7
 800abd4:	ed87 7b00 	vstr	d7, [r7]
 800abd8:	e7ac      	b.n	800ab34 <__kernel_rem_pio2+0x3dc>
 800abda:	ed32 6b02 	vldmdb	r2!, {d6}
 800abde:	f10b 3bff 	add.w	fp, fp, #4294967295
 800abe2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800abe6:	e7ef      	b.n	800abc8 <__kernel_rem_pio2+0x470>
 800abe8:	ed32 7b02 	vldmdb	r2!, {d7}
 800abec:	3b01      	subs	r3, #1
 800abee:	ee36 6b07 	vadd.f64	d6, d6, d7
 800abf2:	e7d0      	b.n	800ab96 <__kernel_rem_pio2+0x43e>
 800abf4:	eeb0 7b46 	vmov.f64	d7, d6
 800abf8:	e7d2      	b.n	800aba0 <__kernel_rem_pio2+0x448>
 800abfa:	ecb2 6b02 	vldmia	r2!, {d6}
 800abfe:	3301      	adds	r3, #1
 800ac00:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ac04:	e7d4      	b.n	800abb0 <__kernel_rem_pio2+0x458>
 800ac06:	ed91 7b00 	vldr	d7, [r1]
 800ac0a:	ed91 5b02 	vldr	d5, [r1, #8]
 800ac0e:	3801      	subs	r0, #1
 800ac10:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ac14:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ac18:	ed81 6b00 	vstr	d6, [r1]
 800ac1c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ac20:	ed81 7b02 	vstr	d7, [r1, #8]
 800ac24:	e796      	b.n	800ab54 <__kernel_rem_pio2+0x3fc>
 800ac26:	ed92 7b00 	vldr	d7, [r2]
 800ac2a:	ed92 5b02 	vldr	d5, [r2, #8]
 800ac2e:	3901      	subs	r1, #1
 800ac30:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ac34:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ac38:	ed82 6b00 	vstr	d6, [r2]
 800ac3c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ac40:	ed82 7b02 	vstr	d7, [r2, #8]
 800ac44:	e78b      	b.n	800ab5e <__kernel_rem_pio2+0x406>
 800ac46:	ed33 6b02 	vldmdb	r3!, {d6}
 800ac4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ac4e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ac52:	e78b      	b.n	800ab6c <__kernel_rem_pio2+0x414>
 800ac54:	eeb1 5b45 	vneg.f64	d5, d5
 800ac58:	eeb1 6b46 	vneg.f64	d6, d6
 800ac5c:	ed87 5b00 	vstr	d5, [r7]
 800ac60:	eeb1 7b47 	vneg.f64	d7, d7
 800ac64:	ed87 6b02 	vstr	d6, [r7, #8]
 800ac68:	e78d      	b.n	800ab86 <__kernel_rem_pio2+0x42e>
 800ac6a:	bf00      	nop
 800ac6c:	f3af 8000 	nop.w
 800ac70:	00000000 	.word	0x00000000
 800ac74:	41700000 	.word	0x41700000
 800ac78:	00000000 	.word	0x00000000
 800ac7c:	3e700000 	.word	0x3e700000
	...

0800ac88 <__kernel_sin>:
 800ac88:	ee10 3a90 	vmov	r3, s1
 800ac8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac90:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ac94:	da04      	bge.n	800aca0 <__kernel_sin+0x18>
 800ac96:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800ac9a:	ee17 3a90 	vmov	r3, s15
 800ac9e:	b35b      	cbz	r3, 800acf8 <__kernel_sin+0x70>
 800aca0:	ee20 6b00 	vmul.f64	d6, d0, d0
 800aca4:	ee20 5b06 	vmul.f64	d5, d0, d6
 800aca8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800ad00 <__kernel_sin+0x78>
 800acac:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ad08 <__kernel_sin+0x80>
 800acb0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800acb4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ad10 <__kernel_sin+0x88>
 800acb8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800acbc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ad18 <__kernel_sin+0x90>
 800acc0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800acc4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ad20 <__kernel_sin+0x98>
 800acc8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800accc:	b930      	cbnz	r0, 800acdc <__kernel_sin+0x54>
 800acce:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ad28 <__kernel_sin+0xa0>
 800acd2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800acd6:	eea4 0b05 	vfma.f64	d0, d4, d5
 800acda:	4770      	bx	lr
 800acdc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800ace0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ace4:	eea1 7b04 	vfma.f64	d7, d1, d4
 800ace8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800acec:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800ad30 <__kernel_sin+0xa8>
 800acf0:	eea5 1b07 	vfma.f64	d1, d5, d7
 800acf4:	ee30 0b41 	vsub.f64	d0, d0, d1
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	f3af 8000 	nop.w
 800ad00:	5acfd57c 	.word	0x5acfd57c
 800ad04:	3de5d93a 	.word	0x3de5d93a
 800ad08:	8a2b9ceb 	.word	0x8a2b9ceb
 800ad0c:	be5ae5e6 	.word	0xbe5ae5e6
 800ad10:	57b1fe7d 	.word	0x57b1fe7d
 800ad14:	3ec71de3 	.word	0x3ec71de3
 800ad18:	19c161d5 	.word	0x19c161d5
 800ad1c:	bf2a01a0 	.word	0xbf2a01a0
 800ad20:	1110f8a6 	.word	0x1110f8a6
 800ad24:	3f811111 	.word	0x3f811111
 800ad28:	55555549 	.word	0x55555549
 800ad2c:	bfc55555 	.word	0xbfc55555
 800ad30:	55555549 	.word	0x55555549
 800ad34:	3fc55555 	.word	0x3fc55555

0800ad38 <fabs>:
 800ad38:	ec51 0b10 	vmov	r0, r1, d0
 800ad3c:	ee10 2a10 	vmov	r2, s0
 800ad40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad44:	ec43 2b10 	vmov	d0, r2, r3
 800ad48:	4770      	bx	lr
 800ad4a:	0000      	movs	r0, r0
 800ad4c:	0000      	movs	r0, r0
	...

0800ad50 <floor>:
 800ad50:	ee10 1a90 	vmov	r1, s1
 800ad54:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ad58:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800ad5c:	2b13      	cmp	r3, #19
 800ad5e:	b530      	push	{r4, r5, lr}
 800ad60:	ee10 0a10 	vmov	r0, s0
 800ad64:	ee10 5a10 	vmov	r5, s0
 800ad68:	dc31      	bgt.n	800adce <floor+0x7e>
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	da15      	bge.n	800ad9a <floor+0x4a>
 800ad6e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800ae28 <floor+0xd8>
 800ad72:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ad76:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ad7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad7e:	dd07      	ble.n	800ad90 <floor+0x40>
 800ad80:	2900      	cmp	r1, #0
 800ad82:	da4e      	bge.n	800ae22 <floor+0xd2>
 800ad84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad88:	4318      	orrs	r0, r3
 800ad8a:	d001      	beq.n	800ad90 <floor+0x40>
 800ad8c:	4928      	ldr	r1, [pc, #160]	; (800ae30 <floor+0xe0>)
 800ad8e:	2000      	movs	r0, #0
 800ad90:	460b      	mov	r3, r1
 800ad92:	4602      	mov	r2, r0
 800ad94:	ec43 2b10 	vmov	d0, r2, r3
 800ad98:	e020      	b.n	800addc <floor+0x8c>
 800ad9a:	4a26      	ldr	r2, [pc, #152]	; (800ae34 <floor+0xe4>)
 800ad9c:	411a      	asrs	r2, r3
 800ad9e:	ea01 0402 	and.w	r4, r1, r2
 800ada2:	4304      	orrs	r4, r0
 800ada4:	d01a      	beq.n	800addc <floor+0x8c>
 800ada6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ae28 <floor+0xd8>
 800adaa:	ee30 0b07 	vadd.f64	d0, d0, d7
 800adae:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800adb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adb6:	ddeb      	ble.n	800ad90 <floor+0x40>
 800adb8:	2900      	cmp	r1, #0
 800adba:	bfbe      	ittt	lt
 800adbc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800adc0:	fa40 f303 	asrlt.w	r3, r0, r3
 800adc4:	18c9      	addlt	r1, r1, r3
 800adc6:	ea21 0102 	bic.w	r1, r1, r2
 800adca:	2000      	movs	r0, #0
 800adcc:	e7e0      	b.n	800ad90 <floor+0x40>
 800adce:	2b33      	cmp	r3, #51	; 0x33
 800add0:	dd05      	ble.n	800adde <floor+0x8e>
 800add2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800add6:	d101      	bne.n	800addc <floor+0x8c>
 800add8:	ee30 0b00 	vadd.f64	d0, d0, d0
 800addc:	bd30      	pop	{r4, r5, pc}
 800adde:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800ade2:	f04f 32ff 	mov.w	r2, #4294967295
 800ade6:	40e2      	lsrs	r2, r4
 800ade8:	4202      	tst	r2, r0
 800adea:	d0f7      	beq.n	800addc <floor+0x8c>
 800adec:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800ae28 <floor+0xd8>
 800adf0:	ee30 0b07 	vadd.f64	d0, d0, d7
 800adf4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800adf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adfc:	ddc8      	ble.n	800ad90 <floor+0x40>
 800adfe:	2900      	cmp	r1, #0
 800ae00:	da02      	bge.n	800ae08 <floor+0xb8>
 800ae02:	2b14      	cmp	r3, #20
 800ae04:	d103      	bne.n	800ae0e <floor+0xbe>
 800ae06:	3101      	adds	r1, #1
 800ae08:	ea20 0002 	bic.w	r0, r0, r2
 800ae0c:	e7c0      	b.n	800ad90 <floor+0x40>
 800ae0e:	2401      	movs	r4, #1
 800ae10:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ae14:	fa04 f303 	lsl.w	r3, r4, r3
 800ae18:	4418      	add	r0, r3
 800ae1a:	42a8      	cmp	r0, r5
 800ae1c:	bf38      	it	cc
 800ae1e:	1909      	addcc	r1, r1, r4
 800ae20:	e7f2      	b.n	800ae08 <floor+0xb8>
 800ae22:	2000      	movs	r0, #0
 800ae24:	4601      	mov	r1, r0
 800ae26:	e7b3      	b.n	800ad90 <floor+0x40>
 800ae28:	8800759c 	.word	0x8800759c
 800ae2c:	7e37e43c 	.word	0x7e37e43c
 800ae30:	bff00000 	.word	0xbff00000
 800ae34:	000fffff 	.word	0x000fffff

0800ae38 <scalbn>:
 800ae38:	ee10 1a90 	vmov	r1, s1
 800ae3c:	b510      	push	{r4, lr}
 800ae3e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800ae42:	b98c      	cbnz	r4, 800ae68 <scalbn+0x30>
 800ae44:	ee10 3a10 	vmov	r3, s0
 800ae48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ae4c:	430b      	orrs	r3, r1
 800ae4e:	d011      	beq.n	800ae74 <scalbn+0x3c>
 800ae50:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800af18 <scalbn+0xe0>
 800ae54:	4b3c      	ldr	r3, [pc, #240]	; (800af48 <scalbn+0x110>)
 800ae56:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ae5a:	4298      	cmp	r0, r3
 800ae5c:	da0b      	bge.n	800ae76 <scalbn+0x3e>
 800ae5e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800af20 <scalbn+0xe8>
 800ae62:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ae66:	e005      	b.n	800ae74 <scalbn+0x3c>
 800ae68:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ae6c:	429c      	cmp	r4, r3
 800ae6e:	d107      	bne.n	800ae80 <scalbn+0x48>
 800ae70:	ee30 0b00 	vadd.f64	d0, d0, d0
 800ae74:	bd10      	pop	{r4, pc}
 800ae76:	ee10 1a90 	vmov	r1, s1
 800ae7a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800ae7e:	3c36      	subs	r4, #54	; 0x36
 800ae80:	4404      	add	r4, r0
 800ae82:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800ae86:	429c      	cmp	r4, r3
 800ae88:	dd0d      	ble.n	800aea6 <scalbn+0x6e>
 800ae8a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800af28 <scalbn+0xf0>
 800ae8e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800af30 <scalbn+0xf8>
 800ae92:	eeb0 6b47 	vmov.f64	d6, d7
 800ae96:	ee10 3a90 	vmov	r3, s1
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	fe27 7b05 	vselge.f64	d7, d7, d5
 800aea0:	ee27 0b06 	vmul.f64	d0, d7, d6
 800aea4:	e7e6      	b.n	800ae74 <scalbn+0x3c>
 800aea6:	2c00      	cmp	r4, #0
 800aea8:	dd0a      	ble.n	800aec0 <scalbn+0x88>
 800aeaa:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800aeae:	ec53 2b10 	vmov	r2, r3, d0
 800aeb2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800aeb6:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800aeba:	ec43 2b10 	vmov	d0, r2, r3
 800aebe:	e7d9      	b.n	800ae74 <scalbn+0x3c>
 800aec0:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800aec4:	da19      	bge.n	800aefa <scalbn+0xc2>
 800aec6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aeca:	4298      	cmp	r0, r3
 800aecc:	ee10 3a90 	vmov	r3, s1
 800aed0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aed4:	dd09      	ble.n	800aeea <scalbn+0xb2>
 800aed6:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800af28 <scalbn+0xf0>
 800aeda:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800af30 <scalbn+0xf8>
 800aede:	eeb0 7b40 	vmov.f64	d7, d0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800aee8:	e7bb      	b.n	800ae62 <scalbn+0x2a>
 800aeea:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800af20 <scalbn+0xe8>
 800aeee:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800af38 <scalbn+0x100>
 800aef2:	eeb0 7b40 	vmov.f64	d7, d0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	e7f4      	b.n	800aee4 <scalbn+0xac>
 800aefa:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800aefe:	ec53 2b10 	vmov	r2, r3, d0
 800af02:	3436      	adds	r4, #54	; 0x36
 800af04:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800af08:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800af0c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800af40 <scalbn+0x108>
 800af10:	ec43 2b10 	vmov	d0, r2, r3
 800af14:	e7a5      	b.n	800ae62 <scalbn+0x2a>
 800af16:	bf00      	nop
 800af18:	00000000 	.word	0x00000000
 800af1c:	43500000 	.word	0x43500000
 800af20:	c2f8f359 	.word	0xc2f8f359
 800af24:	01a56e1f 	.word	0x01a56e1f
 800af28:	8800759c 	.word	0x8800759c
 800af2c:	7e37e43c 	.word	0x7e37e43c
 800af30:	8800759c 	.word	0x8800759c
 800af34:	fe37e43c 	.word	0xfe37e43c
 800af38:	c2f8f359 	.word	0xc2f8f359
 800af3c:	81a56e1f 	.word	0x81a56e1f
 800af40:	00000000 	.word	0x00000000
 800af44:	3c900000 	.word	0x3c900000
 800af48:	ffff3cb0 	.word	0xffff3cb0

0800af4c <_init>:
 800af4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4e:	bf00      	nop
 800af50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af52:	bc08      	pop	{r3}
 800af54:	469e      	mov	lr, r3
 800af56:	4770      	bx	lr

0800af58 <_fini>:
 800af58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5a:	bf00      	nop
 800af5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af5e:	bc08      	pop	{r3}
 800af60:	469e      	mov	lr, r3
 800af62:	4770      	bx	lr
