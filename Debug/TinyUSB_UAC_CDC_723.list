
TinyUSB_UAC_CDC_723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a218  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  0800a4e4  0800a4e4  0001a4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a73c  0800a73c  0001a73c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a740  0800a740  0001a740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000048  24000000  0800a744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001be0  24000048  0800a78c  00020048  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24001c28  0800a78c  00021c28  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
  9 .debug_info   00019c6d  00000000  00000000  00020076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003ba2  00000000  00000000  00039ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001170  00000000  00000000  0003d888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000010c8  00000000  00000000  0003e9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003463d  00000000  00000000  0003fac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001613a  00000000  00000000  000740fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014d4ba  00000000  00000000  0008a237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001d76f1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004810  00000000  00000000  001d7744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000048 	.word	0x24000048
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800a4cc 	.word	0x0800a4cc

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400004c 	.word	0x2400004c
 8000308:	0800a4cc 	.word	0x0800a4cc

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <tud_cdc_connected>:
{
  return tud_cdc_n_write(itf, str, strlen(str));
}

static inline bool tud_cdc_connected (void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  return tud_cdc_n_connected(0);
 8000320:	2000      	movs	r0, #0
 8000322:	f005 fad5 	bl	80058d0 <tud_cdc_n_connected>
 8000326:	4603      	mov	r3, r0
}
 8000328:	4618      	mov	r0, r3
 800032a:	bd80      	pop	{r7, pc}

0800032c <tud_cdc_available>:
{
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  return tud_cdc_n_available(0);
 8000330:	2000      	movs	r0, #0
 8000332:	f005 fb0d 	bl	8005950 <tud_cdc_n_available>
 8000336:	4603      	mov	r3, r0
}
 8000338:	4618      	mov	r0, r3
 800033a:	bd80      	pop	{r7, pc}

0800033c <tud_cdc_read>:
{
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_read(0, buffer, bufsize);
 8000346:	683a      	ldr	r2, [r7, #0]
 8000348:	6879      	ldr	r1, [r7, #4]
 800034a:	2000      	movs	r0, #0
 800034c:	f005 fb18 	bl	8005980 <tud_cdc_n_read>
 8000350:	4603      	mov	r3, r0
}
 8000352:	4618      	mov	r0, r3
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}

0800035a <tud_cdc_write>:
{
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
 800035a:	b580      	push	{r7, lr}
 800035c:	b082      	sub	sp, #8
 800035e:	af00      	add	r7, sp, #0
 8000360:	6078      	str	r0, [r7, #4]
 8000362:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_write(0, buffer, bufsize);
 8000364:	683a      	ldr	r2, [r7, #0]
 8000366:	6879      	ldr	r1, [r7, #4]
 8000368:	2000      	movs	r0, #0
 800036a:	f005 fb2d 	bl	80059c8 <tud_cdc_n_write>
 800036e:	4603      	mov	r3, r0
}
 8000370:	4618      	mov	r0, r3
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <tud_cdc_write_flush>:
{
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 800037c:	2000      	movs	r0, #0
 800037e:	f005 fb4f 	bl	8005a20 <tud_cdc_n_write_flush>
 8000382:	4603      	mov	r3, r0
}
 8000384:	4618      	mov	r0, r3
 8000386:	bd80      	pop	{r7, pc}

08000388 <tud_cdc_write_available>:

static inline uint32_t tud_cdc_write_available(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_available(0);
 800038c:	2000      	movs	r0, #0
 800038e:	f005 fbc3 	bl	8005b18 <tud_cdc_n_write_available>
 8000392:	4603      	mov	r3, r0
}
 8000394:	4618      	mov	r0, r3
 8000396:	bd80      	pop	{r7, pc}

08000398 <tud_audio_read>:
{
  return tud_audio_n_available(0);
}

static inline uint16_t tud_audio_read(void* buffer, uint16_t bufsize)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	460b      	mov	r3, r1
 80003a2:	807b      	strh	r3, [r7, #2]
  return tud_audio_n_read(0, buffer, bufsize);
 80003a4:	887b      	ldrh	r3, [r7, #2]
 80003a6:	461a      	mov	r2, r3
 80003a8:	6879      	ldr	r1, [r7, #4]
 80003aa:	2000      	movs	r0, #0
 80003ac:	f004 f918 	bl	80045e0 <tud_audio_n_read>
 80003b0:	4603      	mov	r3, r0
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <tud_audio_write>:
// TX API

#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING

static inline uint16_t tud_audio_write(const void * data, uint16_t len)
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b082      	sub	sp, #8
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
 80003c2:	460b      	mov	r3, r1
 80003c4:	807b      	strh	r3, [r7, #2]
  return tud_audio_n_write(0, data, len);
 80003c6:	887b      	ldrh	r3, [r7, #2]
 80003c8:	461a      	mov	r2, r3
 80003ca:	6879      	ldr	r1, [r7, #4]
 80003cc:	2000      	movs	r0, #0
 80003ce:	f004 f9a9 	bl	8004724 <tud_audio_n_write>
 80003d2:	4603      	mov	r3, r0
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <tud_mount_cb>:
// Device callbacks
//--------------------------------------------------------------------+

// Invoked when device is mounted
void tud_mount_cb(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
	blink_interval_ms = BLINK_MOUNTED;
 80003e0:	4b04      	ldr	r3, [pc, #16]	; (80003f4 <tud_mount_cb+0x18>)
 80003e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003e6:	601a      	str	r2, [r3, #0]
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	24000004 	.word	0x24000004

080003f8 <tud_umount_cb>:

// Invoked when device is unmounted
void tud_umount_cb(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
	blink_interval_ms = BLINK_NOT_MOUNTED;
 80003fc:	4b03      	ldr	r3, [pc, #12]	; (800040c <tud_umount_cb+0x14>)
 80003fe:	22fa      	movs	r2, #250	; 0xfa
 8000400:	601a      	str	r2, [r3, #0]
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	24000004 	.word	0x24000004

08000410 <tud_suspend_cb>:

// Invoked when usb bus is suspended
// remote_wakeup_en : if host allow us  to perform remote wakeup
// Within 7ms, device must draw an average of current less than 2.5 mA from bus
void tud_suspend_cb(bool remote_wakeup_en)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
	(void)remote_wakeup_en;
	blink_interval_ms = BLINK_SUSPENDED;
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <tud_suspend_cb+0x20>)
 800041c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000420:	601a      	str	r2, [r3, #0]
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	24000004 	.word	0x24000004

08000434 <tud_resume_cb>:

// Invoked when usb bus is resumed
void tud_resume_cb(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
	blink_interval_ms = BLINK_MOUNTED;
 8000438:	4b04      	ldr	r3, [pc, #16]	; (800044c <tud_resume_cb+0x18>)
 800043a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800043e:	601a      	str	r2, [r3, #0]
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	24000004 	.word	0x24000004

08000450 <tud_audio_clock_get_request>:

// Helper for clock get requests
static bool tud_audio_clock_get_request(uint8_t rhport, audio_control_request_t const *request)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b094      	sub	sp, #80	; 0x50
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	6039      	str	r1, [r7, #0]
 800045a:	71fb      	strb	r3, [r7, #7]
	TU_ASSERT(request->bEntityID == UAC2_ENTITY_CLOCK);
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	795b      	ldrb	r3, [r3, #5]
 8000460:	2b04      	cmp	r3, #4
 8000462:	d00a      	beq.n	800047a <tud_audio_clock_get_request+0x2a>
 8000464:	4b44      	ldr	r3, [pc, #272]	; (8000578 <tud_audio_clock_get_request+0x128>)
 8000466:	64bb      	str	r3, [r7, #72]	; 0x48
 8000468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f003 0301 	and.w	r3, r3, #1
 8000470:	2b00      	cmp	r3, #0
 8000472:	d000      	beq.n	8000476 <tud_audio_clock_get_request+0x26>
 8000474:	be00      	bkpt	0x0000
 8000476:	2300      	movs	r3, #0
 8000478:	e07a      	b.n	8000570 <tud_audio_clock_get_request+0x120>

	if (request->bControlSelector == AUDIO_CS_CTRL_SAM_FREQ)
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	78db      	ldrb	r3, [r3, #3]
 800047e:	2b01      	cmp	r3, #1
 8000480:	d161      	bne.n	8000546 <tud_audio_clock_get_request+0xf6>
	{
		if (request->bRequest == AUDIO_CS_REQ_CUR)
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	785b      	ldrb	r3, [r3, #1]
 8000486:	2b01      	cmp	r3, #1
 8000488:	d10b      	bne.n	80004a2 <tud_audio_clock_get_request+0x52>
		{
			TU_LOG1("Clock get current freq %lu\r\n", current_sample_rate);

			audio_control_cur_4_t curf = { (int32_t) tu_htole32(current_sample_rate) };
 800048a:	4b3c      	ldr	r3, [pc, #240]	; (800057c <tud_audio_clock_get_request+0x12c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	647b      	str	r3, [r7, #68]	; 0x44
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &curf, sizeof(curf));
 8000490:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000494:	79f8      	ldrb	r0, [r7, #7]
 8000496:	2304      	movs	r3, #4
 8000498:	6839      	ldr	r1, [r7, #0]
 800049a:	f004 ff03 	bl	80052a4 <tud_audio_buffer_and_schedule_control_xfer>
 800049e:	4603      	mov	r3, r0
 80004a0:	e066      	b.n	8000570 <tud_audio_clock_get_request+0x120>
		}
		else if (request->bRequest == AUDIO_CS_REQ_RANGE)
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	785b      	ldrb	r3, [r3, #1]
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	d161      	bne.n	800056e <tud_audio_clock_get_request+0x11e>
		{
			audio_control_range_4_n_t(N_SAMPLE_RATES) rangef =
 80004aa:	f107 030c 	add.w	r3, r7, #12
 80004ae:	2232      	movs	r2, #50	; 0x32
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f00a f802 	bl	800a4bc <memset>
 80004b8:	2304      	movs	r3, #4
 80004ba:	81bb      	strh	r3, [r7, #12]
			{
					.wNumSubRanges = tu_htole16(N_SAMPLE_RATES)
			};
			TU_LOG1("Clock get %d freq ranges\r\n", N_SAMPLE_RATES);
			for(uint8_t i = 0; i < N_SAMPLE_RATES; i++)
 80004bc:	2300      	movs	r3, #0
 80004be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80004c2:	e033      	b.n	800052c <tud_audio_clock_get_request+0xdc>
			{
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 80004c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80004c8:	4a2d      	ldr	r2, [pc, #180]	; (8000580 <tud_audio_clock_get_request+0x130>)
 80004ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ce:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80004d2:	4619      	mov	r1, r3
 80004d4:	4613      	mov	r3, r2
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	4413      	add	r3, r2
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	3350      	adds	r3, #80	; 0x50
 80004de:	443b      	add	r3, r7
 80004e0:	3b44      	subs	r3, #68	; 0x44
 80004e2:	f8c3 1002 	str.w	r1, [r3, #2]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80004e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80004ea:	4a25      	ldr	r2, [pc, #148]	; (8000580 <tud_audio_clock_get_request+0x130>)
 80004ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004f0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80004f4:	4619      	mov	r1, r3
 80004f6:	4613      	mov	r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	4413      	add	r3, r2
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	3350      	adds	r3, #80	; 0x50
 8000500:	443b      	add	r3, r7
 8000502:	3b44      	subs	r3, #68	; 0x44
 8000504:	f8c3 1006 	str.w	r1, [r3, #6]
				rangef.subrange[i].bRes = 0;
 8000508:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800050c:	4613      	mov	r3, r2
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	4413      	add	r3, r2
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	3350      	adds	r3, #80	; 0x50
 8000516:	443b      	add	r3, r7
 8000518:	3b3c      	subs	r3, #60	; 0x3c
 800051a:	2200      	movs	r2, #0
 800051c:	805a      	strh	r2, [r3, #2]
 800051e:	2200      	movs	r2, #0
 8000520:	809a      	strh	r2, [r3, #4]
			for(uint8_t i = 0; i < N_SAMPLE_RATES; i++)
 8000522:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000526:	3301      	adds	r3, #1
 8000528:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800052c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000530:	2b03      	cmp	r3, #3
 8000532:	d9c7      	bls.n	80004c4 <tud_audio_clock_get_request+0x74>
				TU_LOG1("Range %d (%d, %d, %d)\r\n", i, (int)rangef.subrange[i].bMin, (int)rangef.subrange[i].bMax, (int)rangef.subrange[i].bRes);
			}

			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 8000534:	f107 020c 	add.w	r2, r7, #12
 8000538:	79f8      	ldrb	r0, [r7, #7]
 800053a:	2332      	movs	r3, #50	; 0x32
 800053c:	6839      	ldr	r1, [r7, #0]
 800053e:	f004 feb1 	bl	80052a4 <tud_audio_buffer_and_schedule_control_xfer>
 8000542:	4603      	mov	r3, r0
 8000544:	e014      	b.n	8000570 <tud_audio_clock_get_request+0x120>
		}
	}
	else if (request->bControlSelector == AUDIO_CS_CTRL_CLK_VALID &&
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	78db      	ldrb	r3, [r3, #3]
 800054a:	2b02      	cmp	r3, #2
 800054c:	d10f      	bne.n	800056e <tud_audio_clock_get_request+0x11e>
			request->bRequest == AUDIO_CS_REQ_CUR)
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	785b      	ldrb	r3, [r3, #1]
	else if (request->bControlSelector == AUDIO_CS_CTRL_CLK_VALID &&
 8000552:	2b01      	cmp	r3, #1
 8000554:	d10b      	bne.n	800056e <tud_audio_clock_get_request+0x11e>
	{
		audio_control_cur_1_t cur_valid = { .bCur = 1 };
 8000556:	2301      	movs	r3, #1
 8000558:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		TU_LOG1("Clock get is valid %u\r\n", cur_valid.bCur);
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_valid, sizeof(cur_valid));
 800055c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000560:	79f8      	ldrb	r0, [r7, #7]
 8000562:	2301      	movs	r3, #1
 8000564:	6839      	ldr	r1, [r7, #0]
 8000566:	f004 fe9d 	bl	80052a4 <tud_audio_buffer_and_schedule_control_xfer>
 800056a:	4603      	mov	r3, r0
 800056c:	e000      	b.n	8000570 <tud_audio_clock_get_request+0x120>
	}
	TU_LOG1("Clock get request not supported, entity = %u, selector = %u, request = %u\r\n",
			request->bEntityID, request->bControlSelector, request->bRequest);
	return false;
 800056e:	2300      	movs	r3, #0
}
 8000570:	4618      	mov	r0, r3
 8000572:	3750      	adds	r7, #80	; 0x50
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	e000edf0 	.word	0xe000edf0
 800057c:	24000000 	.word	0x24000000
 8000580:	0800a54c 	.word	0x0800a54c

08000584 <tud_audio_clock_set_request>:

// Helper for clock set requests
static bool tud_audio_clock_set_request(uint8_t rhport, audio_control_request_t const *request, uint8_t const *buf)
{
 8000584:	b480      	push	{r7}
 8000586:	b087      	sub	sp, #28
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	73fb      	strb	r3, [r7, #15]
	(void)rhport;

	TU_ASSERT(request->bEntityID == UAC2_ENTITY_CLOCK);
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	795b      	ldrb	r3, [r3, #5]
 8000596:	2b04      	cmp	r3, #4
 8000598:	d00a      	beq.n	80005b0 <tud_audio_clock_set_request+0x2c>
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <tud_audio_clock_set_request+0x6c>)
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d000      	beq.n	80005ac <tud_audio_clock_set_request+0x28>
 80005aa:	be00      	bkpt	0x0000
 80005ac:	2300      	movs	r3, #0
 80005ae:	e018      	b.n	80005e2 <tud_audio_clock_set_request+0x5e>
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d001      	beq.n	80005bc <tud_audio_clock_set_request+0x38>
 80005b8:	2300      	movs	r3, #0
 80005ba:	e012      	b.n	80005e2 <tud_audio_clock_set_request+0x5e>

	if (request->bControlSelector == AUDIO_CS_CTRL_SAM_FREQ)
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	78db      	ldrb	r3, [r3, #3]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d10d      	bne.n	80005e0 <tud_audio_clock_set_request+0x5c>
	{
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_4_t));
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	88db      	ldrh	r3, [r3, #6]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	2b04      	cmp	r3, #4
 80005cc:	d001      	beq.n	80005d2 <tud_audio_clock_set_request+0x4e>
 80005ce:	2300      	movs	r3, #0
 80005d0:	e007      	b.n	80005e2 <tud_audio_clock_set_request+0x5e>

		current_sample_rate = (uint32_t) ((audio_control_cur_4_t const *)buf)->bCur;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	461a      	mov	r2, r3
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <tud_audio_clock_set_request+0x70>)
 80005da:	601a      	str	r2, [r3, #0]

		TU_LOG1("Clock set current freq: %ld\r\n", current_sample_rate);

		return true;
 80005dc:	2301      	movs	r3, #1
 80005de:	e000      	b.n	80005e2 <tud_audio_clock_set_request+0x5e>
	}
	else
	{
		TU_LOG1("Clock set request not supported, entity = %u, selector = %u, request = %u\r\n",
				request->bEntityID, request->bControlSelector, request->bRequest);
		return false;
 80005e0:	2300      	movs	r3, #0
	}
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	371c      	adds	r7, #28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000edf0 	.word	0xe000edf0
 80005f4:	24000000 	.word	0x24000000

080005f8 <tud_audio_feature_unit_get_request>:

// Helper for feature unit get requests
static bool tud_audio_feature_unit_get_request(uint8_t rhport, audio_control_request_t const *request)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	6039      	str	r1, [r7, #0]
 8000602:	71fb      	strb	r3, [r7, #7]
	TU_ASSERT(request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT);
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	795b      	ldrb	r3, [r3, #5]
 8000608:	2b02      	cmp	r3, #2
 800060a:	d00a      	beq.n	8000622 <tud_audio_feature_unit_get_request+0x2a>
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <tud_audio_feature_unit_get_request+0xbc>)
 800060e:	61fb      	str	r3, [r7, #28]
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f003 0301 	and.w	r3, r3, #1
 8000618:	2b00      	cmp	r3, #0
 800061a:	d000      	beq.n	800061e <tud_audio_feature_unit_get_request+0x26>
 800061c:	be00      	bkpt	0x0000
 800061e:	2300      	movs	r3, #0
 8000620:	e043      	b.n	80006aa <tud_audio_feature_unit_get_request+0xb2>

	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE && request->bRequest == AUDIO_CS_REQ_CUR)
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	78db      	ldrb	r3, [r3, #3]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d112      	bne.n	8000650 <tud_audio_feature_unit_get_request+0x58>
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	785b      	ldrb	r3, [r3, #1]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d10e      	bne.n	8000650 <tud_audio_feature_unit_get_request+0x58>
	{
		audio_control_cur_1_t mute1 = { .bCur = mute[request->bChannelNumber] };
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	789b      	ldrb	r3, [r3, #2]
 8000636:	461a      	mov	r2, r3
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <tud_audio_feature_unit_get_request+0xc0>)
 800063a:	569b      	ldrsb	r3, [r3, r2]
 800063c:	763b      	strb	r3, [r7, #24]
		TU_LOG1("Get channel %u mute %d\r\n", request->bChannelNumber, mute1.bCur);
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &mute1, sizeof(mute1));
 800063e:	f107 0218 	add.w	r2, r7, #24
 8000642:	79f8      	ldrb	r0, [r7, #7]
 8000644:	2301      	movs	r3, #1
 8000646:	6839      	ldr	r1, [r7, #0]
 8000648:	f004 fe2c 	bl	80052a4 <tud_audio_buffer_and_schedule_control_xfer>
 800064c:	4603      	mov	r3, r0
 800064e:	e02c      	b.n	80006aa <tud_audio_feature_unit_get_request+0xb2>
	}
	else if (UAC2_ENTITY_SPK_FEATURE_UNIT && request->bControlSelector == AUDIO_FU_CTRL_VOLUME)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	78db      	ldrb	r3, [r3, #3]
 8000654:	2b02      	cmp	r3, #2
 8000656:	d127      	bne.n	80006a8 <tud_audio_feature_unit_get_request+0xb0>
	{
		if (request->bRequest == AUDIO_CS_REQ_RANGE)
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	785b      	ldrb	r3, [r3, #1]
 800065c:	2b02      	cmp	r3, #2
 800065e:	d10f      	bne.n	8000680 <tud_audio_feature_unit_get_request+0x88>
		{
			audio_control_range_2_n_t(1) range_vol = {
 8000660:	4a16      	ldr	r2, [pc, #88]	; (80006bc <tud_audio_feature_unit_get_request+0xc4>)
 8000662:	f107 0310 	add.w	r3, r7, #16
 8000666:	e892 0003 	ldmia.w	r2, {r0, r1}
 800066a:	e883 0003 	stmia.w	r3, {r0, r1}
					.wNumSubRanges = tu_htole16(1),
					.subrange[0] = { .bMin = tu_htole16(-VOLUME_CTRL_50_DB), tu_htole16(VOLUME_CTRL_0_DB), tu_htole16(256) }
			};
			TU_LOG1("Get channel %u volume range (%d, %d, %u) dB\r\n", request->bChannelNumber,
					range_vol.subrange[0].bMin / 256, range_vol.subrange[0].bMax / 256, range_vol.subrange[0].bRes / 256);
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &range_vol, sizeof(range_vol));
 800066e:	f107 0210 	add.w	r2, r7, #16
 8000672:	79f8      	ldrb	r0, [r7, #7]
 8000674:	2308      	movs	r3, #8
 8000676:	6839      	ldr	r1, [r7, #0]
 8000678:	f004 fe14 	bl	80052a4 <tud_audio_buffer_and_schedule_control_xfer>
 800067c:	4603      	mov	r3, r0
 800067e:	e014      	b.n	80006aa <tud_audio_feature_unit_get_request+0xb2>
		}
		else if (request->bRequest == AUDIO_CS_REQ_CUR)
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	785b      	ldrb	r3, [r3, #1]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d10f      	bne.n	80006a8 <tud_audio_feature_unit_get_request+0xb0>
		{
			audio_control_cur_2_t cur_vol = { .bCur = tu_htole16(volume[request->bChannelNumber]) };
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	789b      	ldrb	r3, [r3, #2]
 800068c:	461a      	mov	r2, r3
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <tud_audio_feature_unit_get_request+0xc8>)
 8000690:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000694:	81bb      	strh	r3, [r7, #12]
			TU_LOG1("Get channel %u volume %d dB\r\n", request->bChannelNumber, cur_vol.bCur / 256);
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_vol, sizeof(cur_vol));
 8000696:	f107 020c 	add.w	r2, r7, #12
 800069a:	79f8      	ldrb	r0, [r7, #7]
 800069c:	2302      	movs	r3, #2
 800069e:	6839      	ldr	r1, [r7, #0]
 80006a0:	f004 fe00 	bl	80052a4 <tud_audio_buffer_and_schedule_control_xfer>
 80006a4:	4603      	mov	r3, r0
 80006a6:	e000      	b.n	80006aa <tud_audio_feature_unit_get_request+0xb2>
		}
	}
	TU_LOG1("Feature unit get request not supported, entity = %u, selector = %u, request = %u\r\n",
			request->bEntityID, request->bControlSelector, request->bRequest);

	return false;
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3720      	adds	r7, #32
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	e000edf0 	.word	0xe000edf0
 80006b8:	24000570 	.word	0x24000570
 80006bc:	0800a4e4 	.word	0x0800a4e4
 80006c0:	24000574 	.word	0x24000574

080006c4 <tud_audio_feature_unit_set_request>:

// Helper for feature unit set requests
static bool tud_audio_feature_unit_set_request(uint8_t rhport, audio_control_request_t const *request, uint8_t const *buf)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b087      	sub	sp, #28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
 80006d0:	73fb      	strb	r3, [r7, #15]
	(void)rhport;

	TU_ASSERT(request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT);
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	795b      	ldrb	r3, [r3, #5]
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	d00a      	beq.n	80006f0 <tud_audio_feature_unit_set_request+0x2c>
 80006da:	4b22      	ldr	r3, [pc, #136]	; (8000764 <tud_audio_feature_unit_set_request+0xa0>)
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d000      	beq.n	80006ec <tud_audio_feature_unit_set_request+0x28>
 80006ea:	be00      	bkpt	0x0000
 80006ec:	2300      	movs	r3, #0
 80006ee:	e032      	b.n	8000756 <tud_audio_feature_unit_set_request+0x92>
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	785b      	ldrb	r3, [r3, #1]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d001      	beq.n	80006fc <tud_audio_feature_unit_set_request+0x38>
 80006f8:	2300      	movs	r3, #0
 80006fa:	e02c      	b.n	8000756 <tud_audio_feature_unit_set_request+0x92>

	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	78db      	ldrb	r3, [r3, #3]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d110      	bne.n	8000726 <tud_audio_feature_unit_set_request+0x62>
	{
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_1_t));
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	88db      	ldrh	r3, [r3, #6]
 8000708:	b29b      	uxth	r3, r3
 800070a:	2b01      	cmp	r3, #1
 800070c:	d001      	beq.n	8000712 <tud_audio_feature_unit_set_request+0x4e>
 800070e:	2300      	movs	r3, #0
 8000710:	e021      	b.n	8000756 <tud_audio_feature_unit_set_request+0x92>

		mute[request->bChannelNumber] = ((audio_control_cur_1_t const *)buf)->bCur;
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	789b      	ldrb	r3, [r3, #2]
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f993 1000 	ldrsb.w	r1, [r3]
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <tud_audio_feature_unit_set_request+0xa4>)
 8000720:	5499      	strb	r1, [r3, r2]

		TU_LOG1("Set channel %d Mute: %d\r\n", request->bChannelNumber, mute[request->bChannelNumber]);

		return true;
 8000722:	2301      	movs	r3, #1
 8000724:	e017      	b.n	8000756 <tud_audio_feature_unit_set_request+0x92>
	}
	else if (request->bControlSelector == AUDIO_FU_CTRL_VOLUME)
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	78db      	ldrb	r3, [r3, #3]
 800072a:	2b02      	cmp	r3, #2
 800072c:	d112      	bne.n	8000754 <tud_audio_feature_unit_set_request+0x90>
	{
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_2_t));
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	88db      	ldrh	r3, [r3, #6]
 8000732:	b29b      	uxth	r3, r3
 8000734:	2b02      	cmp	r3, #2
 8000736:	d001      	beq.n	800073c <tud_audio_feature_unit_set_request+0x78>
 8000738:	2300      	movs	r3, #0
 800073a:	e00c      	b.n	8000756 <tud_audio_feature_unit_set_request+0x92>

		volume[request->bChannelNumber] = ((audio_control_cur_2_t const *)buf)->bCur;
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	789b      	ldrb	r3, [r3, #2]
 8000740:	461a      	mov	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000748:	b219      	sxth	r1, r3
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <tud_audio_feature_unit_set_request+0xa8>)
 800074c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		TU_LOG1("Set channel %d volume: %d dB\r\n", request->bChannelNumber, volume[request->bChannelNumber] / 256);

		return true;
 8000750:	2301      	movs	r3, #1
 8000752:	e000      	b.n	8000756 <tud_audio_feature_unit_set_request+0x92>
	}
	else
	{
		TU_LOG1("Feature unit set request not supported, entity = %u, selector = %u, request = %u\r\n",
				request->bEntityID, request->bControlSelector, request->bRequest);
		return false;
 8000754:	2300      	movs	r3, #0
	}
}
 8000756:	4618      	mov	r0, r3
 8000758:	371c      	adds	r7, #28
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000edf0 	.word	0xe000edf0
 8000768:	24000570 	.word	0x24000570
 800076c:	24000574 	.word	0x24000574

08000770 <tud_audio_get_req_entity_cb>:
// Application Callback API Implementations
//--------------------------------------------------------------------+

// Invoked when audio class specific get request received for an entity
bool tud_audio_get_req_entity_cb(uint8_t rhport, tusb_control_request_t const *p_request)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	6039      	str	r1, [r7, #0]
 800077a:	71fb      	strb	r3, [r7, #7]
	audio_control_request_t const *request = (audio_control_request_t const *)p_request;
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	60fb      	str	r3, [r7, #12]

	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	795b      	ldrb	r3, [r3, #5]
 8000784:	2b04      	cmp	r3, #4
 8000786:	d106      	bne.n	8000796 <tud_audio_get_req_entity_cb+0x26>
		return tud_audio_clock_get_request(rhport, request);
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	68f9      	ldr	r1, [r7, #12]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fe5f 	bl	8000450 <tud_audio_clock_get_request>
 8000792:	4603      	mov	r3, r0
 8000794:	e00b      	b.n	80007ae <tud_audio_get_req_entity_cb+0x3e>
	if (request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	795b      	ldrb	r3, [r3, #5]
 800079a:	2b02      	cmp	r3, #2
 800079c:	d106      	bne.n	80007ac <tud_audio_get_req_entity_cb+0x3c>
		return tud_audio_feature_unit_get_request(rhport, request);
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	68f9      	ldr	r1, [r7, #12]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ff28 	bl	80005f8 <tud_audio_feature_unit_get_request>
 80007a8:	4603      	mov	r3, r0
 80007aa:	e000      	b.n	80007ae <tud_audio_get_req_entity_cb+0x3e>
	else
	{
		TU_LOG1("Get request not handled, entity = %d, selector = %d, request = %d\r\n",
				request->bEntityID, request->bControlSelector, request->bRequest);
	}
	return false;
 80007ac:	2300      	movs	r3, #0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <tud_audio_set_req_entity_cb>:

// Invoked when audio class specific set request received for an entity
bool tud_audio_set_req_entity_cb(uint8_t rhport, tusb_control_request_t const *p_request, uint8_t *buf)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b086      	sub	sp, #24
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	73fb      	strb	r3, [r7, #15]
	audio_control_request_t const *request = (audio_control_request_t const *)p_request;
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	617b      	str	r3, [r7, #20]

	if (request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT)
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	795b      	ldrb	r3, [r3, #5]
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d107      	bne.n	80007e0 <tud_audio_set_req_entity_cb+0x2a>
		return tud_audio_feature_unit_set_request(rhport, request, buf);
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	6979      	ldr	r1, [r7, #20]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff74 	bl	80006c4 <tud_audio_feature_unit_set_request>
 80007dc:	4603      	mov	r3, r0
 80007de:	e00c      	b.n	80007fa <tud_audio_set_req_entity_cb+0x44>
	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	795b      	ldrb	r3, [r3, #5]
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	d107      	bne.n	80007f8 <tud_audio_set_req_entity_cb+0x42>
		return tud_audio_clock_set_request(rhport, request, buf);
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	6979      	ldr	r1, [r7, #20]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fec8 	bl	8000584 <tud_audio_clock_set_request>
 80007f4:	4603      	mov	r3, r0
 80007f6:	e000      	b.n	80007fa <tud_audio_set_req_entity_cb+0x44>
	TU_LOG1("Set request not handled, entity = %d, selector = %d, request = %d\r\n",
			request->bEntityID, request->bControlSelector, request->bRequest);

	return false;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <tud_audio_set_itf_close_EP_cb>:

bool tud_audio_set_itf_close_EP_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
	(void)rhport;

	uint8_t const itf = tu_u16_low(tu_le16toh(p_request->wIndex));
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	889b      	ldrh	r3, [r3, #4]
 8000814:	b29b      	uxth	r3, r3
 8000816:	817b      	strh	r3, [r7, #10]

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_u32_high16(uint32_t ui32) { return (uint16_t) (ui32 >> 16); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_u32_low16 (uint32_t ui32) { return (uint16_t) (ui32 & 0x0000ffffu); }

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8000818:	897b      	ldrh	r3, [r7, #10]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	73fb      	strb	r3, [r7, #15]
	uint8_t const alt = tu_u16_low(tu_le16toh(p_request->wValue));
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	885b      	ldrh	r3, [r3, #2]
 8000822:	b29b      	uxth	r3, r3
 8000824:	81bb      	strh	r3, [r7, #12]
 8000826:	89bb      	ldrh	r3, [r7, #12]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	73bb      	strb	r3, [r7, #14]

	if (ITF_NUM_AUDIO_STREAMING_SPK == itf && alt == 0)
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d106      	bne.n	8000840 <tud_audio_set_itf_close_EP_cb+0x3c>
 8000832:	7bbb      	ldrb	r3, [r7, #14]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d103      	bne.n	8000840 <tud_audio_set_itf_close_EP_cb+0x3c>
		blink_interval_ms = BLINK_MOUNTED;
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <tud_audio_set_itf_close_EP_cb+0x4c>)
 800083a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800083e:	601a      	str	r2, [r3, #0]

	return true;
 8000840:	2301      	movs	r3, #1
}
 8000842:	4618      	mov	r0, r3
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	24000004 	.word	0x24000004

08000854 <tud_audio_set_itf_cb>:

bool tud_audio_set_itf_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	6039      	str	r1, [r7, #0]
 800085e:	71fb      	strb	r3, [r7, #7]
	(void)rhport;
	uint8_t const itf = tu_u16_low(tu_le16toh(p_request->wIndex));
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	889b      	ldrh	r3, [r3, #4]
 8000864:	b29b      	uxth	r3, r3
 8000866:	817b      	strh	r3, [r7, #10]
 8000868:	897b      	ldrh	r3, [r7, #10]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	73fb      	strb	r3, [r7, #15]
	uint8_t const alt = tu_u16_low(tu_le16toh(p_request->wValue));
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	885b      	ldrh	r3, [r3, #2]
 8000872:	b29b      	uxth	r3, r3
 8000874:	81bb      	strh	r3, [r7, #12]
 8000876:	89bb      	ldrh	r3, [r7, #12]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	73bb      	strb	r3, [r7, #14]

	TU_LOG2("Set interface %d alt %d\r\n", itf, alt);
	if (ITF_NUM_AUDIO_STREAMING_SPK == itf && alt != 0)
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d105      	bne.n	800088e <tud_audio_set_itf_cb+0x3a>
 8000882:	7bbb      	ldrb	r3, [r7, #14]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d002      	beq.n	800088e <tud_audio_set_itf_cb+0x3a>
		blink_interval_ms = BLINK_STREAMING;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <tud_audio_set_itf_cb+0x60>)
 800088a:	2219      	movs	r2, #25
 800088c:	601a      	str	r2, [r3, #0]

	// Clear buffer when streaming format is changed
	spk_data_size = 0;
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <tud_audio_set_itf_cb+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
	if(alt != 0)
 8000894:	7bbb      	ldrb	r3, [r7, #14]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d005      	beq.n	80008a6 <tud_audio_set_itf_cb+0x52>
	{
		current_resolution = resolutions_per_format[alt-1];
 800089a:	7bbb      	ldrb	r3, [r7, #14]
 800089c:	3b01      	subs	r3, #1
 800089e:	4a07      	ldr	r2, [pc, #28]	; (80008bc <tud_audio_set_itf_cb+0x68>)
 80008a0:	5cd2      	ldrb	r2, [r2, r3]
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <tud_audio_set_itf_cb+0x6c>)
 80008a4:	701a      	strb	r2, [r3, #0]
	}

	return true;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	24000004 	.word	0x24000004
 80008b8:	24000e94 	.word	0x24000e94
 80008bc:	0800a55c 	.word	0x0800a55c
 80008c0:	24000e98 	.word	0x24000e98

080008c4 <tud_audio_rx_done_pre_read_cb>:

bool tud_audio_rx_done_pre_read_cb(uint8_t rhport, uint16_t n_bytes_received, uint8_t func_id, uint8_t ep_out, uint8_t cur_alt_setting)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4604      	mov	r4, r0
 80008cc:	4608      	mov	r0, r1
 80008ce:	4611      	mov	r1, r2
 80008d0:	461a      	mov	r2, r3
 80008d2:	4623      	mov	r3, r4
 80008d4:	71fb      	strb	r3, [r7, #7]
 80008d6:	4603      	mov	r3, r0
 80008d8:	80bb      	strh	r3, [r7, #4]
 80008da:	460b      	mov	r3, r1
 80008dc:	71bb      	strb	r3, [r7, #6]
 80008de:	4613      	mov	r3, r2
 80008e0:	70fb      	strb	r3, [r7, #3]
	(void)rhport;
	(void)func_id;
	(void)ep_out;
	(void)cur_alt_setting;

	spk_data_size = tud_audio_read(spk_buf, n_bytes_received);
 80008e2:	88bb      	ldrh	r3, [r7, #4]
 80008e4:	4619      	mov	r1, r3
 80008e6:	4806      	ldr	r0, [pc, #24]	; (8000900 <tud_audio_rx_done_pre_read_cb+0x3c>)
 80008e8:	f7ff fd56 	bl	8000398 <tud_audio_read>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <tud_audio_rx_done_pre_read_cb+0x40>)
 80008f2:	601a      	str	r2, [r3, #0]
	return true;
 80008f4:	2301      	movs	r3, #1
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd90      	pop	{r4, r7, pc}
 80008fe:	bf00      	nop
 8000900:	24000884 	.word	0x24000884
 8000904:	24000e94 	.word	0x24000e94

08000908 <tud_audio_tx_done_pre_load_cb>:

bool tud_audio_tx_done_pre_load_cb(uint8_t rhport, uint8_t itf, uint8_t ep_in, uint8_t cur_alt_setting)
{
 8000908:	b490      	push	{r4, r7}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	4604      	mov	r4, r0
 8000910:	4608      	mov	r0, r1
 8000912:	4611      	mov	r1, r2
 8000914:	461a      	mov	r2, r3
 8000916:	4623      	mov	r3, r4
 8000918:	71fb      	strb	r3, [r7, #7]
 800091a:	4603      	mov	r3, r0
 800091c:	71bb      	strb	r3, [r7, #6]
 800091e:	460b      	mov	r3, r1
 8000920:	717b      	strb	r3, [r7, #5]
 8000922:	4613      	mov	r3, r2
 8000924:	713b      	strb	r3, [r7, #4]
	(void)rhport;
	(void)itf;
	(void)ep_in;
	(void)cur_alt_setting;
	int16_t *dst = (int16_t*)mic_buf;
 8000926:	4b04      	ldr	r3, [pc, #16]	; (8000938 <tud_audio_tx_done_pre_load_cb+0x30>)
 8000928:	60fb      	str	r3, [r7, #12]

#endif


	// This callback could be used to fill microphone data separately
	return true;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bc90      	pop	{r4, r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	2400057c 	.word	0x2400057c

0800093c <tud_cdc_line_state_cb>:
//--------------------------------------------------------------------+
// USB CDC
//--------------------------------------------------------------------+
// Invoked when cdc when line state changed e.g connected/disconnected
void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	460b      	mov	r3, r1
 8000948:	71bb      	strb	r3, [r7, #6]
 800094a:	4613      	mov	r3, r2
 800094c:	717b      	strb	r3, [r7, #5]
		// Terminal connected
	}else
	{
		// Terminal disconnected
	}
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf)
{
 800095a:	b480      	push	{r7}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	71fb      	strb	r3, [r7, #7]
	(void) itf;
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <cdc_task>:

void cdc_task(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b092      	sub	sp, #72	; 0x48
 8000974:	af00      	add	r7, sp, #0
	// connected() check for DTR bit
	// Most but not all terminal client set this when making connection
	if ( tud_cdc_connected() )
 8000976:	f7ff fcd1 	bl	800031c <tud_cdc_connected>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d023      	beq.n	80009c8 <cdc_task+0x58>
	{
		//TODO: terminal shows message only after a key is pressed. Why?
		if (SendGreetings && tud_cdc_write_available())
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <cdc_task+0x60>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d00d      	beq.n	80009a4 <cdc_task+0x34>
 8000988:	f7ff fcfe 	bl	8000388 <tud_cdc_write_available>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d008      	beq.n	80009a4 <cdc_task+0x34>
		{
			tud_cdc_write("\n\rHello!\n\r", 8);
 8000992:	2108      	movs	r1, #8
 8000994:	480f      	ldr	r0, [pc, #60]	; (80009d4 <cdc_task+0x64>)
 8000996:	f7ff fce0 	bl	800035a <tud_cdc_write>
			tud_cdc_write_flush();
 800099a:	f7ff fced 	bl	8000378 <tud_cdc_write_flush>
			SendGreetings = 0;
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <cdc_task+0x60>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	701a      	strb	r2, [r3, #0]
		}
		// connected and there are data available
		if ( tud_cdc_available() )
 80009a4:	f7ff fcc2 	bl	800032c <tud_cdc_available>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d00c      	beq.n	80009c8 <cdc_task+0x58>
		{
			// read data
			char buf[64];
			uint32_t count = tud_cdc_read(buf, sizeof(buf));
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2140      	movs	r1, #64	; 0x40
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fcc2 	bl	800033c <tud_cdc_read>
 80009b8:	6478      	str	r0, [r7, #68]	; 0x44

			// Echo back
			// Note: Skip echo by commenting out write() and write_flush()
			// for throughput test e.g
			//    $ dd if=/dev/zero of=/dev/ttyACM0 count=10000
			tud_cdc_write(buf, count);
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fccb 	bl	800035a <tud_cdc_write>
			tud_cdc_write_flush();
 80009c4:	f7ff fcd8 	bl	8000378 <tud_cdc_write_flush>
		}
	}
}
 80009c8:	bf00      	nop
 80009ca:	3748      	adds	r7, #72	; 0x48
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	24000008 	.word	0x24000008
 80009d4:	0800a4ec 	.word	0x0800a4ec

080009d8 <audio_task>:
//--------------------------------------------------------------------+
// AUDIO Task
//--------------------------------------------------------------------+

void audio_task(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
	mic_buf[3] = 20000;
	tud_audio_write((uint8_t *)mic_buf, (uint16_t) (48));
#endif


	if (spk_data_size)
 80009de:	4b40      	ldr	r3, [pc, #256]	; (8000ae0 <audio_task+0x108>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d078      	beq.n	8000ad8 <audio_task+0x100>
	{
		if (current_resolution == 16)
 80009e6:	4b3f      	ldr	r3, [pc, #252]	; (8000ae4 <audio_task+0x10c>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b10      	cmp	r3, #16
 80009ec:	d13a      	bne.n	8000a64 <audio_task+0x8c>
		{
			int16_t *src = (int16_t*)spk_buf;
 80009ee:	4b3e      	ldr	r3, [pc, #248]	; (8000ae8 <audio_task+0x110>)
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
			int16_t *limit = (int16_t*)spk_buf + spk_data_size / 2;
 80009f2:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <audio_task+0x108>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	da00      	bge.n	80009fc <audio_task+0x24>
 80009fa:	3301      	adds	r3, #1
 80009fc:	105b      	asrs	r3, r3, #1
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	4a39      	ldr	r2, [pc, #228]	; (8000ae8 <audio_task+0x110>)
 8000a02:	4413      	add	r3, r2
 8000a04:	60bb      	str	r3, [r7, #8]
			int16_t *dst = (int16_t*)mic_buf;
 8000a06:	4b39      	ldr	r3, [pc, #228]	; (8000aec <audio_task+0x114>)
 8000a08:	623b      	str	r3, [r7, #32]
			while (src < limit)
 8000a0a:	e018      	b.n	8000a3e <audio_task+0x66>
			{
				// Combine two channels into one
				int32_t left = *src++;
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0e:	1c9a      	adds	r2, r3, #2
 8000a10:	627a      	str	r2, [r7, #36]	; 0x24
 8000a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a16:	607b      	str	r3, [r7, #4]
				int32_t right = *src++;
 8000a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1a:	1c9a      	adds	r2, r3, #2
 8000a1c:	627a      	str	r2, [r7, #36]	; 0x24
 8000a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a22:	603b      	str	r3, [r7, #0]
				*dst++ = (int16_t) ((left >> 1) + (right >> 1));
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	105b      	asrs	r3, r3, #1
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	105b      	asrs	r3, r3, #1
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	4413      	add	r3, r2
 8000a32:	b299      	uxth	r1, r3
 8000a34:	6a3b      	ldr	r3, [r7, #32]
 8000a36:	1c9a      	adds	r2, r3, #2
 8000a38:	623a      	str	r2, [r7, #32]
 8000a3a:	b20a      	sxth	r2, r1
 8000a3c:	801a      	strh	r2, [r3, #0]
			while (src < limit)
 8000a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d3e2      	bcc.n	8000a0c <audio_task+0x34>
			}
			tud_audio_write((uint8_t *)mic_buf, (uint16_t) (spk_data_size / 2));
 8000a46:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <audio_task+0x108>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	da00      	bge.n	8000a50 <audio_task+0x78>
 8000a4e:	3301      	adds	r3, #1
 8000a50:	105b      	asrs	r3, r3, #1
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	4619      	mov	r1, r3
 8000a56:	4825      	ldr	r0, [pc, #148]	; (8000aec <audio_task+0x114>)
 8000a58:	f7ff fcaf 	bl	80003ba <tud_audio_write>
			spk_data_size = 0;
 8000a5c:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <audio_task+0x108>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
			tud_audio_write((uint8_t *)mic_buf, (uint16_t) (spk_data_size / 2));
			spk_data_size = 0;
		}
	}
#endif
}
 8000a62:	e039      	b.n	8000ad8 <audio_task+0x100>
		else if (current_resolution == 24)
 8000a64:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <audio_task+0x10c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b18      	cmp	r3, #24
 8000a6a:	d135      	bne.n	8000ad8 <audio_task+0x100>
			int32_t *src = spk_buf;
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <audio_task+0x110>)
 8000a6e:	61fb      	str	r3, [r7, #28]
			int32_t *limit = spk_buf + spk_data_size / 4;
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <audio_task+0x108>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	da00      	bge.n	8000a7a <audio_task+0xa2>
 8000a78:	3303      	adds	r3, #3
 8000a7a:	109b      	asrs	r3, r3, #2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	4a1a      	ldr	r2, [pc, #104]	; (8000ae8 <audio_task+0x110>)
 8000a80:	4413      	add	r3, r2
 8000a82:	617b      	str	r3, [r7, #20]
			int32_t *dst = mic_buf;
 8000a84:	4b19      	ldr	r3, [pc, #100]	; (8000aec <audio_task+0x114>)
 8000a86:	61bb      	str	r3, [r7, #24]
			while (src < limit)
 8000a88:	e014      	b.n	8000ab4 <audio_task+0xdc>
				int32_t left = *src++;
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	1d1a      	adds	r2, r3, #4
 8000a8e:	61fa      	str	r2, [r7, #28]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	613b      	str	r3, [r7, #16]
				int32_t right = *src++;
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	1d1a      	adds	r2, r3, #4
 8000a98:	61fa      	str	r2, [r7, #28]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	60fb      	str	r3, [r7, #12]
				*dst++ = (int32_t) ((uint32_t) ((left >> 1) + (right >> 1)) & 0xffffff00ul);
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	105a      	asrs	r2, r3, #1
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	105b      	asrs	r3, r3, #1
 8000aa6:	441a      	add	r2, r3
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	1d19      	adds	r1, r3, #4
 8000aac:	61b9      	str	r1, [r7, #24]
 8000aae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000ab2:	601a      	str	r2, [r3, #0]
			while (src < limit)
 8000ab4:	69fa      	ldr	r2, [r7, #28]
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d3e6      	bcc.n	8000a8a <audio_task+0xb2>
			tud_audio_write((uint8_t *)mic_buf, (uint16_t) (spk_data_size / 2));
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <audio_task+0x108>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	da00      	bge.n	8000ac6 <audio_task+0xee>
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	105b      	asrs	r3, r3, #1
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	4619      	mov	r1, r3
 8000acc:	4807      	ldr	r0, [pc, #28]	; (8000aec <audio_task+0x114>)
 8000ace:	f7ff fc74 	bl	80003ba <tud_audio_write>
			spk_data_size = 0;
 8000ad2:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <audio_task+0x108>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	24000e94 	.word	0x24000e94
 8000ae4:	24000e98 	.word	0x24000e98
 8000ae8:	24000884 	.word	0x24000884
 8000aec:	2400057c 	.word	0x2400057c

08000af0 <HAL_GPIO_EXTI_Callback>:

	//  board_led_write(led_state);
	led_state = 1 - led_state;
}

void  HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13) {
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b00:	d11a      	bne.n	8000b38 <HAL_GPIO_EXTI_Callback+0x48>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000b02:	2201      	movs	r2, #1
 8000b04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <HAL_GPIO_EXTI_Callback+0x50>)
 8000b0a:	f000 fe8b 	bl	8001824 <HAL_GPIO_WritePin>

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void)
{
  tud_task_ext(UINT32_MAX, false);
 8000b0e:	2100      	movs	r1, #0
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f006 fa8e 	bl	8007034 <tud_task_ext>
}
 8000b18:	bf00      	nop
		tud_task();  //about 2.5 uSec
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b20:	4807      	ldr	r0, [pc, #28]	; (8000b40 <HAL_GPIO_EXTI_Callback+0x50>)
 8000b22:	f000 fe7f 	bl	8001824 <HAL_GPIO_WritePin>
		audio_task();
 8000b26:	f7ff ff57 	bl	80009d8 <audio_task>
		cdc_task();
 8000b2a:	f7ff ff21 	bl	8000970 <cdc_task>
		TestGlobalVar++;
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_GPIO_EXTI_Callback+0x54>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	3301      	adds	r3, #1
 8000b34:	4a03      	ldr	r2, [pc, #12]	; (8000b44 <HAL_GPIO_EXTI_Callback+0x54>)
 8000b36:	6013      	str	r3, [r2, #0]
		//			AudioCounter = TestGlobalVar;
	}

}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	58020000 	.word	0x58020000
 8000b44:	24000e9c 	.word	0x24000e9c

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4e:	f000 fafb 	bl	8001148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b52:	f000 f835 	bl	8000bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b56:	f000 f8d5 	bl	8000d04 <MX_GPIO_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000b5a:	f000 f8a1 	bl	8000ca0 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b64:	4814      	ldr	r0, [pc, #80]	; (8000bb8 <main+0x70>)
 8000b66:	f000 fe5d 	bl	8001824 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000b6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b6e:	f000 fb7d 	bl	800126c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b78:	480f      	ldr	r0, [pc, #60]	; (8000bb8 <main+0x70>)
 8000b7a:	f000 fe53 	bl	8001824 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000b7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b82:	f000 fb73 	bl	800126c <HAL_Delay>
	//  board_init();
	TU_ASSERT(tusb_init());
 8000b86:	f009 fb23 	bl	800a1d0 <tusb_init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	f083 0301 	eor.w	r3, r3, #1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d00a      	beq.n	8000bac <main+0x64>
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <main+0x74>)
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d000      	beq.n	8000ba8 <main+0x60>
 8000ba6:	be00      	bkpt	0x0000
 8000ba8:	2300      	movs	r3, #0
 8000baa:	e000      	b.n	8000bae <main+0x66>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000bac:	e7fe      	b.n	8000bac <main+0x64>
		TestGlobalVar++;
		AudioCounter = TestGlobalVar;
#endif
	}
  /* USER CODE END 3 */
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	58020000 	.word	0x58020000
 8000bbc:	e000edf0 	.word	0xe000edf0

08000bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b09c      	sub	sp, #112	; 0x70
 8000bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	224c      	movs	r2, #76	; 0x4c
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f009 fc74 	bl	800a4bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2220      	movs	r2, #32
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f009 fc6e 	bl	800a4bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000be0:	2002      	movs	r0, #2
 8000be2:	f000 ff9b 	bl	8001b1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b2c      	ldr	r3, [pc, #176]	; (8000c9c <SystemClock_Config+0xdc>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	4a2b      	ldr	r2, [pc, #172]	; (8000c9c <SystemClock_Config+0xdc>)
 8000bf0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bf4:	6193      	str	r3, [r2, #24]
 8000bf6:	4b29      	ldr	r3, [pc, #164]	; (8000c9c <SystemClock_Config+0xdc>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c02:	bf00      	nop
 8000c04:	4b25      	ldr	r3, [pc, #148]	; (8000c9c <SystemClock_Config+0xdc>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c10:	d1f8      	bne.n	8000c04 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000c12:	2321      	movs	r3, #33	; 0x21
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c16:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c20:	2302      	movs	r3, #2
 8000c22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c24:	2302      	movs	r3, #2
 8000c26:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c28:	2305      	movs	r3, #5
 8000c2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000c2c:	2364      	movs	r3, #100	; 0x64
 8000c2e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 ffaf 	bl	8001bb0 <HAL_RCC_OscConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c58:	f000 f8c2 	bl	8000de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5c:	233f      	movs	r3, #63	; 0x3f
 8000c5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c60:	2303      	movs	r3, #3
 8000c62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c68:	2308      	movs	r3, #8
 8000c6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c6c:	2340      	movs	r3, #64	; 0x40
 8000c6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c70:	2340      	movs	r3, #64	; 0x40
 8000c72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c78:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c7a:	2340      	movs	r3, #64	; 0x40
 8000c7c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2103      	movs	r1, #3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f001 fb6e 	bl	8002364 <HAL_RCC_ClockConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c8e:	f000 f8a7 	bl	8000de0 <Error_Handler>
  }
}
 8000c92:	bf00      	nop
 8000c94:	3770      	adds	r7, #112	; 0x70
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	58024800 	.word	0x58024800

08000ca0 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000ca6:	4a16      	ldr	r2, [pc, #88]	; (8000d00 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000cac:	2209      	movs	r2, #9
 8000cae:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000ce8:	f000 fdcf 	bl	800188a <HAL_PCD_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000cf2:	f000 f875 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	24000064 	.word	0x24000064
 8000d00:	40040000 	.word	0x40040000

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 030c 	add.w	r3, r7, #12
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1a:	4b2e      	ldr	r3, [pc, #184]	; (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d20:	4a2c      	ldr	r2, [pc, #176]	; (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d38:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3e:	4a25      	ldr	r2, [pc, #148]	; (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d40:	f043 0308 	orr.w	r3, r3, #8
 8000d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d48:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4e:	f003 0308 	and.w	r3, r3, #8
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d7a:	4817      	ldr	r0, [pc, #92]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d7c:	f000 fd52 	bl	8001824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d86:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	4619      	mov	r1, r3
 8000d96:	4811      	ldr	r0, [pc, #68]	; (8000ddc <MX_GPIO_Init+0xd8>)
 8000d98:	f000 fb9c 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	4619      	mov	r1, r3
 8000db4:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000db6:	f000 fb8d 	bl	80014d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2103      	movs	r1, #3
 8000dbe:	2028      	movs	r0, #40	; 0x28
 8000dc0:	f000 fb53 	bl	800146a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dc4:	2028      	movs	r0, #40	; 0x28
 8000dc6:	f000 fb6a 	bl	800149e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dca:	bf00      	nop
 8000dcc:	3720      	adds	r7, #32
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	58024400 	.word	0x58024400
 8000dd8:	58020000 	.word	0x58020000
 8000ddc:	58020c00 	.word	0x58020c00

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000de8:	e7fe      	b.n	8000de8 <Error_Handler+0x8>
	...

08000dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_MspInit+0x30>)
 8000df4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000df8:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_MspInit+0x30>)
 8000dfa:	f043 0302 	orr.w	r3, r3, #2
 8000dfe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_MspInit+0x30>)
 8000e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	58024400 	.word	0x58024400

08000e20 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b0b2      	sub	sp, #200	; 0xc8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	22b8      	movs	r2, #184	; 0xb8
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f009 fb43 	bl	800a4bc <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a1a      	ldr	r2, [pc, #104]	; (8000ea4 <HAL_PCD_MspInit+0x84>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d12c      	bne.n	8000e9a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000e4c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000e50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f001 fdb3 	bl	80029c4 <HAL_RCCEx_PeriphCLKConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8000e64:	f7ff ffbc 	bl	8000de0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e68:	f000 fe92 	bl	8001b90 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_PCD_MspInit+0x88>)
 8000e6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e72:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <HAL_PCD_MspInit+0x88>)
 8000e74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e78:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_PCD_MspInit+0x88>)
 8000e7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	204d      	movs	r0, #77	; 0x4d
 8000e90:	f000 faeb 	bl	800146a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8000e94:	204d      	movs	r0, #77	; 0x4d
 8000e96:	f000 fb02 	bl	800149e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	37c8      	adds	r7, #200	; 0xc8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40040000 	.word	0x40040000
 8000ea8:	58024400 	.word	0x58024400

08000eac <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <NMI_Handler+0x4>

08000eb2 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8000ebc:	e7fe      	b.n	8000ebc <MemManage_Handler+0x4>

08000ebe <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000eca <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000ef8:	f000 f998 	bl	800122c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f08:	f000 fca5 	bl	8001856 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <OTG_HS_IRQHandler>:

/**
 * @brief This function handles USB On The Go HS global interrupt.
 */
void OTG_HS_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	//			cdc_task();
	//			TestGlobalVar++;
	//			AudioCounter = TestGlobalVar;

#endif
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 8000f14:	2000      	movs	r0, #0
 8000f16:	f009 f80d 	bl	8009f34 <dcd_int_handler>
	__HAL_GPIO_EXTI_GENERATE_SWIT(GPIO_PIN_13);
 8000f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f28:	6093      	str	r3, [r2, #8]
	return;
 8000f2a:	bf00      	nop
	/* USER CODE END OTG_HS_IRQn 0 */
	HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
	/* USER CODE BEGIN OTG_HS_IRQn 1 */
	/* USER CODE END OTG_HS_IRQn 1 */
}
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f34:	4b32      	ldr	r3, [pc, #200]	; (8001000 <SystemInit+0xd0>)
 8000f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3a:	4a31      	ldr	r2, [pc, #196]	; (8001000 <SystemInit+0xd0>)
 8000f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f44:	4b2f      	ldr	r3, [pc, #188]	; (8001004 <SystemInit+0xd4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 030f 	and.w	r3, r3, #15
 8000f4c:	2b06      	cmp	r3, #6
 8000f4e:	d807      	bhi.n	8000f60 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f50:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <SystemInit+0xd4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f023 030f 	bic.w	r3, r3, #15
 8000f58:	4a2a      	ldr	r2, [pc, #168]	; (8001004 <SystemInit+0xd4>)
 8000f5a:	f043 0307 	orr.w	r3, r3, #7
 8000f5e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f60:	4b29      	ldr	r3, [pc, #164]	; (8001008 <SystemInit+0xd8>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a28      	ldr	r2, [pc, #160]	; (8001008 <SystemInit+0xd8>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f6c:	4b26      	ldr	r3, [pc, #152]	; (8001008 <SystemInit+0xd8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f72:	4b25      	ldr	r3, [pc, #148]	; (8001008 <SystemInit+0xd8>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4924      	ldr	r1, [pc, #144]	; (8001008 <SystemInit+0xd8>)
 8000f78:	4b24      	ldr	r3, [pc, #144]	; (800100c <SystemInit+0xdc>)
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <SystemInit+0xd4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0308 	and.w	r3, r3, #8
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d007      	beq.n	8000f9a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <SystemInit+0xd4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f023 030f 	bic.w	r3, r3, #15
 8000f92:	4a1c      	ldr	r2, [pc, #112]	; (8001004 <SystemInit+0xd4>)
 8000f94:	f043 0307 	orr.w	r3, r3, #7
 8000f98:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <SystemInit+0xd8>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <SystemInit+0xd8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <SystemInit+0xd8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <SystemInit+0xd8>)
 8000fae:	4a18      	ldr	r2, [pc, #96]	; (8001010 <SystemInit+0xe0>)
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <SystemInit+0xd8>)
 8000fb4:	4a17      	ldr	r2, [pc, #92]	; (8001014 <SystemInit+0xe4>)
 8000fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <SystemInit+0xd8>)
 8000fba:	4a17      	ldr	r2, [pc, #92]	; (8001018 <SystemInit+0xe8>)
 8000fbc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <SystemInit+0xd8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <SystemInit+0xd8>)
 8000fc6:	4a14      	ldr	r2, [pc, #80]	; (8001018 <SystemInit+0xe8>)
 8000fc8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <SystemInit+0xd8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <SystemInit+0xd8>)
 8000fd2:	4a11      	ldr	r2, [pc, #68]	; (8001018 <SystemInit+0xe8>)
 8000fd4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <SystemInit+0xd8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <SystemInit+0xd8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a09      	ldr	r2, [pc, #36]	; (8001008 <SystemInit+0xd8>)
 8000fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <SystemInit+0xd8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <SystemInit+0xec>)
 8000ff0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ff4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00
 8001004:	52002000 	.word	0x52002000
 8001008:	58024400 	.word	0x58024400
 800100c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001010:	02020200 	.word	0x02020200
 8001014:	01ff0000 	.word	0x01ff0000
 8001018:	01010280 	.word	0x01010280
 800101c:	52004000 	.word	0x52004000

08001020 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	return (uint8_t const *)&desc_device;
 8001024:	4b02      	ldr	r3, [pc, #8]	; (8001030 <tud_descriptor_device_cb+0x10>)
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	0800a570 	.word	0x0800a570

08001034 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	(void)index; // for multiple configurations
	return desc_configuration;
 800103e:	4b03      	ldr	r3, [pc, #12]	; (800104c <tud_descriptor_configuration_cb+0x18>)
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	0800a584 	.word	0x0800a584

08001050 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	460a      	mov	r2, r1
 800105a:	71fb      	strb	r3, [r7, #7]
 800105c:	4613      	mov	r3, r2
 800105e:	80bb      	strh	r3, [r7, #4]
	(void)langid;

	uint8_t chr_count;

	if (index == 0)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d108      	bne.n	8001078 <tud_descriptor_string_cb+0x28>
	{
		memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8001066:	4b21      	ldr	r3, [pc, #132]	; (80010ec <tud_descriptor_string_cb+0x9c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	b29a      	uxth	r2, r3
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <tud_descriptor_string_cb+0xa0>)
 8001070:	805a      	strh	r2, [r3, #2]
		chr_count = 1;
 8001072:	2301      	movs	r3, #1
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	e027      	b.n	80010c8 <tud_descriptor_string_cb+0x78>
	}
	else
	{
		// Convert ASCII string into UTF-16

		if (!(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0]))) return NULL;
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b06      	cmp	r3, #6
 800107c:	d901      	bls.n	8001082 <tud_descriptor_string_cb+0x32>
 800107e:	2300      	movs	r3, #0
 8001080:	e030      	b.n	80010e4 <tud_descriptor_string_cb+0x94>

		const char* str = string_desc_arr[index];
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	4a19      	ldr	r2, [pc, #100]	; (80010ec <tud_descriptor_string_cb+0x9c>)
 8001086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108a:	60bb      	str	r3, [r7, #8]

		// Cap at max char
		chr_count = (uint8_t) strlen(str);
 800108c:	68b8      	ldr	r0, [r7, #8]
 800108e:	f7ff f93d 	bl	800030c <strlen>
 8001092:	4603      	mov	r3, r0
 8001094:	73fb      	strb	r3, [r7, #15]
		if (chr_count > 31) chr_count = 31;
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	2b1f      	cmp	r3, #31
 800109a:	d901      	bls.n	80010a0 <tud_descriptor_string_cb+0x50>
 800109c:	231f      	movs	r3, #31
 800109e:	73fb      	strb	r3, [r7, #15]

		for (uint8_t i = 0; i < chr_count; i++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	73bb      	strb	r3, [r7, #14]
 80010a4:	e00c      	b.n	80010c0 <tud_descriptor_string_cb+0x70>
		{
			_desc_str[1 + i] = str[i];
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	68ba      	ldr	r2, [r7, #8]
 80010aa:	4413      	add	r3, r2
 80010ac:	781a      	ldrb	r2, [r3, #0]
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	3301      	adds	r3, #1
 80010b2:	b291      	uxth	r1, r2
 80010b4:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <tud_descriptor_string_cb+0xa0>)
 80010b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < chr_count; i++)
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	3301      	adds	r3, #1
 80010be:	73bb      	strb	r3, [r7, #14]
 80010c0:	7bba      	ldrb	r2, [r7, #14]
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d3ee      	bcc.n	80010a6 <tud_descriptor_string_cb+0x56>
		}
	}

	// first byte is length (including header), second byte is string type
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	3301      	adds	r3, #1
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80010da:	b21b      	sxth	r3, r3
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <tud_descriptor_string_cb+0xa0>)
 80010e0:	801a      	strh	r2, [r3, #0]

	return _desc_str;
 80010e2:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <tud_descriptor_string_cb+0xa0>)
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	24000014 	.word	0x24000014
 80010f0:	24000ea0 	.word	0x24000ea0

080010f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800112c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010f8:	f7ff ff1a 	bl	8000f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010fe:	490d      	ldr	r1, [pc, #52]	; (8001134 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001104:	e002      	b.n	800110c <LoopCopyDataInit>

08001106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110a:	3304      	adds	r3, #4

0800110c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800110c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001110:	d3f9      	bcc.n	8001106 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001114:	4c0a      	ldr	r4, [pc, #40]	; (8001140 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001118:	e001      	b.n	800111e <LoopFillZerobss>

0800111a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800111c:	3204      	adds	r2, #4

0800111e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001120:	d3fb      	bcc.n	800111a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001122:	f009 f999 	bl	800a458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001126:	f7ff fd0f 	bl	8000b48 <main>
  bx  lr
 800112a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800112c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001130:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001134:	24000048 	.word	0x24000048
  ldr r2, =_sidata
 8001138:	0800a744 	.word	0x0800a744
  ldr r2, =_sbss
 800113c:	24000048 	.word	0x24000048
  ldr r4, =_ebss
 8001140:	24001c28 	.word	0x24001c28

08001144 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC3_IRQHandler>
	...

08001148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114e:	2003      	movs	r0, #3
 8001150:	f000 f980 	bl	8001454 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001154:	f001 fabc 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 8001158:	4602      	mov	r2, r0
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_Init+0x68>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	0a1b      	lsrs	r3, r3, #8
 8001160:	f003 030f 	and.w	r3, r3, #15
 8001164:	4913      	ldr	r1, [pc, #76]	; (80011b4 <HAL_Init+0x6c>)
 8001166:	5ccb      	ldrb	r3, [r1, r3]
 8001168:	f003 031f 	and.w	r3, r3, #31
 800116c:	fa22 f303 	lsr.w	r3, r2, r3
 8001170:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_Init+0x68>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <HAL_Init+0x6c>)
 800117c:	5cd3      	ldrb	r3, [r2, r3]
 800117e:	f003 031f 	and.w	r3, r3, #31
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	fa22 f303 	lsr.w	r3, r2, r3
 8001188:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <HAL_Init+0x70>)
 800118a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800118c:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <HAL_Init+0x74>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001192:	200f      	movs	r0, #15
 8001194:	f000 f814 	bl	80011c0 <HAL_InitTick>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e002      	b.n	80011a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011a2:	f7ff fe23 	bl	8000dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	58024400 	.word	0x58024400
 80011b4:	0800a560 	.word	0x0800a560
 80011b8:	24000010 	.word	0x24000010
 80011bc:	2400000c 	.word	0x2400000c

080011c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_InitTick+0x60>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e021      	b.n	8001218 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_InitTick+0x64>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_InitTick+0x60>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 f965 	bl	80014ba <HAL_SYSTICK_Config>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00e      	b.n	8001218 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b0f      	cmp	r3, #15
 80011fe:	d80a      	bhi.n	8001216 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001200:	2200      	movs	r2, #0
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	f000 f92f 	bl	800146a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800120c:	4a06      	ldr	r2, [pc, #24]	; (8001228 <HAL_InitTick+0x68>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	e000      	b.n	8001218 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	24000034 	.word	0x24000034
 8001224:	2400000c 	.word	0x2400000c
 8001228:	24000030 	.word	0x24000030

0800122c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x20>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_IncTick+0x24>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a04      	ldr	r2, [pc, #16]	; (8001250 <HAL_IncTick+0x24>)
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	24000034 	.word	0x24000034
 8001250:	24000ee0 	.word	0x24000ee0

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_GetTick+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	24000ee0 	.word	0x24000ee0

0800126c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001274:	f7ff ffee 	bl	8001254 <HAL_GetTick>
 8001278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001284:	d005      	beq.n	8001292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_Delay+0x44>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4413      	add	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001292:	bf00      	nop
 8001294:	f7ff ffde 	bl	8001254 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d8f7      	bhi.n	8001294 <HAL_Delay+0x28>
  {
  }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	24000034 	.word	0x24000034

080012b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <__NVIC_SetPriorityGrouping+0x40>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d0:	4013      	ands	r3, r2
 80012d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <__NVIC_SetPriorityGrouping+0x44>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <__NVIC_SetPriorityGrouping+0x40>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00
 80012f8:	05fa0000 	.word	0x05fa0000

080012fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <__NVIC_GetPriorityGrouping+0x18>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	f003 0307 	and.w	r3, r3, #7
}
 800130a:	4618      	mov	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001326:	2b00      	cmp	r3, #0
 8001328:	db0b      	blt.n	8001342 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	f003 021f 	and.w	r2, r3, #31
 8001330:	4907      	ldr	r1, [pc, #28]	; (8001350 <__NVIC_EnableIRQ+0x38>)
 8001332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	2001      	movs	r0, #1
 800133a:	fa00 f202 	lsl.w	r2, r0, r2
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000e100 	.word	0xe000e100

08001354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001364:	2b00      	cmp	r3, #0
 8001366:	db0a      	blt.n	800137e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	b2da      	uxtb	r2, r3
 800136c:	490c      	ldr	r1, [pc, #48]	; (80013a0 <__NVIC_SetPriority+0x4c>)
 800136e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001372:	0112      	lsls	r2, r2, #4
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	440b      	add	r3, r1
 8001378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800137c:	e00a      	b.n	8001394 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4908      	ldr	r1, [pc, #32]	; (80013a4 <__NVIC_SetPriority+0x50>)
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	3b04      	subs	r3, #4
 800138c:	0112      	lsls	r2, r2, #4
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	440b      	add	r3, r1
 8001392:	761a      	strb	r2, [r3, #24]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000e100 	.word	0xe000e100
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b089      	sub	sp, #36	; 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f1c3 0307 	rsb	r3, r3, #7
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	bf28      	it	cs
 80013c6:	2304      	movcs	r3, #4
 80013c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3304      	adds	r3, #4
 80013ce:	2b06      	cmp	r3, #6
 80013d0:	d902      	bls.n	80013d8 <NVIC_EncodePriority+0x30>
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3b03      	subs	r3, #3
 80013d6:	e000      	b.n	80013da <NVIC_EncodePriority+0x32>
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	f04f 32ff 	mov.w	r2, #4294967295
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	401a      	ands	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f0:	f04f 31ff 	mov.w	r1, #4294967295
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	43d9      	mvns	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	4313      	orrs	r3, r2
         );
}
 8001402:	4618      	mov	r0, r3
 8001404:	3724      	adds	r7, #36	; 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001420:	d301      	bcc.n	8001426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001422:	2301      	movs	r3, #1
 8001424:	e00f      	b.n	8001446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <SysTick_Config+0x40>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142e:	210f      	movs	r1, #15
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f7ff ff8e 	bl	8001354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <SysTick_Config+0x40>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <SysTick_Config+0x40>)
 8001440:	2207      	movs	r2, #7
 8001442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	e000e010 	.word	0xe000e010

08001454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff29 	bl	80012b4 <__NVIC_SetPriorityGrouping>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001478:	f7ff ff40 	bl	80012fc <__NVIC_GetPriorityGrouping>
 800147c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f7ff ff90 	bl	80013a8 <NVIC_EncodePriority>
 8001488:	4602      	mov	r2, r0
 800148a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff5f 	bl	8001354 <__NVIC_SetPriority>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff33 	bl	8001318 <__NVIC_EnableIRQ>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ffa4 	bl	8001410 <SysTick_Config>
 80014c8:	4603      	mov	r3, r0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80014e2:	4b86      	ldr	r3, [pc, #536]	; (80016fc <HAL_GPIO_Init+0x228>)
 80014e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014e6:	e18c      	b.n	8001802 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 817e 	beq.w	80017fc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b01      	cmp	r3, #1
 800150a:	d005      	beq.n	8001518 <HAL_GPIO_Init+0x44>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d130      	bne.n	800157a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800154e:	2201      	movs	r2, #1
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	f003 0201 	and.w	r2, r3, #1
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	2b03      	cmp	r3, #3
 8001584:	d017      	beq.n	80015b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	2203      	movs	r2, #3
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d123      	bne.n	800160a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	08da      	lsrs	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3208      	adds	r2, #8
 80015ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	220f      	movs	r2, #15
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	691a      	ldr	r2, [r3, #16]
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	08da      	lsrs	r2, r3, #3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3208      	adds	r2, #8
 8001604:	69b9      	ldr	r1, [r7, #24]
 8001606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	2203      	movs	r2, #3
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 0203 	and.w	r2, r3, #3
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 80d8 	beq.w	80017fc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164c:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <HAL_GPIO_Init+0x22c>)
 800164e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001652:	4a2b      	ldr	r2, [pc, #172]	; (8001700 <HAL_GPIO_Init+0x22c>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800165c:	4b28      	ldr	r3, [pc, #160]	; (8001700 <HAL_GPIO_Init+0x22c>)
 800165e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800166a:	4a26      	ldr	r2, [pc, #152]	; (8001704 <HAL_GPIO_Init+0x230>)
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	3302      	adds	r3, #2
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	220f      	movs	r2, #15
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <HAL_GPIO_Init+0x234>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d04a      	beq.n	800172c <HAL_GPIO_Init+0x258>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a1c      	ldr	r2, [pc, #112]	; (800170c <HAL_GPIO_Init+0x238>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d02b      	beq.n	80016f6 <HAL_GPIO_Init+0x222>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <HAL_GPIO_Init+0x23c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d025      	beq.n	80016f2 <HAL_GPIO_Init+0x21e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a1a      	ldr	r2, [pc, #104]	; (8001714 <HAL_GPIO_Init+0x240>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d01f      	beq.n	80016ee <HAL_GPIO_Init+0x21a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a19      	ldr	r2, [pc, #100]	; (8001718 <HAL_GPIO_Init+0x244>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d019      	beq.n	80016ea <HAL_GPIO_Init+0x216>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a18      	ldr	r2, [pc, #96]	; (800171c <HAL_GPIO_Init+0x248>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d013      	beq.n	80016e6 <HAL_GPIO_Init+0x212>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a17      	ldr	r2, [pc, #92]	; (8001720 <HAL_GPIO_Init+0x24c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d00d      	beq.n	80016e2 <HAL_GPIO_Init+0x20e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a16      	ldr	r2, [pc, #88]	; (8001724 <HAL_GPIO_Init+0x250>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d007      	beq.n	80016de <HAL_GPIO_Init+0x20a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a15      	ldr	r2, [pc, #84]	; (8001728 <HAL_GPIO_Init+0x254>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d101      	bne.n	80016da <HAL_GPIO_Init+0x206>
 80016d6:	2309      	movs	r3, #9
 80016d8:	e029      	b.n	800172e <HAL_GPIO_Init+0x25a>
 80016da:	230a      	movs	r3, #10
 80016dc:	e027      	b.n	800172e <HAL_GPIO_Init+0x25a>
 80016de:	2307      	movs	r3, #7
 80016e0:	e025      	b.n	800172e <HAL_GPIO_Init+0x25a>
 80016e2:	2306      	movs	r3, #6
 80016e4:	e023      	b.n	800172e <HAL_GPIO_Init+0x25a>
 80016e6:	2305      	movs	r3, #5
 80016e8:	e021      	b.n	800172e <HAL_GPIO_Init+0x25a>
 80016ea:	2304      	movs	r3, #4
 80016ec:	e01f      	b.n	800172e <HAL_GPIO_Init+0x25a>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e01d      	b.n	800172e <HAL_GPIO_Init+0x25a>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e01b      	b.n	800172e <HAL_GPIO_Init+0x25a>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e019      	b.n	800172e <HAL_GPIO_Init+0x25a>
 80016fa:	bf00      	nop
 80016fc:	58000080 	.word	0x58000080
 8001700:	58024400 	.word	0x58024400
 8001704:	58000400 	.word	0x58000400
 8001708:	58020000 	.word	0x58020000
 800170c:	58020400 	.word	0x58020400
 8001710:	58020800 	.word	0x58020800
 8001714:	58020c00 	.word	0x58020c00
 8001718:	58021000 	.word	0x58021000
 800171c:	58021400 	.word	0x58021400
 8001720:	58021800 	.word	0x58021800
 8001724:	58021c00 	.word	0x58021c00
 8001728:	58022400 	.word	0x58022400
 800172c:	2300      	movs	r3, #0
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	f002 0203 	and.w	r2, r2, #3
 8001734:	0092      	lsls	r2, r2, #2
 8001736:	4093      	lsls	r3, r2
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800173e:	4938      	ldr	r1, [pc, #224]	; (8001820 <HAL_GPIO_Init+0x34c>)
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	3302      	adds	r3, #2
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800174c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001772:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800177a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	3301      	adds	r3, #1
 8001800:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa22 f303 	lsr.w	r3, r2, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	f47f ae6b 	bne.w	80014e8 <HAL_GPIO_Init+0x14>
  }
}
 8001812:	bf00      	nop
 8001814:	bf00      	nop
 8001816:	3724      	adds	r7, #36	; 0x24
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	58000400 	.word	0x58000400

08001824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
 8001830:	4613      	mov	r3, r2
 8001832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001834:	787b      	ldrb	r3, [r7, #1]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183a:	887a      	ldrh	r2, [r7, #2]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001840:	e003      	b.n	800184a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001842:	887b      	ldrh	r3, [r7, #2]
 8001844:	041a      	lsls	r2, r3, #16
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	619a      	str	r2, [r3, #24]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001864:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	4013      	ands	r3, r2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d008      	beq.n	8001882 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff f937 	bl	8000af0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800188a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188c:	b08f      	sub	sp, #60	; 0x3c
 800188e:	af0a      	add	r7, sp, #40	; 0x28
 8001890:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e116      	b.n	8001aca <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d106      	bne.n	80018bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff fab2 	bl	8000e20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2203      	movs	r2, #3
 80018c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f002 fbe4 	bl	80040a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	687e      	ldr	r6, [r7, #4]
 80018e8:	466d      	mov	r5, sp
 80018ea:	f106 0410 	add.w	r4, r6, #16
 80018ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80018fe:	1d33      	adds	r3, r6, #4
 8001900:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001902:	6838      	ldr	r0, [r7, #0]
 8001904:	f002 fb62 	bl	8003fcc <USB_CoreInit>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2202      	movs	r2, #2
 8001912:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e0d7      	b.n	8001aca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f002 fbd2 	bl	80040ca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001926:	2300      	movs	r3, #0
 8001928:	73fb      	strb	r3, [r7, #15]
 800192a:	e04a      	b.n	80019c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800192c:	7bfa      	ldrb	r2, [r7, #15]
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	4413      	add	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	333d      	adds	r3, #61	; 0x3d
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	333c      	adds	r3, #60	; 0x3c
 8001950:	7bfa      	ldrb	r2, [r7, #15]
 8001952:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001954:	7bfa      	ldrb	r2, [r7, #15]
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	b298      	uxth	r0, r3
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	3356      	adds	r3, #86	; 0x56
 8001968:	4602      	mov	r2, r0
 800196a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800196c:	7bfa      	ldrb	r2, [r7, #15]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4413      	add	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	3340      	adds	r3, #64	; 0x40
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001980:	7bfa      	ldrb	r2, [r7, #15]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4413      	add	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	3344      	adds	r3, #68	; 0x44
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001994:	7bfa      	ldrb	r2, [r7, #15]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4413      	add	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	3348      	adds	r3, #72	; 0x48
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019a8:	7bfa      	ldrb	r2, [r7, #15]
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	334c      	adds	r3, #76	; 0x4c
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	3301      	adds	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
 80019c2:	7bfa      	ldrb	r2, [r7, #15]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d3af      	bcc.n	800192c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019cc:	2300      	movs	r3, #0
 80019ce:	73fb      	strb	r3, [r7, #15]
 80019d0:	e044      	b.n	8001a5c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019d2:	7bfa      	ldrb	r2, [r7, #15]
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4413      	add	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019e8:	7bfa      	ldrb	r2, [r7, #15]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4413      	add	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80019fa:	7bfa      	ldrb	r2, [r7, #15]
 80019fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019fe:	7bfa      	ldrb	r2, [r7, #15]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a14:	7bfa      	ldrb	r2, [r7, #15]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a2a:	7bfa      	ldrb	r2, [r7, #15]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a40:	7bfa      	ldrb	r2, [r7, #15]
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4413      	add	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
 8001a5c:	7bfa      	ldrb	r2, [r7, #15]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d3b5      	bcc.n	80019d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	687e      	ldr	r6, [r7, #4]
 8001a6e:	466d      	mov	r5, sp
 8001a70:	f106 0410 	add.w	r4, r6, #16
 8001a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a80:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a84:	1d33      	adds	r3, r6, #4
 8001a86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a88:	6838      	ldr	r0, [r7, #0]
 8001a8a:	f002 fb6b 	bl	8004164 <USB_DevInit>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e014      	b.n	8001aca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d102      	bne.n	8001abe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f80b 	bl	8001ad4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 fd29 	bl	800451a <USB_DevDisconnect>

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001ad4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_PCDEx_ActivateLPM+0x44>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	10000003 	.word	0x10000003

08001b1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_PWREx_ConfigSupply+0x70>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d00a      	beq.n	8001b46 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <HAL_PWREx_ConfigSupply+0x70>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d001      	beq.n	8001b42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e01f      	b.n	8001b82 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e01d      	b.n	8001b82 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <HAL_PWREx_ConfigSupply+0x70>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	f023 0207 	bic.w	r2, r3, #7
 8001b4e:	490f      	ldr	r1, [pc, #60]	; (8001b8c <HAL_PWREx_ConfigSupply+0x70>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001b56:	f7ff fb7d 	bl	8001254 <HAL_GetTick>
 8001b5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b5c:	e009      	b.n	8001b72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b5e:	f7ff fb79 	bl	8001254 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b6c:	d901      	bls.n	8001b72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e007      	b.n	8001b82 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_PWREx_ConfigSupply+0x70>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b7e:	d1ee      	bne.n	8001b5e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	58024800 	.word	0x58024800

08001b90 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b9e:	60d3      	str	r3, [r2, #12]
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	58024800 	.word	0x58024800

08001bb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e3c8      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 8087 	beq.w	8001cde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd0:	4b88      	ldr	r3, [pc, #544]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bda:	4b86      	ldr	r3, [pc, #536]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be2:	2b10      	cmp	r3, #16
 8001be4:	d007      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x46>
 8001be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be8:	2b18      	cmp	r3, #24
 8001bea:	d110      	bne.n	8001c0e <HAL_RCC_OscConfig+0x5e>
 8001bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d10b      	bne.n	8001c0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf6:	4b7f      	ldr	r3, [pc, #508]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d06c      	beq.n	8001cdc <HAL_RCC_OscConfig+0x12c>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d168      	bne.n	8001cdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e3a2      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c16:	d106      	bne.n	8001c26 <HAL_RCC_OscConfig+0x76>
 8001c18:	4b76      	ldr	r3, [pc, #472]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a75      	ldr	r2, [pc, #468]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	e02e      	b.n	8001c84 <HAL_RCC_OscConfig+0xd4>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x98>
 8001c2e:	4b71      	ldr	r3, [pc, #452]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a70      	ldr	r2, [pc, #448]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	4b6e      	ldr	r3, [pc, #440]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a6d      	ldr	r2, [pc, #436]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001c40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e01d      	b.n	8001c84 <HAL_RCC_OscConfig+0xd4>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0xbc>
 8001c52:	4b68      	ldr	r3, [pc, #416]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a67      	ldr	r2, [pc, #412]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	4b65      	ldr	r3, [pc, #404]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a64      	ldr	r2, [pc, #400]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	e00b      	b.n	8001c84 <HAL_RCC_OscConfig+0xd4>
 8001c6c:	4b61      	ldr	r3, [pc, #388]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a60      	ldr	r2, [pc, #384]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	4b5e      	ldr	r3, [pc, #376]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a5d      	ldr	r2, [pc, #372]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d013      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8c:	f7ff fae2 	bl	8001254 <HAL_GetTick>
 8001c90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c94:	f7ff fade 	bl	8001254 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	; 0x64
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e356      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ca6:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0xe4>
 8001cb2:	e014      	b.n	8001cde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7ff face 	bl	8001254 <HAL_GetTick>
 8001cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cbc:	f7ff faca 	bl	8001254 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b64      	cmp	r3, #100	; 0x64
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e342      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cce:	4b49      	ldr	r3, [pc, #292]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x10c>
 8001cda:	e000      	b.n	8001cde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 808c 	beq.w	8001e04 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cec:	4b41      	ldr	r3, [pc, #260]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cf4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cf6:	4b3f      	ldr	r3, [pc, #252]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d007      	beq.n	8001d12 <HAL_RCC_OscConfig+0x162>
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	2b18      	cmp	r3, #24
 8001d06:	d137      	bne.n	8001d78 <HAL_RCC_OscConfig+0x1c8>
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d132      	bne.n	8001d78 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d12:	4b38      	ldr	r3, [pc, #224]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d005      	beq.n	8001d2a <HAL_RCC_OscConfig+0x17a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e314      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d2a:	4b32      	ldr	r3, [pc, #200]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 0219 	bic.w	r2, r3, #25
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	492f      	ldr	r1, [pc, #188]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fa8a 	bl	8001254 <HAL_GetTick>
 8001d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d44:	f7ff fa86 	bl	8001254 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e2fe      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d56:	4b27      	ldr	r3, [pc, #156]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d62:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	061b      	lsls	r3, r3, #24
 8001d70:	4920      	ldr	r1, [pc, #128]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d76:	e045      	b.n	8001e04 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d026      	beq.n	8001dce <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d80:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f023 0219 	bic.w	r2, r3, #25
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4919      	ldr	r1, [pc, #100]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d92:	f7ff fa5f 	bl	8001254 <HAL_GetTick>
 8001d96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d9a:	f7ff fa5b 	bl	8001254 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e2d3      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db8:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	061b      	lsls	r3, r3, #24
 8001dc6:	490b      	ldr	r1, [pc, #44]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
 8001dcc:	e01a      	b.n	8001e04 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a08      	ldr	r2, [pc, #32]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dda:	f7ff fa3b 	bl	8001254 <HAL_GetTick>
 8001dde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de2:	f7ff fa37 	bl	8001254 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d903      	bls.n	8001df8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e2af      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
 8001df4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001df8:	4b96      	ldr	r3, [pc, #600]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1ee      	bne.n	8001de2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d06a      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e10:	4b90      	ldr	r3, [pc, #576]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e18:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e1a:	4b8e      	ldr	r3, [pc, #568]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d007      	beq.n	8001e36 <HAL_RCC_OscConfig+0x286>
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2b18      	cmp	r3, #24
 8001e2a:	d11b      	bne.n	8001e64 <HAL_RCC_OscConfig+0x2b4>
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d116      	bne.n	8001e64 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e36:	4b87      	ldr	r3, [pc, #540]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <HAL_RCC_OscConfig+0x29e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	2b80      	cmp	r3, #128	; 0x80
 8001e48:	d001      	beq.n	8001e4e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e282      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e4e:	4b81      	ldr	r3, [pc, #516]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	061b      	lsls	r3, r3, #24
 8001e5c:	497d      	ldr	r1, [pc, #500]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e62:	e040      	b.n	8001ee6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d023      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001e6c:	4b79      	ldr	r3, [pc, #484]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a78      	ldr	r2, [pc, #480]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e78:	f7ff f9ec 	bl	8001254 <HAL_GetTick>
 8001e7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e80:	f7ff f9e8 	bl	8001254 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e260      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e92:	4b70      	ldr	r3, [pc, #448]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e9e:	4b6d      	ldr	r3, [pc, #436]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	061b      	lsls	r3, r3, #24
 8001eac:	4969      	ldr	r1, [pc, #420]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	60cb      	str	r3, [r1, #12]
 8001eb2:	e018      	b.n	8001ee6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001eb4:	4b67      	ldr	r3, [pc, #412]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a66      	ldr	r2, [pc, #408]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f9c8 	bl	8001254 <HAL_GetTick>
 8001ec4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ec8:	f7ff f9c4 	bl	8001254 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e23c      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001eda:	4b5e      	ldr	r3, [pc, #376]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d036      	beq.n	8001f60 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d019      	beq.n	8001f2e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efa:	4b56      	ldr	r3, [pc, #344]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001efe:	4a55      	ldr	r2, [pc, #340]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f06:	f7ff f9a5 	bl	8001254 <HAL_GetTick>
 8001f0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f0e:	f7ff f9a1 	bl	8001254 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e219      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f20:	4b4c      	ldr	r3, [pc, #304]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x35e>
 8001f2c:	e018      	b.n	8001f60 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f2e:	4b49      	ldr	r3, [pc, #292]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f32:	4a48      	ldr	r2, [pc, #288]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3a:	f7ff f98b 	bl	8001254 <HAL_GetTick>
 8001f3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f42:	f7ff f987 	bl	8001254 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e1ff      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f54:	4b3f      	ldr	r3, [pc, #252]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f0      	bne.n	8001f42 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0320 	and.w	r3, r3, #32
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d036      	beq.n	8001fda <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d019      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f74:	4b37      	ldr	r3, [pc, #220]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a36      	ldr	r2, [pc, #216]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001f7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f80:	f7ff f968 	bl	8001254 <HAL_GetTick>
 8001f84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f88:	f7ff f964 	bl	8001254 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e1dc      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f9a:	4b2e      	ldr	r3, [pc, #184]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0x3d8>
 8001fa6:	e018      	b.n	8001fda <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fa8:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a29      	ldr	r2, [pc, #164]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001fae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001fb4:	f7ff f94e 	bl	8001254 <HAL_GetTick>
 8001fb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fbc:	f7ff f94a 	bl	8001254 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e1c2      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fce:	4b21      	ldr	r3, [pc, #132]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8086 	beq.w	80020f4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1a      	ldr	r2, [pc, #104]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ff4:	f7ff f92e 	bl	8001254 <HAL_GetTick>
 8001ff8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffc:	f7ff f92a 	bl	8001254 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	; 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e1a2      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d106      	bne.n	8002030 <HAL_RCC_OscConfig+0x480>
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002026:	4a0b      	ldr	r2, [pc, #44]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6713      	str	r3, [r2, #112]	; 0x70
 800202e:	e032      	b.n	8002096 <HAL_RCC_OscConfig+0x4e6>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d111      	bne.n	800205c <HAL_RCC_OscConfig+0x4ac>
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 800203a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203c:	4a05      	ldr	r2, [pc, #20]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 800203e:	f023 0301 	bic.w	r3, r3, #1
 8002042:	6713      	str	r3, [r2, #112]	; 0x70
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002048:	4a02      	ldr	r2, [pc, #8]	; (8002054 <HAL_RCC_OscConfig+0x4a4>)
 800204a:	f023 0304 	bic.w	r3, r3, #4
 800204e:	6713      	str	r3, [r2, #112]	; 0x70
 8002050:	e021      	b.n	8002096 <HAL_RCC_OscConfig+0x4e6>
 8002052:	bf00      	nop
 8002054:	58024400 	.word	0x58024400
 8002058:	58024800 	.word	0x58024800
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b05      	cmp	r3, #5
 8002062:	d10c      	bne.n	800207e <HAL_RCC_OscConfig+0x4ce>
 8002064:	4b83      	ldr	r3, [pc, #524]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	4a82      	ldr	r2, [pc, #520]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 800206a:	f043 0304 	orr.w	r3, r3, #4
 800206e:	6713      	str	r3, [r2, #112]	; 0x70
 8002070:	4b80      	ldr	r3, [pc, #512]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	4a7f      	ldr	r2, [pc, #508]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6713      	str	r3, [r2, #112]	; 0x70
 800207c:	e00b      	b.n	8002096 <HAL_RCC_OscConfig+0x4e6>
 800207e:	4b7d      	ldr	r3, [pc, #500]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 8002080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002082:	4a7c      	ldr	r2, [pc, #496]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	6713      	str	r3, [r2, #112]	; 0x70
 800208a:	4b7a      	ldr	r3, [pc, #488]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208e:	4a79      	ldr	r2, [pc, #484]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 8002090:	f023 0304 	bic.w	r3, r3, #4
 8002094:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d015      	beq.n	80020ca <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209e:	f7ff f8d9 	bl	8001254 <HAL_GetTick>
 80020a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020a4:	e00a      	b.n	80020bc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a6:	f7ff f8d5 	bl	8001254 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e14b      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020bc:	4b6d      	ldr	r3, [pc, #436]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0ee      	beq.n	80020a6 <HAL_RCC_OscConfig+0x4f6>
 80020c8:	e014      	b.n	80020f4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ca:	f7ff f8c3 	bl	8001254 <HAL_GetTick>
 80020ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020d0:	e00a      	b.n	80020e8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d2:	f7ff f8bf 	bl	8001254 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e135      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020e8:	4b62      	ldr	r3, [pc, #392]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 80020ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1ee      	bne.n	80020d2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 812a 	beq.w	8002352 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80020fe:	4b5d      	ldr	r3, [pc, #372]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002106:	2b18      	cmp	r3, #24
 8002108:	f000 80ba 	beq.w	8002280 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	2b02      	cmp	r3, #2
 8002112:	f040 8095 	bne.w	8002240 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002116:	4b57      	ldr	r3, [pc, #348]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a56      	ldr	r2, [pc, #344]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 800211c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002122:	f7ff f897 	bl	8001254 <HAL_GetTick>
 8002126:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212a:	f7ff f893 	bl	8001254 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e10b      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800213c:	4b4d      	ldr	r3, [pc, #308]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f0      	bne.n	800212a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002148:	4b4a      	ldr	r3, [pc, #296]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 800214a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800214c:	4b4a      	ldr	r3, [pc, #296]	; (8002278 <HAL_RCC_OscConfig+0x6c8>)
 800214e:	4013      	ands	r3, r2
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002158:	0112      	lsls	r2, r2, #4
 800215a:	430a      	orrs	r2, r1
 800215c:	4945      	ldr	r1, [pc, #276]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 800215e:	4313      	orrs	r3, r2
 8002160:	628b      	str	r3, [r1, #40]	; 0x28
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	3b01      	subs	r3, #1
 8002168:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002170:	3b01      	subs	r3, #1
 8002172:	025b      	lsls	r3, r3, #9
 8002174:	b29b      	uxth	r3, r3
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217c:	3b01      	subs	r3, #1
 800217e:	041b      	lsls	r3, r3, #16
 8002180:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218a:	3b01      	subs	r3, #1
 800218c:	061b      	lsls	r3, r3, #24
 800218e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002192:	4938      	ldr	r1, [pc, #224]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 8002194:	4313      	orrs	r3, r2
 8002196:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002198:	4b36      	ldr	r3, [pc, #216]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	4a35      	ldr	r2, [pc, #212]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 800219e:	f023 0301 	bic.w	r3, r3, #1
 80021a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021a4:	4b33      	ldr	r3, [pc, #204]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 80021a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a8:	4b34      	ldr	r3, [pc, #208]	; (800227c <HAL_RCC_OscConfig+0x6cc>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021b0:	00d2      	lsls	r2, r2, #3
 80021b2:	4930      	ldr	r1, [pc, #192]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80021b8:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	f023 020c 	bic.w	r2, r3, #12
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	492b      	ldr	r1, [pc, #172]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80021ca:	4b2a      	ldr	r3, [pc, #168]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	f023 0202 	bic.w	r2, r3, #2
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	4927      	ldr	r1, [pc, #156]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80021dc:	4b25      	ldr	r3, [pc, #148]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	4a24      	ldr	r2, [pc, #144]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 80021e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021e8:	4b22      	ldr	r3, [pc, #136]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	4a21      	ldr	r2, [pc, #132]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 80021ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80021f4:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	4a1e      	ldr	r2, [pc, #120]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 80021fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002200:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	4a1b      	ldr	r2, [pc, #108]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a18      	ldr	r2, [pc, #96]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 8002212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7ff f81c 	bl	8001254 <HAL_GetTick>
 800221c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002220:	f7ff f818 	bl	8001254 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e090      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0x670>
 800223e:	e088      	b.n	8002352 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 8002246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800224a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7ff f802 	bl	8001254 <HAL_GetTick>
 8002250:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002254:	f7fe fffe 	bl	8001254 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e076      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002266:	4b03      	ldr	r3, [pc, #12]	; (8002274 <HAL_RCC_OscConfig+0x6c4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x6a4>
 8002272:	e06e      	b.n	8002352 <HAL_RCC_OscConfig+0x7a2>
 8002274:	58024400 	.word	0x58024400
 8002278:	fffffc0c 	.word	0xfffffc0c
 800227c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002280:	4b36      	ldr	r3, [pc, #216]	; (800235c <HAL_RCC_OscConfig+0x7ac>)
 8002282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002284:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002286:	4b35      	ldr	r3, [pc, #212]	; (800235c <HAL_RCC_OscConfig+0x7ac>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	2b01      	cmp	r3, #1
 8002292:	d031      	beq.n	80022f8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f003 0203 	and.w	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800229e:	429a      	cmp	r2, r3
 80022a0:	d12a      	bne.n	80022f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d122      	bne.n	80022f8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d11a      	bne.n	80022f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	0a5b      	lsrs	r3, r3, #9
 80022c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d111      	bne.n	80022f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	0c1b      	lsrs	r3, r3, #16
 80022d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d108      	bne.n	80022f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	0e1b      	lsrs	r3, r3, #24
 80022ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e02b      	b.n	8002354 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80022fc:	4b17      	ldr	r3, [pc, #92]	; (800235c <HAL_RCC_OscConfig+0x7ac>)
 80022fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002300:	08db      	lsrs	r3, r3, #3
 8002302:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002306:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	429a      	cmp	r2, r3
 8002310:	d01f      	beq.n	8002352 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002312:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_RCC_OscConfig+0x7ac>)
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	4a11      	ldr	r2, [pc, #68]	; (800235c <HAL_RCC_OscConfig+0x7ac>)
 8002318:	f023 0301 	bic.w	r3, r3, #1
 800231c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800231e:	f7fe ff99 	bl	8001254 <HAL_GetTick>
 8002322:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002324:	bf00      	nop
 8002326:	f7fe ff95 	bl	8001254 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	4293      	cmp	r3, r2
 8002330:	d0f9      	beq.n	8002326 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_RCC_OscConfig+0x7ac>)
 8002334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <HAL_RCC_OscConfig+0x7b0>)
 8002338:	4013      	ands	r3, r2
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800233e:	00d2      	lsls	r2, r2, #3
 8002340:	4906      	ldr	r1, [pc, #24]	; (800235c <HAL_RCC_OscConfig+0x7ac>)
 8002342:	4313      	orrs	r3, r2
 8002344:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_RCC_OscConfig+0x7ac>)
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_RCC_OscConfig+0x7ac>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3730      	adds	r7, #48	; 0x30
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	58024400 	.word	0x58024400
 8002360:	ffff0007 	.word	0xffff0007

08002364 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e19c      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b8a      	ldr	r3, [pc, #552]	; (80025a4 <HAL_RCC_ClockConfig+0x240>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d910      	bls.n	80023a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b87      	ldr	r3, [pc, #540]	; (80025a4 <HAL_RCC_ClockConfig+0x240>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 020f 	bic.w	r2, r3, #15
 800238e:	4985      	ldr	r1, [pc, #532]	; (80025a4 <HAL_RCC_ClockConfig+0x240>)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b83      	ldr	r3, [pc, #524]	; (80025a4 <HAL_RCC_ClockConfig+0x240>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e184      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d010      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	4b7b      	ldr	r3, [pc, #492]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d908      	bls.n	80023d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023c4:	4b78      	ldr	r3, [pc, #480]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	4975      	ldr	r1, [pc, #468]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d010      	beq.n	8002404 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	4b70      	ldr	r3, [pc, #448]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d908      	bls.n	8002404 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023f2:	4b6d      	ldr	r3, [pc, #436]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	496a      	ldr	r1, [pc, #424]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002400:	4313      	orrs	r3, r2
 8002402:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	d010      	beq.n	8002432 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699a      	ldr	r2, [r3, #24]
 8002414:	4b64      	ldr	r3, [pc, #400]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800241c:	429a      	cmp	r2, r3
 800241e:	d908      	bls.n	8002432 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002420:	4b61      	ldr	r3, [pc, #388]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	495e      	ldr	r1, [pc, #376]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 800242e:	4313      	orrs	r3, r2
 8002430:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0320 	and.w	r3, r3, #32
 800243a:	2b00      	cmp	r3, #0
 800243c:	d010      	beq.n	8002460 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69da      	ldr	r2, [r3, #28]
 8002442:	4b59      	ldr	r3, [pc, #356]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800244a:	429a      	cmp	r2, r3
 800244c:	d908      	bls.n	8002460 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800244e:	4b56      	ldr	r3, [pc, #344]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	4953      	ldr	r1, [pc, #332]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 800245c:	4313      	orrs	r3, r2
 800245e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d010      	beq.n	800248e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	4b4d      	ldr	r3, [pc, #308]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	429a      	cmp	r2, r3
 800247a:	d908      	bls.n	800248e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800247c:	4b4a      	ldr	r3, [pc, #296]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f023 020f 	bic.w	r2, r3, #15
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4947      	ldr	r1, [pc, #284]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 800248a:	4313      	orrs	r3, r2
 800248c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d055      	beq.n	8002546 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800249a:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	4940      	ldr	r1, [pc, #256]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d107      	bne.n	80024c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024b4:	4b3c      	ldr	r3, [pc, #240]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d121      	bne.n	8002504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0f6      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d107      	bne.n	80024dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024cc:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d115      	bne.n	8002504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0ea      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d107      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024e4:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d109      	bne.n	8002504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0de      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024f4:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0d6      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002504:	4b28      	ldr	r3, [pc, #160]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f023 0207 	bic.w	r2, r3, #7
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4925      	ldr	r1, [pc, #148]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002512:	4313      	orrs	r3, r2
 8002514:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002516:	f7fe fe9d 	bl	8001254 <HAL_GetTick>
 800251a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251c:	e00a      	b.n	8002534 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251e:	f7fe fe99 	bl	8001254 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	f241 3288 	movw	r2, #5000	; 0x1388
 800252c:	4293      	cmp	r3, r2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e0be      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002534:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	429a      	cmp	r2, r3
 8002544:	d1eb      	bne.n	800251e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d010      	beq.n	8002574 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	429a      	cmp	r2, r3
 8002560:	d208      	bcs.n	8002574 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002562:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f023 020f 	bic.w	r2, r3, #15
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	490e      	ldr	r1, [pc, #56]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002570:	4313      	orrs	r3, r2
 8002572:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_RCC_ClockConfig+0x240>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d214      	bcs.n	80025ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <HAL_RCC_ClockConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 020f 	bic.w	r2, r3, #15
 800258a:	4906      	ldr	r1, [pc, #24]	; (80025a4 <HAL_RCC_ClockConfig+0x240>)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <HAL_RCC_ClockConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e086      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>
 80025a4:	52002000 	.word	0x52002000
 80025a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d010      	beq.n	80025da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	4b3f      	ldr	r3, [pc, #252]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d208      	bcs.n	80025da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025c8:	4b3c      	ldr	r3, [pc, #240]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	4939      	ldr	r1, [pc, #228]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d010      	beq.n	8002608 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	4b34      	ldr	r3, [pc, #208]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d208      	bcs.n	8002608 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025f6:	4b31      	ldr	r3, [pc, #196]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	492e      	ldr	r1, [pc, #184]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 8002604:	4313      	orrs	r3, r2
 8002606:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b00      	cmp	r3, #0
 8002612:	d010      	beq.n	8002636 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699a      	ldr	r2, [r3, #24]
 8002618:	4b28      	ldr	r3, [pc, #160]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002620:	429a      	cmp	r2, r3
 8002622:	d208      	bcs.n	8002636 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002624:	4b25      	ldr	r3, [pc, #148]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	4922      	ldr	r1, [pc, #136]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 8002632:	4313      	orrs	r3, r2
 8002634:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	2b00      	cmp	r3, #0
 8002640:	d010      	beq.n	8002664 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69da      	ldr	r2, [r3, #28]
 8002646:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800264e:	429a      	cmp	r2, r3
 8002650:	d208      	bcs.n	8002664 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002652:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	4917      	ldr	r1, [pc, #92]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 8002660:	4313      	orrs	r3, r2
 8002662:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002664:	f000 f834 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 8002668:	4602      	mov	r2, r0
 800266a:	4b14      	ldr	r3, [pc, #80]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	0a1b      	lsrs	r3, r3, #8
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	4912      	ldr	r1, [pc, #72]	; (80026c0 <HAL_RCC_ClockConfig+0x35c>)
 8002676:	5ccb      	ldrb	r3, [r1, r3]
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
 8002680:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	4a0d      	ldr	r2, [pc, #52]	; (80026c0 <HAL_RCC_ClockConfig+0x35c>)
 800268c:	5cd3      	ldrb	r3, [r2, r3]
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
 8002698:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <HAL_RCC_ClockConfig+0x360>)
 800269a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800269c:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <HAL_RCC_ClockConfig+0x364>)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80026a2:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <HAL_RCC_ClockConfig+0x368>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe fd8a 	bl	80011c0 <HAL_InitTick>
 80026ac:	4603      	mov	r3, r0
 80026ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	58024400 	.word	0x58024400
 80026c0:	0800a560 	.word	0x0800a560
 80026c4:	24000010 	.word	0x24000010
 80026c8:	2400000c 	.word	0x2400000c
 80026cc:	24000030 	.word	0x24000030

080026d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b089      	sub	sp, #36	; 0x24
 80026d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026d6:	4bb3      	ldr	r3, [pc, #716]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026de:	2b18      	cmp	r3, #24
 80026e0:	f200 8155 	bhi.w	800298e <HAL_RCC_GetSysClockFreq+0x2be>
 80026e4:	a201      	add	r2, pc, #4	; (adr r2, 80026ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80026e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ea:	bf00      	nop
 80026ec:	08002751 	.word	0x08002751
 80026f0:	0800298f 	.word	0x0800298f
 80026f4:	0800298f 	.word	0x0800298f
 80026f8:	0800298f 	.word	0x0800298f
 80026fc:	0800298f 	.word	0x0800298f
 8002700:	0800298f 	.word	0x0800298f
 8002704:	0800298f 	.word	0x0800298f
 8002708:	0800298f 	.word	0x0800298f
 800270c:	08002777 	.word	0x08002777
 8002710:	0800298f 	.word	0x0800298f
 8002714:	0800298f 	.word	0x0800298f
 8002718:	0800298f 	.word	0x0800298f
 800271c:	0800298f 	.word	0x0800298f
 8002720:	0800298f 	.word	0x0800298f
 8002724:	0800298f 	.word	0x0800298f
 8002728:	0800298f 	.word	0x0800298f
 800272c:	0800277d 	.word	0x0800277d
 8002730:	0800298f 	.word	0x0800298f
 8002734:	0800298f 	.word	0x0800298f
 8002738:	0800298f 	.word	0x0800298f
 800273c:	0800298f 	.word	0x0800298f
 8002740:	0800298f 	.word	0x0800298f
 8002744:	0800298f 	.word	0x0800298f
 8002748:	0800298f 	.word	0x0800298f
 800274c:	08002783 	.word	0x08002783
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002750:	4b94      	ldr	r3, [pc, #592]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b00      	cmp	r3, #0
 800275a:	d009      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800275c:	4b91      	ldr	r3, [pc, #580]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	08db      	lsrs	r3, r3, #3
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	4a90      	ldr	r2, [pc, #576]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002768:	fa22 f303 	lsr.w	r3, r2, r3
 800276c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800276e:	e111      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002770:	4b8d      	ldr	r3, [pc, #564]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002772:	61bb      	str	r3, [r7, #24]
      break;
 8002774:	e10e      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002776:	4b8d      	ldr	r3, [pc, #564]	; (80029ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002778:	61bb      	str	r3, [r7, #24]
      break;
 800277a:	e10b      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800277c:	4b8c      	ldr	r3, [pc, #560]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800277e:	61bb      	str	r3, [r7, #24]
      break;
 8002780:	e108      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002782:	4b88      	ldr	r3, [pc, #544]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800278c:	4b85      	ldr	r3, [pc, #532]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002796:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002798:	4b82      	ldr	r3, [pc, #520]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80027a2:	4b80      	ldr	r3, [pc, #512]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a6:	08db      	lsrs	r3, r3, #3
 80027a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	ee07 3a90 	vmov	s15, r3
 80027b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80e1 	beq.w	8002988 <HAL_RCC_GetSysClockFreq+0x2b8>
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	f000 8083 	beq.w	80028d4 <HAL_RCC_GetSysClockFreq+0x204>
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	f200 80a1 	bhi.w	8002918 <HAL_RCC_GetSysClockFreq+0x248>
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x114>
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d056      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x1c0>
 80027e2:	e099      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027e4:	4b6f      	ldr	r3, [pc, #444]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0320 	and.w	r3, r3, #32
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d02d      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027f0:	4b6c      	ldr	r3, [pc, #432]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	08db      	lsrs	r3, r3, #3
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	4a6b      	ldr	r2, [pc, #428]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002800:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	ee07 3a90 	vmov	s15, r3
 8002808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800281a:	4b62      	ldr	r3, [pc, #392]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002822:	ee07 3a90 	vmov	s15, r3
 8002826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800282a:	ed97 6a02 	vldr	s12, [r7, #8]
 800282e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80029b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800283a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800283e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002846:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800284a:	e087      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	ee07 3a90 	vmov	s15, r3
 8002852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002856:	eddf 6a58 	vldr	s13, [pc, #352]	; 80029b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800285a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800285e:	4b51      	ldr	r3, [pc, #324]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002866:	ee07 3a90 	vmov	s15, r3
 800286a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800286e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002872:	eddf 5a50 	vldr	s11, [pc, #320]	; 80029b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800287a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800287e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800288e:	e065      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	ee07 3a90 	vmov	s15, r3
 8002896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800289a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80029bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800289e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028a2:	4b40      	ldr	r3, [pc, #256]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028aa:	ee07 3a90 	vmov	s15, r3
 80028ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80028b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80029b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028d2:	e043      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	ee07 3a90 	vmov	s15, r3
 80028da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028de:	eddf 6a38 	vldr	s13, [pc, #224]	; 80029c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80028e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028e6:	4b2f      	ldr	r3, [pc, #188]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ee:	ee07 3a90 	vmov	s15, r3
 80028f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80028fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80029b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800290a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800290e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002912:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002916:	e021      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	ee07 3a90 	vmov	s15, r3
 800291e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002922:	eddf 6a26 	vldr	s13, [pc, #152]	; 80029bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800292a:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002932:	ee07 3a90 	vmov	s15, r3
 8002936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800293a:	ed97 6a02 	vldr	s12, [r7, #8]
 800293e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80029b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800294a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800294e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002956:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800295a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800295c:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	0a5b      	lsrs	r3, r3, #9
 8002962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002966:	3301      	adds	r3, #1
 8002968:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	ee07 3a90 	vmov	s15, r3
 8002970:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002974:	edd7 6a07 	vldr	s13, [r7, #28]
 8002978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800297c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002980:	ee17 3a90 	vmov	r3, s15
 8002984:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002986:	e005      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	61bb      	str	r3, [r7, #24]
      break;
 800298c:	e002      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800298e:	4b07      	ldr	r3, [pc, #28]	; (80029ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002990:	61bb      	str	r3, [r7, #24]
      break;
 8002992:	bf00      	nop
  }

  return sysclockfreq;
 8002994:	69bb      	ldr	r3, [r7, #24]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3724      	adds	r7, #36	; 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	58024400 	.word	0x58024400
 80029a8:	03d09000 	.word	0x03d09000
 80029ac:	003d0900 	.word	0x003d0900
 80029b0:	017d7840 	.word	0x017d7840
 80029b4:	46000000 	.word	0x46000000
 80029b8:	4c742400 	.word	0x4c742400
 80029bc:	4a742400 	.word	0x4a742400
 80029c0:	4bbebc20 	.word	0x4bbebc20

080029c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c8:	b0c6      	sub	sp, #280	; 0x118
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029d0:	2300      	movs	r3, #0
 80029d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80029e8:	2500      	movs	r5, #0
 80029ea:	ea54 0305 	orrs.w	r3, r4, r5
 80029ee:	d049      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80029f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80029f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029fa:	d02f      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80029fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a00:	d828      	bhi.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a06:	d01a      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a0c:	d822      	bhi.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a16:	d007      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a18:	e01c      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a1a:	4bab      	ldr	r3, [pc, #684]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	4aaa      	ldr	r2, [pc, #680]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a26:	e01a      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a2c:	3308      	adds	r3, #8
 8002a2e:	2102      	movs	r1, #2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f001 f967 	bl	8003d04 <RCCEx_PLL2_Config>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a3c:	e00f      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a42:	3328      	adds	r3, #40	; 0x28
 8002a44:	2102      	movs	r1, #2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f001 fa0e 	bl	8003e68 <RCCEx_PLL3_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a52:	e004      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002a5a:	e000      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a5e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10a      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a66:	4b98      	ldr	r3, [pc, #608]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a74:	4a94      	ldr	r2, [pc, #592]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a76:	430b      	orrs	r3, r1
 8002a78:	6513      	str	r3, [r2, #80]	; 0x50
 8002a7a:	e003      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002a90:	f04f 0900 	mov.w	r9, #0
 8002a94:	ea58 0309 	orrs.w	r3, r8, r9
 8002a98:	d047      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d82a      	bhi.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002aa4:	a201      	add	r2, pc, #4	; (adr r2, 8002aac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aaa:	bf00      	nop
 8002aac:	08002ac1 	.word	0x08002ac1
 8002ab0:	08002acf 	.word	0x08002acf
 8002ab4:	08002ae5 	.word	0x08002ae5
 8002ab8:	08002b03 	.word	0x08002b03
 8002abc:	08002b03 	.word	0x08002b03
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ac0:	4b81      	ldr	r3, [pc, #516]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	4a80      	ldr	r2, [pc, #512]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002acc:	e01a      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ad2:	3308      	adds	r3, #8
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f001 f914 	bl	8003d04 <RCCEx_PLL2_Config>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ae2:	e00f      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ae8:	3328      	adds	r3, #40	; 0x28
 8002aea:	2100      	movs	r1, #0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f001 f9bb 	bl	8003e68 <RCCEx_PLL3_Config>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002af8:	e004      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002b00:	e000      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10a      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b0c:	4b6e      	ldr	r3, [pc, #440]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b10:	f023 0107 	bic.w	r1, r3, #7
 8002b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1a:	4a6b      	ldr	r2, [pc, #428]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	6513      	str	r3, [r2, #80]	; 0x50
 8002b20:	e003      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002b26:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b32:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8002b36:	f04f 0b00 	mov.w	fp, #0
 8002b3a:	ea5a 030b 	orrs.w	r3, sl, fp
 8002b3e:	d05b      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b48:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002b4c:	d03b      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002b4e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002b52:	d834      	bhi.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002b54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b58:	d037      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002b5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b5e:	d82e      	bhi.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002b60:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b64:	d033      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002b66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b6a:	d828      	bhi.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002b6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b70:	d01a      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002b72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b76:	d822      	bhi.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002b7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b80:	d007      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002b82:	e01c      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b84:	4b50      	ldr	r3, [pc, #320]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	4a4f      	ldr	r2, [pc, #316]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b90:	e01e      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b96:	3308      	adds	r3, #8
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f001 f8b2 	bl	8003d04 <RCCEx_PLL2_Config>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ba6:	e013      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002bac:	3328      	adds	r3, #40	; 0x28
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f001 f959 	bl	8003e68 <RCCEx_PLL3_Config>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002bc4:	e004      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002bc6:	bf00      	nop
 8002bc8:	e002      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002bca:	bf00      	nop
 8002bcc:	e000      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002bce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10b      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002bd8:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bdc:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002be4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002be8:	4a37      	ldr	r2, [pc, #220]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bea:	430b      	orrs	r3, r1
 8002bec:	6593      	str	r3, [r2, #88]	; 0x58
 8002bee:	e003      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002bf4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c00:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002c04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002c0e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002c12:	460b      	mov	r3, r1
 8002c14:	4313      	orrs	r3, r2
 8002c16:	d05d      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c20:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002c24:	d03b      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002c26:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002c2a:	d834      	bhi.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002c2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c30:	d037      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002c32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c36:	d82e      	bhi.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002c38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c3c:	d033      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8002c3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c42:	d828      	bhi.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002c44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c48:	d01a      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002c4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c4e:	d822      	bhi.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c58:	d007      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002c5a:	e01c      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c5c:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	4a19      	ldr	r2, [pc, #100]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c68:	e01e      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c6e:	3308      	adds	r3, #8
 8002c70:	2100      	movs	r1, #0
 8002c72:	4618      	mov	r0, r3
 8002c74:	f001 f846 	bl	8003d04 <RCCEx_PLL2_Config>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002c7e:	e013      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c84:	3328      	adds	r3, #40	; 0x28
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f001 f8ed 	bl	8003e68 <RCCEx_PLL3_Config>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c94:	e008      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002c9c:	e004      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002c9e:	bf00      	nop
 8002ca0:	e002      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002ca2:	bf00      	nop
 8002ca4:	e000      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002ca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ca8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10d      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002cb0:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cbc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002cc0:	4a01      	ldr	r2, [pc, #4]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc6:	e005      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002cc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ccc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002cd0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cdc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002ce0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002cea:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	d03a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfa:	2b30      	cmp	r3, #48	; 0x30
 8002cfc:	d01f      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8002cfe:	2b30      	cmp	r3, #48	; 0x30
 8002d00:	d819      	bhi.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002d02:	2b20      	cmp	r3, #32
 8002d04:	d00c      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d815      	bhi.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d019      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002d0e:	2b10      	cmp	r3, #16
 8002d10:	d111      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d12:	4baa      	ldr	r3, [pc, #680]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d16:	4aa9      	ldr	r2, [pc, #676]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002d1e:	e011      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d24:	3308      	adds	r3, #8
 8002d26:	2102      	movs	r1, #2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 ffeb 	bl	8003d04 <RCCEx_PLL2_Config>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002d34:	e006      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002d3c:	e002      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002d3e:	bf00      	nop
 8002d40:	e000      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002d4c:	4b9b      	ldr	r3, [pc, #620]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d50:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5a:	4a98      	ldr	r2, [pc, #608]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d60:	e003      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002d66:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d72:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002d76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002d80:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002d84:	460b      	mov	r3, r1
 8002d86:	4313      	orrs	r3, r2
 8002d88:	d051      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d94:	d035      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8002d96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d9a:	d82e      	bhi.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002d9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002da0:	d031      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8002da2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002da6:	d828      	bhi.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dac:	d01a      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002db2:	d822      	bhi.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dbc:	d007      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8002dbe:	e01c      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc0:	4b7e      	ldr	r3, [pc, #504]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	4a7d      	ldr	r2, [pc, #500]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002dcc:	e01c      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002dd2:	3308      	adds	r3, #8
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 ff94 	bl	8003d04 <RCCEx_PLL2_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002de2:	e011      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002de8:	3328      	adds	r3, #40	; 0x28
 8002dea:	2100      	movs	r1, #0
 8002dec:	4618      	mov	r0, r3
 8002dee:	f001 f83b 	bl	8003e68 <RCCEx_PLL3_Config>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002df8:	e006      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002e00:	e002      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002e02:	bf00      	nop
 8002e04:	e000      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10a      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002e10:	4b6a      	ldr	r3, [pc, #424]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e14:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1e:	4a67      	ldr	r2, [pc, #412]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e20:	430b      	orrs	r3, r1
 8002e22:	6513      	str	r3, [r2, #80]	; 0x50
 8002e24:	e003      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e2a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e36:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002e3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e44:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	d053      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e58:	d033      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8002e5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e5e:	d82c      	bhi.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002e60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e64:	d02f      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8002e66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e6a:	d826      	bhi.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002e6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e70:	d02b      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002e72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e76:	d820      	bhi.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002e78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e7c:	d012      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8002e7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e82:	d81a      	bhi.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d022      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8c:	d115      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e92:	3308      	adds	r3, #8
 8002e94:	2101      	movs	r1, #1
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 ff34 	bl	8003d04 <RCCEx_PLL2_Config>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ea2:	e015      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ea8:	3328      	adds	r3, #40	; 0x28
 8002eaa:	2101      	movs	r1, #1
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 ffdb 	bl	8003e68 <RCCEx_PLL3_Config>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002ec0:	e006      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002ec2:	bf00      	nop
 8002ec4:	e004      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002ec6:	bf00      	nop
 8002ec8:	e002      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002eca:	bf00      	nop
 8002ecc:	e000      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ed0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10a      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002ed8:	4b38      	ldr	r3, [pc, #224]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002edc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee6:	4a35      	ldr	r2, [pc, #212]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6513      	str	r3, [r2, #80]	; 0x50
 8002eec:	e003      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002ef2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efe:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002f02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f06:	2300      	movs	r3, #0
 8002f08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002f0c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f10:	460b      	mov	r3, r1
 8002f12:	4313      	orrs	r3, r2
 8002f14:	d058      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f22:	d033      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002f24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f28:	d82c      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2e:	d02f      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f34:	d826      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002f36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f3a:	d02b      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002f3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f40:	d820      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002f42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f46:	d012      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8002f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f4c:	d81a      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d022      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002f52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f56:	d115      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f5c:	3308      	adds	r3, #8
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fecf 	bl	8003d04 <RCCEx_PLL2_Config>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002f6c:	e015      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f72:	3328      	adds	r3, #40	; 0x28
 8002f74:	2101      	movs	r1, #1
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 ff76 	bl	8003e68 <RCCEx_PLL3_Config>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002f82:	e00a      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002f8a:	e006      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002f8c:	bf00      	nop
 8002f8e:	e004      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002f90:	bf00      	nop
 8002f92:	e002      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002f94:	bf00      	nop
 8002f96:	e000      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f9a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10e      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fb2:	4a02      	ldr	r2, [pc, #8]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8002fb8:	e006      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002fba:	bf00      	nop
 8002fbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002fc4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002fde:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	d037      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ff2:	d00e      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ff8:	d816      	bhi.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d018      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002ffe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003002:	d111      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003004:	4bc4      	ldr	r3, [pc, #784]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	4ac3      	ldr	r2, [pc, #780]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800300a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800300e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003010:	e00f      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003016:	3308      	adds	r3, #8
 8003018:	2101      	movs	r1, #1
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fe72 	bl	8003d04 <RCCEx_PLL2_Config>
 8003020:	4603      	mov	r3, r0
 8003022:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003026:	e004      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800302e:	e000      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003032:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800303a:	4bb7      	ldr	r3, [pc, #732]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800303c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800303e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003048:	4ab3      	ldr	r2, [pc, #716]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800304a:	430b      	orrs	r3, r1
 800304c:	6513      	str	r3, [r2, #80]	; 0x50
 800304e:	e003      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003050:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003054:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003060:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003064:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003068:	2300      	movs	r3, #0
 800306a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800306e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003072:	460b      	mov	r3, r1
 8003074:	4313      	orrs	r3, r2
 8003076:	d039      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800307c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800307e:	2b03      	cmp	r3, #3
 8003080:	d81c      	bhi.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003082:	a201      	add	r2, pc, #4	; (adr r2, 8003088 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003088:	080030c5 	.word	0x080030c5
 800308c:	08003099 	.word	0x08003099
 8003090:	080030a7 	.word	0x080030a7
 8003094:	080030c5 	.word	0x080030c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003098:	4b9f      	ldr	r3, [pc, #636]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	4a9e      	ldr	r2, [pc, #632]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800309e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80030a4:	e00f      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030aa:	3308      	adds	r3, #8
 80030ac:	2102      	movs	r1, #2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fe28 	bl	8003d04 <RCCEx_PLL2_Config>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80030ba:	e004      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80030c2:	e000      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80030c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10a      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80030ce:	4b92      	ldr	r3, [pc, #584]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d2:	f023 0103 	bic.w	r1, r3, #3
 80030d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030dc:	4a8e      	ldr	r2, [pc, #568]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030de:	430b      	orrs	r3, r1
 80030e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030e2:	e003      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80030f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030fc:	2300      	movs	r3, #0
 80030fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003102:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003106:	460b      	mov	r3, r1
 8003108:	4313      	orrs	r3, r2
 800310a:	f000 8099 	beq.w	8003240 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800310e:	4b83      	ldr	r3, [pc, #524]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a82      	ldr	r2, [pc, #520]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003118:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800311a:	f7fe f89b 	bl	8001254 <HAL_GetTick>
 800311e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003122:	e00b      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003124:	f7fe f896 	bl	8001254 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b64      	cmp	r3, #100	; 0x64
 8003132:	d903      	bls.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800313a:	e005      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800313c:	4b77      	ldr	r3, [pc, #476]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0ed      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003148:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800314c:	2b00      	cmp	r3, #0
 800314e:	d173      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003150:	4b71      	ldr	r3, [pc, #452]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003152:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003158:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800315c:	4053      	eors	r3, r2
 800315e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003162:	2b00      	cmp	r3, #0
 8003164:	d015      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003166:	4b6c      	ldr	r3, [pc, #432]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800316e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003172:	4b69      	ldr	r3, [pc, #420]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003176:	4a68      	ldr	r2, [pc, #416]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800317e:	4b66      	ldr	r3, [pc, #408]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	4a65      	ldr	r2, [pc, #404]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003188:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800318a:	4a63      	ldr	r2, [pc, #396]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800318c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003190:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003196:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800319a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319e:	d118      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fe f858 	bl	8001254 <HAL_GetTick>
 80031a4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031a8:	e00d      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031aa:	f7fe f853 	bl	8001254 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80031b4:	1ad2      	subs	r2, r2, r3
 80031b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d903      	bls.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80031c4:	e005      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031c6:	4b54      	ldr	r3, [pc, #336]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0eb      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80031d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d129      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031ea:	d10e      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x846>
 80031ec:	4b4a      	ldr	r3, [pc, #296]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80031f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031fc:	091a      	lsrs	r2, r3, #4
 80031fe:	4b48      	ldr	r3, [pc, #288]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003200:	4013      	ands	r3, r2
 8003202:	4a45      	ldr	r2, [pc, #276]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003204:	430b      	orrs	r3, r1
 8003206:	6113      	str	r3, [r2, #16]
 8003208:	e005      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800320a:	4b43      	ldr	r3, [pc, #268]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	4a42      	ldr	r2, [pc, #264]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003210:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003214:	6113      	str	r3, [r2, #16]
 8003216:	4b40      	ldr	r3, [pc, #256]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003218:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800321a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800321e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003226:	4a3c      	ldr	r2, [pc, #240]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003228:	430b      	orrs	r3, r1
 800322a:	6713      	str	r3, [r2, #112]	; 0x70
 800322c:	e008      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800322e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003232:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8003236:	e003      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003238:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800323c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003248:	f002 0301 	and.w	r3, r2, #1
 800324c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003250:	2300      	movs	r3, #0
 8003252:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003256:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800325a:	460b      	mov	r3, r1
 800325c:	4313      	orrs	r3, r2
 800325e:	f000 808f 	beq.w	8003380 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003266:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003268:	2b28      	cmp	r3, #40	; 0x28
 800326a:	d871      	bhi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800326c:	a201      	add	r2, pc, #4	; (adr r2, 8003274 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800326e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003272:	bf00      	nop
 8003274:	08003359 	.word	0x08003359
 8003278:	08003351 	.word	0x08003351
 800327c:	08003351 	.word	0x08003351
 8003280:	08003351 	.word	0x08003351
 8003284:	08003351 	.word	0x08003351
 8003288:	08003351 	.word	0x08003351
 800328c:	08003351 	.word	0x08003351
 8003290:	08003351 	.word	0x08003351
 8003294:	08003325 	.word	0x08003325
 8003298:	08003351 	.word	0x08003351
 800329c:	08003351 	.word	0x08003351
 80032a0:	08003351 	.word	0x08003351
 80032a4:	08003351 	.word	0x08003351
 80032a8:	08003351 	.word	0x08003351
 80032ac:	08003351 	.word	0x08003351
 80032b0:	08003351 	.word	0x08003351
 80032b4:	0800333b 	.word	0x0800333b
 80032b8:	08003351 	.word	0x08003351
 80032bc:	08003351 	.word	0x08003351
 80032c0:	08003351 	.word	0x08003351
 80032c4:	08003351 	.word	0x08003351
 80032c8:	08003351 	.word	0x08003351
 80032cc:	08003351 	.word	0x08003351
 80032d0:	08003351 	.word	0x08003351
 80032d4:	08003359 	.word	0x08003359
 80032d8:	08003351 	.word	0x08003351
 80032dc:	08003351 	.word	0x08003351
 80032e0:	08003351 	.word	0x08003351
 80032e4:	08003351 	.word	0x08003351
 80032e8:	08003351 	.word	0x08003351
 80032ec:	08003351 	.word	0x08003351
 80032f0:	08003351 	.word	0x08003351
 80032f4:	08003359 	.word	0x08003359
 80032f8:	08003351 	.word	0x08003351
 80032fc:	08003351 	.word	0x08003351
 8003300:	08003351 	.word	0x08003351
 8003304:	08003351 	.word	0x08003351
 8003308:	08003351 	.word	0x08003351
 800330c:	08003351 	.word	0x08003351
 8003310:	08003351 	.word	0x08003351
 8003314:	08003359 	.word	0x08003359
 8003318:	58024400 	.word	0x58024400
 800331c:	58024800 	.word	0x58024800
 8003320:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003328:	3308      	adds	r3, #8
 800332a:	2101      	movs	r1, #1
 800332c:	4618      	mov	r0, r3
 800332e:	f000 fce9 	bl	8003d04 <RCCEx_PLL2_Config>
 8003332:	4603      	mov	r3, r0
 8003334:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003338:	e00f      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800333a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800333e:	3328      	adds	r3, #40	; 0x28
 8003340:	2101      	movs	r1, #1
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fd90 	bl	8003e68 <RCCEx_PLL3_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800334e:	e004      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003356:	e000      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800335a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003362:	4bbf      	ldr	r3, [pc, #764]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003366:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800336a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800336e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003370:	4abb      	ldr	r2, [pc, #748]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003372:	430b      	orrs	r3, r1
 8003374:	6553      	str	r3, [r2, #84]	; 0x54
 8003376:	e003      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003378:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800337c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003388:	f002 0302 	and.w	r3, r2, #2
 800338c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003390:	2300      	movs	r3, #0
 8003392:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003396:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800339a:	460b      	mov	r3, r1
 800339c:	4313      	orrs	r3, r2
 800339e:	d041      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80033a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a6:	2b05      	cmp	r3, #5
 80033a8:	d824      	bhi.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80033aa:	a201      	add	r2, pc, #4	; (adr r2, 80033b0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80033ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b0:	080033fd 	.word	0x080033fd
 80033b4:	080033c9 	.word	0x080033c9
 80033b8:	080033df 	.word	0x080033df
 80033bc:	080033fd 	.word	0x080033fd
 80033c0:	080033fd 	.word	0x080033fd
 80033c4:	080033fd 	.word	0x080033fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033cc:	3308      	adds	r3, #8
 80033ce:	2101      	movs	r1, #1
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fc97 	bl	8003d04 <RCCEx_PLL2_Config>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80033dc:	e00f      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033e2:	3328      	adds	r3, #40	; 0x28
 80033e4:	2101      	movs	r1, #1
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fd3e 	bl	8003e68 <RCCEx_PLL3_Config>
 80033ec:	4603      	mov	r3, r0
 80033ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80033f2:	e004      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80033fa:	e000      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80033fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10a      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003406:	4b96      	ldr	r3, [pc, #600]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340a:	f023 0107 	bic.w	r1, r3, #7
 800340e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003414:	4a92      	ldr	r2, [pc, #584]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003416:	430b      	orrs	r3, r1
 8003418:	6553      	str	r3, [r2, #84]	; 0x54
 800341a:	e003      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003420:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342c:	f002 0304 	and.w	r3, r2, #4
 8003430:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800343a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800343e:	460b      	mov	r3, r1
 8003440:	4313      	orrs	r3, r2
 8003442:	d044      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344c:	2b05      	cmp	r3, #5
 800344e:	d825      	bhi.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003450:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003456:	bf00      	nop
 8003458:	080034a5 	.word	0x080034a5
 800345c:	08003471 	.word	0x08003471
 8003460:	08003487 	.word	0x08003487
 8003464:	080034a5 	.word	0x080034a5
 8003468:	080034a5 	.word	0x080034a5
 800346c:	080034a5 	.word	0x080034a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003474:	3308      	adds	r3, #8
 8003476:	2101      	movs	r1, #1
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fc43 	bl	8003d04 <RCCEx_PLL2_Config>
 800347e:	4603      	mov	r3, r0
 8003480:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003484:	e00f      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800348a:	3328      	adds	r3, #40	; 0x28
 800348c:	2101      	movs	r1, #1
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fcea 	bl	8003e68 <RCCEx_PLL3_Config>
 8003494:	4603      	mov	r3, r0
 8003496:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800349a:	e004      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80034a2:	e000      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80034a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10b      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034ae:	4b6c      	ldr	r3, [pc, #432]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80034b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b2:	f023 0107 	bic.w	r1, r3, #7
 80034b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034be:	4a68      	ldr	r2, [pc, #416]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80034c0:	430b      	orrs	r3, r1
 80034c2:	6593      	str	r3, [r2, #88]	; 0x58
 80034c4:	e003      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d6:	f002 0320 	and.w	r3, r2, #32
 80034da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034de:	2300      	movs	r3, #0
 80034e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80034e4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4313      	orrs	r3, r2
 80034ec:	d055      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80034ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034fa:	d033      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80034fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003500:	d82c      	bhi.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003506:	d02f      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350c:	d826      	bhi.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800350e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003512:	d02b      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003514:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003518:	d820      	bhi.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800351a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800351e:	d012      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003524:	d81a      	bhi.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003526:	2b00      	cmp	r3, #0
 8003528:	d022      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800352a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800352e:	d115      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003534:	3308      	adds	r3, #8
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fbe3 	bl	8003d04 <RCCEx_PLL2_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003544:	e015      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800354a:	3328      	adds	r3, #40	; 0x28
 800354c:	2102      	movs	r1, #2
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fc8a 	bl	8003e68 <RCCEx_PLL3_Config>
 8003554:	4603      	mov	r3, r0
 8003556:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800355a:	e00a      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003562:	e006      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003564:	bf00      	nop
 8003566:	e004      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003568:	bf00      	nop
 800356a:	e002      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800356c:	bf00      	nop
 800356e:	e000      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003572:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10b      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800357a:	4b39      	ldr	r3, [pc, #228]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800357c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003586:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800358a:	4a35      	ldr	r2, [pc, #212]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800358c:	430b      	orrs	r3, r1
 800358e:	6553      	str	r3, [r2, #84]	; 0x54
 8003590:	e003      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003592:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003596:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800359a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80035a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035aa:	2300      	movs	r3, #0
 80035ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035b0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80035b4:	460b      	mov	r3, r1
 80035b6:	4313      	orrs	r3, r2
 80035b8:	d058      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80035ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80035c6:	d033      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80035c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80035cc:	d82c      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80035ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d2:	d02f      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80035d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d8:	d826      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80035da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035de:	d02b      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80035e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035e4:	d820      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80035e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ea:	d012      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80035ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f0:	d81a      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d022      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80035f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fa:	d115      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003600:	3308      	adds	r3, #8
 8003602:	2100      	movs	r1, #0
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fb7d 	bl	8003d04 <RCCEx_PLL2_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003610:	e015      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003616:	3328      	adds	r3, #40	; 0x28
 8003618:	2102      	movs	r1, #2
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fc24 	bl	8003e68 <RCCEx_PLL3_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003626:	e00a      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800362e:	e006      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003630:	bf00      	nop
 8003632:	e004      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003634:	bf00      	nop
 8003636:	e002      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003638:	bf00      	nop
 800363a:	e000      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800363c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800363e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10e      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003646:	4b06      	ldr	r3, [pc, #24]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800364e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003652:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003656:	4a02      	ldr	r2, [pc, #8]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003658:	430b      	orrs	r3, r1
 800365a:	6593      	str	r3, [r2, #88]	; 0x58
 800365c:	e006      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800365e:	bf00      	nop
 8003660:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003664:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003668:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800366c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003678:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800367c:	2300      	movs	r3, #0
 800367e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003682:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003686:	460b      	mov	r3, r1
 8003688:	4313      	orrs	r3, r2
 800368a:	d055      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800368c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003690:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003694:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003698:	d033      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800369a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800369e:	d82c      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80036a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a4:	d02f      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80036a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036aa:	d826      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80036ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80036b0:	d02b      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80036b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80036b6:	d820      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80036b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036bc:	d012      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80036be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036c2:	d81a      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d022      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80036c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036cc:	d115      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036d2:	3308      	adds	r3, #8
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fb14 	bl	8003d04 <RCCEx_PLL2_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80036e2:	e015      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036e8:	3328      	adds	r3, #40	; 0x28
 80036ea:	2102      	movs	r1, #2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fbbb 	bl	8003e68 <RCCEx_PLL3_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80036f8:	e00a      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003700:	e006      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003702:	bf00      	nop
 8003704:	e004      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003706:	bf00      	nop
 8003708:	e002      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800370a:	bf00      	nop
 800370c:	e000      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800370e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003710:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10b      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003718:	4ba0      	ldr	r3, [pc, #640]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800371a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003724:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003728:	4a9c      	ldr	r2, [pc, #624]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800372a:	430b      	orrs	r3, r1
 800372c:	6593      	str	r3, [r2, #88]	; 0x58
 800372e:	e003      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003730:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003734:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f002 0308 	and.w	r3, r2, #8
 8003744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003748:	2300      	movs	r3, #0
 800374a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800374e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003752:	460b      	mov	r3, r1
 8003754:	4313      	orrs	r3, r2
 8003756:	d01e      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800375c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003764:	d10c      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800376a:	3328      	adds	r3, #40	; 0x28
 800376c:	2102      	movs	r1, #2
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fb7a 	bl	8003e68 <RCCEx_PLL3_Config>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003780:	4b86      	ldr	r3, [pc, #536]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003784:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800378c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003790:	4a82      	ldr	r2, [pc, #520]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003792:	430b      	orrs	r3, r1
 8003794:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379e:	f002 0310 	and.w	r3, r2, #16
 80037a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037a6:	2300      	movs	r3, #0
 80037a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037ac:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80037b0:	460b      	mov	r3, r1
 80037b2:	4313      	orrs	r3, r2
 80037b4:	d01e      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80037b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c2:	d10c      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80037c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037c8:	3328      	adds	r3, #40	; 0x28
 80037ca:	2102      	movs	r1, #2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fb4b 	bl	8003e68 <RCCEx_PLL3_Config>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037de:	4b6f      	ldr	r3, [pc, #444]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80037e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ee:	4a6b      	ldr	r2, [pc, #428]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80037f0:	430b      	orrs	r3, r1
 80037f2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003800:	67bb      	str	r3, [r7, #120]	; 0x78
 8003802:	2300      	movs	r3, #0
 8003804:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003806:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800380a:	460b      	mov	r3, r1
 800380c:	4313      	orrs	r3, r2
 800380e:	d03e      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003814:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800381c:	d022      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800381e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003822:	d81b      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382c:	d00b      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800382e:	e015      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003834:	3308      	adds	r3, #8
 8003836:	2100      	movs	r1, #0
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fa63 	bl	8003d04 <RCCEx_PLL2_Config>
 800383e:	4603      	mov	r3, r0
 8003840:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003844:	e00f      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800384a:	3328      	adds	r3, #40	; 0x28
 800384c:	2102      	movs	r1, #2
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fb0a 	bl	8003e68 <RCCEx_PLL3_Config>
 8003854:	4603      	mov	r3, r0
 8003856:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800385a:	e004      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003862:	e000      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003866:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10b      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800386e:	4b4b      	ldr	r3, [pc, #300]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003872:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800387a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800387e:	4a47      	ldr	r2, [pc, #284]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003880:	430b      	orrs	r3, r1
 8003882:	6593      	str	r3, [r2, #88]	; 0x58
 8003884:	e003      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003886:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800388a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800388e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800389a:	673b      	str	r3, [r7, #112]	; 0x70
 800389c:	2300      	movs	r3, #0
 800389e:	677b      	str	r3, [r7, #116]	; 0x74
 80038a0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80038a4:	460b      	mov	r3, r1
 80038a6:	4313      	orrs	r3, r2
 80038a8:	d03b      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80038aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038b6:	d01f      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80038b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038bc:	d818      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80038be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038c2:	d003      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80038c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038c8:	d007      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80038ca:	e011      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038cc:	4b33      	ldr	r3, [pc, #204]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	4a32      	ldr	r2, [pc, #200]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80038d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80038d8:	e00f      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038de:	3328      	adds	r3, #40	; 0x28
 80038e0:	2101      	movs	r1, #1
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fac0 	bl	8003e68 <RCCEx_PLL3_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80038ee:	e004      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80038f6:	e000      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80038f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10b      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003902:	4b26      	ldr	r3, [pc, #152]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800390a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800390e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003912:	4a22      	ldr	r2, [pc, #136]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003914:	430b      	orrs	r3, r1
 8003916:	6553      	str	r3, [r2, #84]	; 0x54
 8003918:	e003      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800391e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800392e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003930:	2300      	movs	r3, #0
 8003932:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003934:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003938:	460b      	mov	r3, r1
 800393a:	4313      	orrs	r3, r2
 800393c:	d034      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800393e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394c:	d007      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800394e:	e011      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003950:	4b12      	ldr	r3, [pc, #72]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	4a11      	ldr	r2, [pc, #68]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800395a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800395c:	e00e      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800395e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003962:	3308      	adds	r3, #8
 8003964:	2102      	movs	r1, #2
 8003966:	4618      	mov	r0, r3
 8003968:	f000 f9cc 	bl	8003d04 <RCCEx_PLL2_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003972:	e003      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800397a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800397c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10d      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003984:	4b05      	ldr	r3, [pc, #20]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800398c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003992:	4a02      	ldr	r2, [pc, #8]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003994:	430b      	orrs	r3, r1
 8003996:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003998:	e006      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800399a:	bf00      	nop
 800399c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80039b4:	663b      	str	r3, [r7, #96]	; 0x60
 80039b6:	2300      	movs	r3, #0
 80039b8:	667b      	str	r3, [r7, #100]	; 0x64
 80039ba:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80039be:	460b      	mov	r3, r1
 80039c0:	4313      	orrs	r3, r2
 80039c2:	d00c      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80039c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039c8:	3328      	adds	r3, #40	; 0x28
 80039ca:	2102      	movs	r1, #2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fa4b 	bl	8003e68 <RCCEx_PLL3_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80039de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80039ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80039ec:	2300      	movs	r3, #0
 80039ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039f0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80039f4:	460b      	mov	r3, r1
 80039f6:	4313      	orrs	r3, r2
 80039f8:	d036      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80039fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a04:	d018      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a0a:	d811      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a10:	d014      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a16:	d80b      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d011      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a20:	d106      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a22:	4bb7      	ldr	r3, [pc, #732]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	4ab6      	ldr	r2, [pc, #728]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003a2e:	e008      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003a36:	e004      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003a38:	bf00      	nop
 8003a3a:	e002      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003a3c:	bf00      	nop
 8003a3e:	e000      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10a      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a4a:	4bad      	ldr	r3, [pc, #692]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a58:	4aa9      	ldr	r2, [pc, #676]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003a5a:	430b      	orrs	r3, r1
 8003a5c:	6553      	str	r3, [r2, #84]	; 0x54
 8003a5e:	e003      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a70:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003a74:	653b      	str	r3, [r7, #80]	; 0x50
 8003a76:	2300      	movs	r3, #0
 8003a78:	657b      	str	r3, [r7, #84]	; 0x54
 8003a7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4313      	orrs	r3, r2
 8003a82:	d009      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a84:	4b9e      	ldr	r3, [pc, #632]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	4a9b      	ldr	r2, [pc, #620]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003a94:	430b      	orrs	r3, r1
 8003a96:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003aa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aaa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	d009      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ab4:	4b92      	ldr	r3, [pc, #584]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ac2:	4a8f      	ldr	r2, [pc, #572]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003ad4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8003ada:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	d00e      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ae4:	4b86      	ldr	r3, [pc, #536]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	4a85      	ldr	r2, [pc, #532]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003aea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003aee:	6113      	str	r3, [r2, #16]
 8003af0:	4b83      	ldr	r3, [pc, #524]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003af2:	6919      	ldr	r1, [r3, #16]
 8003af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003af8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003afc:	4a80      	ldr	r2, [pc, #512]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003afe:	430b      	orrs	r3, r1
 8003b00:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b10:	2300      	movs	r3, #0
 8003b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b14:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	d009      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003b1e:	4b78      	ldr	r3, [pc, #480]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2c:	4a74      	ldr	r2, [pc, #464]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003b3e:	633b      	str	r3, [r7, #48]	; 0x30
 8003b40:	2300      	movs	r3, #0
 8003b42:	637b      	str	r3, [r7, #52]	; 0x34
 8003b44:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	d00a      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b4e:	4b6c      	ldr	r3, [pc, #432]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b52:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5e:	4a68      	ldr	r2, [pc, #416]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003b60:	430b      	orrs	r3, r1
 8003b62:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b76:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	d011      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b84:	3308      	adds	r3, #8
 8003b86:	2100      	movs	r1, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 f8bb 	bl	8003d04 <RCCEx_PLL2_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003b94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ba0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	2100      	movs	r1, #0
 8003bae:	6239      	str	r1, [r7, #32]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	d011      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bc4:	3308      	adds	r3, #8
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 f89b 	bl	8003d04 <RCCEx_PLL2_Config>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003bd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bdc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003be0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bec:	2100      	movs	r1, #0
 8003bee:	61b9      	str	r1, [r7, #24]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	61fb      	str	r3, [r7, #28]
 8003bf6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	d011      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c04:	3308      	adds	r3, #8
 8003c06:	2102      	movs	r1, #2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 f87b 	bl	8003d04 <RCCEx_PLL2_Config>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003c14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	6139      	str	r1, [r7, #16]
 8003c30:	f003 0308 	and.w	r3, r3, #8
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	d011      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c44:	3328      	adds	r3, #40	; 0x28
 8003c46:	2100      	movs	r1, #0
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 f90d 	bl	8003e68 <RCCEx_PLL3_Config>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8003c54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	d011      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c84:	3328      	adds	r3, #40	; 0x28
 8003c86:	2101      	movs	r1, #1
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 f8ed 	bl	8003e68 <RCCEx_PLL3_Config>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003c94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ca0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	2100      	movs	r1, #0
 8003cae:	6039      	str	r1, [r7, #0]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	607b      	str	r3, [r7, #4]
 8003cb6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	d011      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cc4:	3328      	adds	r3, #40	; 0x28
 8003cc6:	2102      	movs	r1, #2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 f8cd 	bl	8003e68 <RCCEx_PLL3_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003cd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cdc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ce0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8003ce4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	e000      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cfe:	bf00      	nop
 8003d00:	58024400 	.word	0x58024400

08003d04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d12:	4b53      	ldr	r3, [pc, #332]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d101      	bne.n	8003d22 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e099      	b.n	8003e56 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d22:	4b4f      	ldr	r3, [pc, #316]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a4e      	ldr	r2, [pc, #312]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003d28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d2e:	f7fd fa91 	bl	8001254 <HAL_GetTick>
 8003d32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d34:	e008      	b.n	8003d48 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d36:	f7fd fa8d 	bl	8001254 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e086      	b.n	8003e56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d48:	4b45      	ldr	r3, [pc, #276]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f0      	bne.n	8003d36 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d54:	4b42      	ldr	r3, [pc, #264]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d58:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	031b      	lsls	r3, r3, #12
 8003d62:	493f      	ldr	r1, [pc, #252]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	628b      	str	r3, [r1, #40]	; 0x28
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	025b      	lsls	r3, r3, #9
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	041b      	lsls	r3, r3, #16
 8003d86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	061b      	lsls	r3, r3, #24
 8003d94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d98:	4931      	ldr	r1, [pc, #196]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d9e:	4b30      	ldr	r3, [pc, #192]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	492d      	ldr	r1, [pc, #180]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003db0:	4b2b      	ldr	r3, [pc, #172]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	f023 0220 	bic.w	r2, r3, #32
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	4928      	ldr	r1, [pc, #160]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003dc2:	4b27      	ldr	r3, [pc, #156]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	4a26      	ldr	r2, [pc, #152]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003dc8:	f023 0310 	bic.w	r3, r3, #16
 8003dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003dce:	4b24      	ldr	r3, [pc, #144]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003dd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dd2:	4b24      	ldr	r3, [pc, #144]	; (8003e64 <RCCEx_PLL2_Config+0x160>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	69d2      	ldr	r2, [r2, #28]
 8003dda:	00d2      	lsls	r2, r2, #3
 8003ddc:	4920      	ldr	r1, [pc, #128]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003de2:	4b1f      	ldr	r3, [pc, #124]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de6:	4a1e      	ldr	r2, [pc, #120]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003de8:	f043 0310 	orr.w	r3, r3, #16
 8003dec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d106      	bne.n	8003e02 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003df4:	4b1a      	ldr	r3, [pc, #104]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	4a19      	ldr	r2, [pc, #100]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003dfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003dfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e00:	e00f      	b.n	8003e22 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d106      	bne.n	8003e16 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003e08:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	4a14      	ldr	r2, [pc, #80]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003e0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e14:	e005      	b.n	8003e22 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003e16:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1a:	4a11      	ldr	r2, [pc, #68]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003e1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003e22:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a0e      	ldr	r2, [pc, #56]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003e28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e2e:	f7fd fa11 	bl	8001254 <HAL_GetTick>
 8003e32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e34:	e008      	b.n	8003e48 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e36:	f7fd fa0d 	bl	8001254 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e006      	b.n	8003e56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <RCCEx_PLL2_Config+0x15c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	58024400 	.word	0x58024400
 8003e64:	ffff0007 	.word	0xffff0007

08003e68 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e76:	4b53      	ldr	r3, [pc, #332]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d101      	bne.n	8003e86 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e099      	b.n	8003fba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e86:	4b4f      	ldr	r3, [pc, #316]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a4e      	ldr	r2, [pc, #312]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e92:	f7fd f9df 	bl	8001254 <HAL_GetTick>
 8003e96:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e98:	e008      	b.n	8003eac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e9a:	f7fd f9db 	bl	8001254 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e086      	b.n	8003fba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003eac:	4b45      	ldr	r3, [pc, #276]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f0      	bne.n	8003e9a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003eb8:	4b42      	ldr	r3, [pc, #264]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	051b      	lsls	r3, r3, #20
 8003ec6:	493f      	ldr	r1, [pc, #252]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	628b      	str	r3, [r1, #40]	; 0x28
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	025b      	lsls	r3, r3, #9
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	041b      	lsls	r3, r3, #16
 8003eea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	061b      	lsls	r3, r3, #24
 8003ef8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003efc:	4931      	ldr	r1, [pc, #196]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003f02:	4b30      	ldr	r3, [pc, #192]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	492d      	ldr	r1, [pc, #180]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003f14:	4b2b      	ldr	r3, [pc, #172]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	4928      	ldr	r1, [pc, #160]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f26:	4b27      	ldr	r3, [pc, #156]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	4a26      	ldr	r2, [pc, #152]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f32:	4b24      	ldr	r3, [pc, #144]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f36:	4b24      	ldr	r3, [pc, #144]	; (8003fc8 <RCCEx_PLL3_Config+0x160>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	69d2      	ldr	r2, [r2, #28]
 8003f3e:	00d2      	lsls	r2, r2, #3
 8003f40:	4920      	ldr	r1, [pc, #128]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f46:	4b1f      	ldr	r3, [pc, #124]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	4a1e      	ldr	r2, [pc, #120]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d106      	bne.n	8003f66 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f58:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	4a19      	ldr	r2, [pc, #100]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003f5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f64:	e00f      	b.n	8003f86 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d106      	bne.n	8003f7a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f6c:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	4a14      	ldr	r2, [pc, #80]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003f72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f78:	e005      	b.n	8003f86 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f7a:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7e:	4a11      	ldr	r2, [pc, #68]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003f80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f86:	4b0f      	ldr	r3, [pc, #60]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a0e      	ldr	r2, [pc, #56]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f92:	f7fd f95f 	bl	8001254 <HAL_GetTick>
 8003f96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f98:	e008      	b.n	8003fac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f9a:	f7fd f95b 	bl	8001254 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e006      	b.n	8003fba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003fac:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <RCCEx_PLL3_Config+0x15c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0f0      	beq.n	8003f9a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	58024400 	.word	0x58024400
 8003fc8:	ffff0007 	.word	0xffff0007

08003fcc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fcc:	b084      	sub	sp, #16
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b084      	sub	sp, #16
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	f107 001c 	add.w	r0, r7, #28
 8003fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d120      	bne.n	8004026 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	4b2a      	ldr	r3, [pc, #168]	; (80040a0 <USB_CoreInit+0xd4>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800400a:	2b01      	cmp	r3, #1
 800400c:	d105      	bne.n	800401a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 faac 	bl	8004578 <USB_CoreReset>
 8004020:	4603      	mov	r3, r0
 8004022:	73fb      	strb	r3, [r7, #15]
 8004024:	e01a      	b.n	800405c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 faa0 	bl	8004578 <USB_CoreReset>
 8004038:	4603      	mov	r3, r0
 800403a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800403c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	639a      	str	r2, [r3, #56]	; 0x38
 800404e:	e005      	b.n	800405c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004054:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	2b01      	cmp	r3, #1
 8004060:	d116      	bne.n	8004090 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004066:	b29a      	uxth	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004070:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <USB_CoreInit+0xd8>)
 8004072:	4313      	orrs	r3, r2
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f043 0206 	orr.w	r2, r3, #6
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f043 0220 	orr.w	r2, r3, #32
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004090:	7bfb      	ldrb	r3, [r7, #15]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800409c:	b004      	add	sp, #16
 800409e:	4770      	bx	lr
 80040a0:	ffbdffbf 	.word	0xffbdffbf
 80040a4:	03ee0000 	.word	0x03ee0000

080040a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f023 0201 	bic.w	r2, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	460b      	mov	r3, r1
 80040d4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d115      	bne.n	8004118 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040f8:	2001      	movs	r0, #1
 80040fa:	f7fd f8b7 	bl	800126c <HAL_Delay>
      ms++;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3301      	adds	r3, #1
 8004102:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fa29 	bl	800455c <USB_GetMode>
 800410a:	4603      	mov	r3, r0
 800410c:	2b01      	cmp	r3, #1
 800410e:	d01e      	beq.n	800414e <USB_SetCurrentMode+0x84>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b31      	cmp	r3, #49	; 0x31
 8004114:	d9f0      	bls.n	80040f8 <USB_SetCurrentMode+0x2e>
 8004116:	e01a      	b.n	800414e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d115      	bne.n	800414a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800412a:	2001      	movs	r0, #1
 800412c:	f7fd f89e 	bl	800126c <HAL_Delay>
      ms++;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	3301      	adds	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fa10 	bl	800455c <USB_GetMode>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d005      	beq.n	800414e <USB_SetCurrentMode+0x84>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b31      	cmp	r3, #49	; 0x31
 8004146:	d9f0      	bls.n	800412a <USB_SetCurrentMode+0x60>
 8004148:	e001      	b.n	800414e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e005      	b.n	800415a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b32      	cmp	r3, #50	; 0x32
 8004152:	d101      	bne.n	8004158 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e000      	b.n	800415a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004164:	b084      	sub	sp, #16
 8004166:	b580      	push	{r7, lr}
 8004168:	b086      	sub	sp, #24
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800417e:	2300      	movs	r3, #0
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	e009      	b.n	8004198 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	3340      	adds	r3, #64	; 0x40
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	2200      	movs	r2, #0
 8004190:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	3301      	adds	r3, #1
 8004196:	613b      	str	r3, [r7, #16]
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	2b0e      	cmp	r3, #14
 800419c:	d9f2      	bls.n	8004184 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800419e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d11c      	bne.n	80041de <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041b2:	f043 0302 	orr.w	r3, r3, #2
 80041b6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	e005      	b.n	80041ea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041f0:	461a      	mov	r2, r3
 80041f2:	2300      	movs	r3, #0
 80041f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fc:	4619      	mov	r1, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004204:	461a      	mov	r2, r3
 8004206:	680b      	ldr	r3, [r1, #0]
 8004208:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800420a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420c:	2b01      	cmp	r3, #1
 800420e:	d10c      	bne.n	800422a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004212:	2b00      	cmp	r3, #0
 8004214:	d104      	bne.n	8004220 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004216:	2100      	movs	r1, #0
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f965 	bl	80044e8 <USB_SetDevSpeed>
 800421e:	e008      	b.n	8004232 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004220:	2101      	movs	r1, #1
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f960 	bl	80044e8 <USB_SetDevSpeed>
 8004228:	e003      	b.n	8004232 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800422a:	2103      	movs	r1, #3
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f95b 	bl	80044e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004232:	2110      	movs	r1, #16
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f8f3 	bl	8004420 <USB_FlushTxFifo>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f91f 	bl	8004488 <USB_FlushRxFifo>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425a:	461a      	mov	r2, r3
 800425c:	2300      	movs	r3, #0
 800425e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004266:	461a      	mov	r2, r3
 8004268:	2300      	movs	r3, #0
 800426a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004272:	461a      	mov	r2, r3
 8004274:	2300      	movs	r3, #0
 8004276:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004278:	2300      	movs	r3, #0
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	e043      	b.n	8004306 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4413      	add	r3, r2
 8004286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004290:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004294:	d118      	bne.n	80042c8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10a      	bne.n	80042b2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a8:	461a      	mov	r2, r3
 80042aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	e013      	b.n	80042da <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042be:	461a      	mov	r2, r3
 80042c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	e008      	b.n	80042da <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d4:	461a      	mov	r2, r3
 80042d6:	2300      	movs	r3, #0
 80042d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e6:	461a      	mov	r2, r3
 80042e8:	2300      	movs	r3, #0
 80042ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f8:	461a      	mov	r2, r3
 80042fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	3301      	adds	r3, #1
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	429a      	cmp	r2, r3
 800430c:	d3b7      	bcc.n	800427e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800430e:	2300      	movs	r3, #0
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	e043      	b.n	800439c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004326:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800432a:	d118      	bne.n	800435e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433e:	461a      	mov	r2, r3
 8004340:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	e013      	b.n	8004370 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004354:	461a      	mov	r2, r3
 8004356:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	e008      	b.n	8004370 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436a:	461a      	mov	r2, r3
 800436c:	2300      	movs	r3, #0
 800436e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437c:	461a      	mov	r2, r3
 800437e:	2300      	movs	r3, #0
 8004380:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438e:	461a      	mov	r2, r3
 8004390:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004394:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	3301      	adds	r3, #1
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d3b7      	bcc.n	8004314 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80043c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d105      	bne.n	80043d8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	f043 0210 	orr.w	r2, r3, #16
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699a      	ldr	r2, [r3, #24]
 80043dc:	4b0e      	ldr	r3, [pc, #56]	; (8004418 <USB_DevInit+0x2b4>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d005      	beq.n	80043f6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	f043 0208 	orr.w	r2, r3, #8
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80043f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d105      	bne.n	8004408 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699a      	ldr	r2, [r3, #24]
 8004400:	4b06      	ldr	r3, [pc, #24]	; (800441c <USB_DevInit+0x2b8>)
 8004402:	4313      	orrs	r3, r2
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004408:	7dfb      	ldrb	r3, [r7, #23]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004414:	b004      	add	sp, #16
 8004416:	4770      	bx	lr
 8004418:	803c3800 	.word	0x803c3800
 800441c:	40000004 	.word	0x40000004

08004420 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3301      	adds	r3, #1
 8004432:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4a13      	ldr	r2, [pc, #76]	; (8004484 <USB_FlushTxFifo+0x64>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d901      	bls.n	8004440 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e01b      	b.n	8004478 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	daf2      	bge.n	800442e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	019b      	lsls	r3, r3, #6
 8004450:	f043 0220 	orr.w	r2, r3, #32
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3301      	adds	r3, #1
 800445c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4a08      	ldr	r2, [pc, #32]	; (8004484 <USB_FlushTxFifo+0x64>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e006      	b.n	8004478 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b20      	cmp	r3, #32
 8004474:	d0f0      	beq.n	8004458 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	00030d40 	.word	0x00030d40

08004488 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3301      	adds	r3, #1
 8004498:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4a11      	ldr	r2, [pc, #68]	; (80044e4 <USB_FlushRxFifo+0x5c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d901      	bls.n	80044a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e018      	b.n	80044d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	daf2      	bge.n	8004494 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2210      	movs	r2, #16
 80044b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	3301      	adds	r3, #1
 80044bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4a08      	ldr	r2, [pc, #32]	; (80044e4 <USB_FlushRxFifo+0x5c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d901      	bls.n	80044ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e006      	b.n	80044d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	2b10      	cmp	r3, #16
 80044d4:	d0f0      	beq.n	80044b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	00030d40 	.word	0x00030d40

080044e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	68f9      	ldr	r1, [r7, #12]
 8004504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004508:	4313      	orrs	r3, r2
 800450a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800451a:	b480      	push	{r7}
 800451c:	b085      	sub	sp, #20
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004534:	f023 0303 	bic.w	r3, r3, #3
 8004538:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004548:	f043 0302 	orr.w	r3, r3, #2
 800454c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	f003 0301 	and.w	r3, r3, #1
}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3301      	adds	r3, #1
 8004588:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4a13      	ldr	r2, [pc, #76]	; (80045dc <USB_CoreReset+0x64>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d901      	bls.n	8004596 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e01b      	b.n	80045ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	daf2      	bge.n	8004584 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f043 0201 	orr.w	r2, r3, #1
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3301      	adds	r3, #1
 80045b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4a09      	ldr	r2, [pc, #36]	; (80045dc <USB_CoreReset+0x64>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d901      	bls.n	80045c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e006      	b.n	80045ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d0f0      	beq.n	80045ae <USB_CoreReset+0x36>

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	00030d40 	.word	0x00030d40

080045e0 <tud_audio_n_read>:
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
  return tu_fifo_count(&_audiod_fct[func_id].ep_out_ff);
}

uint16_t tud_audio_n_read(uint8_t func_id, void* buffer, uint16_t bufsize)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	6039      	str	r1, [r7, #0]
 80045ea:	71fb      	strb	r3, [r7, #7]
 80045ec:	4613      	mov	r3, r2
 80045ee:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
 80045f0:	79fb      	ldrb	r3, [r7, #7]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10a      	bne.n	800460c <tud_audio_n_read+0x2c>
 80045f6:	79fa      	ldrb	r2, [r7, #7]
 80045f8:	490e      	ldr	r1, [pc, #56]	; (8004634 <tud_audio_n_read+0x54>)
 80045fa:	4613      	mov	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	1a9b      	subs	r3, r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	440b      	add	r3, r1
 8004604:	3304      	adds	r3, #4
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <tud_audio_n_read+0x30>
 800460c:	2300      	movs	r3, #0
 800460e:	e00d      	b.n	800462c <tud_audio_n_read+0x4c>
  return tu_fifo_read_n(&_audiod_fct[func_id].ep_out_ff, buffer, bufsize);
 8004610:	79fa      	ldrb	r2, [r7, #7]
 8004612:	4613      	mov	r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	3320      	adds	r3, #32
 800461c:	4a05      	ldr	r2, [pc, #20]	; (8004634 <tud_audio_n_read+0x54>)
 800461e:	4413      	add	r3, r2
 8004620:	88ba      	ldrh	r2, [r7, #4]
 8004622:	6839      	ldr	r1, [r7, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f002 fb1e 	bl	8006c66 <tu_fifo_read_n>
 800462a:	4603      	mov	r3, r0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	24001840 	.word	0x24001840

08004638 <audiod_rx_done_cb>:
// If you prefer your own (more efficient) implementation suiting your purpose set CFG_TUD_AUDIO_ENABLE_DECODING = 0.

#if CFG_TUD_AUDIO_ENABLE_EP_OUT

static bool audiod_rx_done_cb(uint8_t rhport, audiod_function_t* audio, uint16_t n_bytes_received)
{
 8004638:	b590      	push	{r4, r7, lr}
 800463a:	b087      	sub	sp, #28
 800463c:	af02      	add	r7, sp, #8
 800463e:	4603      	mov	r3, r0
 8004640:	6039      	str	r1, [r7, #0]
 8004642:	71fb      	strb	r3, [r7, #7]
 8004644:	4613      	mov	r3, r2
 8004646:	80bb      	strh	r3, [r7, #4]
  uint8_t idxItf = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	73bb      	strb	r3, [r7, #14]
  uint8_t const *dummy2;
  uint8_t idx_audio_fct = 0;
 800464c:	2300      	movs	r3, #0
 800464e:	73fb      	strb	r3, [r7, #15]

  if (tud_audio_rx_done_pre_read_cb || tud_audio_rx_done_post_read_cb)
 8004650:	4b32      	ldr	r3, [pc, #200]	; (800471c <audiod_rx_done_cb+0xe4>)
 8004652:	2b00      	cmp	r3, #0
 8004654:	d102      	bne.n	800465c <audiod_rx_done_cb+0x24>
 8004656:	4b32      	ldr	r3, [pc, #200]	; (8004720 <audiod_rx_done_cb+0xe8>)
 8004658:	2b00      	cmp	r3, #0
 800465a:	d015      	beq.n	8004688 <audiod_rx_done_cb+0x50>
  {
    idx_audio_fct = audiod_get_audio_fct_idx(audio);
 800465c:	6838      	ldr	r0, [r7, #0]
 800465e:	f001 f8d3 	bl	8005808 <audiod_get_audio_fct_idx>
 8004662:	4603      	mov	r3, r0
 8004664:	73fb      	strb	r3, [r7, #15]
    TU_VERIFY(audiod_get_AS_interface_index(audio->ep_out_as_intf_num, audio, &idxItf, &dummy2));
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	7c18      	ldrb	r0, [r3, #16]
 800466a:	f107 0308 	add.w	r3, r7, #8
 800466e:	f107 020e 	add.w	r2, r7, #14
 8004672:	6839      	ldr	r1, [r7, #0]
 8004674:	f000 fee4 	bl	8005440 <audiod_get_AS_interface_index>
 8004678:	4603      	mov	r3, r0
 800467a:	f083 0301 	eor.w	r3, r3, #1
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <audiod_rx_done_cb+0x50>
 8004684:	2300      	movs	r3, #0
 8004686:	e044      	b.n	8004712 <audiod_rx_done_cb+0xda>
  }

  // Call a weak callback here - a possibility for user to get informed an audio packet was received and data gets now loaded into EP FIFO (or decoded into support RX software FIFO)
  if (tud_audio_rx_done_pre_read_cb)
 8004688:	4b24      	ldr	r3, [pc, #144]	; (800471c <audiod_rx_done_cb+0xe4>)
 800468a:	2b00      	cmp	r3, #0
 800468c:	d015      	beq.n	80046ba <audiod_rx_done_cb+0x82>
  {
    TU_VERIFY(tud_audio_rx_done_pre_read_cb(rhport, n_bytes_received, idx_audio_fct, audio->ep_out, audio->alt_setting[idxItf]));
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	7b5c      	ldrb	r4, [r3, #13]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	7bba      	ldrb	r2, [r7, #14]
 8004698:	4413      	add	r3, r2
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	7bfa      	ldrb	r2, [r7, #15]
 800469e:	88b9      	ldrh	r1, [r7, #4]
 80046a0:	79f8      	ldrb	r0, [r7, #7]
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	4623      	mov	r3, r4
 80046a6:	f7fc f90d 	bl	80008c4 <tud_audio_rx_done_pre_read_cb>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f083 0301 	eor.w	r3, r3, #1
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <audiod_rx_done_cb+0x82>
 80046b6:	2300      	movs	r3, #0
 80046b8:	e02b      	b.n	8004712 <audiod_rx_done_cb+0xda>

  // Schedule for next receive
  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_out, audio->lin_buf_out, audio->ep_out_sz), false);
#else
  // Data is already placed in EP FIFO, schedule for next receive
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	7b59      	ldrb	r1, [r3, #13]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	f103 0220 	add.w	r2, r3, #32
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	89db      	ldrh	r3, [r3, #14]
 80046c8:	79f8      	ldrb	r0, [r7, #7]
 80046ca:	f003 fe13 	bl	80082f4 <usbd_edpt_xfer_fifo>
 80046ce:	4603      	mov	r3, r0
 80046d0:	f083 0301 	eor.w	r3, r3, #1
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <audiod_rx_done_cb+0xa6>
 80046da:	2300      	movs	r3, #0
 80046dc:	e019      	b.n	8004712 <audiod_rx_done_cb+0xda>
#endif

#endif

  // Call a weak callback here - a possibility for user to get informed decoding was completed
  if (tud_audio_rx_done_post_read_cb)
 80046de:	4b10      	ldr	r3, [pc, #64]	; (8004720 <audiod_rx_done_cb+0xe8>)
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d015      	beq.n	8004710 <audiod_rx_done_cb+0xd8>
  {
    TU_VERIFY(tud_audio_rx_done_post_read_cb(rhport, n_bytes_received, idx_audio_fct, audio->ep_out, audio->alt_setting[idxItf]));
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	7b5c      	ldrb	r4, [r3, #13]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	7bba      	ldrb	r2, [r7, #14]
 80046ee:	4413      	add	r3, r2
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	7bfa      	ldrb	r2, [r7, #15]
 80046f4:	88b9      	ldrh	r1, [r7, #4]
 80046f6:	79f8      	ldrb	r0, [r7, #7]
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	4623      	mov	r3, r4
 80046fc:	f3af 8000 	nop.w
 8004700:	4603      	mov	r3, r0
 8004702:	f083 0301 	eor.w	r3, r3, #1
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <audiod_rx_done_cb+0xd8>
 800470c:	2300      	movs	r3, #0
 800470e:	e000      	b.n	8004712 <audiod_rx_done_cb+0xda>
  }

  return true;
 8004710:	2301      	movs	r3, #1
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	bd90      	pop	{r4, r7, pc}
 800471a:	bf00      	nop
 800471c:	080008c5 	.word	0x080008c5
 8004720:	00000000 	.word	0x00000000

08004724 <tud_audio_n_write>:
 * \param[in]       data: Pointer to data array to be copied from
 * \param[in]       len: # of array elements to copy
 * \return          Number of bytes actually written
 */
uint16_t tud_audio_n_write(uint8_t func_id, const void * data, uint16_t len)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	6039      	str	r1, [r7, #0]
 800472e:	71fb      	strb	r3, [r7, #7]
 8004730:	4613      	mov	r3, r2
 8004732:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
 8004734:	79fb      	ldrb	r3, [r7, #7]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10a      	bne.n	8004750 <tud_audio_n_write+0x2c>
 800473a:	79fa      	ldrb	r2, [r7, #7]
 800473c:	490f      	ldr	r1, [pc, #60]	; (800477c <tud_audio_n_write+0x58>)
 800473e:	4613      	mov	r3, r2
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	1a9b      	subs	r3, r3, r2
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	440b      	add	r3, r1
 8004748:	3304      	adds	r3, #4
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <tud_audio_n_write+0x30>
 8004750:	2300      	movs	r3, #0
 8004752:	e00e      	b.n	8004772 <tud_audio_n_write+0x4e>
  return tu_fifo_write_n(&_audiod_fct[func_id].ep_in_ff, data, len);
 8004754:	79fa      	ldrb	r2, [r7, #7]
 8004756:	4613      	mov	r3, r2
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	3328      	adds	r3, #40	; 0x28
 8004760:	4a06      	ldr	r2, [pc, #24]	; (800477c <tud_audio_n_write+0x58>)
 8004762:	4413      	add	r3, r2
 8004764:	3304      	adds	r3, #4
 8004766:	88ba      	ldrh	r2, [r7, #4]
 8004768:	6839      	ldr	r1, [r7, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f002 fae2 	bl	8006d34 <tu_fifo_write_n>
 8004770:	4603      	mov	r3, r0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	24001840 	.word	0x24001840

08004780 <audiod_tx_done_cb>:
// If you prefer your own (more efficient) implementation suiting your purpose set CFG_TUD_AUDIO_ENABLE_ENCODING = 0 and use tud_audio_n_write.

// n_bytes_copied - Informs caller how many bytes were loaded. In case n_bytes_copied = 0, a ZLP is scheduled to inform host no data is available for current frame.
#if CFG_TUD_AUDIO_ENABLE_EP_IN
static bool audiod_tx_done_cb(uint8_t rhport, audiod_function_t * audio)
{
 8004780:	b590      	push	{r4, r7, lr}
 8004782:	b089      	sub	sp, #36	; 0x24
 8004784:	af02      	add	r7, sp, #8
 8004786:	4603      	mov	r3, r0
 8004788:	6039      	str	r1, [r7, #0]
 800478a:	71fb      	strb	r3, [r7, #7]
  uint8_t idxItf;
  uint8_t const *dummy2;

  uint8_t idx_audio_fct = audiod_get_audio_fct_idx(audio);
 800478c:	6838      	ldr	r0, [r7, #0]
 800478e:	f001 f83b 	bl	8005808 <audiod_get_audio_fct_idx>
 8004792:	4603      	mov	r3, r0
 8004794:	75fb      	strb	r3, [r7, #23]
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	7b18      	ldrb	r0, [r3, #12]
 800479a:	f107 0308 	add.w	r3, r7, #8
 800479e:	f107 020f 	add.w	r2, r7, #15
 80047a2:	6839      	ldr	r1, [r7, #0]
 80047a4:	f000 fe4c 	bl	8005440 <audiod_get_AS_interface_index>
 80047a8:	4603      	mov	r3, r0
 80047aa:	f083 0301 	eor.w	r3, r3, #1
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <audiod_tx_done_cb+0x38>
 80047b4:	2300      	movs	r3, #0
 80047b6:	e05b      	b.n	8004870 <audiod_tx_done_cb+0xf0>

  // Only send something if current alternate interface is not 0 as in this case nothing is to be sent due to UAC2 specifications
  if (audio->alt_setting[idxItf] == 0) return false;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	7bfa      	ldrb	r2, [r7, #15]
 80047be:	4413      	add	r3, r2
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <audiod_tx_done_cb+0x4a>
 80047c6:	2300      	movs	r3, #0
 80047c8:	e052      	b.n	8004870 <audiod_tx_done_cb+0xf0>

  // Call a weak callback here - a possibility for user to get informed former TX was completed and data gets now loaded into EP in buffer (in case FIFOs are used) or
  // if no FIFOs are used the user may use this call back to load its data into the EP IN buffer by use of tud_audio_n_write_ep_in_buffer().
  if (tud_audio_tx_done_pre_load_cb) TU_VERIFY(tud_audio_tx_done_pre_load_cb(rhport, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 80047ca:	4b2b      	ldr	r3, [pc, #172]	; (8004878 <audiod_tx_done_cb+0xf8>)
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d012      	beq.n	80047f6 <audiod_tx_done_cb+0x76>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	7a1a      	ldrb	r2, [r3, #8]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	7bf9      	ldrb	r1, [r7, #15]
 80047da:	440b      	add	r3, r1
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	7df9      	ldrb	r1, [r7, #23]
 80047e0:	79f8      	ldrb	r0, [r7, #7]
 80047e2:	f7fc f891 	bl	8000908 <tud_audio_tx_done_pre_load_cb>
 80047e6:	4603      	mov	r3, r0
 80047e8:	f083 0301 	eor.w	r3, r3, #1
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <audiod_tx_done_cb+0x76>
 80047f2:	2300      	movs	r3, #0
 80047f4:	e03c      	b.n	8004870 <audiod_tx_done_cb+0xf0>
  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_in, audio->lin_buf_in, n_bytes_tx));

#else
  // No support FIFOs, if no linear buffer required schedule transmit, else put data into linear buffer and schedule

  n_bytes_tx = tu_min16(tu_fifo_count(&audio->ep_in_ff), audio->ep_in_sz);      // Limit up to max packet size, more can not be done for ISO
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	332c      	adds	r3, #44	; 0x2c
 80047fa:	4618      	mov	r0, r3
 80047fc:	f002 f962 	bl	8006ac4 <tu_fifo_count>
 8004800:	4603      	mov	r3, r0
 8004802:	461a      	mov	r2, r3
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	895b      	ldrh	r3, [r3, #10]
 8004808:	827a      	strh	r2, [r7, #18]
 800480a:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800480c:	8a7a      	ldrh	r2, [r7, #18]
 800480e:	8a3b      	ldrh	r3, [r7, #16]
 8004810:	4293      	cmp	r3, r2
 8004812:	bf28      	it	cs
 8004814:	4613      	movcs	r3, r2
 8004816:	b29b      	uxth	r3, r3
 8004818:	82bb      	strh	r3, [r7, #20]
#if USE_LINEAR_BUFFER_TX
  tu_fifo_read_n(&audio->ep_in_ff, audio->lin_buf_in, n_bytes_tx);
  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_in, audio->lin_buf_in, n_bytes_tx));
#else
  // Send everything in ISO EP FIFO
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_in, &audio->ep_in_ff, n_bytes_tx));
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	7a19      	ldrb	r1, [r3, #8]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004824:	8abb      	ldrh	r3, [r7, #20]
 8004826:	79f8      	ldrb	r0, [r7, #7]
 8004828:	f003 fd64 	bl	80082f4 <usbd_edpt_xfer_fifo>
 800482c:	4603      	mov	r3, r0
 800482e:	f083 0301 	eor.w	r3, r3, #1
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <audiod_tx_done_cb+0xbc>
 8004838:	2300      	movs	r3, #0
 800483a:	e019      	b.n	8004870 <audiod_tx_done_cb+0xf0>
#endif

#endif

  // Call a weak callback here - a possibility for user to get informed former TX was completed and how many bytes were loaded for the next frame
  if (tud_audio_tx_done_post_load_cb) TU_VERIFY(tud_audio_tx_done_post_load_cb(rhport, n_bytes_tx, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 800483c:	4b0f      	ldr	r3, [pc, #60]	; (800487c <audiod_tx_done_cb+0xfc>)
 800483e:	2b00      	cmp	r3, #0
 8004840:	d015      	beq.n	800486e <audiod_tx_done_cb+0xee>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	7a1c      	ldrb	r4, [r3, #8]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	7bfa      	ldrb	r2, [r7, #15]
 800484c:	4413      	add	r3, r2
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	7dfa      	ldrb	r2, [r7, #23]
 8004852:	8ab9      	ldrh	r1, [r7, #20]
 8004854:	79f8      	ldrb	r0, [r7, #7]
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	4623      	mov	r3, r4
 800485a:	f3af 8000 	nop.w
 800485e:	4603      	mov	r3, r0
 8004860:	f083 0301 	eor.w	r3, r3, #1
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <audiod_tx_done_cb+0xee>
 800486a:	2300      	movs	r3, #0
 800486c:	e000      	b.n	8004870 <audiod_tx_done_cb+0xf0>

  return true;
 800486e:	2301      	movs	r3, #1
}
 8004870:	4618      	mov	r0, r3
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	bd90      	pop	{r4, r7, pc}
 8004878:	08000909 	.word	0x08000909
 800487c:	00000000 	.word	0x00000000

08004880 <audiod_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void audiod_init(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af02      	add	r7, sp, #8
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 8004886:	2238      	movs	r2, #56	; 0x38
 8004888:	2100      	movs	r1, #0
 800488a:	4824      	ldr	r0, [pc, #144]	; (800491c <audiod_init+0x9c>)
 800488c:	f005 fe16 	bl	800a4bc <memset>

  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8004890:	2300      	movs	r3, #0
 8004892:	71fb      	strb	r3, [r7, #7]
 8004894:	e039      	b.n	800490a <audiod_init+0x8a>
  {
    audiod_function_t* audio = &_audiod_fct[i];
 8004896:	79fa      	ldrb	r2, [r7, #7]
 8004898:	4613      	mov	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	4a1e      	ldr	r2, [pc, #120]	; (800491c <audiod_init+0x9c>)
 80048a2:	4413      	add	r3, r2
 80048a4:	603b      	str	r3, [r7, #0]

    // Initialize control buffers
    switch (i)
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d106      	bne.n	80048ba <audiod_init+0x3a>
    {
      case 0:
        audio->ctrl_buf = ctrl_buf_1;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	4a1c      	ldr	r2, [pc, #112]	; (8004920 <audiod_init+0xa0>)
 80048b0:	615a      	str	r2, [r3, #20]
        audio->ctrl_buf_sz = CFG_TUD_AUDIO_FUNC_1_CTRL_BUF_SZ;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2240      	movs	r2, #64	; 0x40
 80048b6:	761a      	strb	r2, [r3, #24]
        break;
 80048b8:	bf00      	nop
        break;
#endif
    }

    // Initialize active alternate interface buffers
    switch (i)
 80048ba:	79fb      	ldrb	r3, [r7, #7]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d103      	bne.n	80048c8 <audiod_init+0x48>
    {
#if CFG_TUD_AUDIO_FUNC_1_N_AS_INT > 0
      case 0:
        audio->alt_setting = alt_setting_1;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	4a18      	ldr	r2, [pc, #96]	; (8004924 <audiod_init+0xa4>)
 80048c4:	61da      	str	r2, [r3, #28]
        break;
 80048c6:	bf00      	nop
    }

    // Initialize IN EP FIFO if required
#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING

    switch (i)
 80048c8:	79fb      	ldrb	r3, [r7, #7]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10b      	bne.n	80048e6 <audiod_init+0x66>
    {
#if CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ > 0
      case 0:
        tu_fifo_config(&audio->ep_in_ff, audio_ep_in_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ, 1, true);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80048d4:	2301      	movs	r3, #1
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	2301      	movs	r3, #1
 80048da:	f44f 7242 	mov.w	r2, #776	; 0x308
 80048de:	4912      	ldr	r1, [pc, #72]	; (8004928 <audiod_init+0xa8>)
 80048e0:	f001 fc5e 	bl	80061a0 <tu_fifo_config>
#if CFG_FIFO_MUTEX
        tu_fifo_config_mutex(&audio->ep_in_ff, osal_mutex_create(&ep_in_ff_mutex_wr_1), NULL);
#endif
        break;
 80048e4:	bf00      	nop
#endif // USE_LINEAR_BUFFER_TX

    // Initialize OUT EP FIFO if required
#if CFG_TUD_AUDIO_ENABLE_EP_OUT && !CFG_TUD_AUDIO_ENABLE_DECODING

    switch (i)
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10b      	bne.n	8004904 <audiod_init+0x84>
    {
#if CFG_TUD_AUDIO_FUNC_1_EP_OUT_SW_BUF_SZ > 0
      case 0:
        tu_fifo_config(&audio->ep_out_ff, audio_ep_out_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_OUT_SW_BUF_SZ, 1, true);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	f103 0020 	add.w	r0, r3, #32
 80048f2:	2301      	movs	r3, #1
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	2301      	movs	r3, #1
 80048f8:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 80048fc:	490b      	ldr	r1, [pc, #44]	; (800492c <audiod_init+0xac>)
 80048fe:	f001 fc4f 	bl	80061a0 <tu_fifo_config>
#if CFG_FIFO_MUTEX
        tu_fifo_config_mutex(&audio->ep_out_ff, NULL, osal_mutex_create(&ep_out_ff_mutex_rd_1));
#endif
        break;
 8004902:	bf00      	nop
  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8004904:	79fb      	ldrb	r3, [r7, #7]
 8004906:	3301      	adds	r3, #1
 8004908:	71fb      	strb	r3, [r7, #7]
 800490a:	79fb      	ldrb	r3, [r7, #7]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0c2      	beq.n	8004896 <audiod_init+0x16>
        break;
#endif
    }
#endif // CFG_TUD_AUDIO_ENABLE_TYPE_I_DECODING
  }
}
 8004910:	bf00      	nop
 8004912:	bf00      	nop
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	24001840 	.word	0x24001840
 8004920:	240017fc 	.word	0x240017fc
 8004924:	2400183c 	.word	0x2400183c
 8004928:	24000ee4 	.word	0x24000ee4
 800492c:	240011ec 	.word	0x240011ec

08004930 <audiod_reset>:

void audiod_reset(uint8_t rhport)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	4603      	mov	r3, r0
 8004938:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 800493a:	2300      	movs	r3, #0
 800493c:	73fb      	strb	r3, [r7, #15]
 800493e:	e019      	b.n	8004974 <audiod_reset+0x44>
  {
    audiod_function_t* audio = &_audiod_fct[i];
 8004940:	7bfa      	ldrb	r2, [r7, #15]
 8004942:	4613      	mov	r3, r2
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	4a0e      	ldr	r2, [pc, #56]	; (8004984 <audiod_reset+0x54>)
 800494c:	4413      	add	r3, r2
 800494e:	60bb      	str	r3, [r7, #8]
    tu_memclr(audio, ITF_MEM_RESET_SIZE);
 8004950:	2214      	movs	r2, #20
 8004952:	2100      	movs	r1, #0
 8004954:	68b8      	ldr	r0, [r7, #8]
 8004956:	f005 fdb1 	bl	800a4bc <memset>

#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING
    tu_fifo_clear(&audio->ep_in_ff);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	332c      	adds	r3, #44	; 0x2c
 800495e:	4618      	mov	r0, r3
 8004960:	f002 fa0c 	bl	8006d7c <tu_fifo_clear>
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_OUT && !CFG_TUD_AUDIO_ENABLE_DECODING
    tu_fifo_clear(&audio->ep_out_ff);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	3320      	adds	r3, #32
 8004968:	4618      	mov	r0, r3
 800496a:	f002 fa07 	bl	8006d7c <tu_fifo_clear>
  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 800496e:	7bfb      	ldrb	r3, [r7, #15]
 8004970:	3301      	adds	r3, #1
 8004972:	73fb      	strb	r3, [r7, #15]
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0e2      	beq.n	8004940 <audiod_reset+0x10>
    {
      tu_fifo_clear(&audio->rx_supp_ff[cnt]);
    }
#endif
  }
}
 800497a:	bf00      	nop
 800497c:	bf00      	nop
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	24001840 	.word	0x24001840

08004988 <audiod_open>:

uint16_t audiod_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	6039      	str	r1, [r7, #0]
 8004992:	71fb      	strb	r3, [r7, #7]
 8004994:	4613      	mov	r3, r2
 8004996:	80bb      	strh	r3, [r7, #4]
  (void) max_len;

  TU_VERIFY ( TUSB_CLASS_AUDIO  == itf_desc->bInterfaceClass &&
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	795b      	ldrb	r3, [r3, #5]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d103      	bne.n	80049a8 <audiod_open+0x20>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	799b      	ldrb	r3, [r3, #6]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d001      	beq.n	80049ac <audiod_open+0x24>
 80049a8:	2300      	movs	r3, #0
 80049aa:	e064      	b.n	8004a76 <audiod_open+0xee>
              AUDIO_SUBCLASS_CONTROL    == itf_desc->bInterfaceSubClass);

  // Verify version is correct - this check can be omitted
  TU_VERIFY(itf_desc->bInterfaceProtocol == AUDIO_INT_PROTOCOL_CODE_V2);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	79db      	ldrb	r3, [r3, #7]
 80049b0:	2b20      	cmp	r3, #32
 80049b2:	d001      	beq.n	80049b8 <audiod_open+0x30>
 80049b4:	2300      	movs	r3, #0
 80049b6:	e05e      	b.n	8004a76 <audiod_open+0xee>

  // Verify interrupt control EP is enabled if demanded by descriptor - this should be best some static check however - this check can be omitted
  if (itf_desc->bNumEndpoints == 1) // 0 or 1 EPs are allowed
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	791b      	ldrb	r3, [r3, #4]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <audiod_open+0x3c>
  {
    TU_VERIFY(CFG_TUD_AUDIO_INT_CTR_EPSIZE_IN > 0);
 80049c0:	2300      	movs	r3, #0
 80049c2:	e058      	b.n	8004a76 <audiod_open+0xee>
  }

  // Alternate setting MUST be zero - this check can be omitted
  TU_VERIFY(itf_desc->bAlternateSetting == 0);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	78db      	ldrb	r3, [r3, #3]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <audiod_open+0x48>
 80049cc:	2300      	movs	r3, #0
 80049ce:	e052      	b.n	8004a76 <audiod_open+0xee>

  // Find available audio driver interface
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80049d0:	2300      	movs	r3, #0
 80049d2:	73fb      	strb	r3, [r7, #15]
 80049d4:	e030      	b.n	8004a38 <audiod_open+0xb0>
  {
    if (!_audiod_fct[i].p_desc)
 80049d6:	7bfa      	ldrb	r2, [r7, #15]
 80049d8:	492a      	ldr	r1, [pc, #168]	; (8004a84 <audiod_open+0xfc>)
 80049da:	4613      	mov	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	1a9b      	subs	r3, r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	440b      	add	r3, r1
 80049e4:	3304      	adds	r3, #4
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d122      	bne.n	8004a32 <audiod_open+0xaa>
    {
      _audiod_fct[i].p_desc = (uint8_t const *)itf_desc;    // Save pointer to AC descriptor which is by specification always the first one
 80049ec:	7bfa      	ldrb	r2, [r7, #15]
 80049ee:	4925      	ldr	r1, [pc, #148]	; (8004a84 <audiod_open+0xfc>)
 80049f0:	4613      	mov	r3, r2
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	440b      	add	r3, r1
 80049fa:	3304      	adds	r3, #4
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	601a      	str	r2, [r3, #0]
      _audiod_fct[i].rhport = rhport;
 8004a00:	7bfa      	ldrb	r2, [r7, #15]
 8004a02:	4920      	ldr	r1, [pc, #128]	; (8004a84 <audiod_open+0xfc>)
 8004a04:	4613      	mov	r3, r2
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	440b      	add	r3, r1
 8004a0e:	79fa      	ldrb	r2, [r7, #7]
 8004a10:	701a      	strb	r2, [r3, #0]

      // Setup descriptor lengths
      switch (i)
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d113      	bne.n	8004a40 <audiod_open+0xb8>
      {
        case 0:
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_1_DESC_LEN;
 8004a18:	7bfa      	ldrb	r2, [r7, #15]
 8004a1a:	491a      	ldr	r1, [pc, #104]	; (8004a84 <audiod_open+0xfc>)
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	440b      	add	r3, r1
 8004a26:	3312      	adds	r3, #18
 8004a28:	f44f 729c 	mov.w	r2, #312	; 0x138
 8004a2c:	801a      	strh	r2, [r3, #0]
          break;
 8004a2e:	bf00      	nop
      }
  #endif

#endif // USE_ISO_EP_ALLOCATION

      break;
 8004a30:	e006      	b.n	8004a40 <audiod_open+0xb8>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	3301      	adds	r3, #1
 8004a36:	73fb      	strb	r3, [r7, #15]
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0cb      	beq.n	80049d6 <audiod_open+0x4e>
 8004a3e:	e000      	b.n	8004a42 <audiod_open+0xba>
      break;
 8004a40:	bf00      	nop
    }
  }

  // Verify we found a free one
  TU_ASSERT( i < CFG_TUD_AUDIO );
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <audiod_open+0xd6>
 8004a48:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <audiod_open+0x100>)
 8004a4a:	60bb      	str	r3, [r7, #8]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d000      	beq.n	8004a5a <audiod_open+0xd2>
 8004a58:	be00      	bkpt	0x0000
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e00b      	b.n	8004a76 <audiod_open+0xee>

  // This is all we need so far - the EPs are setup by a later set_interface request (as per UAC2 specification)
  uint16_t drv_len = _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;    // - TUD_AUDIO_DESC_IAD_LEN since tinyUSB already handles the IAD descriptor
 8004a5e:	7bfa      	ldrb	r2, [r7, #15]
 8004a60:	4908      	ldr	r1, [pc, #32]	; (8004a84 <audiod_open+0xfc>)
 8004a62:	4613      	mov	r3, r2
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	1a9b      	subs	r3, r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	440b      	add	r3, r1
 8004a6c:	3312      	adds	r3, #18
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	3b08      	subs	r3, #8
 8004a72:	81bb      	strh	r3, [r7, #12]

  return drv_len;
 8004a74:	89bb      	ldrh	r3, [r7, #12]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	24001840 	.word	0x24001840
 8004a88:	e000edf0 	.word	0xe000edf0

08004a8c <audiod_get_interface>:

static bool audiod_get_interface(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	4603      	mov	r3, r0
 8004a94:	6039      	str	r1, [r7, #0]
 8004a96:	71fb      	strb	r3, [r7, #7]
  uint8_t const itf = tu_u16_low(p_request->wIndex);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	889b      	ldrh	r3, [r3, #4]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	82bb      	strh	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8004aa0:	8abb      	ldrh	r3, [r7, #20]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	75fb      	strb	r3, [r7, #23]

  // Find index of audio streaming interface
  uint8_t func_id, idxItf;
  uint8_t const *dummy;

  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &dummy));
 8004aa6:	f107 030c 	add.w	r3, r7, #12
 8004aaa:	f107 0212 	add.w	r2, r7, #18
 8004aae:	f107 0113 	add.w	r1, r7, #19
 8004ab2:	7df8      	ldrb	r0, [r7, #23]
 8004ab4:	f000 fd20 	bl	80054f8 <audiod_get_AS_interface_index_global>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f083 0301 	eor.w	r3, r3, #1
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <audiod_get_interface+0x3c>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	e019      	b.n	8004afc <audiod_get_interface+0x70>
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 8004ac8:	7cfb      	ldrb	r3, [r7, #19]
 8004aca:	4619      	mov	r1, r3
 8004acc:	4a0d      	ldr	r2, [pc, #52]	; (8004b04 <audiod_get_interface+0x78>)
 8004ace:	460b      	mov	r3, r1
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	1a5b      	subs	r3, r3, r1
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	331c      	adds	r3, #28
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	7cba      	ldrb	r2, [r7, #18]
 8004ade:	441a      	add	r2, r3
 8004ae0:	79f8      	ldrb	r0, [r7, #7]
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	6839      	ldr	r1, [r7, #0]
 8004ae6:	f003 fe2b 	bl	8008740 <tud_control_xfer>
 8004aea:	4603      	mov	r3, r0
 8004aec:	f083 0301 	eor.w	r3, r3, #1
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <audiod_get_interface+0x6e>
 8004af6:	2300      	movs	r3, #0
 8004af8:	e000      	b.n	8004afc <audiod_get_interface+0x70>

  TU_LOG2("  Get itf: %u - current alt: %u\r\n", itf, _audiod_fct[func_id].alt_setting[idxItf]);

  return true;
 8004afa:	2301      	movs	r3, #1
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	24001840 	.word	0x24001840

08004b08 <audiod_set_interface>:

static bool audiod_set_interface(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b096      	sub	sp, #88	; 0x58
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	6039      	str	r1, [r7, #0]
 8004b12:	71fb      	strb	r3, [r7, #7]
  // 2. Close EPs which are currently open
  // To do so it is not necessary to know the current active alternate interface since we already save the current EP addresses - we simply close them

  // 3. Open new EP

  uint8_t const itf = tu_u16_low(p_request->wIndex);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	889b      	ldrh	r3, [r3, #4]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b1c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  uint8_t const alt = tu_u16_low(p_request->wValue);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	885b      	ldrh	r3, [r3, #2]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004b2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  TU_LOG2("  Set itf: %u - alt: %u\r\n", itf, alt);

  // Find index of audio streaming interface and index of interface
  uint8_t func_id, idxItf;
  uint8_t const *p_desc;
  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &p_desc));
 8004b34:	f107 0308 	add.w	r3, r7, #8
 8004b38:	f107 020e 	add.w	r2, r7, #14
 8004b3c:	f107 010f 	add.w	r1, r7, #15
 8004b40:	f897 0056 	ldrb.w	r0, [r7, #86]	; 0x56
 8004b44:	f000 fcd8 	bl	80054f8 <audiod_get_AS_interface_index_global>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f083 0301 	eor.w	r3, r3, #1
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <audiod_set_interface+0x50>
 8004b54:	2300      	movs	r3, #0
 8004b56:	e168      	b.n	8004e2a <audiod_set_interface+0x322>

  audiod_function_t* audio = &_audiod_fct[func_id];
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	1a9b      	subs	r3, r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	4aa9      	ldr	r2, [pc, #676]	; (8004e0c <audiod_set_interface+0x304>)
 8004b66:	4413      	add	r3, r2
 8004b68:	653b      	str	r3, [r7, #80]	; 0x50

  // Look if there is an EP to be closed - for this driver, there are only 3 possible EPs which may be closed (only AS related EPs can be closed, AC EP (if present) is always open)
#if CFG_TUD_AUDIO_ENABLE_EP_IN
  if (audio->ep_in_as_intf_num == itf)
 8004b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b6c:	7b1b      	ldrb	r3, [r3, #12]
 8004b6e:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d121      	bne.n	8004bba <audiod_set_interface+0xb2>
  {
    audio->ep_in_as_intf_num = 0;
 8004b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b78:	2200      	movs	r2, #0
 8004b7a:	731a      	strb	r2, [r3, #12]
  #if !USE_ISO_EP_ALLOCATION
    usbd_edpt_close(rhport, audio->ep_in);
 8004b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b7e:	7a1a      	ldrb	r2, [r3, #8]
 8004b80:	79fb      	ldrb	r3, [r7, #7]
 8004b82:	4611      	mov	r1, r2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f003 fcf1 	bl	800856c <usbd_edpt_close>
  #endif

    // Clear FIFOs, since data is no longer valid
  #if !CFG_TUD_AUDIO_ENABLE_ENCODING
    tu_fifo_clear(&audio->ep_in_ff);
 8004b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b8c:	332c      	adds	r3, #44	; 0x2c
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f002 f8f4 	bl	8006d7c <tu_fifo_clear>
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
    }
  #endif

    // Invoke callback - can be used to stop data sampling
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 8004b94:	4b9e      	ldr	r3, [pc, #632]	; (8004e10 <audiod_set_interface+0x308>)
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00c      	beq.n	8004bb4 <audiod_set_interface+0xac>
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	6839      	ldr	r1, [r7, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fb fe30 	bl	8000804 <tud_audio_set_itf_close_EP_cb>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	f083 0301 	eor.w	r3, r3, #1
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <audiod_set_interface+0xac>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	e13a      	b.n	8004e2a <audiod_set_interface+0x322>

    audio->ep_in = 0;                           // Necessary?
 8004bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	721a      	strb	r2, [r3, #8]

  }
#endif // CFG_TUD_AUDIO_ENABLE_EP_IN

#if CFG_TUD_AUDIO_ENABLE_EP_OUT
  if (audio->ep_out_as_intf_num == itf)
 8004bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bbc:	7c1b      	ldrb	r3, [r3, #16]
 8004bbe:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d121      	bne.n	8004c0a <audiod_set_interface+0x102>
  {
    audio->ep_out_as_intf_num = 0;
 8004bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bc8:	2200      	movs	r2, #0
 8004bca:	741a      	strb	r2, [r3, #16]
  #if !USE_ISO_EP_ALLOCATION
    usbd_edpt_close(rhport, audio->ep_out);
 8004bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bce:	7b5a      	ldrb	r2, [r3, #13]
 8004bd0:	79fb      	ldrb	r3, [r7, #7]
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f003 fcc9 	bl	800856c <usbd_edpt_close>
  #endif

    // Clear FIFOs, since data is no longer valid
  #if !CFG_TUD_AUDIO_ENABLE_DECODING
    tu_fifo_clear(&audio->ep_out_ff);
 8004bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bdc:	3320      	adds	r3, #32
 8004bde:	4618      	mov	r0, r3
 8004be0:	f002 f8cc 	bl	8006d7c <tu_fifo_clear>
      tu_fifo_clear(&audio->rx_supp_ff[cnt]);
    }
  #endif

    // Invoke callback - can be used to stop data sampling
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 8004be4:	4b8a      	ldr	r3, [pc, #552]	; (8004e10 <audiod_set_interface+0x308>)
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00c      	beq.n	8004c04 <audiod_set_interface+0xfc>
 8004bea:	79fb      	ldrb	r3, [r7, #7]
 8004bec:	6839      	ldr	r1, [r7, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fb fe08 	bl	8000804 <tud_audio_set_itf_close_EP_cb>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	f083 0301 	eor.w	r3, r3, #1
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <audiod_set_interface+0xfc>
 8004c00:	2300      	movs	r3, #0
 8004c02:	e112      	b.n	8004e2a <audiod_set_interface+0x322>

    audio->ep_out = 0;                          // Necessary?
 8004c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c06:	2200      	movs	r2, #0
 8004c08:	735a      	strb	r2, [r3, #13]
  #endif
  }
#endif // CFG_TUD_AUDIO_ENABLE_EP_OUT

  // Save current alternative interface setting
  audio->alt_setting[idxItf] = alt;
 8004c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	7bba      	ldrb	r2, [r7, #14]
 8004c10:	4413      	add	r3, r2
 8004c12:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8004c16:	701a      	strb	r2, [r3, #0]

  // Open new EP if necessary - EPs are only to be closed or opened for AS interfaces - Look for AS interface with correct alternate interface
  // Get pointer at end
  uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8004c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c1e:	8a5b      	ldrh	r3, [r3, #18]
 8004c20:	3b08      	subs	r3, #8
 8004c22:	4413      	add	r3, r2
 8004c24:	64fb      	str	r3, [r7, #76]	; 0x4c

  // p_desc starts at required interface with alternate setting zero
  while (p_desc < p_desc_end)
 8004c26:	e0ea      	b.n	8004dfe <audiod_set_interface+0x2f6>
  {
    // Find correct interface
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == alt)
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	637b      	str	r3, [r7, #52]	; 0x34
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2e:	3301      	adds	r3, #1
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	f040 80d9 	bne.w	8004dea <audiod_set_interface+0x2e2>
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	789b      	ldrb	r3, [r3, #2]
 8004c3c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8004c40:	429a      	cmp	r2, r3
 8004c42:	f040 80d2 	bne.w	8004dea <audiod_set_interface+0x2e2>
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	78db      	ldrb	r3, [r3, #3]
 8004c4a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	f040 80cb 	bne.w	8004dea <audiod_set_interface+0x2e2>
    {
#if CFG_TUD_AUDIO_ENABLE_ENCODING || CFG_TUD_AUDIO_ENABLE_DECODING
      uint8_t const * p_desc_parse_for_params = p_desc;
#endif
      // From this point forward follow the EP descriptors associated to the current alternate setting interface - Open EPs if necessary
      uint8_t foundEPs = 0, nEps = ((tusb_desc_interface_t const * )p_desc)->bNumEndpoints;
 8004c54:	2300      	movs	r3, #0
 8004c56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	791b      	ldrb	r3, [r3, #4]
 8004c5e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
      while (foundEPs < nEps && p_desc < p_desc_end)
 8004c62:	e09f      	b.n	8004da4 <audiod_set_interface+0x29c>
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT)
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	633b      	str	r3, [r7, #48]	; 0x30
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b05      	cmp	r3, #5
 8004c70:	f040 808e 	bne.w	8004d90 <audiod_set_interface+0x288>
        {
          tusb_desc_endpoint_t const* desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	647b      	str	r3, [r7, #68]	; 0x44
#if USE_ISO_EP_ALLOCATION
          TU_ASSERT(usbd_edpt_iso_activate(rhport, desc_ep));
#else
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8004c78:	79fb      	ldrb	r3, [r7, #7]
 8004c7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f003 fa2b 	bl	80080d8 <usbd_edpt_open>
 8004c82:	4603      	mov	r3, r0
 8004c84:	f083 0301 	eor.w	r3, r3, #1
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <audiod_set_interface+0x19c>
 8004c8e:	4b61      	ldr	r3, [pc, #388]	; (8004e14 <audiod_set_interface+0x30c>)
 8004c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d000      	beq.n	8004ca0 <audiod_set_interface+0x198>
 8004c9e:	be00      	bkpt	0x0000
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e0c2      	b.n	8004e2a <audiod_set_interface+0x322>
#endif
          uint8_t const ep_addr = desc_ep->bEndpointAddress;
 8004ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ca6:	789b      	ldrb	r3, [r3, #2]
 8004ca8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

          //TODO: We need to set EP non busy since this is not taken care of right now in ep_close() - THIS IS A WORKAROUND!
          usbd_edpt_clear_stall(rhport, ep_addr);
 8004cac:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f003 fbdf 	bl	8008478 <usbd_edpt_clear_stall>
 8004cba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004cbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004cc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004cc6:	09db      	lsrs	r3, r3, #7
 8004cc8:	b2db      	uxtb	r3, r3

#if CFG_TUD_AUDIO_ENABLE_EP_IN
          if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN && desc_ep->bmAttributes.usage == 0x00)   // Check if usage is data EP
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d12d      	bne.n	8004d2a <audiod_set_interface+0x222>
 8004cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd0:	78db      	ldrb	r3, [r3, #3]
 8004cd2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d126      	bne.n	8004d2a <audiod_set_interface+0x222>
          {
            // Save address
            audio->ep_in = ep_addr;
 8004cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cde:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8004ce2:	721a      	strb	r2, [r3, #8]
            audio->ep_in_as_intf_num = itf;
 8004ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce6:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8004cea:	731a      	strb	r2, [r3, #12]
 8004cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	889b      	ldrh	r3, [r3, #4]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cfa:	b29a      	uxth	r2, r3
            audio->ep_in_sz = tu_edpt_packet_size(desc_ep);
 8004cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cfe:	815a      	strh	r2, [r3, #10]
    #endif
  #endif

            // Schedule first transmit if alternate interface is not zero i.e. streaming is disabled - in case no sample data is available a ZLP is loaded
            // It is necessary to trigger this here since the refill is done with an RX FIFO empty interrupt which can only trigger if something was in there
            TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	461a      	mov	r2, r3
 8004d04:	4613      	mov	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	1a9b      	subs	r3, r3, r2
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	4a3f      	ldr	r2, [pc, #252]	; (8004e0c <audiod_set_interface+0x304>)
 8004d0e:	441a      	add	r2, r3
 8004d10:	79fb      	ldrb	r3, [r7, #7]
 8004d12:	4611      	mov	r1, r2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff fd33 	bl	8004780 <audiod_tx_done_cb>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f083 0301 	eor.w	r3, r3, #1
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <audiod_set_interface+0x222>
 8004d26:	2300      	movs	r3, #0
 8004d28:	e07f      	b.n	8004e2a <audiod_set_interface+0x322>
 8004d2a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004d32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d36:	09db      	lsrs	r3, r3, #7
 8004d38:	b2db      	uxtb	r3, r3
          }
#endif // CFG_TUD_AUDIO_ENABLE_EP_IN

#if CFG_TUD_AUDIO_ENABLE_EP_OUT

          if (tu_edpt_dir(ep_addr) == TUSB_DIR_OUT)     // Checking usage not necessary
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d123      	bne.n	8004d86 <audiod_set_interface+0x27e>
          {
            // Save address
            audio->ep_out = ep_addr;
 8004d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d40:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8004d44:	735a      	strb	r2, [r3, #13]
            audio->ep_out_as_intf_num = itf;
 8004d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d48:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8004d4c:	741a      	strb	r2, [r3, #16]
 8004d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d50:	623b      	str	r3, [r7, #32]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	889b      	ldrh	r3, [r3, #4]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d5c:	b29a      	uxth	r2, r3
            audio->ep_out_sz = tu_edpt_packet_size(desc_ep);
 8004d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d60:	81da      	strh	r2, [r3, #14]

            // Prepare for incoming data
  #if USE_LINEAR_BUFFER_RX
            TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_out, audio->lin_buf_out, audio->ep_out_sz), false);
  #else
            TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 8004d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d64:	7b59      	ldrb	r1, [r3, #13]
 8004d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d68:	f103 0220 	add.w	r2, r3, #32
 8004d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d6e:	89db      	ldrh	r3, [r3, #14]
 8004d70:	79f8      	ldrb	r0, [r7, #7]
 8004d72:	f003 fabf 	bl	80082f4 <usbd_edpt_xfer_fifo>
 8004d76:	4603      	mov	r3, r0
 8004d78:	f083 0301 	eor.w	r3, r3, #1
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <audiod_set_interface+0x27e>
 8004d82:	2300      	movs	r3, #0
 8004d84:	e051      	b.n	8004e2a <audiod_set_interface+0x322>
            if (tud_audio_feedback_interval_isr) usbd_sof_enable(rhport, true);
          }
  #endif
#endif // CFG_TUD_AUDIO_ENABLE_EP_OUT

          foundEPs += 1;
 8004d86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        }
        p_desc = tu_desc_next(p_desc);
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	4413      	add	r3, r2
 8004da2:	60bb      	str	r3, [r7, #8]
      while (foundEPs < nEps && p_desc < p_desc_end)
 8004da4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004da8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d204      	bcs.n	8004dba <audiod_set_interface+0x2b2>
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004db4:	429a      	cmp	r2, r3
 8004db6:	f63f af55 	bhi.w	8004c64 <audiod_set_interface+0x15c>
      }

      TU_VERIFY(foundEPs == nEps);
 8004dba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004dbe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d001      	beq.n	8004dca <audiod_set_interface+0x2c2>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e02f      	b.n	8004e2a <audiod_set_interface+0x322>

      // Invoke one callback for a final set interface
      if (tud_audio_set_itf_cb) TU_VERIFY(tud_audio_set_itf_cb(rhport, p_request));
 8004dca:	4b13      	ldr	r3, [pc, #76]	; (8004e18 <audiod_set_interface+0x310>)
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d025      	beq.n	8004e1c <audiod_set_interface+0x314>
 8004dd0:	79fb      	ldrb	r3, [r7, #7]
 8004dd2:	6839      	ldr	r1, [r7, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7fb fd3d 	bl	8000854 <tud_audio_set_itf_cb>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	f083 0301 	eor.w	r3, r3, #1
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d01a      	beq.n	8004e1c <audiod_set_interface+0x314>
 8004de6:	2300      	movs	r3, #0
 8004de8:	e01f      	b.n	8004e2a <audiod_set_interface+0x322>
      // We are done - abort loop
      break;
    }

    // Moving forward
    p_desc = tu_desc_next(p_desc);
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	60bb      	str	r3, [r7, #8]
  while (p_desc < p_desc_end)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e02:	429a      	cmp	r2, r3
 8004e04:	f63f af10 	bhi.w	8004c28 <audiod_set_interface+0x120>
 8004e08:	e009      	b.n	8004e1e <audiod_set_interface+0x316>
 8004e0a:	bf00      	nop
 8004e0c:	24001840 	.word	0x24001840
 8004e10:	08000805 	.word	0x08000805
 8004e14:	e000edf0 	.word	0xe000edf0
 8004e18:	08000855 	.word	0x08000855
      break;
 8004e1c:	bf00      	nop
    }
  }
  if (disable) usbd_sof_enable(rhport, false);
#endif

  tud_control_status(rhport, p_request);
 8004e1e:	79fb      	ldrb	r3, [r7, #7]
 8004e20:	6839      	ldr	r1, [r7, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f003 fc1a 	bl	800865c <tud_control_status>

  return true;
 8004e28:	2301      	movs	r3, #1
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3758      	adds	r7, #88	; 0x58
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop

08004e34 <audiod_control_complete>:

// Invoked when class request DATA stage is finished.
// return false to stall control EP (e.g Host send non-sense DATA)
static bool audiod_control_complete(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	6039      	str	r1, [r7, #0]
 8004e3e:	71fb      	strb	r3, [r7, #7]
  // Handle audio class specific set requests
  if(p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS && p_request->bmRequestType_bit.direction == TUSB_DIR_OUT)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b20      	cmp	r3, #32
 8004e4c:	f040 809d 	bne.w	8004f8a <audiod_control_complete+0x156>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f040 8095 	bne.w	8004f8a <audiod_control_complete+0x156>
  {
    uint8_t func_id;

    switch (p_request->bmRequestType_bit.recipient)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d002      	beq.n	8004e74 <audiod_control_complete+0x40>
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d057      	beq.n	8004f22 <audiod_control_complete+0xee>
 8004e72:	e07f      	b.n	8004f74 <audiod_control_complete+0x140>
    {
      case TUSB_REQ_RCPT_INTERFACE:
      {
        uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	889b      	ldrh	r3, [r3, #4]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	75bb      	strb	r3, [r7, #22]
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	889b      	ldrh	r3, [r3, #4]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	757b      	strb	r3, [r7, #21]

        if (entityID != 0)
 8004e88:	7d7b      	ldrb	r3, [r7, #21]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d024      	beq.n	8004ed8 <audiod_control_complete+0xa4>
        {
          if (tud_audio_set_req_entity_cb)
 8004e8e:	4b41      	ldr	r3, [pc, #260]	; (8004f94 <audiod_control_complete+0x160>)
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d01f      	beq.n	8004ed4 <audiod_control_complete+0xa0>
          {
            // Check if entity is present and get corresponding driver index
            TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8004e94:	f107 020f 	add.w	r2, r7, #15
 8004e98:	7d79      	ldrb	r1, [r7, #21]
 8004e9a:	7dbb      	ldrb	r3, [r7, #22]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 fb57 	bl	8005550 <audiod_verify_entity_exists>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	f083 0301 	eor.w	r3, r3, #1
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <audiod_control_complete+0x7e>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e06c      	b.n	8004f8c <audiod_control_complete+0x158>

            // Invoke callback
            return tud_audio_set_req_entity_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4a38      	ldr	r2, [pc, #224]	; (8004f98 <audiod_control_complete+0x164>)
 8004eb8:	460b      	mov	r3, r1
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	1a5b      	subs	r3, r3, r1
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	3314      	adds	r3, #20
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	79fb      	ldrb	r3, [r7, #7]
 8004ec8:	6839      	ldr	r1, [r7, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fb fc73 	bl	80007b6 <tud_audio_set_req_entity_cb>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	e05b      	b.n	8004f8c <audiod_control_complete+0x158>
          }
          else
          {
            TU_LOG2("  No entity set request callback available!\r\n");
            return false;     // In case no callback function is present or request can not be conducted we stall it
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	e059      	b.n	8004f8c <audiod_control_complete+0x158>
          }
        }
        else
        {
          if (tud_audio_set_req_itf_cb)
 8004ed8:	4b30      	ldr	r3, [pc, #192]	; (8004f9c <audiod_control_complete+0x168>)
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d01f      	beq.n	8004f1e <audiod_control_complete+0xea>
          {
            // Find index of audio driver structure and verify interface really exists
            TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 8004ede:	f107 020f 	add.w	r2, r7, #15
 8004ee2:	7dbb      	ldrb	r3, [r7, #22]
 8004ee4:	4611      	mov	r1, r2
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fbaa 	bl	8005640 <audiod_verify_itf_exists>
 8004eec:	4603      	mov	r3, r0
 8004eee:	f083 0301 	eor.w	r3, r3, #1
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <audiod_control_complete+0xc8>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	e047      	b.n	8004f8c <audiod_control_complete+0x158>

            // Invoke callback
            return tud_audio_set_req_itf_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	4619      	mov	r1, r3
 8004f00:	4a25      	ldr	r2, [pc, #148]	; (8004f98 <audiod_control_complete+0x164>)
 8004f02:	460b      	mov	r3, r1
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	1a5b      	subs	r3, r3, r1
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	4413      	add	r3, r2
 8004f0c:	3314      	adds	r3, #20
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	6839      	ldr	r1, [r7, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f3af 8000 	nop.w
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	e036      	b.n	8004f8c <audiod_control_complete+0x158>
          }
          else
          {
            TU_LOG2("  No interface set request callback available!\r\n");
            return false;     // In case no callback function is present or request can not be conducted we stall it
 8004f1e:	2300      	movs	r3, #0
 8004f20:	e034      	b.n	8004f8c <audiod_control_complete+0x158>
      }
      break;

      case TUSB_REQ_RCPT_ENDPOINT:
      {
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	889b      	ldrh	r3, [r3, #4]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	75fb      	strb	r3, [r7, #23]

        if (tud_audio_set_req_ep_cb)
 8004f2a:	4b1d      	ldr	r3, [pc, #116]	; (8004fa0 <audiod_control_complete+0x16c>)
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01f      	beq.n	8004f70 <audiod_control_complete+0x13c>
        {
          // Check if entity is present and get corresponding driver index
          TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8004f30:	f107 020f 	add.w	r2, r7, #15
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
 8004f36:	4611      	mov	r1, r2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fbeb 	bl	8005714 <audiod_verify_ep_exists>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	f083 0301 	eor.w	r3, r3, #1
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <audiod_control_complete+0x11a>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	e01e      	b.n	8004f8c <audiod_control_complete+0x158>

          // Invoke callback
          return tud_audio_set_req_ep_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
 8004f50:	4619      	mov	r1, r3
 8004f52:	4a11      	ldr	r2, [pc, #68]	; (8004f98 <audiod_control_complete+0x164>)
 8004f54:	460b      	mov	r3, r1
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	1a5b      	subs	r3, r3, r1
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	4413      	add	r3, r2
 8004f5e:	3314      	adds	r3, #20
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	6839      	ldr	r1, [r7, #0]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f3af 8000 	nop.w
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	e00d      	b.n	8004f8c <audiod_control_complete+0x158>
        }
        else
        {
          TU_LOG2("  No EP set request callback available!\r\n");
          return false;   // In case no callback function is present or request can not be conducted we stall it
 8004f70:	2300      	movs	r3, #0
 8004f72:	e00b      	b.n	8004f8c <audiod_control_complete+0x158>
        }
      }
      break;
      // Unknown/Unsupported recipient
      default: TU_BREAKPOINT(); return false;
 8004f74:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <audiod_control_complete+0x170>)
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d000      	beq.n	8004f86 <audiod_control_complete+0x152>
 8004f84:	be00      	bkpt	0x0000
 8004f86:	2300      	movs	r3, #0
 8004f88:	e000      	b.n	8004f8c <audiod_control_complete+0x158>
    }
  }
  return true;
 8004f8a:	2301      	movs	r3, #1
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	080007b7 	.word	0x080007b7
 8004f98:	24001840 	.word	0x24001840
	...
 8004fa4:	e000edf0 	.word	0xe000edf0

08004fa8 <audiod_control_request>:

// Handle class control request
// return false to stall control endpoint (e.g unsupported request)
static bool audiod_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	6039      	str	r1, [r7, #0]
 8004fb2:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  // Handle standard requests - standard set requests usually have no data stage so we also handle set requests here
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d11f      	bne.n	8005002 <audiod_control_request+0x5a>
  {
    switch (p_request->bRequest)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	785b      	ldrb	r3, [r3, #1]
 8004fc6:	2b0a      	cmp	r3, #10
 8004fc8:	d002      	beq.n	8004fd0 <audiod_control_request+0x28>
 8004fca:	2b0b      	cmp	r3, #11
 8004fcc:	d007      	beq.n	8004fde <audiod_control_request+0x36>
 8004fce:	e00d      	b.n	8004fec <audiod_control_request+0x44>
    {
      case TUSB_REQ_GET_INTERFACE:
        return audiod_get_interface(rhport, p_request);
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	6839      	ldr	r1, [r7, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff fd59 	bl	8004a8c <audiod_get_interface>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	e0d5      	b.n	800518a <audiod_control_request+0x1e2>

      case TUSB_REQ_SET_INTERFACE:
        return audiod_set_interface(rhport, p_request);
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	6839      	ldr	r1, [r7, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff fd90 	bl	8004b08 <audiod_set_interface>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	e0ce      	b.n	800518a <audiod_control_request+0x1e2>

        // Unknown/Unsupported request
      default: TU_BREAKPOINT(); return false;
 8004fec:	4b69      	ldr	r3, [pc, #420]	; (8005194 <audiod_control_request+0x1ec>)
 8004fee:	613b      	str	r3, [r7, #16]
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d000      	beq.n	8004ffe <audiod_control_request+0x56>
 8004ffc:	be00      	bkpt	0x0000
 8004ffe:	2300      	movs	r3, #0
 8005000:	e0c3      	b.n	800518a <audiod_control_request+0x1e2>
    }
  }

  // Handle class requests
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b20      	cmp	r3, #32
 800500e:	f040 80b2 	bne.w	8005176 <audiod_control_request+0x1ce>
  {
    uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	889b      	ldrh	r3, [r3, #4]
 8005016:	b29b      	uxth	r3, r3
 8005018:	76fb      	strb	r3, [r7, #27]
    uint8_t func_id;

    // Conduct checks which depend on the recipient
    switch (p_request->bmRequestType_bit.recipient)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b01      	cmp	r3, #1
 8005026:	d002      	beq.n	800502e <audiod_control_request+0x86>
 8005028:	2b02      	cmp	r3, #2
 800502a:	d04d      	beq.n	80050c8 <audiod_control_request+0x120>
 800502c:	e072      	b.n	8005114 <audiod_control_request+0x16c>
    {
      case TUSB_REQ_RCPT_INTERFACE:
      {
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	889b      	ldrh	r3, [r3, #4]
 8005032:	b29b      	uxth	r3, r3
 8005034:	0a1b      	lsrs	r3, r3, #8
 8005036:	b29b      	uxth	r3, r3
 8005038:	767b      	strb	r3, [r7, #25]

        // Verify if entity is present
        if (entityID != 0)
 800503a:	7e7b      	ldrb	r3, [r7, #25]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d021      	beq.n	8005084 <audiod_control_request+0xdc>
        {
          // Find index of audio driver structure and verify entity really exists
          TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8005040:	f107 020f 	add.w	r2, r7, #15
 8005044:	7e79      	ldrb	r1, [r7, #25]
 8005046:	7efb      	ldrb	r3, [r7, #27]
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fa81 	bl	8005550 <audiod_verify_entity_exists>
 800504e:	4603      	mov	r3, r0
 8005050:	f083 0301 	eor.w	r3, r3, #1
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <audiod_control_request+0xb6>
 800505a:	2300      	movs	r3, #0
 800505c:	e095      	b.n	800518a <audiod_control_request+0x1e2>

          // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d05e      	beq.n	800512a <audiod_control_request+0x182>
          {
            if (tud_audio_get_req_entity_cb)
 800506c:	4b4a      	ldr	r3, [pc, #296]	; (8005198 <audiod_control_request+0x1f0>)
 800506e:	2b00      	cmp	r3, #0
 8005070:	d006      	beq.n	8005080 <audiod_control_request+0xd8>
            {
              return tud_audio_get_req_entity_cb(rhport, p_request);
 8005072:	79fb      	ldrb	r3, [r7, #7]
 8005074:	6839      	ldr	r1, [r7, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f7fb fb7a 	bl	8000770 <tud_audio_get_req_entity_cb>
 800507c:	4603      	mov	r3, r0
 800507e:	e084      	b.n	800518a <audiod_control_request+0x1e2>
            }
            else
            {
              TU_LOG2("  No entity get request callback available!\r\n");
              return false;   // Stall
 8005080:	2300      	movs	r3, #0
 8005082:	e082      	b.n	800518a <audiod_control_request+0x1e2>
          }
        }
        else
        {
          // Find index of audio driver structure and verify interface really exists
          TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 8005084:	f107 020f 	add.w	r2, r7, #15
 8005088:	7efb      	ldrb	r3, [r7, #27]
 800508a:	4611      	mov	r1, r2
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fad7 	bl	8005640 <audiod_verify_itf_exists>
 8005092:	4603      	mov	r3, r0
 8005094:	f083 0301 	eor.w	r3, r3, #1
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <audiod_control_request+0xfa>
 800509e:	2300      	movs	r3, #0
 80050a0:	e073      	b.n	800518a <audiod_control_request+0x1e2>

          // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d03c      	beq.n	800512a <audiod_control_request+0x182>
          {
            if (tud_audio_get_req_itf_cb)
 80050b0:	4b3a      	ldr	r3, [pc, #232]	; (800519c <audiod_control_request+0x1f4>)
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d006      	beq.n	80050c4 <audiod_control_request+0x11c>
            {
              return tud_audio_get_req_itf_cb(rhport, p_request);
 80050b6:	79fb      	ldrb	r3, [r7, #7]
 80050b8:	6839      	ldr	r1, [r7, #0]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f3af 8000 	nop.w
 80050c0:	4603      	mov	r3, r0
 80050c2:	e062      	b.n	800518a <audiod_control_request+0x1e2>
            }
            else
            {
              TU_LOG2("  No interface get request callback available!\r\n");
              return false;   // Stall
 80050c4:	2300      	movs	r3, #0
 80050c6:	e060      	b.n	800518a <audiod_control_request+0x1e2>
      }
      break;

      case TUSB_REQ_RCPT_ENDPOINT:
      {
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	889b      	ldrh	r3, [r3, #4]
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	76bb      	strb	r3, [r7, #26]

        // Find index of audio driver structure and verify EP really exists
        TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 80050d0:	f107 020f 	add.w	r2, r7, #15
 80050d4:	7ebb      	ldrb	r3, [r7, #26]
 80050d6:	4611      	mov	r1, r2
 80050d8:	4618      	mov	r0, r3
 80050da:	f000 fb1b 	bl	8005714 <audiod_verify_ep_exists>
 80050de:	4603      	mov	r3, r0
 80050e0:	f083 0301 	eor.w	r3, r3, #1
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <audiod_control_request+0x146>
 80050ea:	2300      	movs	r3, #0
 80050ec:	e04d      	b.n	800518a <audiod_control_request+0x1e2>

        // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
        if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d018      	beq.n	800512e <audiod_control_request+0x186>
        {
          if (tud_audio_get_req_ep_cb)
 80050fc:	4b28      	ldr	r3, [pc, #160]	; (80051a0 <audiod_control_request+0x1f8>)
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d006      	beq.n	8005110 <audiod_control_request+0x168>
          {
            return tud_audio_get_req_ep_cb(rhport, p_request);
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	6839      	ldr	r1, [r7, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f3af 8000 	nop.w
 800510c:	4603      	mov	r3, r0
 800510e:	e03c      	b.n	800518a <audiod_control_request+0x1e2>
          }
          else
          {
            TU_LOG2("  No EP get request callback available!\r\n");
            return false;     // Stall
 8005110:	2300      	movs	r3, #0
 8005112:	e03a      	b.n	800518a <audiod_control_request+0x1e2>
        }
      }
      break;

      // Unknown/Unsupported recipient
      default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 8005114:	4b1f      	ldr	r3, [pc, #124]	; (8005194 <audiod_control_request+0x1ec>)
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	d000      	beq.n	8005126 <audiod_control_request+0x17e>
 8005124:	be00      	bkpt	0x0000
 8005126:	2300      	movs	r3, #0
 8005128:	e02f      	b.n	800518a <audiod_control_request+0x1e2>
      break;
 800512a:	bf00      	nop
 800512c:	e000      	b.n	8005130 <audiod_control_request+0x188>
      break;
 800512e:	bf00      	nop
    }

    // If we end here, the received request is a set request - we schedule a receive for the data stage and return true here. We handle the rest later in audiod_control_complete() once the data stage was finished
    TU_VERIFY(tud_control_xfer(rhport, p_request, _audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz));
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	4619      	mov	r1, r3
 8005134:	4a1b      	ldr	r2, [pc, #108]	; (80051a4 <audiod_control_request+0x1fc>)
 8005136:	460b      	mov	r3, r1
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	1a5b      	subs	r3, r3, r1
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	4413      	add	r3, r2
 8005140:	3314      	adds	r3, #20
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	4618      	mov	r0, r3
 8005148:	4916      	ldr	r1, [pc, #88]	; (80051a4 <audiod_control_request+0x1fc>)
 800514a:	4603      	mov	r3, r0
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	1a1b      	subs	r3, r3, r0
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	440b      	add	r3, r1
 8005154:	3318      	adds	r3, #24
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	b29b      	uxth	r3, r3
 800515a:	79f8      	ldrb	r0, [r7, #7]
 800515c:	6839      	ldr	r1, [r7, #0]
 800515e:	f003 faef 	bl	8008740 <tud_control_xfer>
 8005162:	4603      	mov	r3, r0
 8005164:	f083 0301 	eor.w	r3, r3, #1
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <audiod_control_request+0x1ca>
 800516e:	2300      	movs	r3, #0
 8005170:	e00b      	b.n	800518a <audiod_control_request+0x1e2>
    return true;
 8005172:	2301      	movs	r3, #1
 8005174:	e009      	b.n	800518a <audiod_control_request+0x1e2>
  }

  // There went something wrong - unsupported control request type
  TU_BREAKPOINT();
 8005176:	4b07      	ldr	r3, [pc, #28]	; (8005194 <audiod_control_request+0x1ec>)
 8005178:	61fb      	str	r3, [r7, #28]
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d000      	beq.n	8005188 <audiod_control_request+0x1e0>
 8005186:	be00      	bkpt	0x0000
  return false;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3720      	adds	r7, #32
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	e000edf0 	.word	0xe000edf0
 8005198:	08000771 	.word	0x08000771
	...
 80051a4:	24001840 	.word	0x24001840

080051a8 <audiod_control_xfer_cb>:

bool audiod_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	603a      	str	r2, [r7, #0]
 80051b2:	71fb      	strb	r3, [r7, #7]
 80051b4:	460b      	mov	r3, r1
 80051b6:	71bb      	strb	r3, [r7, #6]
  if ( stage == CONTROL_STAGE_SETUP )
 80051b8:	79bb      	ldrb	r3, [r7, #6]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d106      	bne.n	80051cc <audiod_control_xfer_cb+0x24>
  {
    return audiod_control_request(rhport, request);
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	6839      	ldr	r1, [r7, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7ff fef0 	bl	8004fa8 <audiod_control_request>
 80051c8:	4603      	mov	r3, r0
 80051ca:	e00a      	b.n	80051e2 <audiod_control_xfer_cb+0x3a>
  }
  else if ( stage == CONTROL_STAGE_DATA )
 80051cc:	79bb      	ldrb	r3, [r7, #6]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d106      	bne.n	80051e0 <audiod_control_xfer_cb+0x38>
  {
    return audiod_control_complete(rhport, request);
 80051d2:	79fb      	ldrb	r3, [r7, #7]
 80051d4:	6839      	ldr	r1, [r7, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff fe2c 	bl	8004e34 <audiod_control_complete>
 80051dc:	4603      	mov	r3, r0
 80051de:	e000      	b.n	80051e2 <audiod_control_xfer_cb+0x3a>
  }

  return true;
 80051e0:	2301      	movs	r3, #1
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
	...

080051ec <audiod_xfer_cb>:

bool audiod_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	603b      	str	r3, [r7, #0]
 80051f4:	4603      	mov	r3, r0
 80051f6:	71fb      	strb	r3, [r7, #7]
 80051f8:	460b      	mov	r3, r1
 80051fa:	71bb      	strb	r3, [r7, #6]
 80051fc:	4613      	mov	r3, r2
 80051fe:	717b      	strb	r3, [r7, #5]
  (void) result;
  (void) xferred_bytes;

  // Search for interface belonging to given end point address and proceed as required
  for (uint8_t func_id = 0; func_id < CFG_TUD_AUDIO; func_id++)
 8005200:	2300      	movs	r3, #0
 8005202:	73fb      	strb	r3, [r7, #15]
 8005204:	e038      	b.n	8005278 <audiod_xfer_cb+0x8c>
  {
    audiod_function_t* audio = &_audiod_fct[func_id];
 8005206:	7bfa      	ldrb	r2, [r7, #15]
 8005208:	4613      	mov	r3, r2
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	1a9b      	subs	r3, r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4a1d      	ldr	r2, [pc, #116]	; (8005288 <audiod_xfer_cb+0x9c>)
 8005212:	4413      	add	r3, r2
 8005214:	60bb      	str	r3, [r7, #8]
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_IN

    // Data transmission of audio packet finished
    if (audio->ep_in == ep_addr && audio->alt_setting != 0)
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	7a1b      	ldrb	r3, [r3, #8]
 800521a:	79ba      	ldrb	r2, [r7, #6]
 800521c:	429a      	cmp	r2, r3
 800521e:	d112      	bne.n	8005246 <audiod_xfer_cb+0x5a>
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00e      	beq.n	8005246 <audiod_xfer_cb+0x5a>
      // Check if there is data to load into EPs buffer - if not load it with ZLP
      // Be aware - we as a device are not able to know if the host polls for data with a faster rate as we stated this in the descriptors. Therefore we always have to put something into the EPs buffer. However, once we did that, there is no way of aborting this or replacing what we put into the buffer before!
      // This is the only place where we can fill something into the EPs buffer!

      // Load new data
      TU_VERIFY(audiod_tx_done_cb(rhport, audio));
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	68b9      	ldr	r1, [r7, #8]
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff faa7 	bl	8004780 <audiod_tx_done_cb>
 8005232:	4603      	mov	r3, r0
 8005234:	f083 0301 	eor.w	r3, r3, #1
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <audiod_xfer_cb+0x56>
 800523e:	2300      	movs	r3, #0
 8005240:	e01e      	b.n	8005280 <audiod_xfer_cb+0x94>

      // Transmission of ZLP is done by audiod_tx_done_cb()
      return true;
 8005242:	2301      	movs	r3, #1
 8005244:	e01c      	b.n	8005280 <audiod_xfer_cb+0x94>
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_OUT

    // New audio packet received
    if (audio->ep_out == ep_addr)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	7b5b      	ldrb	r3, [r3, #13]
 800524a:	79ba      	ldrb	r2, [r7, #6]
 800524c:	429a      	cmp	r2, r3
 800524e:	d110      	bne.n	8005272 <audiod_xfer_cb+0x86>
    {
      TU_VERIFY(audiod_rx_done_cb(rhport, audio, (uint16_t) xferred_bytes));
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	b29a      	uxth	r2, r3
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff f9ed 	bl	8004638 <audiod_rx_done_cb>
 800525e:	4603      	mov	r3, r0
 8005260:	f083 0301 	eor.w	r3, r3, #1
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <audiod_xfer_cb+0x82>
 800526a:	2300      	movs	r3, #0
 800526c:	e008      	b.n	8005280 <audiod_xfer_cb+0x94>
      return true;
 800526e:	2301      	movs	r3, #1
 8005270:	e006      	b.n	8005280 <audiod_xfer_cb+0x94>
  for (uint8_t func_id = 0; func_id < CFG_TUD_AUDIO; func_id++)
 8005272:	7bfb      	ldrb	r3, [r7, #15]
 8005274:	3301      	adds	r3, #1
 8005276:	73fb      	strb	r3, [r7, #15]
 8005278:	7bfb      	ldrb	r3, [r7, #15]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0c3      	beq.n	8005206 <audiod_xfer_cb+0x1a>
    }
#endif
#endif
  }

  return false;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	24001840 	.word	0x24001840

0800528c <audiod_sof_isr>:
  return feedback;
}
#endif

TU_ATTR_FAST_FUNC void audiod_sof_isr (uint8_t rhport, uint32_t frame_count)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	6039      	str	r1, [r7, #0]
 8005296:	71fb      	strb	r3, [r7, #7]
        if(tud_audio_feedback_interval_isr) tud_audio_feedback_interval_isr(i, frame_count, audio->feedback.frame_shift);
      }
    }
  }
#endif // CFG_TUD_AUDIO_ENABLE_EP_OUT && CFG_TUD_AUDIO_ENABLE_FEEDBACK_EP
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <tud_audio_buffer_and_schedule_control_xfer>:

bool tud_audio_buffer_and_schedule_control_xfer(uint8_t rhport, tusb_control_request_t const * p_request, void* data, uint16_t len)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08c      	sub	sp, #48	; 0x30
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	607a      	str	r2, [r7, #4]
 80052ae:	461a      	mov	r2, r3
 80052b0:	4603      	mov	r3, r0
 80052b2:	73fb      	strb	r3, [r7, #15]
 80052b4:	4613      	mov	r3, r2
 80052b6:	81bb      	strh	r3, [r7, #12]
  // Handles only sending of data not receiving
  if (p_request->bmRequestType_bit.direction == TUSB_DIR_OUT) return false;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <tud_audio_buffer_and_schedule_control_xfer+0x26>
 80052c6:	2300      	movs	r3, #0
 80052c8:	e0b2      	b.n	8005430 <tud_audio_buffer_and_schedule_control_xfer+0x18c>

  // Get corresponding driver index
  uint8_t func_id;
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	889b      	ldrh	r3, [r3, #4]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  // Conduct checks which depend on the recipient
  switch (p_request->bmRequestType_bit.recipient)
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d002      	beq.n	80052e8 <tud_audio_buffer_and_schedule_control_xfer+0x44>
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d02c      	beq.n	8005340 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 80052e6:	e040      	b.n	800536a <tud_audio_buffer_and_schedule_control_xfer+0xc6>
  {
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	889b      	ldrh	r3, [r3, #4]
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	0a1b      	lsrs	r3, r3, #8
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

      // Verify if entity is present
      if (entityID != 0)
 80052f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d010      	beq.n	8005320 <tud_audio_buffer_and_schedule_control_xfer+0x7c>
      {
        // Find index of audio driver structure and verify entity really exists
        TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 80052fe:	f107 0217 	add.w	r2, r7, #23
 8005302:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8005306:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800530a:	4618      	mov	r0, r3
 800530c:	f000 f920 	bl	8005550 <audiod_verify_entity_exists>
 8005310:	4603      	mov	r3, r0
 8005312:	f083 0301 	eor.w	r3, r3, #1
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d031      	beq.n	8005380 <tud_audio_buffer_and_schedule_control_xfer+0xdc>
 800531c:	2300      	movs	r3, #0
 800531e:	e087      	b.n	8005430 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
      }
      else
      {
        // Find index of audio driver structure and verify interface really exists
        TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 8005320:	f107 0217 	add.w	r2, r7, #23
 8005324:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005328:	4611      	mov	r1, r2
 800532a:	4618      	mov	r0, r3
 800532c:	f000 f988 	bl	8005640 <audiod_verify_itf_exists>
 8005330:	4603      	mov	r3, r0
 8005332:	f083 0301 	eor.w	r3, r3, #1
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d021      	beq.n	8005380 <tud_audio_buffer_and_schedule_control_xfer+0xdc>
 800533c:	2300      	movs	r3, #0
 800533e:	e077      	b.n	8005430 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
    }
    break;

    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	889b      	ldrh	r3, [r3, #4]
 8005344:	b29b      	uxth	r3, r3
 8005346:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

      // Find index of audio driver structure and verify EP really exists
      TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 800534a:	f107 0217 	add.w	r2, r7, #23
 800534e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005352:	4611      	mov	r1, r2
 8005354:	4618      	mov	r0, r3
 8005356:	f000 f9dd 	bl	8005714 <audiod_verify_ep_exists>
 800535a:	4603      	mov	r3, r0
 800535c:	f083 0301 	eor.w	r3, r3, #1
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00e      	beq.n	8005384 <tud_audio_buffer_and_schedule_control_xfer+0xe0>
 8005366:	2300      	movs	r3, #0
 8005368:	e062      	b.n	8005430 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
    }
    break;

    // Unknown/Unsupported recipient
    default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 800536a:	4b33      	ldr	r3, [pc, #204]	; (8005438 <tud_audio_buffer_and_schedule_control_xfer+0x194>)
 800536c:	62bb      	str	r3, [r7, #40]	; 0x28
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d000      	beq.n	800537c <tud_audio_buffer_and_schedule_control_xfer+0xd8>
 800537a:	be00      	bkpt	0x0000
 800537c:	2300      	movs	r3, #0
 800537e:	e057      	b.n	8005430 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
    break;
 8005380:	bf00      	nop
 8005382:	e000      	b.n	8005386 <tud_audio_buffer_and_schedule_control_xfer+0xe2>
    break;
 8005384:	bf00      	nop
  }

  // Crop length
  if (len > _audiod_fct[func_id].ctrl_buf_sz) len = _audiod_fct[func_id].ctrl_buf_sz;
 8005386:	7dfb      	ldrb	r3, [r7, #23]
 8005388:	4619      	mov	r1, r3
 800538a:	4a2c      	ldr	r2, [pc, #176]	; (800543c <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 800538c:	460b      	mov	r3, r1
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	1a5b      	subs	r3, r3, r1
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	4413      	add	r3, r2
 8005396:	3318      	adds	r3, #24
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	b29b      	uxth	r3, r3
 800539c:	89ba      	ldrh	r2, [r7, #12]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d90a      	bls.n	80053b8 <tud_audio_buffer_and_schedule_control_xfer+0x114>
 80053a2:	7dfb      	ldrb	r3, [r7, #23]
 80053a4:	4619      	mov	r1, r3
 80053a6:	4a25      	ldr	r2, [pc, #148]	; (800543c <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 80053a8:	460b      	mov	r3, r1
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	1a5b      	subs	r3, r3, r1
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	4413      	add	r3, r2
 80053b2:	3318      	adds	r3, #24
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	81bb      	strh	r3, [r7, #12]

  // Copy into buffer
  TU_VERIFY(0 == tu_memcpy_s(_audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz, data, (size_t)len));
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
 80053ba:	4619      	mov	r1, r3
 80053bc:	4a1f      	ldr	r2, [pc, #124]	; (800543c <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 80053be:	460b      	mov	r3, r1
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	1a5b      	subs	r3, r3, r1
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	4413      	add	r3, r2
 80053c8:	3314      	adds	r3, #20
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	7dfb      	ldrb	r3, [r7, #23]
 80053ce:	4618      	mov	r0, r3
 80053d0:	491a      	ldr	r1, [pc, #104]	; (800543c <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 80053d2:	4603      	mov	r3, r0
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	1a1b      	subs	r3, r3, r0
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	440b      	add	r3, r1
 80053dc:	3318      	adds	r3, #24
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	4619      	mov	r1, r3
 80053e2:	89bb      	ldrh	r3, [r7, #12]
 80053e4:	627a      	str	r2, [r7, #36]	; 0x24
 80053e6:	6239      	str	r1, [r7, #32]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	61fa      	str	r2, [r7, #28]
 80053ec:	61bb      	str	r3, [r7, #24]
  if (count > destsz) {
 80053ee:	6a3a      	ldr	r2, [r7, #32]
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d202      	bcs.n	80053fc <tud_audio_buffer_and_schedule_control_xfer+0x158>
    return -1;
 80053f6:	f04f 33ff 	mov.w	r3, #4294967295
 80053fa:	e005      	b.n	8005408 <tud_audio_buffer_and_schedule_control_xfer+0x164>
  memcpy(dest, src, count);
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	69f9      	ldr	r1, [r7, #28]
 8005400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005402:	f005 f84d 	bl	800a4a0 <memcpy>
  return 0;
 8005406:	2300      	movs	r3, #0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <tud_audio_buffer_and_schedule_control_xfer+0x16c>
 800540c:	2300      	movs	r3, #0
 800540e:	e00f      	b.n	8005430 <tud_audio_buffer_and_schedule_control_xfer+0x18c>

  // Schedule transmit
  return tud_control_xfer(rhport, p_request, (void*)_audiod_fct[func_id].ctrl_buf, len);
 8005410:	7dfb      	ldrb	r3, [r7, #23]
 8005412:	4619      	mov	r1, r3
 8005414:	4a09      	ldr	r2, [pc, #36]	; (800543c <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 8005416:	460b      	mov	r3, r1
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	1a5b      	subs	r3, r3, r1
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	4413      	add	r3, r2
 8005420:	3314      	adds	r3, #20
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	89bb      	ldrh	r3, [r7, #12]
 8005426:	7bf8      	ldrb	r0, [r7, #15]
 8005428:	68b9      	ldr	r1, [r7, #8]
 800542a:	f003 f989 	bl	8008740 <tud_control_xfer>
 800542e:	4603      	mov	r3, r0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3730      	adds	r7, #48	; 0x30
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	e000edf0 	.word	0xe000edf0
 800543c:	24001840 	.word	0x24001840

08005440 <audiod_get_AS_interface_index>:

// This helper function finds for a given audio function and AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index(uint8_t itf, audiod_function_t * audio, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
 8005440:	b480      	push	{r7}
 8005442:	b08d      	sub	sp, #52	; 0x34
 8005444:	af00      	add	r7, sp, #0
 8005446:	60b9      	str	r1, [r7, #8]
 8005448:	607a      	str	r2, [r7, #4]
 800544a:	603b      	str	r3, [r7, #0]
 800544c:	4603      	mov	r3, r0
 800544e:	73fb      	strb	r3, [r7, #15]
  if (audio->p_desc)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d048      	beq.n	80054ea <audiod_get_AS_interface_index+0xaa>
  {
    // Get pointer at end
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	8a5b      	ldrh	r3, [r3, #18]
 8005460:	3b08      	subs	r3, #8
 8005462:	4413      	add	r3, r2
 8005464:	627b      	str	r3, [r7, #36]	; 0x24

    // Advance past AC descriptors
    uint8_t const *p_desc = tu_desc_next(audio->p_desc);
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	623b      	str	r3, [r7, #32]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	61fb      	str	r3, [r7, #28]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	461a      	mov	r2, r3
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	4413      	add	r3, r2
 800547a:	62fb      	str	r3, [r7, #44]	; 0x2c
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800547c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547e:	88db      	ldrh	r3, [r3, #6]
 8005480:	b29b      	uxth	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005486:	4413      	add	r3, r2
 8005488:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint8_t tmp = 0;
 800548a:	2300      	movs	r3, #0
 800548c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    while (p_desc < p_desc_end)
 8005490:	e027      	b.n	80054e2 <audiod_get_AS_interface_index+0xa2>
 8005492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005494:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	3301      	adds	r3, #1
 800549a:	781b      	ldrb	r3, [r3, #0]
    {
      // We assume the number of alternate settings is increasing thus we return the index of alternate setting zero!
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800549c:	2b04      	cmp	r3, #4
 800549e:	d116      	bne.n	80054ce <audiod_get_AS_interface_index+0x8e>
 80054a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a2:	78db      	ldrb	r3, [r3, #3]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d112      	bne.n	80054ce <audiod_get_AS_interface_index+0x8e>
      {
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 80054a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054aa:	789b      	ldrb	r3, [r3, #2]
 80054ac:	7bfa      	ldrb	r2, [r7, #15]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d108      	bne.n	80054c4 <audiod_get_AS_interface_index+0x84>
        {
          *idxItf = tmp;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80054b8:	701a      	strb	r2, [r3, #0]
          *pp_desc_int = p_desc;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054be:	601a      	str	r2, [r3, #0]
          return true;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e013      	b.n	80054ec <audiod_get_AS_interface_index+0xac>
        }
        // Increase index, bytes read, and pointer
        tmp++;
 80054c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054c8:	3301      	adds	r3, #1
 80054ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d0:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	4413      	add	r3, r2
      }
      p_desc = tu_desc_next(p_desc);
 80054e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p_desc < p_desc_end)
 80054e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d3d3      	bcc.n	8005492 <audiod_get_AS_interface_index+0x52>
    }
  }
  return false;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3734      	adds	r7, #52	; 0x34
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <audiod_get_AS_interface_index_global>:

// This helper function finds for a given AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index_global(uint8_t itf, uint8_t *func_id, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	607a      	str	r2, [r7, #4]
 8005502:	603b      	str	r3, [r7, #0]
 8005504:	4603      	mov	r3, r0
 8005506:	73fb      	strb	r3, [r7, #15]
  // Loop over audio driver interfaces
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8005508:	2300      	movs	r3, #0
 800550a:	75fb      	strb	r3, [r7, #23]
 800550c:	e016      	b.n	800553c <audiod_get_AS_interface_index_global+0x44>
  {
    if (audiod_get_AS_interface_index(itf, &_audiod_fct[i], idxItf, pp_desc_int))
 800550e:	7dfa      	ldrb	r2, [r7, #23]
 8005510:	4613      	mov	r3, r2
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	1a9b      	subs	r3, r3, r2
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	4a0c      	ldr	r2, [pc, #48]	; (800554c <audiod_get_AS_interface_index_global+0x54>)
 800551a:	1899      	adds	r1, r3, r2
 800551c:	7bf8      	ldrb	r0, [r7, #15]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	f7ff ff8d 	bl	8005440 <audiod_get_AS_interface_index>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d004      	beq.n	8005536 <audiod_get_AS_interface_index_global+0x3e>
    {
      *func_id = i;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	7dfa      	ldrb	r2, [r7, #23]
 8005530:	701a      	strb	r2, [r3, #0]
      return true;
 8005532:	2301      	movs	r3, #1
 8005534:	e006      	b.n	8005544 <audiod_get_AS_interface_index_global+0x4c>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8005536:	7dfb      	ldrb	r3, [r7, #23]
 8005538:	3301      	adds	r3, #1
 800553a:	75fb      	strb	r3, [r7, #23]
 800553c:	7dfb      	ldrb	r3, [r7, #23]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0e5      	beq.n	800550e <audiod_get_AS_interface_index_global+0x16>
    }
  }

  return false;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	24001840 	.word	0x24001840

08005550 <audiod_verify_entity_exists>:

// Verify an entity with the given ID exists and returns also the corresponding driver index
static bool audiod_verify_entity_exists(uint8_t itf, uint8_t entityID, uint8_t *func_id)
{
 8005550:	b480      	push	{r7}
 8005552:	b08d      	sub	sp, #52	; 0x34
 8005554:	af00      	add	r7, sp, #0
 8005556:	4603      	mov	r3, r0
 8005558:	603a      	str	r2, [r7, #0]
 800555a:	71fb      	strb	r3, [r7, #7]
 800555c:	460b      	mov	r3, r1
 800555e:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8005560:	2300      	movs	r3, #0
 8005562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005566:	e05d      	b.n	8005624 <audiod_verify_entity_exists+0xd4>
  {
    // Look for the correct driver by checking if the unique standard AC interface number fits
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8005568:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800556c:	4933      	ldr	r1, [pc, #204]	; (800563c <audiod_verify_entity_exists+0xec>)
 800556e:	4613      	mov	r3, r2
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	1a9b      	subs	r3, r3, r2
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	440b      	add	r3, r1
 8005578:	3304      	adds	r3, #4
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d04c      	beq.n	800561a <audiod_verify_entity_exists+0xca>
 8005580:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005584:	492d      	ldr	r1, [pc, #180]	; (800563c <audiod_verify_entity_exists+0xec>)
 8005586:	4613      	mov	r3, r2
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	1a9b      	subs	r3, r3, r2
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	440b      	add	r3, r1
 8005590:	3304      	adds	r3, #4
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	789b      	ldrb	r3, [r3, #2]
 8005596:	79fa      	ldrb	r2, [r7, #7]
 8005598:	429a      	cmp	r2, r3
 800559a:	d13e      	bne.n	800561a <audiod_verify_entity_exists+0xca>
    {
      // Get pointers after class specific AC descriptors and end of AC descriptors - entities are defined in between
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);                                          // Points to CS AC descriptor
 800559c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80055a0:	4926      	ldr	r1, [pc, #152]	; (800563c <audiod_verify_entity_exists+0xec>)
 80055a2:	4613      	mov	r3, r2
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	1a9b      	subs	r3, r3, r2
 80055a8:	00db      	lsls	r3, r3, #3
 80055aa:	440b      	add	r3, r1
 80055ac:	3304      	adds	r3, #4
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	4413      	add	r3, r2
 80055c0:	62bb      	str	r3, [r7, #40]	; 0x28
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 80055c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c4:	88db      	ldrh	r3, [r3, #6]
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055cc:	4413      	add	r3, r2
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	623b      	str	r3, [r7, #32]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	61fb      	str	r3, [r7, #28]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	461a      	mov	r2, r3
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	4413      	add	r3, r2
      p_desc = tu_desc_next(p_desc);                                                                            // Get past CS AC descriptor
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28

      while (p_desc < p_desc_end)
 80055e4:	e015      	b.n	8005612 <audiod_verify_entity_exists+0xc2>
      {
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 80055e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e8:	3303      	adds	r3, #3
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	79ba      	ldrb	r2, [r7, #6]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d105      	bne.n	80055fe <audiod_verify_entity_exists+0xae>
        {
          *func_id = i;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80055f8:	701a      	strb	r2, [r3, #0]
          return true;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e017      	b.n	800562e <audiod_verify_entity_exists+0xde>
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	461a      	mov	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
        }
        p_desc = tu_desc_next(p_desc);
 8005610:	62bb      	str	r3, [r7, #40]	; 0x28
      while (p_desc < p_desc_end)
 8005612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	429a      	cmp	r2, r3
 8005618:	d3e5      	bcc.n	80055e6 <audiod_verify_entity_exists+0x96>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 800561a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800561e:	3301      	adds	r3, #1
 8005620:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005624:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005628:	2b00      	cmp	r3, #0
 800562a:	d09d      	beq.n	8005568 <audiod_verify_entity_exists+0x18>
      }
    }
  }
  return false;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3734      	adds	r7, #52	; 0x34
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	24001840 	.word	0x24001840

08005640 <audiod_verify_itf_exists>:

static bool audiod_verify_itf_exists(uint8_t itf, uint8_t *func_id)
{
 8005640:	b480      	push	{r7}
 8005642:	b089      	sub	sp, #36	; 0x24
 8005644:	af00      	add	r7, sp, #0
 8005646:	4603      	mov	r3, r0
 8005648:	6039      	str	r1, [r7, #0]
 800564a:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 800564c:	2300      	movs	r3, #0
 800564e:	77fb      	strb	r3, [r7, #31]
 8005650:	e054      	b.n	80056fc <audiod_verify_itf_exists+0xbc>
  {
    if (_audiod_fct[i].p_desc)
 8005652:	7ffa      	ldrb	r2, [r7, #31]
 8005654:	492e      	ldr	r1, [pc, #184]	; (8005710 <audiod_verify_itf_exists+0xd0>)
 8005656:	4613      	mov	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	1a9b      	subs	r3, r3, r2
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	440b      	add	r3, r1
 8005660:	3304      	adds	r3, #4
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d046      	beq.n	80056f6 <audiod_verify_itf_exists+0xb6>
    {
      // Get pointer at beginning and end
      uint8_t const *p_desc = _audiod_fct[i].p_desc;
 8005668:	7ffa      	ldrb	r2, [r7, #31]
 800566a:	4929      	ldr	r1, [pc, #164]	; (8005710 <audiod_verify_itf_exists+0xd0>)
 800566c:	4613      	mov	r3, r2
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	1a9b      	subs	r3, r3, r2
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	440b      	add	r3, r1
 8005676:	3304      	adds	r3, #4
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	61bb      	str	r3, [r7, #24]
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800567c:	7ffa      	ldrb	r2, [r7, #31]
 800567e:	4924      	ldr	r1, [pc, #144]	; (8005710 <audiod_verify_itf_exists+0xd0>)
 8005680:	4613      	mov	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	440b      	add	r3, r1
 800568a:	3304      	adds	r3, #4
 800568c:	6819      	ldr	r1, [r3, #0]
 800568e:	7ffa      	ldrb	r2, [r7, #31]
 8005690:	481f      	ldr	r0, [pc, #124]	; (8005710 <audiod_verify_itf_exists+0xd0>)
 8005692:	4613      	mov	r3, r2
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	4403      	add	r3, r0
 800569c:	3312      	adds	r3, #18
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	3b08      	subs	r3, #8
 80056a2:	440b      	add	r3, r1
 80056a4:	617b      	str	r3, [r7, #20]

      while (p_desc < p_desc_end)
 80056a6:	e022      	b.n	80056ee <audiod_verify_itf_exists+0xae>
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	3301      	adds	r3, #1
 80056b0:	781b      	ldrb	r3, [r3, #0]
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d111      	bne.n	80056da <audiod_verify_itf_exists+0x9a>
 80056b6:	7ffa      	ldrb	r2, [r7, #31]
 80056b8:	4915      	ldr	r1, [pc, #84]	; (8005710 <audiod_verify_itf_exists+0xd0>)
 80056ba:	4613      	mov	r3, r2
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	1a9b      	subs	r3, r3, r2
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	440b      	add	r3, r1
 80056c4:	3304      	adds	r3, #4
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	789b      	ldrb	r3, [r3, #2]
 80056ca:	79fa      	ldrb	r2, [r7, #7]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d104      	bne.n	80056da <audiod_verify_itf_exists+0x9a>
        {
          *func_id = i;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	7ffa      	ldrb	r2, [r7, #31]
 80056d4:	701a      	strb	r2, [r3, #0]
          return true;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e014      	b.n	8005704 <audiod_verify_itf_exists+0xc4>
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	60fb      	str	r3, [r7, #12]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	60bb      	str	r3, [r7, #8]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	4413      	add	r3, r2
        }
        p_desc = tu_desc_next(p_desc);
 80056ec:	61bb      	str	r3, [r7, #24]
      while (p_desc < p_desc_end)
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d3d8      	bcc.n	80056a8 <audiod_verify_itf_exists+0x68>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80056f6:	7ffb      	ldrb	r3, [r7, #31]
 80056f8:	3301      	adds	r3, #1
 80056fa:	77fb      	strb	r3, [r7, #31]
 80056fc:	7ffb      	ldrb	r3, [r7, #31]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0a7      	beq.n	8005652 <audiod_verify_itf_exists+0x12>
      }
    }
  }
  return false;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3724      	adds	r7, #36	; 0x24
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	24001840 	.word	0x24001840

08005714 <audiod_verify_ep_exists>:

static bool audiod_verify_ep_exists(uint8_t ep, uint8_t *func_id)
{
 8005714:	b480      	push	{r7}
 8005716:	b08b      	sub	sp, #44	; 0x2c
 8005718:	af00      	add	r7, sp, #0
 800571a:	4603      	mov	r3, r0
 800571c:	6039      	str	r1, [r7, #0]
 800571e:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8005720:	2300      	movs	r3, #0
 8005722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005726:	e061      	b.n	80057ec <audiod_verify_ep_exists+0xd8>
  {
    if (_audiod_fct[i].p_desc)
 8005728:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800572c:	4935      	ldr	r1, [pc, #212]	; (8005804 <audiod_verify_ep_exists+0xf0>)
 800572e:	4613      	mov	r3, r2
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	1a9b      	subs	r3, r3, r2
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	440b      	add	r3, r1
 8005738:	3304      	adds	r3, #4
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d050      	beq.n	80057e2 <audiod_verify_ep_exists+0xce>
    {
      // Get pointer at end
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 8005740:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005744:	492f      	ldr	r1, [pc, #188]	; (8005804 <audiod_verify_ep_exists+0xf0>)
 8005746:	4613      	mov	r3, r2
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	1a9b      	subs	r3, r3, r2
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	440b      	add	r3, r1
 8005750:	3304      	adds	r3, #4
 8005752:	6819      	ldr	r1, [r3, #0]
 8005754:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005758:	482a      	ldr	r0, [pc, #168]	; (8005804 <audiod_verify_ep_exists+0xf0>)
 800575a:	4613      	mov	r3, r2
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	1a9b      	subs	r3, r3, r2
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	4403      	add	r3, r0
 8005764:	3312      	adds	r3, #18
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	440b      	add	r3, r1
 800576a:	61fb      	str	r3, [r7, #28]

      // Advance past AC descriptors - EP we look for are streaming EPs
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);
 800576c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005770:	4924      	ldr	r1, [pc, #144]	; (8005804 <audiod_verify_ep_exists+0xf0>)
 8005772:	4613      	mov	r3, r2
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	1a9b      	subs	r3, r3, r2
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	440b      	add	r3, r1
 800577c:	3304      	adds	r3, #4
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	4413      	add	r3, r2
 8005790:	623b      	str	r3, [r7, #32]
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	88db      	ldrh	r3, [r3, #6]
 8005796:	b29b      	uxth	r3, r3
 8005798:	461a      	mov	r2, r3
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	4413      	add	r3, r2
 800579e:	623b      	str	r3, [r7, #32]

      while (p_desc < p_desc_end)
 80057a0:	e01b      	b.n	80057da <audiod_verify_ep_exists+0xc6>
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	3301      	adds	r3, #1
 80057aa:	781b      	ldrb	r3, [r3, #0]
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 80057ac:	2b05      	cmp	r3, #5
 80057ae:	d10a      	bne.n	80057c6 <audiod_verify_ep_exists+0xb2>
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	789b      	ldrb	r3, [r3, #2]
 80057b4:	79fa      	ldrb	r2, [r7, #7]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d105      	bne.n	80057c6 <audiod_verify_ep_exists+0xb2>
        {
          *func_id = i;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80057c0:	701a      	strb	r2, [r3, #0]
          return true;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e017      	b.n	80057f6 <audiod_verify_ep_exists+0xe2>
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	60fb      	str	r3, [r7, #12]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	60bb      	str	r3, [r7, #8]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4413      	add	r3, r2
        }
        p_desc = tu_desc_next(p_desc);
 80057d8:	623b      	str	r3, [r7, #32]
      while (p_desc < p_desc_end)
 80057da:	6a3a      	ldr	r2, [r7, #32]
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d3df      	bcc.n	80057a2 <audiod_verify_ep_exists+0x8e>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80057e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057e6:	3301      	adds	r3, #1
 80057e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80057ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d099      	beq.n	8005728 <audiod_verify_ep_exists+0x14>
      }
    }
  }
  return false;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	372c      	adds	r7, #44	; 0x2c
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	24001840 	.word	0x24001840

08005808 <audiod_get_audio_fct_idx>:
}
#endif

// No security checks here - internal function only which should always succeed
uint8_t audiod_get_audio_fct_idx(audiod_function_t * audio)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  for (uint8_t cnt=0; cnt < CFG_TUD_AUDIO; cnt++)
 8005810:	2300      	movs	r3, #0
 8005812:	73fb      	strb	r3, [r7, #15]
 8005814:	e00e      	b.n	8005834 <audiod_get_audio_fct_idx+0x2c>
  {
    if (&_audiod_fct[cnt] == audio) return cnt;
 8005816:	7bfa      	ldrb	r2, [r7, #15]
 8005818:	4613      	mov	r3, r2
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	1a9b      	subs	r3, r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	4a09      	ldr	r2, [pc, #36]	; (8005848 <audiod_get_audio_fct_idx+0x40>)
 8005822:	4413      	add	r3, r2
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	429a      	cmp	r2, r3
 8005828:	d101      	bne.n	800582e <audiod_get_audio_fct_idx+0x26>
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	e006      	b.n	800583c <audiod_get_audio_fct_idx+0x34>
  for (uint8_t cnt=0; cnt < CFG_TUD_AUDIO; cnt++)
 800582e:	7bfb      	ldrb	r3, [r7, #15]
 8005830:	3301      	adds	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0ed      	beq.n	8005816 <audiod_get_audio_fct_idx+0xe>
  }
  return 0;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	24001840 	.word	0x24001840

0800584c <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUSB_MEM_SECTION tu_static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static bool _prep_out_transaction (cdcd_interface_t* p_cdc)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = 0;
 8005854:	2300      	movs	r3, #0
 8005856:	73fb      	strb	r3, [r7, #15]
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3310      	adds	r3, #16
 800585c:	4618      	mov	r0, r3
 800585e:	f001 f9a6 	bl	8006bae <tu_fifo_remaining>
 8005862:	4603      	mov	r3, r0
 8005864:	81bb      	strh	r3, [r7, #12]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 8005866:	89bb      	ldrh	r3, [r7, #12]
 8005868:	2b3f      	cmp	r3, #63	; 0x3f
 800586a:	d801      	bhi.n	8005870 <_prep_out_transaction+0x24>
 800586c:	2300      	movs	r3, #0
 800586e:	e02b      	b.n	80058c8 <_prep_out_transaction+0x7c>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	78da      	ldrb	r2, [r3, #3]
 8005874:	7bfb      	ldrb	r3, [r7, #15]
 8005876:	4611      	mov	r1, r2
 8005878:	4618      	mov	r0, r3
 800587a:	f002 fc71 	bl	8008160 <usbd_edpt_claim>
 800587e:	4603      	mov	r3, r0
 8005880:	f083 0301 	eor.w	r3, r3, #1
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <_prep_out_transaction+0x42>
 800588a:	2300      	movs	r3, #0
 800588c:	e01c      	b.n	80058c8 <_prep_out_transaction+0x7c>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3310      	adds	r3, #16
 8005892:	4618      	mov	r0, r3
 8005894:	f001 f98b 	bl	8006bae <tu_fifo_remaining>
 8005898:	4603      	mov	r3, r0
 800589a:	81bb      	strh	r3, [r7, #12]

  if ( available >= sizeof(p_cdc->epout_buf) )
 800589c:	89bb      	ldrh	r3, [r7, #12]
 800589e:	2b3f      	cmp	r3, #63	; 0x3f
 80058a0:	d90a      	bls.n	80058b8 <_prep_out_transaction+0x6c>
  {
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	78d9      	ldrb	r1, [r3, #3]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 80058ac:	7bf8      	ldrb	r0, [r7, #15]
 80058ae:	2340      	movs	r3, #64	; 0x40
 80058b0:	f002 fcaa 	bl	8008208 <usbd_edpt_xfer>
 80058b4:	4603      	mov	r3, r0
 80058b6:	e007      	b.n	80058c8 <_prep_out_transaction+0x7c>
  }else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	78da      	ldrb	r2, [r3, #3]
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	4611      	mov	r1, r2
 80058c0:	4618      	mov	r0, r3
 80058c2:	f002 fc77 	bl	80081b4 <usbd_edpt_release>

    return false;
 80058c6:	2300      	movs	r3, #0
  }
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <tud_cdc_n_connected>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_cdc_n_connected(uint8_t itf)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	4603      	mov	r3, r0
 80058d8:	71fb      	strb	r3, [r7, #7]

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
 80058da:	f001 faa9 	bl	8006e30 <tud_mounted>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d009      	beq.n	80058f8 <tud_cdc_n_connected+0x28>
 80058e4:	f001 fab6 	bl	8006e54 <tud_suspended>
 80058e8:	4603      	mov	r3, r0
 80058ea:	f083 0301 	eor.w	r3, r3, #1
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <tud_cdc_n_connected+0x28>
 80058f4:	2301      	movs	r3, #1
 80058f6:	e000      	b.n	80058fa <tud_cdc_n_connected+0x2a>
 80058f8:	2300      	movs	r3, #0
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	b2db      	uxtb	r3, r3
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01a      	beq.n	800593a <tud_cdc_n_connected+0x6a>
 8005904:	79fb      	ldrb	r3, [r7, #7]
 8005906:	4a11      	ldr	r2, [pc, #68]	; (800594c <tud_cdc_n_connected+0x7c>)
 8005908:	f44f 7194 	mov.w	r1, #296	; 0x128
 800590c:	fb01 f303 	mul.w	r3, r1, r3
 8005910:	4413      	add	r3, r2
 8005912:	3304      	adds	r3, #4
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	2300      	movs	r3, #0
 800591a:	72fb      	strb	r3, [r7, #11]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 800591c:	7afb      	ldrb	r3, [r7, #11]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	fa22 f303 	lsr.w	r3, r2, r3
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	bf14      	ite	ne
 800592c:	2301      	movne	r3, #1
 800592e:	2300      	moveq	r3, #0
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <tud_cdc_n_connected+0x6a>
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <tud_cdc_n_connected+0x6c>
 800593a:	2300      	movs	r3, #0
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	b2db      	uxtb	r3, r3
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	24001878 	.word	0x24001878

08005950 <tud_cdc_n_available>:

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 800595a:	79fb      	ldrb	r3, [r7, #7]
 800595c:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005960:	fb02 f303 	mul.w	r3, r2, r3
 8005964:	3310      	adds	r3, #16
 8005966:	4a05      	ldr	r2, [pc, #20]	; (800597c <tud_cdc_n_available+0x2c>)
 8005968:	4413      	add	r3, r2
 800596a:	4618      	mov	r0, r3
 800596c:	f001 f8aa 	bl	8006ac4 <tu_fifo_count>
 8005970:	4603      	mov	r3, r0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	24001878 	.word	0x24001878

08005980 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	4603      	mov	r3, r0
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 800598e:	7bfb      	ldrb	r3, [r7, #15]
 8005990:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005994:	fb02 f303 	mul.w	r3, r2, r3
 8005998:	4a0a      	ldr	r2, [pc, #40]	; (80059c4 <tud_cdc_n_read+0x44>)
 800599a:	4413      	add	r3, r2
 800599c:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) bufsize);
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	3310      	adds	r3, #16
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	b292      	uxth	r2, r2
 80059a6:	68b9      	ldr	r1, [r7, #8]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f001 f95c 	bl	8006c66 <tu_fifo_read_n>
 80059ae:	4603      	mov	r3, r0
 80059b0:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(p_cdc);
 80059b2:	6978      	ldr	r0, [r7, #20]
 80059b4:	f7ff ff4a 	bl	800584c <_prep_out_transaction>
  return num_read;
 80059b8:	693b      	ldr	r3, [r7, #16]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	24001878 	.word	0x24001878

080059c8 <tud_cdc_n_write>:

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	4603      	mov	r3, r0
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
 80059d8:	f44f 7294 	mov.w	r2, #296	; 0x128
 80059dc:	fb02 f303 	mul.w	r3, r2, r3
 80059e0:	4a0e      	ldr	r2, [pc, #56]	; (8005a1c <tud_cdc_n_write+0x54>)
 80059e2:	4413      	add	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	331c      	adds	r3, #28
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	b292      	uxth	r2, r2
 80059ee:	68b9      	ldr	r1, [r7, #8]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f001 f99f 	bl	8006d34 <tu_fifo_write_n>
 80059f6:	4603      	mov	r3, r0
 80059f8:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  // may need to suppress -Wunreachable-code since most of the time CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
  if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	331c      	adds	r3, #28
 80059fe:	4618      	mov	r0, r3
 8005a00:	f001 f860 	bl	8006ac4 <tu_fifo_count>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b3f      	cmp	r3, #63	; 0x3f
 8005a08:	d903      	bls.n	8005a12 <tud_cdc_n_write+0x4a>
  {
    tud_cdc_n_write_flush(itf);
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 f807 	bl	8005a20 <tud_cdc_n_write_flush>
  }

  return ret;
 8005a12:	8a7b      	ldrh	r3, [r7, #18]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	24001878 	.word	0x24001878

08005a20 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	4603      	mov	r3, r0
 8005a28:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8005a2a:	79fb      	ldrb	r3, [r7, #7]
 8005a2c:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005a30:	fb02 f303 	mul.w	r3, r2, r3
 8005a34:	4a36      	ldr	r2, [pc, #216]	; (8005b10 <tud_cdc_n_write_flush+0xf0>)
 8005a36:	4413      	add	r3, r2
 8005a38:	617b      	str	r3, [r7, #20]
 8005a3a:	f001 f9f9 	bl	8006e30 <tud_mounted>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d009      	beq.n	8005a58 <tud_cdc_n_write_flush+0x38>
 8005a44:	f001 fa06 	bl	8006e54 <tud_suspended>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f083 0301 	eor.w	r3, r3, #1
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <tud_cdc_n_write_flush+0x38>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e000      	b.n	8005a5a <tud_cdc_n_write_flush+0x3a>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 8005a60:	f083 0301 	eor.w	r3, r3, #1
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <tud_cdc_n_write_flush+0x4e>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	e04c      	b.n	8005b08 <tud_cdc_n_write_flush+0xe8>

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	331c      	adds	r3, #28
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 f826 	bl	8006ac4 <tu_fifo_count>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <tud_cdc_n_write_flush+0x62>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e042      	b.n	8005b08 <tud_cdc_n_write_flush+0xe8>

  uint8_t const rhport = 0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	74fb      	strb	r3, [r7, #19]

  // Claim the endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	789a      	ldrb	r2, [r3, #2]
 8005a8a:	7cfb      	ldrb	r3, [r7, #19]
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f002 fb66 	bl	8008160 <usbd_edpt_claim>
 8005a94:	4603      	mov	r3, r0
 8005a96:	f083 0301 	eor.w	r3, r3, #1
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <tud_cdc_n_write_flush+0x84>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	e031      	b.n	8005b08 <tud_cdc_n_write_flush+0xe8>

  // Pull data from FIFO
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f103 001c 	add.w	r0, r3, #28
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	33e8      	adds	r3, #232	; 0xe8
 8005aae:	2240      	movs	r2, #64	; 0x40
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	f001 f8d8 	bl	8006c66 <tu_fifo_read_n>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	823b      	strh	r3, [r7, #16]

  if ( count )
 8005aba:	8a3b      	ldrh	r3, [r7, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01b      	beq.n	8005af8 <tud_cdc_n_write_flush+0xd8>
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	7899      	ldrb	r1, [r3, #2]
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8005aca:	8a3b      	ldrh	r3, [r7, #16]
 8005acc:	7cf8      	ldrb	r0, [r7, #19]
 8005ace:	f002 fb9b 	bl	8008208 <usbd_edpt_xfer>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	f083 0301 	eor.w	r3, r3, #1
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <tud_cdc_n_write_flush+0xd4>
 8005ade:	4b0d      	ldr	r3, [pc, #52]	; (8005b14 <tud_cdc_n_write_flush+0xf4>)
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d000      	beq.n	8005af0 <tud_cdc_n_write_flush+0xd0>
 8005aee:	be00      	bkpt	0x0000
 8005af0:	2300      	movs	r3, #0
 8005af2:	e009      	b.n	8005b08 <tud_cdc_n_write_flush+0xe8>
    return count;
 8005af4:	8a3b      	ldrh	r3, [r7, #16]
 8005af6:	e007      	b.n	8005b08 <tud_cdc_n_write_flush+0xe8>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	789a      	ldrb	r2, [r3, #2]
 8005afc:	7cfb      	ldrb	r3, [r7, #19]
 8005afe:	4611      	mov	r1, r2
 8005b00:	4618      	mov	r0, r3
 8005b02:	f002 fb57 	bl	80081b4 <usbd_edpt_release>
    return 0;
 8005b06:	2300      	movs	r3, #0
  }
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	24001878 	.word	0x24001878
 8005b14:	e000edf0 	.word	0xe000edf0

08005b18 <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available (uint8_t itf)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
 8005b22:	79fb      	ldrb	r3, [r7, #7]
 8005b24:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005b28:	fb02 f303 	mul.w	r3, r2, r3
 8005b2c:	3318      	adds	r3, #24
 8005b2e:	4a05      	ldr	r2, [pc, #20]	; (8005b44 <tud_cdc_n_write_available+0x2c>)
 8005b30:	4413      	add	r3, r2
 8005b32:	3304      	adds	r3, #4
 8005b34:	4618      	mov	r0, r3
 8005b36:	f001 f83a 	bl	8006bae <tu_fifo_remaining>
 8005b3a:	4603      	mov	r3, r0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	24001878 	.word	0x24001878

08005b48 <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8005b4e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005b52:	2100      	movs	r1, #0
 8005b54:	4820      	ldr	r0, [pc, #128]	; (8005bd8 <cdcd_init+0x90>)
 8005b56:	f004 fcb1 	bl	800a4bc <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	71fb      	strb	r3, [r7, #7]
 8005b5e:	e032      	b.n	8005bc6 <cdcd_init+0x7e>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005b66:	fb02 f303 	mul.w	r3, r2, r3
 8005b6a:	4a1b      	ldr	r2, [pc, #108]	; (8005bd8 <cdcd_init+0x90>)
 8005b6c:	4413      	add	r3, r2
 8005b6e:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	22ff      	movs	r2, #255	; 0xff
 8005b74:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b7c:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2200      	movs	r2, #0
 8005b82:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity    = 0;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2200      	movs	r2, #0
 8005b88:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2208      	movs	r2, #8
 8005b8e:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	f103 0010 	add.w	r0, r3, #16
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	2240      	movs	r2, #64	; 0x40
 8005ba4:	f000 fafc 	bl	80061a0 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	f103 001c 	add.w	r0, r3, #28
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	2301      	movs	r3, #1
 8005bba:	2240      	movs	r2, #64	; 0x40
 8005bbc:	f000 faf0 	bl	80061a0 <tu_fifo_config>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8005bc0:	79fb      	ldrb	r3, [r7, #7]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	71fb      	strb	r3, [r7, #7]
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0c9      	beq.n	8005b60 <cdcd_init+0x18>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
  }
}
 8005bcc:	bf00      	nop
 8005bce:	bf00      	nop
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	24001878 	.word	0x24001878

08005bdc <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	4603      	mov	r3, r0
 8005be4:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8005be6:	2300      	movs	r3, #0
 8005be8:	73fb      	strb	r3, [r7, #15]
 8005bea:	e01f      	b.n	8005c2c <cdcd_reset+0x50>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
 8005bee:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005bf2:	fb02 f303 	mul.w	r3, r2, r3
 8005bf6:	4a11      	ldr	r2, [pc, #68]	; (8005c3c <cdcd_reset+0x60>)
 8005bf8:	4413      	add	r3, r2
 8005bfa:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8005bfc:	2205      	movs	r2, #5
 8005bfe:	2100      	movs	r1, #0
 8005c00:	68b8      	ldr	r0, [r7, #8]
 8005c02:	f004 fc5b 	bl	800a4bc <memset>
    tu_fifo_clear(&p_cdc->rx_ff);
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	3310      	adds	r3, #16
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f001 f8b6 	bl	8006d7c <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	331c      	adds	r3, #28
 8005c14:	4618      	mov	r0, r3
 8005c16:	f001 f8b1 	bl	8006d7c <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	331c      	adds	r3, #28
 8005c1e:	2101      	movs	r1, #1
 8005c20:	4618      	mov	r0, r3
 8005c22:	f001 f8bc 	bl	8006d9e <tu_fifo_set_overwritable>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8005c26:	7bfb      	ldrb	r3, [r7, #15]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	73fb      	strb	r3, [r7, #15]
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0dc      	beq.n	8005bec <cdcd_reset+0x10>
  }
}
 8005c32:	bf00      	nop
 8005c34:	bf00      	nop
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	24001878 	.word	0x24001878

08005c40 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b09a      	sub	sp, #104	; 0x68
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	4603      	mov	r3, r0
 8005c48:	6039      	str	r1, [r7, #0]
 8005c4a:	71fb      	strb	r3, [r7, #7]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	795b      	ldrb	r3, [r3, #5]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d103      	bne.n	8005c60 <cdcd_open+0x20>
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	799b      	ldrb	r3, [r3, #6]
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d001      	beq.n	8005c64 <cdcd_open+0x24>
 8005c60:	2300      	movs	r3, #0
 8005c62:	e0e1      	b.n	8005e28 <cdcd_open+0x1e8>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t * p_cdc = NULL;
 8005c64:	2300      	movs	r3, #0
 8005c66:	65fb      	str	r3, [r7, #92]	; 0x5c
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8005c6e:	e01a      	b.n	8005ca6 <cdcd_open+0x66>
  {
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 8005c70:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005c74:	4a6e      	ldr	r2, [pc, #440]	; (8005e30 <cdcd_open+0x1f0>)
 8005c76:	f44f 7194 	mov.w	r1, #296	; 0x128
 8005c7a:	fb01 f303 	mul.w	r3, r1, r3
 8005c7e:	4413      	add	r3, r2
 8005c80:	3302      	adds	r3, #2
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <cdcd_open+0x5c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
 8005c88:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005c8c:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005c90:	fb02 f303 	mul.w	r3, r2, r3
 8005c94:	4a66      	ldr	r2, [pc, #408]	; (8005e30 <cdcd_open+0x1f0>)
 8005c96:	4413      	add	r3, r2
 8005c98:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8005c9a:	e008      	b.n	8005cae <cdcd_open+0x6e>
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8005c9c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8005ca6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0e0      	beq.n	8005c70 <cdcd_open+0x30>
    }
  }
  TU_ASSERT(p_cdc, 0);
 8005cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10a      	bne.n	8005cca <cdcd_open+0x8a>
 8005cb4:	4b5f      	ldr	r3, [pc, #380]	; (8005e34 <cdcd_open+0x1f4>)
 8005cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8005cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d000      	beq.n	8005cc6 <cdcd_open+0x86>
 8005cc4:	be00      	bkpt	0x0000
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e0ae      	b.n	8005e28 <cdcd_open+0x1e8>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	789a      	ldrb	r2, [r3, #2]
 8005cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cd0:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8005cd2:	2309      	movs	r3, #9
 8005cd4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce8:	4413      	add	r3, r2
  uint8_t const * p_desc = tu_desc_next( itf_desc );
 8005cea:	657b      	str	r3, [r7, #84]	; 0x54

  // Communication Functional Descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8005cec:	e013      	b.n	8005d16 <cdcd_open+0xd6>
 8005cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cf0:	633b      	str	r3, [r7, #48]	; 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	781b      	ldrb	r3, [r3, #0]
  {
    drv_len += tu_desc_len(p_desc);
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8005d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d04:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	637b      	str	r3, [r7, #52]	; 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d12:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8005d14:	657b      	str	r3, [r7, #84]	; 0x54
 8005d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	781b      	ldrb	r3, [r3, #0]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8005d20:	2b24      	cmp	r3, #36	; 0x24
 8005d22:	d104      	bne.n	8005d2e <cdcd_open+0xee>
 8005d24:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8005d28:	88bb      	ldrh	r3, [r7, #4]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d9df      	bls.n	8005cee <cdcd_open+0xae>
 8005d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	3301      	adds	r3, #1
 8005d36:	781b      	ldrb	r3, [r3, #0]
  }

  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8005d38:	2b05      	cmp	r3, #5
 8005d3a:	d12f      	bne.n	8005d9c <cdcd_open+0x15c>
  {
    // notification endpoint
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8005d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d3e:	653b      	str	r3, [r7, #80]	; 0x50

    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 8005d40:	79fb      	ldrb	r3, [r7, #7]
 8005d42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d44:	4618      	mov	r0, r3
 8005d46:	f002 f9c7 	bl	80080d8 <usbd_edpt_open>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	f083 0301 	eor.w	r3, r3, #1
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <cdcd_open+0x12c>
 8005d56:	4b37      	ldr	r3, [pc, #220]	; (8005e34 <cdcd_open+0x1f4>)
 8005d58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d000      	beq.n	8005d68 <cdcd_open+0x128>
 8005d66:	be00      	bkpt	0x0000
 8005d68:	2300      	movs	r3, #0
 8005d6a:	e05d      	b.n	8005e28 <cdcd_open+0x1e8>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8005d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d6e:	789a      	ldrb	r2, [r3, #2]
 8005d70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d72:	705a      	strb	r2, [r3, #1]
 8005d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d76:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005d82:	4413      	add	r3, r2
 8005d84:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8005d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	461a      	mov	r2, r3
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8005d9a:	657b      	str	r3, [r7, #84]	; 0x54
 8005d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d9e:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	3301      	adds	r3, #1
 8005da4:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d139      	bne.n	8005e1e <cdcd_open+0x1de>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
 8005daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dac:	795b      	ldrb	r3, [r3, #5]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8005dae:	2b0a      	cmp	r3, #10
 8005db0:	d135      	bne.n	8005e1e <cdcd_open+0x1de>
 8005db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005db4:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	781b      	ldrb	r3, [r3, #0]
  {
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8005dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dc8:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8005dd8:	657b      	str	r3, [r7, #84]	; 0x54

    // Open endpoint pair
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 8005dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ddc:	3303      	adds	r3, #3
 8005dde:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005de0:	3202      	adds	r2, #2
 8005de2:	79f8      	ldrb	r0, [r7, #7]
 8005de4:	9201      	str	r2, [sp, #4]
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	2302      	movs	r3, #2
 8005dea:	2202      	movs	r2, #2
 8005dec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005dee:	f002 f90b 	bl	8008008 <usbd_open_edpt_pair>
 8005df2:	4603      	mov	r3, r0
 8005df4:	f083 0301 	eor.w	r3, r3, #1
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <cdcd_open+0x1d4>
 8005dfe:	4b0d      	ldr	r3, [pc, #52]	; (8005e34 <cdcd_open+0x1f4>)
 8005e00:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d000      	beq.n	8005e10 <cdcd_open+0x1d0>
 8005e0e:	be00      	bkpt	0x0000
 8005e10:	2300      	movs	r3, #0
 8005e12:	e009      	b.n	8005e28 <cdcd_open+0x1e8>

    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 8005e14:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005e18:	330e      	adds	r3, #14
 8005e1a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);
 8005e1e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005e20:	f7ff fd14 	bl	800584c <_prep_out_transaction>

  return drv_len;
 8005e24:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3760      	adds	r7, #96	; 0x60
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	24001878 	.word	0x24001878
 8005e34:	e000edf0 	.word	0xe000edf0

08005e38 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08a      	sub	sp, #40	; 0x28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	4603      	mov	r3, r0
 8005e40:	603a      	str	r2, [r7, #0]
 8005e42:	71fb      	strb	r3, [r7, #7]
 8005e44:	460b      	mov	r3, r1
 8005e46:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b20      	cmp	r3, #32
 8005e54:	d001      	beq.n	8005e5a <cdcd_control_xfer_cb+0x22>
 8005e56:	2300      	movs	r3, #0
 8005e58:	e0cf      	b.n	8005ffa <cdcd_control_xfer_cb+0x1c2>

  uint8_t itf = 0;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  cdcd_interface_t* p_cdc = _cdcd_itf;
 8005e60:	4b68      	ldr	r3, [pc, #416]	; (8006004 <cdcd_control_xfer_cb+0x1cc>)
 8005e62:	623b      	str	r3, [r7, #32]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8005e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <cdcd_control_xfer_cb+0x38>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	e0c4      	b.n	8005ffa <cdcd_control_xfer_cb+0x1c2>

    if ( p_cdc->itf_num == request->wIndex ) break;
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	889b      	ldrh	r3, [r3, #4]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d009      	beq.n	8005e94 <cdcd_control_xfer_cb+0x5c>
  for ( ; ; itf++, p_cdc++)
 8005e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e84:	3301      	adds	r3, #1
 8005e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005e90:	623b      	str	r3, [r7, #32]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8005e92:	e7e7      	b.n	8005e64 <cdcd_control_xfer_cb+0x2c>
    if ( p_cdc->itf_num == request->wIndex ) break;
 8005e94:	bf00      	nop
  }

  switch ( request->bRequest )
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	785b      	ldrb	r3, [r3, #1]
 8005e9a:	3b20      	subs	r3, #32
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	f200 80a2 	bhi.w	8005fe6 <cdcd_control_xfer_cb+0x1ae>
 8005ea2:	a201      	add	r2, pc, #4	; (adr r2, 8005ea8 <cdcd_control_xfer_cb+0x70>)
 8005ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea8:	08005eb9 	.word	0x08005eb9
 8005eac:	08005ef5 	.word	0x08005ef5
 8005eb0:	08005f0d 	.word	0x08005f0d
 8005eb4:	08005fb5 	.word	0x08005fb5
  {
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8005eb8:	79bb      	ldrb	r3, [r7, #6]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d108      	bne.n	8005ed0 <cdcd_control_xfer_cb+0x98>
      {
        TU_LOG2("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	f103 0208 	add.w	r2, r3, #8
 8005ec4:	79f8      	ldrb	r0, [r7, #7]
 8005ec6:	2307      	movs	r3, #7
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	f002 fc39 	bl	8008740 <tud_control_xfer>
      }
      else if ( stage == CONTROL_STAGE_ACK)
      {
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
      }
    break;
 8005ece:	e08c      	b.n	8005fea <cdcd_control_xfer_cb+0x1b2>
      else if ( stage == CONTROL_STAGE_ACK)
 8005ed0:	79bb      	ldrb	r3, [r7, #6]
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	f040 8089 	bne.w	8005fea <cdcd_control_xfer_cb+0x1b2>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8005ed8:	4b4b      	ldr	r3, [pc, #300]	; (8006008 <cdcd_control_xfer_cb+0x1d0>)
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 8085 	beq.w	8005fea <cdcd_control_xfer_cb+0x1b2>
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	f103 0208 	add.w	r2, r3, #8
 8005ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eea:	4611      	mov	r1, r2
 8005eec:	4618      	mov	r0, r3
 8005eee:	f3af 8000 	nop.w
    break;
 8005ef2:	e07a      	b.n	8005fea <cdcd_control_xfer_cb+0x1b2>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8005ef4:	79bb      	ldrb	r3, [r7, #6]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d179      	bne.n	8005fee <cdcd_control_xfer_cb+0x1b6>
      {
        TU_LOG2("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	f103 0208 	add.w	r2, r3, #8
 8005f00:	79f8      	ldrb	r0, [r7, #7]
 8005f02:	2307      	movs	r3, #7
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	f002 fc1b 	bl	8008740 <tud_control_xfer>
      }
    break;
 8005f0a:	e070      	b.n	8005fee <cdcd_control_xfer_cb+0x1b6>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP)
 8005f0c:	79bb      	ldrb	r3, [r7, #6]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d105      	bne.n	8005f1e <cdcd_control_xfer_cb+0xe6>
      {
        tud_control_status(rhport, request);
 8005f12:	79fb      	ldrb	r3, [r7, #7]
 8005f14:	6839      	ldr	r1, [r7, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f002 fba0 	bl	800865c <tud_control_status>
        TU_LOG2("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);

        // Invoke callback
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
      }
    break;
 8005f1c:	e069      	b.n	8005ff2 <cdcd_control_xfer_cb+0x1ba>
      else if (stage == CONTROL_STAGE_ACK)
 8005f1e:	79bb      	ldrb	r3, [r7, #6]
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d166      	bne.n	8005ff2 <cdcd_control_xfer_cb+0x1ba>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	885b      	ldrh	r3, [r3, #2]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	613b      	str	r3, [r7, #16]
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	73fb      	strb	r3, [r7, #15]
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	fa22 f303 	lsr.w	r3, r2, r3
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bf14      	ite	ne
 8005f40:	2301      	movne	r3, #1
 8005f42:	2300      	moveq	r3, #0
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	885b      	ldrh	r3, [r3, #2]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	61bb      	str	r3, [r7, #24]
 8005f50:	2301      	movs	r3, #1
 8005f52:	75fb      	strb	r3, [r7, #23]
 8005f54:	7dfb      	ldrb	r3, [r7, #23]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	fa22 f303 	lsr.w	r3, r2, r3
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	bf14      	ite	ne
 8005f64:	2301      	movne	r3, #1
 8005f66:	2300      	moveq	r3, #0
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	885b      	ldrh	r3, [r3, #2]
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	f103 021c 	add.w	r2, r3, #28
 8005f7e:	7ffb      	ldrb	r3, [r7, #31]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	bf14      	ite	ne
 8005f84:	2301      	movne	r3, #1
 8005f86:	2300      	moveq	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	f083 0301 	eor.w	r3, r3, #1
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	4619      	mov	r1, r3
 8005f98:	4610      	mov	r0, r2
 8005f9a:	f000 ff00 	bl	8006d9e <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 8005f9e:	4b1b      	ldr	r3, [pc, #108]	; (800600c <cdcd_control_xfer_cb+0x1d4>)
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d026      	beq.n	8005ff2 <cdcd_control_xfer_cb+0x1ba>
 8005fa4:	7fba      	ldrb	r2, [r7, #30]
 8005fa6:	7ff9      	ldrb	r1, [r7, #31]
 8005fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fa fcc5 	bl	800093c <tud_cdc_line_state_cb>
    break;
 8005fb2:	e01e      	b.n	8005ff2 <cdcd_control_xfer_cb+0x1ba>
    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP)
 8005fb4:	79bb      	ldrb	r3, [r7, #6]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d105      	bne.n	8005fc6 <cdcd_control_xfer_cb+0x18e>
      {
        tud_control_status(rhport, request);
 8005fba:	79fb      	ldrb	r3, [r7, #7]
 8005fbc:	6839      	ldr	r1, [r7, #0]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f002 fb4c 	bl	800865c <tud_control_status>
      else if (stage == CONTROL_STAGE_ACK)
      {
        TU_LOG2("  Send Break\r\n");
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
      }
    break;
 8005fc4:	e017      	b.n	8005ff6 <cdcd_control_xfer_cb+0x1be>
      else if (stage == CONTROL_STAGE_ACK)
 8005fc6:	79bb      	ldrb	r3, [r7, #6]
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d114      	bne.n	8005ff6 <cdcd_control_xfer_cb+0x1be>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 8005fcc:	4b10      	ldr	r3, [pc, #64]	; (8006010 <cdcd_control_xfer_cb+0x1d8>)
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d011      	beq.n	8005ff6 <cdcd_control_xfer_cb+0x1be>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	885b      	ldrh	r3, [r3, #2]
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fdc:	4611      	mov	r1, r2
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f3af 8000 	nop.w
    break;
 8005fe4:	e007      	b.n	8005ff6 <cdcd_control_xfer_cb+0x1be>

    default: return false; // stall unsupported request
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	e007      	b.n	8005ffa <cdcd_control_xfer_cb+0x1c2>
    break;
 8005fea:	bf00      	nop
 8005fec:	e004      	b.n	8005ff8 <cdcd_control_xfer_cb+0x1c0>
    break;
 8005fee:	bf00      	nop
 8005ff0:	e002      	b.n	8005ff8 <cdcd_control_xfer_cb+0x1c0>
    break;
 8005ff2:	bf00      	nop
 8005ff4:	e000      	b.n	8005ff8 <cdcd_control_xfer_cb+0x1c0>
    break;
 8005ff6:	bf00      	nop
  }

  return true;
 8005ff8:	2301      	movs	r3, #1
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3728      	adds	r7, #40	; 0x28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	24001878 	.word	0x24001878
 8006008:	00000000 	.word	0x00000000
 800600c:	0800093d 	.word	0x0800093d
 8006010:	00000000 	.word	0x00000000

08006014 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	603b      	str	r3, [r7, #0]
 800601c:	4603      	mov	r3, r0
 800601e:	71fb      	strb	r3, [r7, #7]
 8006020:	460b      	mov	r3, r1
 8006022:	71bb      	strb	r3, [r7, #6]
 8006024:	4613      	mov	r3, r2
 8006026:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8006028:	2300      	movs	r3, #0
 800602a:	75fb      	strb	r3, [r7, #23]
 800602c:	e014      	b.n	8006058 <cdcd_xfer_cb+0x44>
  {
    p_cdc = &_cdcd_itf[itf];
 800602e:	7dfb      	ldrb	r3, [r7, #23]
 8006030:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006034:	fb02 f303 	mul.w	r3, r2, r3
 8006038:	4a54      	ldr	r2, [pc, #336]	; (800618c <cdcd_xfer_cb+0x178>)
 800603a:	4413      	add	r3, r2
 800603c:	613b      	str	r3, [r7, #16]
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	78db      	ldrb	r3, [r3, #3]
 8006042:	79ba      	ldrb	r2, [r7, #6]
 8006044:	429a      	cmp	r2, r3
 8006046:	d00a      	beq.n	800605e <cdcd_xfer_cb+0x4a>
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	789b      	ldrb	r3, [r3, #2]
 800604c:	79ba      	ldrb	r2, [r7, #6]
 800604e:	429a      	cmp	r2, r3
 8006050:	d005      	beq.n	800605e <cdcd_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8006052:	7dfb      	ldrb	r3, [r7, #23]
 8006054:	3301      	adds	r3, #1
 8006056:	75fb      	strb	r3, [r7, #23]
 8006058:	7dfb      	ldrb	r3, [r7, #23]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0e7      	beq.n	800602e <cdcd_xfer_cb+0x1a>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 800605e:	7dfb      	ldrb	r3, [r7, #23]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00a      	beq.n	800607a <cdcd_xfer_cb+0x66>
 8006064:	4b4a      	ldr	r3, [pc, #296]	; (8006190 <cdcd_xfer_cb+0x17c>)
 8006066:	60bb      	str	r3, [r7, #8]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	d000      	beq.n	8006076 <cdcd_xfer_cb+0x62>
 8006074:	be00      	bkpt	0x0000
 8006076:	2300      	movs	r3, #0
 8006078:	e084      	b.n	8006184 <cdcd_xfer_cb+0x170>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	78db      	ldrb	r3, [r3, #3]
 800607e:	79ba      	ldrb	r2, [r7, #6]
 8006080:	429a      	cmp	r2, r3
 8006082:	d14a      	bne.n	800611a <cdcd_xfer_cb+0x106>
  {
    tu_fifo_write_n(&p_cdc->rx_ff, p_cdc->epout_buf, (uint16_t) xferred_bytes);
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f103 0010 	add.w	r0, r3, #16
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	33a8      	adds	r3, #168	; 0xa8
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	b292      	uxth	r2, r2
 8006092:	4619      	mov	r1, r3
 8006094:	f000 fe4e 	bl	8006d34 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 8006098:	4b3e      	ldr	r3, [pc, #248]	; (8006194 <cdcd_xfer_cb+0x180>)
 800609a:	2b00      	cmp	r3, #0
 800609c:	d028      	beq.n	80060f0 <cdcd_xfer_cb+0xdc>
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	795b      	ldrb	r3, [r3, #5]
 80060a2:	2bff      	cmp	r3, #255	; 0xff
 80060a4:	d024      	beq.n	80060f0 <cdcd_xfer_cb+0xdc>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 80060a6:	2300      	movs	r3, #0
 80060a8:	60fb      	str	r3, [r7, #12]
 80060aa:	e01d      	b.n	80060e8 <cdcd_xfer_cb+0xd4>
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	795a      	ldrb	r2, [r3, #5]
 80060b0:	6939      	ldr	r1, [r7, #16]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	440b      	add	r3, r1
 80060b6:	33a8      	adds	r3, #168	; 0xa8
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d111      	bne.n	80060e2 <cdcd_xfer_cb+0xce>
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	3310      	adds	r3, #16
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fd30 	bl	8006b28 <tu_fifo_empty>
 80060c8:	4603      	mov	r3, r0
 80060ca:	f083 0301 	eor.w	r3, r3, #1
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d006      	beq.n	80060e2 <cdcd_xfer_cb+0xce>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	795a      	ldrb	r2, [r3, #5]
 80060d8:	7dfb      	ldrb	r3, [r7, #23]
 80060da:	4611      	mov	r1, r2
 80060dc:	4618      	mov	r0, r3
 80060de:	f3af 8000 	nop.w
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3301      	adds	r3, #1
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d3dd      	bcc.n	80060ac <cdcd_xfer_cb+0x98>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 80060f0:	4b29      	ldr	r3, [pc, #164]	; (8006198 <cdcd_xfer_cb+0x184>)
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00e      	beq.n	8006114 <cdcd_xfer_cb+0x100>
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	3310      	adds	r3, #16
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 fd14 	bl	8006b28 <tu_fifo_empty>
 8006100:	4603      	mov	r3, r0
 8006102:	f083 0301 	eor.w	r3, r3, #1
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <cdcd_xfer_cb+0x100>
 800610c:	7dfb      	ldrb	r3, [r7, #23]
 800610e:	4618      	mov	r0, r3
 8006110:	f7fa fc23 	bl	800095a <tud_cdc_rx_cb>

    // prepare for OUT transaction
    _prep_out_transaction(p_cdc);
 8006114:	6938      	ldr	r0, [r7, #16]
 8006116:	f7ff fb99 	bl	800584c <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	789b      	ldrb	r3, [r3, #2]
 800611e:	79ba      	ldrb	r2, [r7, #6]
 8006120:	429a      	cmp	r2, r3
 8006122:	d12e      	bne.n	8006182 <cdcd_xfer_cb+0x16e>
  {
    // invoke transmit callback to possibly refill tx fifo
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 8006124:	4b1d      	ldr	r3, [pc, #116]	; (800619c <cdcd_xfer_cb+0x188>)
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <cdcd_xfer_cb+0x11e>
 800612a:	7dfb      	ldrb	r3, [r7, #23]
 800612c:	4618      	mov	r0, r3
 800612e:	f3af 8000 	nop.w

    if ( 0 == tud_cdc_n_write_flush(itf) )
 8006132:	7dfb      	ldrb	r3, [r7, #23]
 8006134:	4618      	mov	r0, r3
 8006136:	f7ff fc73 	bl	8005a20 <tud_cdc_n_write_flush>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d120      	bne.n	8006182 <cdcd_xfer_cb+0x16e>
    {
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	331c      	adds	r3, #28
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fcbd 	bl	8006ac4 <tu_fifo_count>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d118      	bne.n	8006182 <cdcd_xfer_cb+0x16e>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d015      	beq.n	8006182 <cdcd_xfer_cb+0x16e>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800615c:	2b00      	cmp	r3, #0
 800615e:	d110      	bne.n	8006182 <cdcd_xfer_cb+0x16e>
      {
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	789a      	ldrb	r2, [r3, #2]
 8006164:	79fb      	ldrb	r3, [r7, #7]
 8006166:	4611      	mov	r1, r2
 8006168:	4618      	mov	r0, r3
 800616a:	f001 fff9 	bl	8008160 <usbd_edpt_claim>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d006      	beq.n	8006182 <cdcd_xfer_cb+0x16e>
        {
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	7899      	ldrb	r1, [r3, #2]
 8006178:	79f8      	ldrb	r0, [r7, #7]
 800617a:	2300      	movs	r3, #0
 800617c:	2200      	movs	r2, #0
 800617e:	f002 f843 	bl	8008208 <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 8006182:	2301      	movs	r3, #1
}
 8006184:	4618      	mov	r0, r3
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	24001878 	.word	0x24001878
 8006190:	e000edf0 	.word	0xe000edf0
 8006194:	00000000 	.word	0x00000000
 8006198:	0800095b 	.word	0x0800095b
 800619c:	00000000 	.word	0x00000000

080061a0 <tu_fifo_config>:
  TU_FIFO_COPY_INC,            ///< Copy from/to an increasing source/destination address - default mode
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	4611      	mov	r1, r2
 80061ac:	461a      	mov	r2, r3
 80061ae:	460b      	mov	r3, r1
 80061b0:	80fb      	strh	r3, [r7, #6]
 80061b2:	4613      	mov	r3, r2
 80061b4:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 80061b6:	88fb      	ldrh	r3, [r7, #6]
 80061b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061bc:	d901      	bls.n	80061c2 <tu_fifo_config+0x22>
 80061be:	2300      	movs	r3, #0
 80061c0:	e01b      	b.n	80061fa <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	88fa      	ldrh	r2, [r7, #6]
 80061cc:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 80061ce:	88bb      	ldrh	r3, [r7, #4]
 80061d0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80061d4:	b299      	uxth	r1, r3
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	88d3      	ldrh	r3, [r2, #6]
 80061da:	f361 030e 	bfi	r3, r1, #0, #15
 80061de:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	79d3      	ldrb	r3, [r2, #7]
 80061e4:	7e39      	ldrb	r1, [r7, #24]
 80061e6:	f361 13c7 	bfi	r3, r1, #7, #1
 80061ea:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 80061f8:	2301      	movs	r3, #1
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b08a      	sub	sp, #40	; 0x28
 800620a:	af00      	add	r7, sp, #0
 800620c:	60f8      	str	r0, [r7, #12]
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	4613      	mov	r3, r2
 8006212:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8006218:	88fb      	ldrh	r3, [r7, #6]
 800621a:	089b      	lsrs	r3, r3, #2
 800621c:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 800621e:	e00b      	b.n	8006238 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	61ba      	str	r2, [r7, #24]
 8006228:	617b      	str	r3, [r7, #20]

// MCU that could access unaligned memory natively
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }

TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	601a      	str	r2, [r3, #0]
 8006230:	bf00      	nop
    ff_buf += 4;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3304      	adds	r3, #4
 8006236:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8006238:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800623a:	1e5a      	subs	r2, r3, #1
 800623c:	84fa      	strh	r2, [r7, #38]	; 0x26
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1ee      	bne.n	8006220 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8006242:	88fb      	ldrh	r3, [r7, #6]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	f003 0303 	and.w	r3, r3, #3
 800624a:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 800624c:	7ffb      	ldrb	r3, [r7, #31]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d009      	beq.n	8006266 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8006258:	7ffa      	ldrb	r2, [r7, #31]
 800625a:	f107 0310 	add.w	r3, r7, #16
 800625e:	4619      	mov	r1, r3
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f004 f91d 	bl	800a4a0 <memcpy>
  }
}
 8006266:	bf00      	nop
 8006268:	3728      	adds	r7, #40	; 0x28
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b08a      	sub	sp, #40	; 0x28
 8006272:	af00      	add	r7, sp, #0
 8006274:	60f8      	str	r0, [r7, #12]
 8006276:	60b9      	str	r1, [r7, #8]
 8006278:	4613      	mov	r3, r2
 800627a:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8006280:	88fb      	ldrh	r3, [r7, #6]
 8006282:	089b      	lsrs	r3, r3, #2
 8006284:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 8006286:	e008      	b.n	800629a <_ff_pull_const_addr+0x2c>
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	61bb      	str	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	3304      	adds	r3, #4
 8006298:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 800629a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800629c:	1e5a      	subs	r2, r3, #1
 800629e:	84fa      	strh	r2, [r7, #38]	; 0x26
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1f1      	bne.n	8006288 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 80062a4:	88fb      	ldrh	r3, [r7, #6]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	f003 0303 	and.w	r3, r3, #3
 80062ac:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80062ae:	7ffb      	ldrb	r3, [r7, #31]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00b      	beq.n	80062cc <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 80062b8:	7ffa      	ldrb	r2, [r7, #31]
 80062ba:	f107 0314 	add.w	r3, r7, #20
 80062be:	68b9      	ldr	r1, [r7, #8]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f004 f8ed 	bl	800a4a0 <memcpy>

    *reg_tx = tmp32;
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	601a      	str	r2, [r3, #0]
  }
}
 80062cc:	bf00      	nop
 80062ce:	3728      	adds	r7, #40	; 0x28
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <_ff_push>:

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	4613      	mov	r3, r2
 80062e0:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	88fa      	ldrh	r2, [r7, #6]
 80062e8:	68f9      	ldr	r1, [r7, #12]
 80062ea:	88c9      	ldrh	r1, [r1, #6]
 80062ec:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80062f0:	b289      	uxth	r1, r1
 80062f2:	fb01 f202 	mul.w	r2, r1, r2
 80062f6:	1898      	adds	r0, r3, r2
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	88db      	ldrh	r3, [r3, #6]
 80062fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006300:	b29b      	uxth	r3, r3
 8006302:	461a      	mov	r2, r3
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	f004 f8cb 	bl	800a4a0 <memcpy>
}
 800630a:	bf00      	nop
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b08e      	sub	sp, #56	; 0x38
 8006316:	af00      	add	r7, sp, #0
 8006318:	60f8      	str	r0, [r7, #12]
 800631a:	60b9      	str	r1, [r7, #8]
 800631c:	4611      	mov	r1, r2
 800631e:	461a      	mov	r2, r3
 8006320:	460b      	mov	r3, r1
 8006322:	80fb      	strh	r3, [r7, #6]
 8006324:	4613      	mov	r3, r2
 8006326:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	889a      	ldrh	r2, [r3, #4]
 800632c:	88bb      	ldrh	r3, [r7, #4]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count;
 8006332:	88fa      	ldrh	r2, [r7, #6]
 8006334:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	88db      	ldrh	r3, [r3, #6]
 800633e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006342:	b29b      	uxth	r3, r3
 8006344:	461a      	mov	r2, r3
 8006346:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006348:	fb13 f302 	smulbb	r3, r3, r2
 800634c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	88db      	ldrh	r3, [r3, #6]
 8006352:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006356:	b29b      	uxth	r3, r3
 8006358:	461a      	mov	r2, r3
 800635a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800635c:	fb13 f302 	smulbb	r3, r3, r2
 8006360:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	88ba      	ldrh	r2, [r7, #4]
 8006368:	68f9      	ldr	r1, [r7, #12]
 800636a:	88c9      	ldrh	r1, [r1, #6]
 800636c:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006370:	b289      	uxth	r1, r1
 8006372:	fb01 f202 	mul.w	r2, r1, r2
 8006376:	4413      	add	r3, r2
 8006378:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 800637a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <_ff_push_n+0x76>
 8006382:	2b01      	cmp	r3, #1
 8006384:	d022      	beq.n	80063cc <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
  }
}
 8006386:	e09e      	b.n	80064c6 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8006388:	88fa      	ldrh	r2, [r7, #6]
 800638a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800638c:	429a      	cmp	r2, r3
 800638e:	d80d      	bhi.n	80063ac <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8006390:	88fb      	ldrh	r3, [r7, #6]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	88d2      	ldrh	r2, [r2, #6]
 8006396:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800639a:	b292      	uxth	r2, r2
 800639c:	fb02 f303 	mul.w	r3, r2, r3
 80063a0:	461a      	mov	r2, r3
 80063a2:	68b9      	ldr	r1, [r7, #8]
 80063a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063a6:	f004 f87b 	bl	800a4a0 <memcpy>
      break;
 80063aa:	e08c      	b.n	80064c6 <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 80063ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063ae:	461a      	mov	r2, r3
 80063b0:	68b9      	ldr	r1, [r7, #8]
 80063b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063b4:	f004 f874 	bl	800a4a0 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	4413      	add	r3, r2
 80063c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80063c4:	4619      	mov	r1, r3
 80063c6:	f004 f86b 	bl	800a4a0 <memcpy>
      break;
 80063ca:	e07c      	b.n	80064c6 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 80063cc:	88fa      	ldrh	r2, [r7, #6]
 80063ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d80f      	bhi.n	80063f4 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	88db      	ldrh	r3, [r3, #6]
 80063d8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80063dc:	b29b      	uxth	r3, r3
 80063de:	461a      	mov	r2, r3
 80063e0:	88fb      	ldrh	r3, [r7, #6]
 80063e2:	fb13 f302 	smulbb	r3, r3, r2
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	461a      	mov	r2, r3
 80063ea:	68b9      	ldr	r1, [r7, #8]
 80063ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063ee:	f7ff ff0a 	bl	8006206 <_ff_push_const_addr>
      break;
 80063f2:	e067      	b.n	80064c4 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 80063f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063f6:	f023 0303 	bic.w	r3, r3, #3
 80063fa:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 80063fc:	8c3b      	ldrh	r3, [r7, #32]
 80063fe:	461a      	mov	r2, r3
 8006400:	68b9      	ldr	r1, [r7, #8]
 8006402:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006404:	f7ff feff 	bl	8006206 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8006408:	8c3b      	ldrh	r3, [r7, #32]
 800640a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800640c:	4413      	add	r3, r2
 800640e:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 8006410:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006412:	b2db      	uxtb	r3, r3
 8006414:	f003 0303 	and.w	r3, r3, #3
 8006418:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 800641c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006420:	2b00      	cmp	r3, #0
 8006422:	d043      	beq.n	80064ac <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8006428:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800642c:	b29b      	uxth	r3, r3
 800642e:	f1c3 0304 	rsb	r3, r3, #4
 8006432:	b29a      	uxth	r2, r3
 8006434:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006436:	837b      	strh	r3, [r7, #26]
 8006438:	4613      	mov	r3, r2
 800643a:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800643c:	8b7a      	ldrh	r2, [r7, #26]
 800643e:	8b3b      	ldrh	r3, [r7, #24]
 8006440:	4293      	cmp	r3, r2
 8006442:	bf28      	it	cs
 8006444:	4613      	movcs	r3, r2
 8006446:	b29b      	uxth	r3, r3
 8006448:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 800644c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006450:	b29b      	uxth	r3, r3
 8006452:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32 = *rx_fifo;
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 800645e:	f107 0314 	add.w	r3, r7, #20
 8006462:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8006464:	e007      	b.n	8006476 <_ff_push_n+0x164>
 8006466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006468:	1c53      	adds	r3, r2, #1
 800646a:	62bb      	str	r3, [r7, #40]	; 0x28
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	1c59      	adds	r1, r3, #1
 8006470:	6339      	str	r1, [r7, #48]	; 0x30
 8006472:	7812      	ldrb	r2, [r2, #0]
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800647a:	1e5a      	subs	r2, r3, #1
 800647c:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1f0      	bne.n	8006466 <_ff_push_n+0x154>
          ff_buf = f->buffer;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 800648a:	e007      	b.n	800649c <_ff_push_n+0x18a>
 800648c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800648e:	1c53      	adds	r3, r2, #1
 8006490:	62bb      	str	r3, [r7, #40]	; 0x28
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	1c59      	adds	r1, r3, #1
 8006496:	6339      	str	r1, [r7, #48]	; 0x30
 8006498:	7812      	ldrb	r2, [r2, #0]
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80064a0:	1e5a      	subs	r2, r3, #1
 80064a2:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1f0      	bne.n	800648c <_ff_push_n+0x17a>
 80064aa:	e002      	b.n	80064b2 <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 80064b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d005      	beq.n	80064c4 <_ff_push_n+0x1b2>
 80064b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80064ba:	461a      	mov	r2, r3
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064c0:	f7ff fea1 	bl	8006206 <_ff_push_const_addr>
      break;
 80064c4:	bf00      	nop
}
 80064c6:	bf00      	nop
 80064c8:	3738      	adds	r7, #56	; 0x38
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b084      	sub	sp, #16
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	60f8      	str	r0, [r7, #12]
 80064d6:	60b9      	str	r1, [r7, #8]
 80064d8:	4613      	mov	r3, r2
 80064da:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	88fa      	ldrh	r2, [r7, #6]
 80064e2:	68f9      	ldr	r1, [r7, #12]
 80064e4:	88c9      	ldrh	r1, [r1, #6]
 80064e6:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80064ea:	b289      	uxth	r1, r1
 80064ec:	fb01 f202 	mul.w	r2, r1, r2
 80064f0:	1899      	adds	r1, r3, r2
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	88db      	ldrh	r3, [r3, #6]
 80064f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	461a      	mov	r2, r3
 80064fe:	68b8      	ldr	r0, [r7, #8]
 8006500:	f003 ffce 	bl	800a4a0 <memcpy>
}
 8006504:	bf00      	nop
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b08e      	sub	sp, #56	; 0x38
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	4611      	mov	r1, r2
 8006518:	461a      	mov	r2, r3
 800651a:	460b      	mov	r3, r1
 800651c:	80fb      	strh	r3, [r7, #6]
 800651e:	4613      	mov	r3, r2
 8006520:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	889a      	ldrh	r2, [r3, #4]
 8006526:	88bb      	ldrh	r3, [r7, #4]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800652c:	88fa      	ldrh	r2, [r7, #6]
 800652e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	88db      	ldrh	r3, [r3, #6]
 8006538:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800653c:	b29b      	uxth	r3, r3
 800653e:	461a      	mov	r2, r3
 8006540:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006542:	fb13 f302 	smulbb	r3, r3, r2
 8006546:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	88db      	ldrh	r3, [r3, #6]
 800654c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006550:	b29b      	uxth	r3, r3
 8006552:	461a      	mov	r2, r3
 8006554:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006556:	fb13 f302 	smulbb	r3, r3, r2
 800655a:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	88ba      	ldrh	r2, [r7, #4]
 8006562:	68f9      	ldr	r1, [r7, #12]
 8006564:	88c9      	ldrh	r1, [r1, #6]
 8006566:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800656a:	b289      	uxth	r1, r1
 800656c:	fb01 f202 	mul.w	r2, r1, r2
 8006570:	4413      	add	r3, r2
 8006572:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8006574:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <_ff_pull_n+0x76>
 800657c:	2b01      	cmp	r3, #1
 800657e:	d022      	beq.n	80065c6 <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;

    default: break;
 8006580:	e0a0      	b.n	80066c4 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8006582:	88fa      	ldrh	r2, [r7, #6]
 8006584:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006586:	429a      	cmp	r2, r3
 8006588:	d80d      	bhi.n	80065a6 <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 800658a:	88fb      	ldrh	r3, [r7, #6]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	88d2      	ldrh	r2, [r2, #6]
 8006590:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006594:	b292      	uxth	r2, r2
 8006596:	fb02 f303 	mul.w	r3, r2, r3
 800659a:	461a      	mov	r2, r3
 800659c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800659e:	68b8      	ldr	r0, [r7, #8]
 80065a0:	f003 ff7e 	bl	800a4a0 <memcpy>
    break;
 80065a4:	e08e      	b.n	80066c4 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 80065a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065a8:	461a      	mov	r2, r3
 80065aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065ac:	68b8      	ldr	r0, [r7, #8]
 80065ae:	f003 ff77 	bl	800a4a0 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 80065b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	18d0      	adds	r0, r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80065be:	4619      	mov	r1, r3
 80065c0:	f003 ff6e 	bl	800a4a0 <memcpy>
    break;
 80065c4:	e07e      	b.n	80066c4 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 80065c6:	88fa      	ldrh	r2, [r7, #6]
 80065c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d80f      	bhi.n	80065ee <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	88db      	ldrh	r3, [r3, #6]
 80065d2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	88fb      	ldrh	r3, [r7, #6]
 80065dc:	fb13 f302 	smulbb	r3, r3, r2
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	461a      	mov	r2, r3
 80065e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065e6:	68b8      	ldr	r0, [r7, #8]
 80065e8:	f7ff fe41 	bl	800626e <_ff_pull_const_addr>
    break;
 80065ec:	e069      	b.n	80066c2 <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 80065ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065f0:	f023 0303 	bic.w	r3, r3, #3
 80065f4:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 80065f6:	8c3b      	ldrh	r3, [r7, #32]
 80065f8:	461a      	mov	r2, r3
 80065fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065fc:	68b8      	ldr	r0, [r7, #8]
 80065fe:	f7ff fe36 	bl	800626e <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 8006602:	8c3b      	ldrh	r3, [r7, #32]
 8006604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006606:	4413      	add	r3, r2
 8006608:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 800660a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800660c:	b2db      	uxtb	r3, r3
 800660e:	f003 0303 	and.w	r3, r3, #3
 8006612:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 8006616:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800661a:	2b00      	cmp	r3, #0
 800661c:	d045      	beq.n	80066aa <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8006622:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006626:	b29b      	uxth	r3, r3
 8006628:	f1c3 0304 	rsb	r3, r3, #4
 800662c:	b29a      	uxth	r2, r3
 800662e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006630:	837b      	strh	r3, [r7, #26]
 8006632:	4613      	mov	r3, r2
 8006634:	833b      	strh	r3, [r7, #24]
 8006636:	8b7a      	ldrh	r2, [r7, #26]
 8006638:	8b3b      	ldrh	r3, [r7, #24]
 800663a:	4293      	cmp	r3, r2
 800663c:	bf28      	it	cs
 800663e:	4613      	movcs	r3, r2
 8006640:	b29b      	uxth	r3, r3
 8006642:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 8006646:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800664a:	b29b      	uxth	r3, r3
 800664c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32=0;
 8006652:	2300      	movs	r3, #0
 8006654:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8006656:	f107 0314 	add.w	r3, r7, #20
 800665a:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 800665c:	e007      	b.n	800666e <_ff_pull_n+0x162>
 800665e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006660:	1c53      	adds	r3, r2, #1
 8006662:	633b      	str	r3, [r7, #48]	; 0x30
 8006664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006666:	1c59      	adds	r1, r3, #1
 8006668:	62b9      	str	r1, [r7, #40]	; 0x28
 800666a:	7812      	ldrb	r2, [r2, #0]
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006672:	1e5a      	subs	r2, r3, #1
 8006674:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1f0      	bne.n	800665e <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 8006682:	e007      	b.n	8006694 <_ff_pull_n+0x188>
 8006684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006686:	1c53      	adds	r3, r2, #1
 8006688:	633b      	str	r3, [r7, #48]	; 0x30
 800668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668c:	1c59      	adds	r1, r3, #1
 800668e:	62b9      	str	r1, [r7, #40]	; 0x28
 8006690:	7812      	ldrb	r2, [r2, #0]
 8006692:	701a      	strb	r2, [r3, #0]
 8006694:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006698:	1e5a      	subs	r2, r3, #1
 800669a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1f0      	bne.n	8006684 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	e002      	b.n	80066b0 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 80066b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d005      	beq.n	80066c2 <_ff_pull_n+0x1b6>
 80066b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066b8:	461a      	mov	r2, r3
 80066ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066bc:	68b8      	ldr	r0, [r7, #8]
 80066be:	f7ff fdd6 	bl	800626e <_ff_pull_const_addr>
    break;
 80066c2:	bf00      	nop
  }
}
 80066c4:	bf00      	nop
 80066c6:	3738      	adds	r7, #56	; 0x38
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	4603      	mov	r3, r0
 80066d4:	80fb      	strh	r3, [r7, #6]
 80066d6:	460b      	mov	r3, r1
 80066d8:	80bb      	strh	r3, [r7, #4]
 80066da:	4613      	mov	r3, r2
 80066dc:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 80066de:	88ba      	ldrh	r2, [r7, #4]
 80066e0:	887b      	ldrh	r3, [r7, #2]
 80066e2:	4413      	add	r3, r2
 80066e4:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 80066e6:	88ba      	ldrh	r2, [r7, #4]
 80066e8:	89fb      	ldrh	r3, [r7, #14]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d804      	bhi.n	80066f8 <advance_index+0x2c>
 80066ee:	89fa      	ldrh	r2, [r7, #14]
 80066f0:	88fb      	ldrh	r3, [r7, #6]
 80066f2:	005b      	lsls	r3, r3, #1
 80066f4:	429a      	cmp	r2, r3
 80066f6:	db08      	blt.n	800670a <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 80066f8:	88fb      	ldrh	r3, [r7, #6]
 80066fa:	005b      	lsls	r3, r3, #1
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	425b      	negs	r3, r3
 8006700:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8006702:	89fa      	ldrh	r2, [r7, #14]
 8006704:	89bb      	ldrh	r3, [r7, #12]
 8006706:	4413      	add	r3, r2
 8006708:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 800670a:	89fb      	ldrh	r3, [r7, #14]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08a      	sub	sp, #40	; 0x28
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	4611      	mov	r1, r2
 8006724:	461a      	mov	r2, r3
 8006726:	460b      	mov	r3, r1
 8006728:	80fb      	strh	r3, [r7, #6]
 800672a:	4613      	mov	r3, r2
 800672c:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	889b      	ldrh	r3, [r3, #4]
 8006732:	847b      	strh	r3, [r7, #34]	; 0x22
 8006734:	88fb      	ldrh	r3, [r7, #6]
 8006736:	843b      	strh	r3, [r7, #32]
 8006738:	88bb      	ldrh	r3, [r7, #4]
 800673a:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 800673c:	8c3a      	ldrh	r2, [r7, #32]
 800673e:	8bfb      	ldrh	r3, [r7, #30]
 8006740:	429a      	cmp	r2, r3
 8006742:	d304      	bcc.n	800674e <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8006744:	8c3a      	ldrh	r2, [r7, #32]
 8006746:	8bfb      	ldrh	r3, [r7, #30]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	b29b      	uxth	r3, r3
 800674c:	e008      	b.n	8006760 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800674e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006750:	005b      	lsls	r3, r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	8c39      	ldrh	r1, [r7, #32]
 8006756:	8bfb      	ldrh	r3, [r7, #30]
 8006758:	1acb      	subs	r3, r1, r3
 800675a:	b29b      	uxth	r3, r3
 800675c:	4413      	add	r3, r2
 800675e:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006760:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 8006762:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <_tu_fifo_peek+0x54>
 8006768:	2300      	movs	r3, #0
 800676a:	e037      	b.n	80067dc <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	889b      	ldrh	r3, [r3, #4]
 8006770:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006772:	429a      	cmp	r2, r3
 8006774:	d91b      	bls.n	80067ae <_tu_fifo_peek+0x96>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	88fb      	ldrh	r3, [r7, #6]
 800677c:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	889b      	ldrh	r3, [r3, #4]
 8006782:	8afa      	ldrh	r2, [r7, #22]
 8006784:	429a      	cmp	r2, r3
 8006786:	d305      	bcc.n	8006794 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	889b      	ldrh	r3, [r3, #4]
 800678c:	8afa      	ldrh	r2, [r7, #22]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	82bb      	strh	r3, [r7, #20]
 8006792:	e004      	b.n	800679e <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	889a      	ldrh	r2, [r3, #4]
 8006798:	8afb      	ldrh	r3, [r7, #22]
 800679a:	4413      	add	r3, r2
 800679c:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	8aba      	ldrh	r2, [r7, #20]
 80067a2:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 80067a4:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 80067a6:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	889b      	ldrh	r3, [r3, #4]
 80067ac:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	889b      	ldrh	r3, [r3, #4]
 80067b2:	827b      	strh	r3, [r7, #18]
 80067b4:	88bb      	ldrh	r3, [r7, #4]
 80067b6:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80067b8:	e003      	b.n	80067c2 <_tu_fifo_peek+0xaa>
 80067ba:	8a3a      	ldrh	r2, [r7, #16]
 80067bc:	8a7b      	ldrh	r3, [r7, #18]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	823b      	strh	r3, [r7, #16]
 80067c2:	8a7a      	ldrh	r2, [r7, #18]
 80067c4:	8a3b      	ldrh	r3, [r7, #16]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d9f7      	bls.n	80067ba <_tu_fifo_peek+0xa2>
  return idx;
 80067ca:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80067cc:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 80067ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067d0:	461a      	mov	r2, r3
 80067d2:	68b9      	ldr	r1, [r7, #8]
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f7ff fe7a 	bl	80064ce <_ff_pull>

  return true;
 80067da:	2301      	movs	r3, #1
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3728      	adds	r7, #40	; 0x28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08c      	sub	sp, #48	; 0x30
 80067e8:	af02      	add	r7, sp, #8
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	4611      	mov	r1, r2
 80067f0:	461a      	mov	r2, r3
 80067f2:	460b      	mov	r3, r1
 80067f4:	80fb      	strh	r3, [r7, #6]
 80067f6:	4613      	mov	r3, r2
 80067f8:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	889b      	ldrh	r3, [r3, #4]
 80067fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8006800:	88bb      	ldrh	r3, [r7, #4]
 8006802:	843b      	strh	r3, [r7, #32]
 8006804:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006806:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8006808:	8c3a      	ldrh	r2, [r7, #32]
 800680a:	8bfb      	ldrh	r3, [r7, #30]
 800680c:	429a      	cmp	r2, r3
 800680e:	d304      	bcc.n	800681a <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8006810:	8c3a      	ldrh	r2, [r7, #32]
 8006812:	8bfb      	ldrh	r3, [r7, #30]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	b29b      	uxth	r3, r3
 8006818:	e008      	b.n	800682c <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800681a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	b29a      	uxth	r2, r3
 8006820:	8c39      	ldrh	r1, [r7, #32]
 8006822:	8bfb      	ldrh	r3, [r7, #30]
 8006824:	1acb      	subs	r3, r1, r3
 8006826:	b29b      	uxth	r3, r3
 8006828:	4413      	add	r3, r2
 800682a:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800682c:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 800682e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <_tu_fifo_peek_n+0x54>
 8006834:	2300      	movs	r3, #0
 8006836:	e041      	b.n	80068bc <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	889b      	ldrh	r3, [r3, #4]
 800683c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800683e:	429a      	cmp	r2, r3
 8006840:	d91b      	bls.n	800687a <_tu_fifo_peek_n+0x96>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	61bb      	str	r3, [r7, #24]
 8006846:	88bb      	ldrh	r3, [r7, #4]
 8006848:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	889b      	ldrh	r3, [r3, #4]
 800684e:	8afa      	ldrh	r2, [r7, #22]
 8006850:	429a      	cmp	r2, r3
 8006852:	d305      	bcc.n	8006860 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	889b      	ldrh	r3, [r3, #4]
 8006858:	8afa      	ldrh	r2, [r7, #22]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	82bb      	strh	r3, [r7, #20]
 800685e:	e004      	b.n	800686a <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	889a      	ldrh	r2, [r3, #4]
 8006864:	8afb      	ldrh	r3, [r7, #22]
 8006866:	4413      	add	r3, r2
 8006868:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	8aba      	ldrh	r2, [r7, #20]
 800686e:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8006870:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8006872:	863b      	strh	r3, [r7, #48]	; 0x30
    cnt = f->depth;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	889b      	ldrh	r3, [r3, #4]
 8006878:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 800687a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800687c:	88fb      	ldrh	r3, [r7, #6]
 800687e:	429a      	cmp	r2, r3
 8006880:	d201      	bcs.n	8006886 <_tu_fifo_peek_n+0xa2>
 8006882:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006884:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	889b      	ldrh	r3, [r3, #4]
 800688a:	827b      	strh	r3, [r7, #18]
 800688c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800688e:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8006890:	e003      	b.n	800689a <_tu_fifo_peek_n+0xb6>
 8006892:	8a3a      	ldrh	r2, [r7, #16]
 8006894:	8a7b      	ldrh	r3, [r7, #18]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	823b      	strh	r3, [r7, #16]
 800689a:	8a7a      	ldrh	r2, [r7, #18]
 800689c:	8a3b      	ldrh	r3, [r7, #16]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d9f7      	bls.n	8006892 <_tu_fifo_peek_n+0xae>
  return idx;
 80068a2:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80068a4:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 80068a6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80068a8:	88fa      	ldrh	r2, [r7, #6]
 80068aa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	460b      	mov	r3, r1
 80068b2:	68b9      	ldr	r1, [r7, #8]
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f7ff fe29 	bl	800650c <_ff_pull_n>

  return n;
 80068ba:	88fb      	ldrh	r3, [r7, #6]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3728      	adds	r7, #40	; 0x28
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b092      	sub	sp, #72	; 0x48
 80068c8:	af02      	add	r7, sp, #8
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	4611      	mov	r1, r2
 80068d0:	461a      	mov	r2, r3
 80068d2:	460b      	mov	r3, r1
 80068d4:	80fb      	strh	r3, [r7, #6]
 80068d6:	4613      	mov	r3, r2
 80068d8:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 80068da:	88fb      	ldrh	r3, [r7, #6]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <_tu_fifo_write_n+0x20>
 80068e0:	2300      	movs	r3, #0
 80068e2:	e0bc      	b.n	8006a5e <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	891b      	ldrh	r3, [r3, #8]
 80068e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t rd_idx = f->rd_idx;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	895b      	ldrh	r3, [r3, #10]
 80068ee:	86fb      	strh	r3, [r7, #54]	; 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	63bb      	str	r3, [r7, #56]	; 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	79db      	ldrb	r3, [r3, #7]
 80068f8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	f083 0301 	eor.w	r3, r3, #1
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d036      	beq.n	8006976 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	889b      	ldrh	r3, [r3, #4]
 800690c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800690e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006910:	853b      	strh	r3, [r7, #40]	; 0x28
 8006912:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006914:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006916:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006918:	84bb      	strh	r3, [r7, #36]	; 0x24
 800691a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800691c:	847b      	strh	r3, [r7, #34]	; 0x22
 800691e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006920:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 8006922:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006924:	8c3b      	ldrh	r3, [r7, #32]
 8006926:	429a      	cmp	r2, r3
 8006928:	d304      	bcc.n	8006934 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 800692a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800692c:	8c3b      	ldrh	r3, [r7, #32]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	b29b      	uxth	r3, r3
 8006932:	e008      	b.n	8006946 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006934:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006936:	005b      	lsls	r3, r3, #1
 8006938:	b29a      	uxth	r2, r3
 800693a:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800693c:	8c3b      	ldrh	r3, [r7, #32]
 800693e:	1acb      	subs	r3, r1, r3
 8006940:	b29b      	uxth	r3, r3
 8006942:	4413      	add	r3, r2
 8006944:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8006946:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8006948:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800694a:	8bfb      	ldrh	r3, [r7, #30]
 800694c:	429a      	cmp	r2, r3
 800694e:	d904      	bls.n	800695a <_tu_fifo_write_n+0x96>
 8006950:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006952:	8bfb      	ldrh	r3, [r7, #30]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	b29b      	uxth	r3, r3
 8006958:	e000      	b.n	800695c <_tu_fifo_write_n+0x98>
 800695a:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 800695c:	867b      	strh	r3, [r7, #50]	; 0x32
 800695e:	88fb      	ldrh	r3, [r7, #6]
 8006960:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006962:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006964:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006966:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006968:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800696a:	4293      	cmp	r3, r2
 800696c:	bf28      	it	cs
 800696e:	4613      	movcs	r3, r2
 8006970:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 8006972:	80fb      	strh	r3, [r7, #6]
 8006974:	e04b      	b.n	8006a0e <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	889b      	ldrh	r3, [r3, #4]
 800697a:	88fa      	ldrh	r2, [r7, #6]
 800697c:	429a      	cmp	r2, r3
 800697e:	d317      	bcc.n	80069b0 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8006980:	797b      	ldrb	r3, [r7, #5]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10e      	bne.n	80069a4 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8006986:	88fb      	ldrh	r3, [r7, #6]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	8892      	ldrh	r2, [r2, #4]
 800698c:	1a9b      	subs	r3, r3, r2
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	88d2      	ldrh	r2, [r2, #6]
 8006992:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006996:	b292      	uxth	r2, r2
 8006998:	fb02 f303 	mul.w	r3, r2, r3
 800699c:	461a      	mov	r2, r3
 800699e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a0:	4413      	add	r3, r2
 80069a2:	63bb      	str	r3, [r7, #56]	; 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	889b      	ldrh	r3, [r3, #4]
 80069a8:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 80069aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80069ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80069ae:	e02e      	b.n	8006a0e <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	889b      	ldrh	r3, [r3, #4]
 80069b4:	83bb      	strh	r3, [r7, #28]
 80069b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80069b8:	837b      	strh	r3, [r7, #26]
 80069ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80069bc:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 80069be:	8b7a      	ldrh	r2, [r7, #26]
 80069c0:	8b3b      	ldrh	r3, [r7, #24]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d304      	bcc.n	80069d0 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 80069c6:	8b7a      	ldrh	r2, [r7, #26]
 80069c8:	8b3b      	ldrh	r3, [r7, #24]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	e008      	b.n	80069e2 <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80069d0:	8bbb      	ldrh	r3, [r7, #28]
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	8b79      	ldrh	r1, [r7, #26]
 80069d8:	8b3b      	ldrh	r3, [r7, #24]
 80069da:	1acb      	subs	r3, r1, r3
 80069dc:	b29b      	uxth	r3, r3
 80069de:	4413      	add	r3, r2
 80069e0:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 80069e2:	86bb      	strh	r3, [r7, #52]	; 0x34
      if (overflowable_count + n >= 2*f->depth)
 80069e4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80069e6:	88fb      	ldrh	r3, [r7, #6]
 80069e8:	441a      	add	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	889b      	ldrh	r3, [r3, #4]
 80069ee:	005b      	lsls	r3, r3, #1
 80069f0:	429a      	cmp	r2, r3
 80069f2:	db0c      	blt.n	8006a0e <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8898      	ldrh	r0, [r3, #4]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	889a      	ldrh	r2, [r3, #4]
 80069fc:	88fb      	ldrh	r3, [r7, #6]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a04:	4619      	mov	r1, r3
 8006a06:	f7ff fe61 	bl	80066cc <advance_index>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 8006a0e:	88fb      	ldrh	r3, [r7, #6]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d023      	beq.n	8006a5c <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	889b      	ldrh	r3, [r3, #4]
 8006a18:	82fb      	strh	r3, [r7, #22]
 8006a1a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006a1c:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8006a1e:	e003      	b.n	8006a28 <_tu_fifo_write_n+0x164>
 8006a20:	8aba      	ldrh	r2, [r7, #20]
 8006a22:	8afb      	ldrh	r3, [r7, #22]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	82bb      	strh	r3, [r7, #20]
 8006a28:	8afa      	ldrh	r2, [r7, #22]
 8006a2a:	8abb      	ldrh	r3, [r7, #20]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d9f7      	bls.n	8006a20 <_tu_fifo_write_n+0x15c>
  return idx;
 8006a30:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006a32:	863b      	strh	r3, [r7, #48]	; 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8006a34:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8006a36:	88fa      	ldrh	r2, [r7, #6]
 8006a38:	797b      	ldrb	r3, [r7, #5]
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f7ff fc66 	bl	8006312 <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	889b      	ldrh	r3, [r3, #4]
 8006a4a:	88fa      	ldrh	r2, [r7, #6]
 8006a4c:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7ff fe3c 	bl	80066cc <advance_index>
 8006a54:	4603      	mov	r3, r0
 8006a56:	461a      	mov	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8006a5c:	88fb      	ldrh	r3, [r7, #6]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3740      	adds	r7, #64	; 0x40
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b086      	sub	sp, #24
 8006a6a:	af02      	add	r7, sp, #8
 8006a6c:	60f8      	str	r0, [r7, #12]
 8006a6e:	60b9      	str	r1, [r7, #8]
 8006a70:	4611      	mov	r1, r2
 8006a72:	461a      	mov	r2, r3
 8006a74:	460b      	mov	r3, r1
 8006a76:	80fb      	strh	r3, [r7, #6]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	891b      	ldrh	r3, [r3, #8]
 8006a80:	b298      	uxth	r0, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	895b      	ldrh	r3, [r3, #10]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	88f9      	ldrh	r1, [r7, #6]
 8006a8a:	797a      	ldrb	r2, [r7, #5]
 8006a8c:	9201      	str	r2, [sp, #4]
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	4603      	mov	r3, r0
 8006a92:	460a      	mov	r2, r1
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f7ff fea4 	bl	80067e4 <_tu_fifo_peek_n>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8898      	ldrh	r0, [r3, #4]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	895b      	ldrh	r3, [r3, #10]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	88fa      	ldrh	r2, [r7, #6]
 8006aac:	4619      	mov	r1, r3
 8006aae:	f7ff fe0d 	bl	80066cc <advance_index>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8006aba:	88fb      	ldrh	r3, [r7, #6]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	8899      	ldrh	r1, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	891b      	ldrh	r3, [r3, #8]
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	895b      	ldrh	r3, [r3, #10]
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	8279      	strh	r1, [r7, #18]
 8006ade:	823a      	strh	r2, [r7, #16]
 8006ae0:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 8006ae2:	8a3a      	ldrh	r2, [r7, #16]
 8006ae4:	89fb      	ldrh	r3, [r7, #14]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d304      	bcc.n	8006af4 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8006aea:	8a3a      	ldrh	r2, [r7, #16]
 8006aec:	89fb      	ldrh	r3, [r7, #14]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	e008      	b.n	8006b06 <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006af4:	8a7b      	ldrh	r3, [r7, #18]
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	8a39      	ldrh	r1, [r7, #16]
 8006afc:	89fb      	ldrh	r3, [r7, #14]
 8006afe:	1acb      	subs	r3, r1, r3
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	4413      	add	r3, r2
 8006b04:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	8892      	ldrh	r2, [r2, #4]
 8006b0a:	82fb      	strh	r3, [r7, #22]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	82bb      	strh	r3, [r7, #20]
 8006b10:	8afa      	ldrh	r2, [r7, #22]
 8006b12:	8abb      	ldrh	r3, [r7, #20]
 8006b14:	4293      	cmp	r3, r2
 8006b16:	bf28      	it	cs
 8006b18:	4613      	movcs	r3, r2
 8006b1a:	b29b      	uxth	r3, r3
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	371c      	adds	r7, #28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	891b      	ldrh	r3, [r3, #8]
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	895b      	ldrh	r3, [r3, #10]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	bf0c      	ite	eq
 8006b40:	2301      	moveq	r3, #1
 8006b42:	2300      	movne	r3, #0
 8006b44:	b2db      	uxtb	r3, r3
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b085      	sub	sp, #20
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	8899      	ldrh	r1, [r3, #4]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	891b      	ldrh	r3, [r3, #8]
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	895b      	ldrh	r3, [r3, #10]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	81f9      	strh	r1, [r7, #14]
 8006b6c:	81ba      	strh	r2, [r7, #12]
 8006b6e:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8006b70:	89ba      	ldrh	r2, [r7, #12]
 8006b72:	897b      	ldrh	r3, [r7, #10]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d304      	bcc.n	8006b82 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8006b78:	89ba      	ldrh	r2, [r7, #12]
 8006b7a:	897b      	ldrh	r3, [r7, #10]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	e008      	b.n	8006b94 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006b82:	89fb      	ldrh	r3, [r7, #14]
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	89b9      	ldrh	r1, [r7, #12]
 8006b8a:	897b      	ldrh	r3, [r7, #10]
 8006b8c:	1acb      	subs	r3, r1, r3
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	4413      	add	r3, r2
 8006b92:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	8892      	ldrh	r2, [r2, #4]
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	bf2c      	ite	cs
 8006b9c:	2301      	movcs	r3, #1
 8006b9e:	2300      	movcc	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b087      	sub	sp, #28
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	8899      	ldrh	r1, [r3, #4]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	891b      	ldrh	r3, [r3, #8]
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	895b      	ldrh	r3, [r3, #10]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	82f9      	strh	r1, [r7, #22]
 8006bc8:	82ba      	strh	r2, [r7, #20]
 8006bca:	827b      	strh	r3, [r7, #18]
 8006bcc:	8afb      	ldrh	r3, [r7, #22]
 8006bce:	823b      	strh	r3, [r7, #16]
 8006bd0:	8abb      	ldrh	r3, [r7, #20]
 8006bd2:	81fb      	strh	r3, [r7, #14]
 8006bd4:	8a7b      	ldrh	r3, [r7, #18]
 8006bd6:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8006bd8:	89fa      	ldrh	r2, [r7, #14]
 8006bda:	89bb      	ldrh	r3, [r7, #12]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d304      	bcc.n	8006bea <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8006be0:	89fa      	ldrh	r2, [r7, #14]
 8006be2:	89bb      	ldrh	r3, [r7, #12]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	e008      	b.n	8006bfc <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006bea:	8a3b      	ldrh	r3, [r7, #16]
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	89f9      	ldrh	r1, [r7, #14]
 8006bf2:	89bb      	ldrh	r3, [r7, #12]
 8006bf4:	1acb      	subs	r3, r1, r3
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	4413      	add	r3, r2
 8006bfa:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8006bfc:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8006bfe:	8afa      	ldrh	r2, [r7, #22]
 8006c00:	897b      	ldrh	r3, [r7, #10]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d904      	bls.n	8006c10 <tu_fifo_remaining+0x62>
 8006c06:	8afa      	ldrh	r2, [r7, #22]
 8006c08:	897b      	ldrh	r3, [r7, #10]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	e000      	b.n	8006c12 <tu_fifo_remaining+0x64>
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	371c      	adds	r7, #28
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
 8006c26:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	891b      	ldrh	r3, [r3, #8]
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	895b      	ldrh	r3, [r3, #10]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7ff fd6e 	bl	8006718 <_tu_fifo_peek>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	8898      	ldrh	r0, [r3, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	895b      	ldrh	r3, [r3, #10]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	7bfa      	ldrb	r2, [r7, #15]
 8006c4c:	b292      	uxth	r2, r2
 8006c4e:	4619      	mov	r1, r3
 8006c50:	f7ff fd3c 	bl	80066cc <advance_index>
 8006c54:	4603      	mov	r3, r0
 8006c56:	461a      	mov	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b084      	sub	sp, #16
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	60f8      	str	r0, [r7, #12]
 8006c6e:	60b9      	str	r1, [r7, #8]
 8006c70:	4613      	mov	r3, r2
 8006c72:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8006c74:	88fa      	ldrh	r2, [r7, #6]
 8006c76:	2300      	movs	r3, #0
 8006c78:	68b9      	ldr	r1, [r7, #8]
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f7ff fef3 	bl	8006a66 <_tu_fifo_read_n>
 8006c80:	4603      	mov	r3, r0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b084      	sub	sp, #16
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	4613      	mov	r3, r2
 8006c96:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8006c98:	88fa      	ldrh	r2, [r7, #6]
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	68b9      	ldr	r1, [r7, #8]
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f7ff fee1 	bl	8006a66 <_tu_fifo_read_n>
 8006ca4:	4603      	mov	r3, r0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b086      	sub	sp, #24
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	891b      	ldrh	r3, [r3, #8]
 8006cbc:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff ff47 	bl	8006b52 <tu_fifo_full>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00c      	beq.n	8006ce4 <tu_fifo_write+0x36>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	79db      	ldrb	r3, [r3, #7]
 8006cce:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	f083 0301 	eor.w	r3, r3, #1
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <tu_fifo_write+0x36>
  {
    ret = false;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	75fb      	strb	r3, [r7, #23]
 8006ce2:	e022      	b.n	8006d2a <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	889b      	ldrh	r3, [r3, #4]
 8006ce8:	823b      	strh	r3, [r7, #16]
 8006cea:	8abb      	ldrh	r3, [r7, #20]
 8006cec:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8006cee:	e003      	b.n	8006cf8 <tu_fifo_write+0x4a>
 8006cf0:	89fa      	ldrh	r2, [r7, #14]
 8006cf2:	8a3b      	ldrh	r3, [r7, #16]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	81fb      	strh	r3, [r7, #14]
 8006cf8:	8a3a      	ldrh	r2, [r7, #16]
 8006cfa:	89fb      	ldrh	r3, [r7, #14]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d9f7      	bls.n	8006cf0 <tu_fifo_write+0x42>
  return idx;
 8006d00:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006d02:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8006d04:	8a7b      	ldrh	r3, [r7, #18]
 8006d06:	461a      	mov	r2, r3
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7ff fae2 	bl	80062d4 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	889b      	ldrh	r3, [r3, #4]
 8006d14:	8ab9      	ldrh	r1, [r7, #20]
 8006d16:	2201      	movs	r2, #1
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7ff fcd7 	bl	80066cc <advance_index>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	461a      	mov	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	811a      	strh	r2, [r3, #8]

    ret = true;
 8006d26:	2301      	movs	r3, #1
 8006d28:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8006d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3718      	adds	r7, #24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8006d42:	88fa      	ldrh	r2, [r7, #6]
 8006d44:	2300      	movs	r3, #0
 8006d46:	68b9      	ldr	r1, [r7, #8]
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f7ff fdbb 	bl	80068c4 <_tu_fifo_write_n>
 8006d4e:	4603      	mov	r3, r0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	4613      	mov	r3, r2
 8006d64:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8006d66:	88fa      	ldrh	r2, [r7, #6]
 8006d68:	2301      	movs	r3, #1
 8006d6a:	68b9      	ldr	r1, [r7, #8]
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7ff fda9 	bl	80068c4 <_tu_fifo_write_n>
 8006d72:	4603      	mov	r3, r0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8006d90:	2301      	movs	r3, #1
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	460b      	mov	r3, r1
 8006da8:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	79d3      	ldrb	r3, [r2, #7]
 8006dae:	78f9      	ldrb	r1, [r7, #3]
 8006db0:	f361 13c7 	bfi	r3, r1, #7, #1
 8006db4:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8006db6:	2301      	movs	r3, #1
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <get_driver>:
tu_static uint8_t _app_driver_count = 0;

// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	4603      	mov	r3, r0
 8006dcc:	71fb      	strb	r3, [r7, #7]
  // Application drivers
  if ( usbd_app_driver_get_cb )
 8006dce:	4b14      	ldr	r3, [pc, #80]	; (8006e20 <get_driver+0x5c>)
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d012      	beq.n	8006dfa <get_driver+0x36>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8006dd4:	4b13      	ldr	r3, [pc, #76]	; (8006e24 <get_driver+0x60>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	79fa      	ldrb	r2, [r7, #7]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d208      	bcs.n	8006df0 <get_driver+0x2c>
 8006dde:	4b12      	ldr	r3, [pc, #72]	; (8006e28 <get_driver+0x64>)
 8006de0:	6819      	ldr	r1, [r3, #0]
 8006de2:	79fa      	ldrb	r2, [r7, #7]
 8006de4:	4613      	mov	r3, r2
 8006de6:	005b      	lsls	r3, r3, #1
 8006de8:	4413      	add	r3, r2
 8006dea:	00db      	lsls	r3, r3, #3
 8006dec:	440b      	add	r3, r1
 8006dee:	e010      	b.n	8006e12 <get_driver+0x4e>
    drvid -= _app_driver_count;
 8006df0:	4b0c      	ldr	r3, [pc, #48]	; (8006e24 <get_driver+0x60>)
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	79fa      	ldrb	r2, [r7, #7]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	71fb      	strb	r3, [r7, #7]
  }

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8006dfa:	79fb      	ldrb	r3, [r7, #7]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d807      	bhi.n	8006e10 <get_driver+0x4c>
 8006e00:	79fa      	ldrb	r2, [r7, #7]
 8006e02:	4613      	mov	r3, r2
 8006e04:	005b      	lsls	r3, r3, #1
 8006e06:	4413      	add	r3, r2
 8006e08:	00db      	lsls	r3, r3, #3
 8006e0a:	4a08      	ldr	r2, [pc, #32]	; (8006e2c <get_driver+0x68>)
 8006e0c:	4413      	add	r3, r2
 8006e0e:	e000      	b.n	8006e12 <get_driver+0x4e>

  return NULL;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	00000000 	.word	0x00000000
 8006e24:	240019dc 	.word	0x240019dc
 8006e28:	240019d8 	.word	0x240019d8
 8006e2c:	0800a70c 	.word	0x0800a70c

08006e30 <tud_mounted>:
{
  return _usbd_dev.connected;
}

bool tud_mounted(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8006e34:	4b06      	ldr	r3, [pc, #24]	; (8006e50 <tud_mounted+0x20>)
 8006e36:	785b      	ldrb	r3, [r3, #1]
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	bf14      	ite	ne
 8006e3e:	2301      	movne	r3, #1
 8006e40:	2300      	moveq	r3, #0
 8006e42:	b2db      	uxtb	r3, r3
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	240019a0 	.word	0x240019a0

08006e54 <tud_suspended>:

bool tud_suspended(void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8006e58:	4b07      	ldr	r3, [pc, #28]	; (8006e78 <tud_suspended+0x24>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	bf14      	ite	ne
 8006e66:	2301      	movne	r3, #1
 8006e68:	2300      	moveq	r3, #0
 8006e6a:	b2db      	uxtb	r3, r3
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	240019a0 	.word	0x240019a0

08006e7c <tud_inited>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8006e80:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <tud_inited+0x1c>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	2bff      	cmp	r3, #255	; 0xff
 8006e86:	bf14      	ite	ne
 8006e88:	2301      	movne	r3, #1
 8006e8a:	2300      	moveq	r3, #0
 8006e8c:	b2db      	uxtb	r3, r3
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	24000035 	.word	0x24000035

08006e9c <tud_init>:

bool tud_init (uint8_t rhport)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	71fb      	strb	r3, [r7, #7]
  // skip if already initialized
  if ( tud_inited() ) return true;
 8006ea6:	f7ff ffe9 	bl	8006e7c <tud_inited>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d001      	beq.n	8006eb4 <tud_init+0x18>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e054      	b.n	8006f5e <tud_init+0xc2>
  TU_LOG(USBD_DBG, "USBD init on controller %u\r\n", rhport);
  TU_LOG_INT(USBD_DBG, sizeof(usbd_device_t));
  TU_LOG_INT(USBD_DBG, sizeof(tu_fifo_t));
  TU_LOG_INT(USBD_DBG, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8006eb4:	2237      	movs	r2, #55	; 0x37
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	482b      	ldr	r0, [pc, #172]	; (8006f68 <tud_init+0xcc>)
 8006eba:	f003 faff 	bl	800a4bc <memset>
 8006ebe:	4b2b      	ldr	r3, [pc, #172]	; (8006f6c <tud_init+0xd0>)
 8006ec0:	60fb      	str	r3, [r7, #12]
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  tu_fifo_clear(&qdef->ff);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7ff ff58 	bl	8006d7c <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8006ece:	4a28      	ldr	r2, [pc, #160]	; (8006f70 <tud_init+0xd4>)
 8006ed0:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8006ed2:	4b27      	ldr	r3, [pc, #156]	; (8006f70 <tud_init+0xd4>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10a      	bne.n	8006ef0 <tud_init+0x54>
 8006eda:	4b26      	ldr	r3, [pc, #152]	; (8006f74 <tud_init+0xd8>)
 8006edc:	613b      	str	r3, [r7, #16]
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d000      	beq.n	8006eec <tud_init+0x50>
 8006eea:	be00      	bkpt	0x0000
 8006eec:	2300      	movs	r3, #0
 8006eee:	e036      	b.n	8006f5e <tud_init+0xc2>

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
 8006ef0:	4b21      	ldr	r3, [pc, #132]	; (8006f78 <tud_init+0xdc>)
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d005      	beq.n	8006f02 <tud_init+0x66>
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8006ef6:	4821      	ldr	r0, [pc, #132]	; (8006f7c <tud_init+0xe0>)
 8006ef8:	f3af 8000 	nop.w
 8006efc:	4603      	mov	r3, r0
 8006efe:	4a20      	ldr	r2, [pc, #128]	; (8006f80 <tud_init+0xe4>)
 8006f00:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8006f02:	2300      	movs	r3, #0
 8006f04:	77fb      	strb	r3, [r7, #31]
 8006f06:	e018      	b.n	8006f3a <tud_init+0x9e>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8006f08:	7ffb      	ldrb	r3, [r7, #31]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7ff ff5a 	bl	8006dc4 <get_driver>
 8006f10:	61b8      	str	r0, [r7, #24]
    TU_ASSERT(driver);
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10a      	bne.n	8006f2e <tud_init+0x92>
 8006f18:	4b16      	ldr	r3, [pc, #88]	; (8006f74 <tud_init+0xd8>)
 8006f1a:	617b      	str	r3, [r7, #20]
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d000      	beq.n	8006f2a <tud_init+0x8e>
 8006f28:	be00      	bkpt	0x0000
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	e017      	b.n	8006f5e <tud_init+0xc2>
    TU_LOG(USBD_DBG, "%s init\r\n", driver->name);
    driver->init();
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8006f34:	7ffb      	ldrb	r3, [r7, #31]
 8006f36:	3301      	adds	r3, #1
 8006f38:	77fb      	strb	r3, [r7, #31]
 8006f3a:	4b10      	ldr	r3, [pc, #64]	; (8006f7c <tud_init+0xe0>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	7ffb      	ldrb	r3, [r7, #31]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	dae0      	bge.n	8006f08 <tud_init+0x6c>
  }

  _usbd_rhport = rhport;
 8006f46:	4a0f      	ldr	r2, [pc, #60]	; (8006f84 <tud_init+0xe8>)
 8006f48:	79fb      	ldrb	r3, [r7, #7]
 8006f4a:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  dcd_init(rhport);
 8006f4c:	79fb      	ldrb	r3, [r7, #7]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f002 f812 	bl	8008f78 <dcd_init>
  dcd_int_enable(rhport);
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	4618      	mov	r0, r3
 8006f58:	f002 f876 	bl	8009048 <dcd_int_enable>

  return true;
 8006f5c:	2301      	movs	r3, #1
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3720      	adds	r7, #32
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	240019a0 	.word	0x240019a0
 8006f6c:	24000038 	.word	0x24000038
 8006f70:	24001aa0 	.word	0x24001aa0
 8006f74:	e000edf0 	.word	0xe000edf0
 8006f78:	00000000 	.word	0x00000000
 8006f7c:	240019dc 	.word	0x240019dc
 8006f80:	240019d8 	.word	0x240019d8
 8006f84:	24000035 	.word	0x24000035

08006f88 <configuration_reset>:

static void configuration_reset(uint8_t rhport)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	4603      	mov	r3, r0
 8006f90:	71fb      	strb	r3, [r7, #7]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8006f92:	2300      	movs	r3, #0
 8006f94:	75fb      	strb	r3, [r7, #23]
 8006f96:	e019      	b.n	8006fcc <configuration_reset+0x44>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8006f98:	7dfb      	ldrb	r3, [r7, #23]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7ff ff12 	bl	8006dc4 <get_driver>
 8006fa0:	6138      	str	r0, [r7, #16]
    TU_ASSERT(driver, );
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d109      	bne.n	8006fbc <configuration_reset+0x34>
 8006fa8:	4b15      	ldr	r3, [pc, #84]	; (8007000 <configuration_reset+0x78>)
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d01f      	beq.n	8006ff8 <configuration_reset+0x70>
 8006fb8:	be00      	bkpt	0x0000
 8006fba:	e01d      	b.n	8006ff8 <configuration_reset+0x70>
    driver->reset(rhport);
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	79fa      	ldrb	r2, [r7, #7]
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8006fc6:	7dfb      	ldrb	r3, [r7, #23]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	75fb      	strb	r3, [r7, #23]
 8006fcc:	4b0d      	ldr	r3, [pc, #52]	; (8007004 <configuration_reset+0x7c>)
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	dadf      	bge.n	8006f98 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8006fd8:	2237      	movs	r2, #55	; 0x37
 8006fda:	2100      	movs	r1, #0
 8006fdc:	480a      	ldr	r0, [pc, #40]	; (8007008 <configuration_reset+0x80>)
 8006fde:	f003 fa6d 	bl	800a4bc <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8006fe2:	2210      	movs	r2, #16
 8006fe4:	21ff      	movs	r1, #255	; 0xff
 8006fe6:	4809      	ldr	r0, [pc, #36]	; (800700c <configuration_reset+0x84>)
 8006fe8:	f003 fa68 	bl	800a4bc <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 8006fec:	2212      	movs	r2, #18
 8006fee:	21ff      	movs	r1, #255	; 0xff
 8006ff0:	4807      	ldr	r0, [pc, #28]	; (8007010 <configuration_reset+0x88>)
 8006ff2:	f003 fa63 	bl	800a4bc <memset>
 8006ff6:	e000      	b.n	8006ffa <configuration_reset+0x72>
    TU_ASSERT(driver, );
 8006ff8:	bf00      	nop
}
 8006ffa:	3718      	adds	r7, #24
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	e000edf0 	.word	0xe000edf0
 8007004:	240019dc 	.word	0x240019dc
 8007008:	240019a0 	.word	0x240019a0
 800700c:	240019a3 	.word	0x240019a3
 8007010:	240019b3 	.word	0x240019b3

08007014 <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	4603      	mov	r3, r0
 800701c:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	4618      	mov	r0, r3
 8007022:	f7ff ffb1 	bl	8006f88 <configuration_reset>
  usbd_control_reset();
 8007026:	f001 fbfb 	bl	8008820 <usbd_control_reset>
}
 800702a:	bf00      	nop
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <tud_task_ext>:
      }
    }
    @endcode
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr)
{
 8007034:	b590      	push	{r4, r7, lr}
 8007036:	b091      	sub	sp, #68	; 0x44
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if ( !tud_inited() ) return;
 8007040:	f7ff ff1c 	bl	8006e7c <tud_inited>
 8007044:	4603      	mov	r3, r0
 8007046:	f083 0301 	eor.w	r3, r3, #1
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	f040 812e 	bne.w	80072ae <tud_task_ext+0x27a>

  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8007052:	4b9b      	ldr	r3, [pc, #620]	; (80072c0 <tud_task_ext+0x28c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007058:	f107 0308 	add.w	r3, r7, #8
 800705c:	62bb      	str	r3, [r7, #40]	; 0x28
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	627b      	str	r3, [r7, #36]	; 0x24
 8007062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007064:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2000      	movs	r0, #0
 800706c:	4798      	blx	r3
}
 800706e:	bf00      	nop
TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec)
{
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	3304      	adds	r3, #4
 8007074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007076:	4618      	mov	r0, r3
 8007078:	f7ff fdd1 	bl	8006c1e <tu_fifo_read>
 800707c:	4603      	mov	r3, r0
 800707e:	77fb      	strb	r3, [r7, #31]
 8007080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007082:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2001      	movs	r0, #1
 800708a:	4798      	blx	r3
}
 800708c:	bf00      	nop
  _osal_q_unlock(qhdl);

  return success;
 800708e:	7ffb      	ldrb	r3, [r7, #31]
 8007090:	f083 0301 	eor.w	r3, r3, #1
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	f040 810b 	bne.w	80072b2 <tud_task_ext+0x27e>
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG(USBD_DBG, "\r\n"); // extra line for setup
    TU_LOG(USBD_DBG, "USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
 800709c:	7a7b      	ldrb	r3, [r7, #9]
 800709e:	3b01      	subs	r3, #1
 80070a0:	2b07      	cmp	r3, #7
 80070a2:	f200 80ee 	bhi.w	8007282 <tud_task_ext+0x24e>
 80070a6:	a201      	add	r2, pc, #4	; (adr r2, 80070ac <tud_task_ext+0x78>)
 80070a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ac:	080070cd 	.word	0x080070cd
 80070b0:	080070dd 	.word	0x080070dd
 80070b4:	08007283 	.word	0x08007283
 80070b8:	08007229 	.word	0x08007229
 80070bc:	08007259 	.word	0x08007259
 80070c0:	080070f3 	.word	0x080070f3
 80070c4:	08007169 	.word	0x08007169
 80070c8:	08007273 	.word	0x08007273
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG(USBD_DBG, ": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 80070cc:	7a3b      	ldrb	r3, [r7, #8]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7ff ffa0 	bl	8007014 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 80070d4:	7b3a      	ldrb	r2, [r7, #12]
 80070d6:	4b7b      	ldr	r3, [pc, #492]	; (80072c4 <tud_task_ext+0x290>)
 80070d8:	709a      	strb	r2, [r3, #2]
      break;
 80070da:	e0e7      	b.n	80072ac <tud_task_ext+0x278>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG(USBD_DBG, "\r\n");
        usbd_reset(event.rhport);
 80070dc:	7a3b      	ldrb	r3, [r7, #8]
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff ff98 	bl	8007014 <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 80070e4:	4b78      	ldr	r3, [pc, #480]	; (80072c8 <tud_task_ext+0x294>)
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 80d5 	beq.w	8007296 <tud_task_ext+0x262>
 80070ec:	f7f9 f984 	bl	80003f8 <tud_umount_cb>
      break;
 80070f0:	e0d1      	b.n	8007296 <tud_task_ext+0x262>
        TU_LOG_PTR(USBD_DBG, &event.setup_received);
        TU_LOG(USBD_DBG, "\r\n");

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 80070f2:	4a74      	ldr	r2, [pc, #464]	; (80072c4 <tud_task_ext+0x290>)
 80070f4:	7813      	ldrb	r3, [r2, #0]
 80070f6:	f043 0301 	orr.w	r3, r3, #1
 80070fa:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 80070fc:	4a71      	ldr	r2, [pc, #452]	; (80072c4 <tud_task_ext+0x290>)
 80070fe:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8007102:	f36f 0300 	bfc	r3, #0, #1
 8007106:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 800710a:	4a6e      	ldr	r2, [pc, #440]	; (80072c4 <tud_task_ext+0x290>)
 800710c:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8007110:	f36f 0382 	bfc	r3, #2, #1
 8007114:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = 0;
 8007118:	4a6a      	ldr	r2, [pc, #424]	; (80072c4 <tud_task_ext+0x290>)
 800711a:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800711e:	f36f 0300 	bfc	r3, #0, #1
 8007122:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8007126:	4a67      	ldr	r2, [pc, #412]	; (80072c4 <tud_task_ext+0x290>)
 8007128:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800712c:	f36f 0382 	bfc	r3, #2, #1
 8007130:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8007134:	7a3a      	ldrb	r2, [r7, #8]
 8007136:	f107 0308 	add.w	r3, r7, #8
 800713a:	3304      	adds	r3, #4
 800713c:	4619      	mov	r1, r3
 800713e:	4610      	mov	r0, r2
 8007140:	f000 f8e2 	bl	8007308 <process_control_request>
 8007144:	4603      	mov	r3, r0
 8007146:	f083 0301 	eor.w	r3, r3, #1
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 80a4 	beq.w	800729a <tud_task_ext+0x266>
        {
          TU_LOG(USBD_DBG, "  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8007152:	7a3b      	ldrb	r3, [r7, #8]
 8007154:	2100      	movs	r1, #0
 8007156:	4618      	mov	r0, r3
 8007158:	f002 fb54 	bl	8009804 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 800715c:	7a3b      	ldrb	r3, [r7, #8]
 800715e:	2180      	movs	r1, #128	; 0x80
 8007160:	4618      	mov	r0, r3
 8007162:	f002 fb4f 	bl	8009804 <dcd_edpt_stall>
        }
      break;
 8007166:	e098      	b.n	800729a <tud_task_ext+0x266>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8007168:	7b3b      	ldrb	r3, [r7, #12]
 800716a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800716e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007172:	75bb      	strb	r3, [r7, #22]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007174:	7dbb      	ldrb	r3, [r7, #22]
 8007176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800717a:	b2db      	uxtb	r3, r3
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 800717c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8007180:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007184:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007186:	7dfb      	ldrb	r3, [r7, #23]
 8007188:	09db      	lsrs	r3, r3, #7
 800718a:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 800718c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

        TU_LOG(USBD_DBG, "on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8007190:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8007194:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007198:	494a      	ldr	r1, [pc, #296]	; (80072c4 <tud_task_ext+0x290>)
 800719a:	0052      	lsls	r2, r2, #1
 800719c:	440a      	add	r2, r1
 800719e:	4413      	add	r3, r2
 80071a0:	f103 0220 	add.w	r2, r3, #32
 80071a4:	7953      	ldrb	r3, [r2, #5]
 80071a6:	f36f 0300 	bfc	r3, #0, #1
 80071aa:	7153      	strb	r3, [r2, #5]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80071ac:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80071b0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80071b4:	4943      	ldr	r1, [pc, #268]	; (80072c4 <tud_task_ext+0x290>)
 80071b6:	0052      	lsls	r2, r2, #1
 80071b8:	440a      	add	r2, r1
 80071ba:	4413      	add	r3, r2
 80071bc:	f103 0220 	add.w	r2, r3, #32
 80071c0:	7953      	ldrb	r3, [r2, #5]
 80071c2:	f36f 0382 	bfc	r3, #2, #1
 80071c6:	7153      	strb	r3, [r2, #5]

        if ( 0 == epnum )
 80071c8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d107      	bne.n	80071e0 <tud_task_ext+0x1ac>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete
 80071d0:	7a38      	ldrb	r0, [r7, #8]
 80071d2:	7b7a      	ldrb	r2, [r7, #13]
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80071da:	f001 fb57 	bl	800888c <usbd_control_xfer_cb>

          TU_LOG(USBD_DBG, "  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 80071de:	e065      	b.n	80072ac <tud_task_ext+0x278>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 80071e0:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80071e4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80071e8:	4936      	ldr	r1, [pc, #216]	; (80072c4 <tud_task_ext+0x290>)
 80071ea:	0052      	lsls	r2, r2, #1
 80071ec:	440a      	add	r2, r1
 80071ee:	4413      	add	r3, r2
 80071f0:	3313      	adds	r3, #19
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7ff fde5 	bl	8006dc4 <get_driver>
 80071fa:	63b8      	str	r0, [r7, #56]	; 0x38
          TU_ASSERT(driver, );
 80071fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d109      	bne.n	8007216 <tud_task_ext+0x1e2>
 8007202:	4b32      	ldr	r3, [pc, #200]	; (80072cc <tud_task_ext+0x298>)
 8007204:	637b      	str	r3, [r7, #52]	; 0x34
 8007206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d051      	beq.n	80072b6 <tud_task_ext+0x282>
 8007212:	be00      	bkpt	0x0000
 8007214:	e04f      	b.n	80072b6 <tud_task_ext+0x282>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8007216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007218:	691c      	ldr	r4, [r3, #16]
 800721a:	7a38      	ldrb	r0, [r7, #8]
 800721c:	7b7a      	ldrb	r2, [r7, #13]
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8007224:	47a0      	blx	r4
      break;
 8007226:	e041      	b.n	80072ac <tud_task_ext+0x278>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
 8007228:	4b26      	ldr	r3, [pc, #152]	; (80072c4 <tud_task_ext+0x290>)
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d033      	beq.n	800729e <tud_task_ext+0x26a>
        {
          TU_LOG(USBD_DBG, ": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8007236:	4b26      	ldr	r3, [pc, #152]	; (80072d0 <tud_task_ext+0x29c>)
 8007238:	2b00      	cmp	r3, #0
 800723a:	d030      	beq.n	800729e <tud_task_ext+0x26a>
 800723c:	4b21      	ldr	r3, [pc, #132]	; (80072c4 <tud_task_ext+0x290>)
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	bf14      	ite	ne
 800724a:	2301      	movne	r3, #1
 800724c:	2300      	moveq	r3, #0
 800724e:	b2db      	uxtb	r3, r3
 8007250:	4618      	mov	r0, r3
 8007252:	f7f9 f8dd 	bl	8000410 <tud_suspend_cb>
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 8007256:	e022      	b.n	800729e <tud_task_ext+0x26a>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
 8007258:	4b1a      	ldr	r3, [pc, #104]	; (80072c4 <tud_task_ext+0x290>)
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d01d      	beq.n	80072a2 <tud_task_ext+0x26e>
        {
          TU_LOG(USBD_DBG, "\r\n");
          if (tud_resume_cb) tud_resume_cb();
 8007266:	4b1b      	ldr	r3, [pc, #108]	; (80072d4 <tud_task_ext+0x2a0>)
 8007268:	2b00      	cmp	r3, #0
 800726a:	d01a      	beq.n	80072a2 <tud_task_ext+0x26e>
 800726c:	f7f9 f8e2 	bl	8000434 <tud_resume_cb>
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 8007270:	e017      	b.n	80072a2 <tud_task_ext+0x26e>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG(USBD_DBG, "\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d016      	beq.n	80072a6 <tud_task_ext+0x272>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	4610      	mov	r0, r2
 800727e:	4798      	blx	r3
      break;
 8007280:	e011      	b.n	80072a6 <tud_task_ext+0x272>

      case DCD_EVENT_SOF:
      default:
        TU_BREAKPOINT();
 8007282:	4b12      	ldr	r3, [pc, #72]	; (80072cc <tud_task_ext+0x298>)
 8007284:	633b      	str	r3, [r7, #48]	; 0x30
 8007286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00b      	beq.n	80072aa <tud_task_ext+0x276>
 8007292:	be00      	bkpt	0x0000
      break;
 8007294:	e009      	b.n	80072aa <tud_task_ext+0x276>
      break;
 8007296:	bf00      	nop
 8007298:	e6db      	b.n	8007052 <tud_task_ext+0x1e>
      break;
 800729a:	bf00      	nop
 800729c:	e6d9      	b.n	8007052 <tud_task_ext+0x1e>
      break;
 800729e:	bf00      	nop
 80072a0:	e6d7      	b.n	8007052 <tud_task_ext+0x1e>
      break;
 80072a2:	bf00      	nop
 80072a4:	e6d5      	b.n	8007052 <tud_task_ext+0x1e>
      break;
 80072a6:	bf00      	nop
 80072a8:	e6d3      	b.n	8007052 <tud_task_ext+0x1e>
      break;
 80072aa:	bf00      	nop
  {
 80072ac:	e6d1      	b.n	8007052 <tud_task_ext+0x1e>
  if ( !tud_inited() ) return;
 80072ae:	bf00      	nop
 80072b0:	e002      	b.n	80072b8 <tud_task_ext+0x284>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 80072b2:	bf00      	nop
 80072b4:	e000      	b.n	80072b8 <tud_task_ext+0x284>
          TU_ASSERT(driver, );
 80072b6:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 80072b8:	3744      	adds	r7, #68	; 0x44
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd90      	pop	{r4, r7, pc}
 80072be:	bf00      	nop
 80072c0:	24001aa0 	.word	0x24001aa0
 80072c4:	240019a0 	.word	0x240019a0
 80072c8:	080003f9 	.word	0x080003f9
 80072cc:	e000edf0 	.word	0xe000edf0
 80072d0:	08000411 	.word	0x08000411
 80072d4:	08000435 	.word	0x08000435

080072d8 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	4603      	mov	r3, r0
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
 80072e4:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f001 faa4 	bl	8008838 <usbd_control_set_complete_callback>
  TU_LOG(USBD_DBG, "  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	7bf8      	ldrb	r0, [r7, #15]
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	2101      	movs	r1, #1
 80072fa:	4798      	blx	r3
 80072fc:	4603      	mov	r3, r0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
	...

08007308 <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b094      	sub	sp, #80	; 0x50
 800730c:	af00      	add	r7, sp, #0
 800730e:	4603      	mov	r3, r0
 8007310:	6039      	str	r1, [r7, #0]
 8007312:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8007314:	2000      	movs	r0, #0
 8007316:	f001 fa8f 	bl	8008838 <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b60      	cmp	r3, #96	; 0x60
 8007326:	d10a      	bne.n	800733e <process_control_request+0x36>
 8007328:	4ba4      	ldr	r3, [pc, #656]	; (80075bc <process_control_request+0x2b4>)
 800732a:	61bb      	str	r3, [r7, #24]
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b00      	cmp	r3, #0
 8007336:	d000      	beq.n	800733a <process_control_request+0x32>
 8007338:	be00      	bkpt	0x0000
 800733a:	2300      	movs	r3, #0
 800733c:	e247      	b.n	80077ce <process_control_request+0x4c6>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b40      	cmp	r3, #64	; 0x40
 800734a:	d10f      	bne.n	800736c <process_control_request+0x64>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
 800734c:	4b9c      	ldr	r3, [pc, #624]	; (80075c0 <process_control_request+0x2b8>)
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <process_control_request+0x4e>
 8007352:	2300      	movs	r3, #0
 8007354:	e23b      	b.n	80077ce <process_control_request+0x4c6>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8007356:	489a      	ldr	r0, [pc, #616]	; (80075c0 <process_control_request+0x2b8>)
 8007358:	f001 fa6e 	bl	8008838 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 800735c:	79fb      	ldrb	r3, [r7, #7]
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	2101      	movs	r1, #1
 8007362:	4618      	mov	r0, r3
 8007364:	f3af 8000 	nop.w
 8007368:	4603      	mov	r3, r0
 800736a:	e230      	b.n	80077ce <process_control_request+0x4c6>
    TU_LOG(USBD_DBG, "  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG(USBD_DBG, "\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b02      	cmp	r3, #2
 8007378:	f000 8177 	beq.w	800766a <process_control_request+0x362>
 800737c:	2b02      	cmp	r3, #2
 800737e:	f300 821a 	bgt.w	80077b6 <process_control_request+0x4ae>
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <process_control_request+0x86>
 8007386:	2b01      	cmp	r3, #1
 8007388:	f000 811e 	beq.w	80075c8 <process_control_request+0x2c0>
 800738c:	e213      	b.n	80077b6 <process_control_request+0x4ae>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007396:	b2db      	uxtb	r3, r3
 8007398:	2b20      	cmp	r3, #32
 800739a:	d123      	bne.n	80073e4 <process_control_request+0xdc>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	889b      	ldrh	r3, [r3, #4]
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80073a4:	8afb      	ldrh	r3, [r7, #22]
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80073ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073b0:	2b0f      	cmp	r3, #15
 80073b2:	d901      	bls.n	80073b8 <process_control_request+0xb0>
 80073b4:	2300      	movs	r3, #0
 80073b6:	e20a      	b.n	80077ce <process_control_request+0x4c6>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80073b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073bc:	4a81      	ldr	r2, [pc, #516]	; (80075c4 <process_control_request+0x2bc>)
 80073be:	4413      	add	r3, r2
 80073c0:	78db      	ldrb	r3, [r3, #3]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7ff fcfe 	bl	8006dc4 <get_driver>
 80073c8:	6238      	str	r0, [r7, #32]
        TU_VERIFY(driver);
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d101      	bne.n	80073d4 <process_control_request+0xcc>
 80073d0:	2300      	movs	r3, #0
 80073d2:	e1fc      	b.n	80077ce <process_control_request+0x4c6>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 80073d4:	79fb      	ldrb	r3, [r7, #7]
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	6a39      	ldr	r1, [r7, #32]
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff ff7c 	bl	80072d8 <invoke_class_control>
 80073e0:	4603      	mov	r3, r0
 80073e2:	e1f4      	b.n	80077ce <process_control_request+0x4c6>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00a      	beq.n	8007408 <process_control_request+0x100>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
 80073f2:	4b72      	ldr	r3, [pc, #456]	; (80075bc <process_control_request+0x2b4>)
 80073f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80073f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d000      	beq.n	8007404 <process_control_request+0xfc>
 8007402:	be00      	bkpt	0x0000
        return false;
 8007404:	2300      	movs	r3, #0
 8007406:	e1e2      	b.n	80077ce <process_control_request+0x4c6>
      }

      switch ( p_request->bRequest )
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	785b      	ldrb	r3, [r3, #1]
 800740c:	2b09      	cmp	r3, #9
 800740e:	f200 80c8 	bhi.w	80075a2 <process_control_request+0x29a>
 8007412:	a201      	add	r2, pc, #4	; (adr r2, 8007418 <process_control_request+0x110>)
 8007414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007418:	0800756d 	.word	0x0800756d
 800741c:	08007549 	.word	0x08007549
 8007420:	080075a3 	.word	0x080075a3
 8007424:	08007525 	.word	0x08007525
 8007428:	080075a3 	.word	0x080075a3
 800742c:	08007441 	.word	0x08007441
 8007430:	0800750b 	.word	0x0800750b
 8007434:	080075a3 	.word	0x080075a3
 8007438:	08007465 	.word	0x08007465
 800743c:	0800747d 	.word	0x0800747d
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8007440:	6838      	ldr	r0, [r7, #0]
 8007442:	f001 fa09 	bl	8008858 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	885b      	ldrh	r3, [r3, #2]
 800744a:	b29b      	uxth	r3, r3
 800744c:	b2da      	uxtb	r2, r3
 800744e:	79fb      	ldrb	r3, [r7, #7]
 8007450:	4611      	mov	r1, r2
 8007452:	4618      	mov	r0, r3
 8007454:	f001 fe10 	bl	8009078 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8007458:	4a5a      	ldr	r2, [pc, #360]	; (80075c4 <process_control_request+0x2bc>)
 800745a:	7813      	ldrb	r3, [r2, #0]
 800745c:	f043 0302 	orr.w	r3, r3, #2
 8007460:	7013      	strb	r3, [r2, #0]
        break;
 8007462:	e0aa      	b.n	80075ba <process_control_request+0x2b2>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8007464:	4b57      	ldr	r3, [pc, #348]	; (80075c4 <process_control_request+0x2bc>)
 8007466:	785b      	ldrb	r3, [r3, #1]
 8007468:	b2db      	uxtb	r3, r3
 800746a:	73fb      	strb	r3, [r7, #15]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 800746c:	f107 020f 	add.w	r2, r7, #15
 8007470:	79f8      	ldrb	r0, [r7, #7]
 8007472:	2301      	movs	r3, #1
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	f001 f963 	bl	8008740 <tud_control_xfer>
        }
        break;
 800747a:	e09e      	b.n	80075ba <process_control_request+0x2b2>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	885b      	ldrh	r3, [r3, #2]
 8007480:	b29b      	uxth	r3, r3
 8007482:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
 8007486:	4b4f      	ldr	r3, [pc, #316]	; (80075c4 <process_control_request+0x2bc>)
 8007488:	785b      	ldrb	r3, [r3, #1]
 800748a:	b2db      	uxtb	r3, r3
 800748c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007490:	429a      	cmp	r2, r3
 8007492:	d030      	beq.n	80074f6 <process_control_request+0x1ee>
          {
            if ( _usbd_dev.cfg_num )
 8007494:	4b4b      	ldr	r3, [pc, #300]	; (80075c4 <process_control_request+0x2bc>)
 8007496:	785b      	ldrb	r3, [r3, #1]
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00f      	beq.n	80074be <process_control_request+0x1b6>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG(USBD_DBG, "  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 800749e:	79fb      	ldrb	r3, [r7, #7]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f001 ff47 	bl	8009334 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 80074a6:	4b47      	ldr	r3, [pc, #284]	; (80075c4 <process_control_request+0x2bc>)
 80074a8:	789b      	ldrb	r3, [r3, #2]
 80074aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
              configuration_reset(rhport);
 80074ae:	79fb      	ldrb	r3, [r7, #7]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7ff fd69 	bl	8006f88 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 80074b6:	4a43      	ldr	r2, [pc, #268]	; (80075c4 <process_control_request+0x2bc>)
 80074b8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80074bc:	7093      	strb	r3, [r2, #2]
            }

            // switch to new configuration if not zero
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 80074be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d017      	beq.n	80074f6 <process_control_request+0x1ee>
 80074c6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80074ca:	79fb      	ldrb	r3, [r7, #7]
 80074cc:	4611      	mov	r1, r2
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 f986 	bl	80077e0 <process_set_config>
 80074d4:	4603      	mov	r3, r0
 80074d6:	f083 0301 	eor.w	r3, r3, #1
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00a      	beq.n	80074f6 <process_control_request+0x1ee>
 80074e0:	4b36      	ldr	r3, [pc, #216]	; (80075bc <process_control_request+0x2b4>)
 80074e2:	633b      	str	r3, [r7, #48]	; 0x30
 80074e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d000      	beq.n	80074f2 <process_control_request+0x1ea>
 80074f0:	be00      	bkpt	0x0000
 80074f2:	2300      	movs	r3, #0
 80074f4:	e16b      	b.n	80077ce <process_control_request+0x4c6>
          }

          _usbd_dev.cfg_num = cfg_num;
 80074f6:	4a33      	ldr	r2, [pc, #204]	; (80075c4 <process_control_request+0x2bc>)
 80074f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074fc:	7053      	strb	r3, [r2, #1]
          tud_control_status(rhport, p_request);
 80074fe:	79fb      	ldrb	r3, [r7, #7]
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	4618      	mov	r0, r3
 8007504:	f001 f8aa 	bl	800865c <tud_control_status>
        }
        break;
 8007508:	e057      	b.n	80075ba <process_control_request+0x2b2>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 800750a:	79fb      	ldrb	r3, [r7, #7]
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	4618      	mov	r0, r3
 8007510:	f000 fa82 	bl	8007a18 <process_get_descriptor>
 8007514:	4603      	mov	r3, r0
 8007516:	f083 0301 	eor.w	r3, r3, #1
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d04b      	beq.n	80075b8 <process_control_request+0x2b0>
 8007520:	2300      	movs	r3, #0
 8007522:	e154      	b.n	80077ce <process_control_request+0x4c6>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	885b      	ldrh	r3, [r3, #2]
 8007528:	b29b      	uxth	r3, r3
 800752a:	2b01      	cmp	r3, #1
 800752c:	d001      	beq.n	8007532 <process_control_request+0x22a>
 800752e:	2300      	movs	r3, #0
 8007530:	e14d      	b.n	80077ce <process_control_request+0x4c6>

          TU_LOG(USBD_DBG, "    Enable Remote Wakeup\r\n");

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 8007532:	4a24      	ldr	r2, [pc, #144]	; (80075c4 <process_control_request+0x2bc>)
 8007534:	7813      	ldrb	r3, [r2, #0]
 8007536:	f043 0308 	orr.w	r3, r3, #8
 800753a:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 800753c:	79fb      	ldrb	r3, [r7, #7]
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	4618      	mov	r0, r3
 8007542:	f001 f88b 	bl	800865c <tud_control_status>
        break;
 8007546:	e038      	b.n	80075ba <process_control_request+0x2b2>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	885b      	ldrh	r3, [r3, #2]
 800754c:	b29b      	uxth	r3, r3
 800754e:	2b01      	cmp	r3, #1
 8007550:	d001      	beq.n	8007556 <process_control_request+0x24e>
 8007552:	2300      	movs	r3, #0
 8007554:	e13b      	b.n	80077ce <process_control_request+0x4c6>

          TU_LOG(USBD_DBG, "    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8007556:	4a1b      	ldr	r2, [pc, #108]	; (80075c4 <process_control_request+0x2bc>)
 8007558:	7813      	ldrb	r3, [r2, #0]
 800755a:	f36f 03c3 	bfc	r3, #3, #1
 800755e:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8007560:	79fb      	ldrb	r3, [r7, #7]
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	4618      	mov	r0, r3
 8007566:	f001 f879 	bl	800865c <tud_control_status>
        break;
 800756a:	e026      	b.n	80075ba <process_control_request+0x2b2>
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 800756c:	4b15      	ldr	r3, [pc, #84]	; (80075c4 <process_control_request+0x2bc>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	095b      	lsrs	r3, r3, #5
 8007572:	b2db      	uxtb	r3, r3
 8007574:	b29b      	uxth	r3, r3
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	b29a      	uxth	r2, r3
 800757c:	4b11      	ldr	r3, [pc, #68]	; (80075c4 <process_control_request+0x2bc>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	089b      	lsrs	r3, r3, #2
 8007582:	b2db      	uxtb	r3, r3
 8007584:	b29b      	uxth	r3, r3
 8007586:	f003 0302 	and.w	r3, r3, #2
 800758a:	b29b      	uxth	r3, r3
 800758c:	4313      	orrs	r3, r2
 800758e:	b29b      	uxth	r3, r3
 8007590:	81bb      	strh	r3, [r7, #12]
          tud_control_xfer(rhport, p_request, &status, 2);
 8007592:	f107 020c 	add.w	r2, r7, #12
 8007596:	79f8      	ldrb	r0, [r7, #7]
 8007598:	2302      	movs	r3, #2
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	f001 f8d0 	bl	8008740 <tud_control_xfer>
        }
        break;
 80075a0:	e00b      	b.n	80075ba <process_control_request+0x2b2>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 80075a2:	4b06      	ldr	r3, [pc, #24]	; (80075bc <process_control_request+0x2b4>)
 80075a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d000      	beq.n	80075b4 <process_control_request+0x2ac>
 80075b2:	be00      	bkpt	0x0000
 80075b4:	2300      	movs	r3, #0
 80075b6:	e10a      	b.n	80077ce <process_control_request+0x4c6>
        break;
 80075b8:	bf00      	nop
      }
    break;
 80075ba:	e107      	b.n	80077cc <process_control_request+0x4c4>
 80075bc:	e000edf0 	.word	0xe000edf0
 80075c0:	00000000 	.word	0x00000000
 80075c4:	240019a0 	.word	0x240019a0

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	889b      	ldrh	r3, [r3, #4]
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	82bb      	strh	r3, [r7, #20]
 80075d0:	8abb      	ldrh	r3, [r7, #20]
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80075d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80075dc:	2b0f      	cmp	r3, #15
 80075de:	d901      	bls.n	80075e4 <process_control_request+0x2dc>
 80075e0:	2300      	movs	r3, #0
 80075e2:	e0f4      	b.n	80077ce <process_control_request+0x4c6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80075e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80075e8:	4a7b      	ldr	r2, [pc, #492]	; (80077d8 <process_control_request+0x4d0>)
 80075ea:	4413      	add	r3, r2
 80075ec:	78db      	ldrb	r3, [r3, #3]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7ff fbe8 	bl	8006dc4 <get_driver>
 80075f4:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(driver);
 80075f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <process_control_request+0x2f8>
 80075fc:	2300      	movs	r3, #0
 80075fe:	e0e6      	b.n	80077ce <process_control_request+0x4c6>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
 8007600:	79fb      	ldrb	r3, [r7, #7]
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007606:	4618      	mov	r0, r3
 8007608:	f7ff fe66 	bl	80072d8 <invoke_class_control>
 800760c:	4603      	mov	r3, r0
 800760e:	f083 0301 	eor.w	r3, r3, #1
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d026      	beq.n	8007666 <process_control_request+0x35e>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <process_control_request+0x322>
 8007626:	2300      	movs	r3, #0
 8007628:	e0d1      	b.n	80077ce <process_control_request+0x4c6>

        switch(p_request->bRequest)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	785b      	ldrb	r3, [r3, #1]
 800762e:	3b0a      	subs	r3, #10
 8007630:	2b01      	cmp	r3, #1
 8007632:	d816      	bhi.n	8007662 <process_control_request+0x35a>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8007634:	2000      	movs	r0, #0
 8007636:	f001 f8ff 	bl	8008838 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	785b      	ldrb	r3, [r3, #1]
 800763e:	2b0a      	cmp	r3, #10
 8007640:	d109      	bne.n	8007656 <process_control_request+0x34e>
            {
              uint8_t alternate = 0;
 8007642:	2300      	movs	r3, #0
 8007644:	72fb      	strb	r3, [r7, #11]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8007646:	f107 020b 	add.w	r2, r7, #11
 800764a:	79f8      	ldrb	r0, [r7, #7]
 800764c:	2301      	movs	r3, #1
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	f001 f876 	bl	8008740 <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
 8007654:	e008      	b.n	8007668 <process_control_request+0x360>
              tud_control_status(rhport, p_request);
 8007656:	79fb      	ldrb	r3, [r7, #7]
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fffe 	bl	800865c <tud_control_status>
          break;
 8007660:	e002      	b.n	8007668 <process_control_request+0x360>

          default: return false;
 8007662:	2300      	movs	r3, #0
 8007664:	e0b3      	b.n	80077ce <process_control_request+0x4c6>
        }
      }
 8007666:	bf00      	nop
    }
    break;
 8007668:	e0b0      	b.n	80077cc <process_control_request+0x4c4>

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	889b      	ldrh	r3, [r3, #4]
 800766e:	b29b      	uxth	r3, r3
 8007670:	823b      	strh	r3, [r7, #16]
 8007672:	8a3b      	ldrh	r3, [r7, #16]
 8007674:	b2db      	uxtb	r3, r3
 8007676:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800767a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800767e:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007680:	7cbb      	ldrb	r3, [r7, #18]
 8007682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007686:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8007688:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800768c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007690:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007692:	7cfb      	ldrb	r3, [r7, #19]
 8007694:	09db      	lsrs	r3, r3, #7
 8007696:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8007698:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 800769c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	d90a      	bls.n	80076ba <process_control_request+0x3b2>
 80076a4:	4b4d      	ldr	r3, [pc, #308]	; (80077dc <process_control_request+0x4d4>)
 80076a6:	643b      	str	r3, [r7, #64]	; 0x40
 80076a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d000      	beq.n	80076b6 <process_control_request+0x3ae>
 80076b4:	be00      	bkpt	0x0000
 80076b6:	2300      	movs	r3, #0
 80076b8:	e089      	b.n	80077ce <process_control_request+0x4c6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80076ba:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80076be:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80076c2:	4945      	ldr	r1, [pc, #276]	; (80077d8 <process_control_request+0x4d0>)
 80076c4:	0052      	lsls	r2, r2, #1
 80076c6:	440a      	add	r2, r1
 80076c8:	4413      	add	r3, r2
 80076ca:	3313      	adds	r3, #19
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff fb78 	bl	8006dc4 <get_driver>
 80076d4:	64b8      	str	r0, [r7, #72]	; 0x48

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00c      	beq.n	80076fe <process_control_request+0x3f6>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
 80076e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <process_control_request+0x3e6>
 80076ea:	2300      	movs	r3, #0
 80076ec:	e06f      	b.n	80077ce <process_control_request+0x4c6>
        return invoke_class_control(rhport, driver, p_request);
 80076ee:	79fb      	ldrb	r3, [r7, #7]
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7ff fdef 	bl	80072d8 <invoke_class_control>
 80076fa:	4603      	mov	r3, r0
 80076fc:	e067      	b.n	80077ce <process_control_request+0x4c6>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	785b      	ldrb	r3, [r3, #1]
 8007702:	2b03      	cmp	r3, #3
 8007704:	d018      	beq.n	8007738 <process_control_request+0x430>
 8007706:	2b03      	cmp	r3, #3
 8007708:	dc48      	bgt.n	800779c <process_control_request+0x494>
 800770a:	2b00      	cmp	r3, #0
 800770c:	d002      	beq.n	8007714 <process_control_request+0x40c>
 800770e:	2b01      	cmp	r3, #1
 8007710:	d012      	beq.n	8007738 <process_control_request+0x430>
 8007712:	e043      	b.n	800779c <process_control_request+0x494>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8007714:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8007718:	79fb      	ldrb	r3, [r7, #7]
 800771a:	4611      	mov	r1, r2
 800771c:	4618      	mov	r0, r3
 800771e:	f000 fef7 	bl	8008510 <usbd_edpt_stalled>
 8007722:	4603      	mov	r3, r0
 8007724:	b29b      	uxth	r3, r3
 8007726:	813b      	strh	r3, [r7, #8]
            tud_control_xfer(rhport, p_request, &status, 2);
 8007728:	f107 0208 	add.w	r2, r7, #8
 800772c:	79f8      	ldrb	r0, [r7, #7]
 800772e:	2302      	movs	r3, #2
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	f001 f805 	bl	8008740 <tud_control_xfer>
          }
          break;
 8007736:	e03d      	b.n	80077b4 <process_control_request+0x4ac>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	885b      	ldrh	r3, [r3, #2]
 800773c:	b29b      	uxth	r3, r3
 800773e:	2b00      	cmp	r3, #0
 8007740:	d112      	bne.n	8007768 <process_control_request+0x460>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	785b      	ldrb	r3, [r3, #1]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d107      	bne.n	800775a <process_control_request+0x452>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
 800774a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800774e:	79fb      	ldrb	r3, [r7, #7]
 8007750:	4611      	mov	r1, r2
 8007752:	4618      	mov	r0, r3
 8007754:	f000 fe90 	bl	8008478 <usbd_edpt_clear_stall>
 8007758:	e006      	b.n	8007768 <process_control_request+0x460>
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
 800775a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800775e:	79fb      	ldrb	r3, [r7, #7]
 8007760:	4611      	mov	r1, r2
 8007762:	4618      	mov	r0, r3
 8007764:	f000 fe3c 	bl	80083e0 <usbd_edpt_stall>
              }
            }

            if (driver)
 8007768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800776a:	2b00      	cmp	r3, #0
 800776c:	d021      	beq.n	80077b2 <process_control_request+0x4aa>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 800776e:	79fb      	ldrb	r3, [r7, #7]
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007774:	4618      	mov	r0, r3
 8007776:	f7ff fdaf 	bl	80072d8 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 800777a:	2000      	movs	r0, #0
 800777c:	f001 f85c 	bl	8008838 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8007780:	4b15      	ldr	r3, [pc, #84]	; (80077d8 <process_control_request+0x4d0>)
 8007782:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007786:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b00      	cmp	r3, #0
 800778e:	d110      	bne.n	80077b2 <process_control_request+0x4aa>
 8007790:	79fb      	ldrb	r3, [r7, #7]
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	4618      	mov	r0, r3
 8007796:	f000 ff61 	bl	800865c <tud_control_status>
            }
          }
          break;
 800779a:	e00a      	b.n	80077b2 <process_control_request+0x4aa>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 800779c:	4b0f      	ldr	r3, [pc, #60]	; (80077dc <process_control_request+0x4d4>)
 800779e:	647b      	str	r3, [r7, #68]	; 0x44
 80077a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0301 	and.w	r3, r3, #1
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d000      	beq.n	80077ae <process_control_request+0x4a6>
 80077ac:	be00      	bkpt	0x0000
 80077ae:	2300      	movs	r3, #0
 80077b0:	e00d      	b.n	80077ce <process_control_request+0x4c6>
          break;
 80077b2:	bf00      	nop
        }
      }
    }
    break;
 80077b4:	e00a      	b.n	80077cc <process_control_request+0x4c4>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 80077b6:	4b09      	ldr	r3, [pc, #36]	; (80077dc <process_control_request+0x4d4>)
 80077b8:	61fb      	str	r3, [r7, #28]
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d000      	beq.n	80077c8 <process_control_request+0x4c0>
 80077c6:	be00      	bkpt	0x0000
 80077c8:	2300      	movs	r3, #0
 80077ca:	e000      	b.n	80077ce <process_control_request+0x4c6>
  }

  return true;
 80077cc:	2301      	movs	r3, #1
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3750      	adds	r7, #80	; 0x50
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	240019a0 	.word	0x240019a0
 80077dc:	e000edf0 	.word	0xe000edf0

080077e0 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b094      	sub	sp, #80	; 0x50
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	4603      	mov	r3, r0
 80077e8:	460a      	mov	r2, r1
 80077ea:	71fb      	strb	r3, [r7, #7]
 80077ec:	4613      	mov	r3, r2
 80077ee:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 80077f0:	79bb      	ldrb	r3, [r7, #6]
 80077f2:	3b01      	subs	r3, #1
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7f9 fc1c 	bl	8001034 <tud_descriptor_configuration_cb>
 80077fc:	6478      	str	r0, [r7, #68]	; 0x44
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 80077fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007800:	2b00      	cmp	r3, #0
 8007802:	d003      	beq.n	800780c <process_set_config+0x2c>
 8007804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007806:	785b      	ldrb	r3, [r3, #1]
 8007808:	2b02      	cmp	r3, #2
 800780a:	d00a      	beq.n	8007822 <process_set_config+0x42>
 800780c:	4b7c      	ldr	r3, [pc, #496]	; (8007a00 <process_set_config+0x220>)
 800780e:	61bb      	str	r3, [r7, #24]
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0301 	and.w	r3, r3, #1
 8007818:	2b00      	cmp	r3, #0
 800781a:	d000      	beq.n	800781e <process_set_config+0x3e>
 800781c:	be00      	bkpt	0x0000
 800781e:	2300      	movs	r3, #0
 8007820:	e0e9      	b.n	80079f6 <process_set_config+0x216>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8007822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007824:	79db      	ldrb	r3, [r3, #7]
 8007826:	115b      	asrs	r3, r3, #5
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	b2d9      	uxtb	r1, r3
 800782e:	4a75      	ldr	r2, [pc, #468]	; (8007a04 <process_set_config+0x224>)
 8007830:	7813      	ldrb	r3, [r2, #0]
 8007832:	f361 1304 	bfi	r3, r1, #4, #1
 8007836:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8007838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800783a:	79db      	ldrb	r3, [r3, #7]
 800783c:	119b      	asrs	r3, r3, #6
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	b2d9      	uxtb	r1, r3
 8007844:	4a6f      	ldr	r2, [pc, #444]	; (8007a04 <process_set_config+0x224>)
 8007846:	7813      	ldrb	r3, [r2, #0]
 8007848:	f361 1345 	bfi	r3, r1, #5, #1
 800784c:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 800784e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007850:	3309      	adds	r3, #9
 8007852:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8007854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007856:	885b      	ldrh	r3, [r3, #2]
 8007858:	b29b      	uxth	r3, r3
 800785a:	461a      	mov	r2, r3
 800785c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800785e:	4413      	add	r3, r2
 8007860:	643b      	str	r3, [r7, #64]	; 0x40

  while( p_desc < desc_end )
 8007862:	e0bd      	b.n	80079e0 <process_set_config+0x200>
  {
    uint8_t assoc_itf_count = 1;
 8007864:	2301      	movs	r3, #1
 8007866:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800786a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800786c:	617b      	str	r3, [r7, #20]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	3301      	adds	r3, #1
 8007872:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8007874:	2b0b      	cmp	r3, #11
 8007876:	d10f      	bne.n	8007898 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8007878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800787a:	63fb      	str	r3, [r7, #60]	; 0x3c
      assoc_itf_count = desc_iad->bInterfaceCount;
 800787c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800787e:	78db      	ldrb	r3, [r3, #3]
 8007880:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007886:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8007896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800789a:	60bb      	str	r3, [r7, #8]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	3301      	adds	r3, #1
 80078a0:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d00a      	beq.n	80078bc <process_set_config+0xdc>
 80078a6:	4b56      	ldr	r3, [pc, #344]	; (8007a00 <process_set_config+0x220>)
 80078a8:	61fb      	str	r3, [r7, #28]
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d000      	beq.n	80078b8 <process_set_config+0xd8>
 80078b6:	be00      	bkpt	0x0000
 80078b8:	2300      	movs	r3, #0
 80078ba:	e09c      	b.n	80079f6 <process_set_config+0x216>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 80078bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078be:	63bb      	str	r3, [r7, #56]	; 0x38

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 80078c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80078c8:	2300      	movs	r3, #0
 80078ca:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80078ce:	e06e      	b.n	80079ae <process_set_config+0x1ce>
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 80078d0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7ff fa75 	bl	8006dc4 <get_driver>
 80078da:	6338      	str	r0, [r7, #48]	; 0x30
      TU_ASSERT(driver);
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10a      	bne.n	80078f8 <process_set_config+0x118>
 80078e2:	4b47      	ldr	r3, [pc, #284]	; (8007a00 <process_set_config+0x220>)
 80078e4:	627b      	str	r3, [r7, #36]	; 0x24
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d000      	beq.n	80078f4 <process_set_config+0x114>
 80078f2:	be00      	bkpt	0x0000
 80078f4:	2300      	movs	r3, #0
 80078f6:	e07e      	b.n	80079f6 <process_set_config+0x216>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 80078f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80078fe:	79f8      	ldrb	r0, [r7, #7]
 8007900:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007902:	4798      	blx	r3
 8007904:	4603      	mov	r3, r0
 8007906:	85fb      	strh	r3, [r7, #46]	; 0x2e

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8007908:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800790a:	2b08      	cmp	r3, #8
 800790c:	d94a      	bls.n	80079a4 <process_set_config+0x1c4>
 800790e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007910:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007912:	429a      	cmp	r2, r3
 8007914:	d846      	bhi.n	80079a4 <process_set_config+0x1c4>
        // Open successfully
        TU_LOG(USBD_DBG, "  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 8007916:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800791a:	2b01      	cmp	r3, #1
 800791c:	d107      	bne.n	800792e <process_set_config+0x14e>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 800791e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	4a39      	ldr	r2, [pc, #228]	; (8007a08 <process_set_config+0x228>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d102      	bne.n	800792e <process_set_config+0x14e>
 8007928:	2302      	movs	r3, #2
 800792a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 800792e:	2300      	movs	r3, #0
 8007930:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8007934:	e024      	b.n	8007980 <process_set_config+0x1a0>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8007936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007938:	789a      	ldrb	r2, [r3, #2]
 800793a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800793e:	4413      	add	r3, r2
 8007940:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8007944:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007948:	4a2e      	ldr	r2, [pc, #184]	; (8007a04 <process_set_config+0x224>)
 800794a:	4413      	add	r3, r2
 800794c:	78db      	ldrb	r3, [r3, #3]
 800794e:	2bff      	cmp	r3, #255	; 0xff
 8007950:	d00a      	beq.n	8007968 <process_set_config+0x188>
 8007952:	4b2b      	ldr	r3, [pc, #172]	; (8007a00 <process_set_config+0x220>)
 8007954:	62bb      	str	r3, [r7, #40]	; 0x28
 8007956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	2b00      	cmp	r3, #0
 8007960:	d000      	beq.n	8007964 <process_set_config+0x184>
 8007962:	be00      	bkpt	0x0000
 8007964:	2300      	movs	r3, #0
 8007966:	e046      	b.n	80079f6 <process_set_config+0x216>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8007968:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800796c:	4a25      	ldr	r2, [pc, #148]	; (8007a04 <process_set_config+0x224>)
 800796e:	4413      	add	r3, r2
 8007970:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8007974:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8007976:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800797a:	3301      	adds	r3, #1
 800797c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8007980:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8007984:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007988:	429a      	cmp	r2, r3
 800798a:	d3d4      	bcc.n	8007936 <process_set_config+0x156>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 800798c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007990:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007992:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007994:	481d      	ldr	r0, [pc, #116]	; (8007a0c <process_set_config+0x22c>)
 8007996:	f002 fd19 	bl	800a3cc <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 800799a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800799c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800799e:	4413      	add	r3, r2
 80079a0:	64fb      	str	r3, [r7, #76]	; 0x4c

        break; // exit driver find loop
 80079a2:	e00b      	b.n	80079bc <process_set_config+0x1dc>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80079a4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80079a8:	3301      	adds	r3, #1
 80079aa:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80079ae:	4b18      	ldr	r3, [pc, #96]	; (8007a10 <process_set_config+0x230>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	1c5a      	adds	r2, r3, #1
 80079b4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80079b8:	429a      	cmp	r2, r3
 80079ba:	da89      	bge.n	80078d0 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 80079bc:	4b14      	ldr	r3, [pc, #80]	; (8007a10 <process_set_config+0x230>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	1c5a      	adds	r2, r3, #1
 80079c2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80079c6:	429a      	cmp	r2, r3
 80079c8:	da0a      	bge.n	80079e0 <process_set_config+0x200>
 80079ca:	4b0d      	ldr	r3, [pc, #52]	; (8007a00 <process_set_config+0x220>)
 80079cc:	623b      	str	r3, [r7, #32]
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d000      	beq.n	80079dc <process_set_config+0x1fc>
 80079da:	be00      	bkpt	0x0000
 80079dc:	2300      	movs	r3, #0
 80079de:	e00a      	b.n	80079f6 <process_set_config+0x216>
  while( p_desc < desc_end )
 80079e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079e4:	429a      	cmp	r2, r3
 80079e6:	f4ff af3d 	bcc.w	8007864 <process_set_config+0x84>
  }

  // invoke callback
  if (tud_mount_cb) tud_mount_cb();
 80079ea:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <process_set_config+0x234>)
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <process_set_config+0x214>
 80079f0:	f7f8 fcf4 	bl	80003dc <tud_mount_cb>

  return true;
 80079f4:	2301      	movs	r3, #1
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3750      	adds	r7, #80	; 0x50
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	e000edf0 	.word	0xe000edf0
 8007a04:	240019a0 	.word	0x240019a0
 8007a08:	08005c41 	.word	0x08005c41
 8007a0c:	240019b3 	.word	0x240019b3
 8007a10:	240019dc 	.word	0x240019dc
 8007a14:	080003dd 	.word	0x080003dd

08007a18 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b094      	sub	sp, #80	; 0x50
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	4603      	mov	r3, r0
 8007a20:	6039      	str	r1, [r7, #0]
 8007a22:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	885b      	ldrh	r3, [r3, #2]
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	84bb      	strh	r3, [r7, #36]	; 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8007a2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a2e:	0a1b      	lsrs	r3, r3, #8
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	885b      	ldrh	r3, [r3, #2]
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	84fb      	strh	r3, [r7, #38]	; 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8007a40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

  switch(desc_type)
 8007a48:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	2b0e      	cmp	r3, #14
 8007a50:	f200 80bc 	bhi.w	8007bcc <process_get_descriptor+0x1b4>
 8007a54:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <process_get_descriptor+0x44>)
 8007a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5a:	bf00      	nop
 8007a5c:	08007a99 	.word	0x08007a99
 8007a60:	08007afd 	.word	0x08007afd
 8007a64:	08007b65 	.word	0x08007b65
 8007a68:	08007bcd 	.word	0x08007bcd
 8007a6c:	08007bcd 	.word	0x08007bcd
 8007a70:	08007b9b 	.word	0x08007b9b
 8007a74:	08007afd 	.word	0x08007afd
 8007a78:	08007bcd 	.word	0x08007bcd
 8007a7c:	08007bcd 	.word	0x08007bcd
 8007a80:	08007bcd 	.word	0x08007bcd
 8007a84:	08007bcd 	.word	0x08007bcd
 8007a88:	08007bcd 	.word	0x08007bcd
 8007a8c:	08007bcd 	.word	0x08007bcd
 8007a90:	08007bcd 	.word	0x08007bcd
 8007a94:	08007aaf 	.word	0x08007aaf
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG(USBD_DBG, " Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8007a98:	f7f9 fac2 	bl	8001020 <tud_descriptor_device_cb>
 8007a9c:	62b8      	str	r0, [r7, #40]	; 0x28
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8007a9e:	79f8      	ldrb	r0, [r7, #7]
 8007aa0:	2312      	movs	r3, #18
 8007aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	f000 fe4b 	bl	8008740 <tud_control_xfer>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	e08f      	b.n	8007bce <process_get_descriptor+0x1b6>
    case TUSB_DESC_BOS:
    {
      TU_LOG(USBD_DBG, " BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 8007aae:	4b4a      	ldr	r3, [pc, #296]	; (8007bd8 <process_get_descriptor+0x1c0>)
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <process_get_descriptor+0xa0>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	e08a      	b.n	8007bce <process_get_descriptor+0x1b6>

      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8007ab8:	f3af 8000 	nop.w
 8007abc:	4603      	mov	r3, r0
 8007abe:	647b      	str	r3, [r7, #68]	; 0x44
      TU_ASSERT(desc_bos);
 8007ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10a      	bne.n	8007adc <process_get_descriptor+0xc4>
 8007ac6:	4b45      	ldr	r3, [pc, #276]	; (8007bdc <process_get_descriptor+0x1c4>)
 8007ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d000      	beq.n	8007ad8 <process_get_descriptor+0xc0>
 8007ad6:	be00      	bkpt	0x0000
 8007ad8:	2300      	movs	r3, #0
 8007ada:	e078      	b.n	8007bce <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8007adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ade:	3302      	adds	r3, #2
 8007ae0:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8007aea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007aec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007af0:	79f8      	ldrb	r0, [r7, #7]
 8007af2:	6839      	ldr	r1, [r7, #0]
 8007af4:	f000 fe24 	bl	8008740 <tud_control_xfer>
 8007af8:	4603      	mov	r3, r0
 8007afa:	e068      	b.n	8007bce <process_get_descriptor+0x1b6>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
 8007afc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d107      	bne.n	8007b14 <process_get_descriptor+0xfc>
      {
        TU_LOG(USBD_DBG, " Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8007b04:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7f9 fa93 	bl	8001034 <tud_descriptor_configuration_cb>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b12:	e00b      	b.n	8007b2c <process_get_descriptor+0x114>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG(USBD_DBG, " Other Speed Configuration\r\n");
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8007b14:	4b32      	ldr	r3, [pc, #200]	; (8007be0 <process_get_descriptor+0x1c8>)
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d101      	bne.n	8007b1e <process_get_descriptor+0x106>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	e057      	b.n	8007bce <process_get_descriptor+0x1b6>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8007b1e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007b22:	4618      	mov	r0, r3
 8007b24:	f3af 8000 	nop.w
 8007b28:	4603      	mov	r3, r0
 8007b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      TU_ASSERT(desc_config);
 8007b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10a      	bne.n	8007b48 <process_get_descriptor+0x130>
 8007b32:	4b2a      	ldr	r3, [pc, #168]	; (8007bdc <process_get_descriptor+0x1c4>)
 8007b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d000      	beq.n	8007b44 <process_get_descriptor+0x12c>
 8007b42:	be00      	bkpt	0x0000
 8007b44:	2300      	movs	r3, #0
 8007b46:	e042      	b.n	8007bce <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8007b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b4a:	3302      	adds	r3, #2
 8007b4c:	61fb      	str	r3, [r7, #28]
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	881b      	ldrh	r3, [r3, #0]
 8007b52:	867b      	strh	r3, [r7, #50]	; 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8007b54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b56:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007b58:	79f8      	ldrb	r0, [r7, #7]
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	f000 fdf0 	bl	8008740 <tud_control_xfer>
 8007b60:	4603      	mov	r3, r0
 8007b62:	e034      	b.n	8007bce <process_get_descriptor+0x1b6>
    case TUSB_DESC_STRING:
    {
      TU_LOG(USBD_DBG, " String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	889b      	ldrh	r3, [r3, #4]
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007b6e:	4611      	mov	r1, r2
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7f9 fa6d 	bl	8001050 <tud_descriptor_string_cb>
 8007b76:	6378      	str	r0, [r7, #52]	; 0x34
      TU_VERIFY(desc_str);
 8007b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <process_get_descriptor+0x16a>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	e025      	b.n	8007bce <process_get_descriptor+0x1b6>
 8007b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b84:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	79f8      	ldrb	r0, [r7, #7]
 8007b8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	f000 fdd5 	bl	8008740 <tud_control_xfer>
 8007b96:	4603      	mov	r3, r0
 8007b98:	e019      	b.n	8007bce <process_get_descriptor+0x1b6>

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG(USBD_DBG, " Device Qualifier\r\n");

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 8007b9a:	4b12      	ldr	r3, [pc, #72]	; (8007be4 <process_get_descriptor+0x1cc>)
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <process_get_descriptor+0x18c>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	e014      	b.n	8007bce <process_get_descriptor+0x1b6>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8007ba4:	f3af 8000 	nop.w
 8007ba8:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(desc_qualifier);
 8007baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <process_get_descriptor+0x19c>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	e00c      	b.n	8007bce <process_get_descriptor+0x1b6>
 8007bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	79f8      	ldrb	r0, [r7, #7]
 8007bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	f000 fdbc 	bl	8008740 <tud_control_xfer>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	e000      	b.n	8007bce <process_get_descriptor+0x1b6>
    }
    // break; // unreachable

    default: return false;
 8007bcc:	2300      	movs	r3, #0
  }
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3750      	adds	r7, #80	; 0x50
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	00000000 	.word	0x00000000
 8007bdc:	e000edf0 	.word	0xe000edf0
	...

08007be8 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const * event, bool in_isr)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b0aa      	sub	sp, #168	; 0xa8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	70fb      	strb	r3, [r7, #3]
  switch (event->event_id)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	785b      	ldrb	r3, [r3, #1]
 8007bf8:	3b02      	subs	r3, #2
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	f200 8198 	bhi.w	8007f30 <dcd_event_handler+0x348>
 8007c00:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <dcd_event_handler+0x20>)
 8007c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c06:	bf00      	nop
 8007c08:	08007c19 	.word	0x08007c19
 8007c0c:	08007e1d 	.word	0x08007e1d
 8007c10:	08007cd9 	.word	0x08007cd9
 8007c14:	08007d7f 	.word	0x08007d7f
  {
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected  = 0;
 8007c18:	4a82      	ldr	r2, [pc, #520]	; (8007e24 <dcd_event_handler+0x23c>)
 8007c1a:	7813      	ldrb	r3, [r2, #0]
 8007c1c:	f36f 0300 	bfc	r3, #0, #1
 8007c20:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed  = 0;
 8007c22:	4a80      	ldr	r2, [pc, #512]	; (8007e24 <dcd_event_handler+0x23c>)
 8007c24:	7813      	ldrb	r3, [r2, #0]
 8007c26:	f36f 0341 	bfc	r3, #1, #1
 8007c2a:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num    = 0;
 8007c2c:	4b7d      	ldr	r3, [pc, #500]	; (8007e24 <dcd_event_handler+0x23c>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
 8007c32:	4a7c      	ldr	r2, [pc, #496]	; (8007e24 <dcd_event_handler+0x23c>)
 8007c34:	7813      	ldrb	r3, [r2, #0]
 8007c36:	f36f 0382 	bfc	r3, #2, #1
 8007c3a:	7013      	strb	r3, [r2, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 8007c3c:	4b7a      	ldr	r3, [pc, #488]	; (8007e28 <dcd_event_handler+0x240>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c4a:	78fb      	ldrb	r3, [r7, #3]
 8007c4c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if (!in_isr) {
 8007c50:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007c54:	f083 0301 	eor.w	r3, r3, #1
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d009      	beq.n	8007c72 <dcd_event_handler+0x8a>
 8007c5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  qhdl->interrupt_set(false);
 8007c66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	4798      	blx	r3
}
 8007c70:	bf00      	nop
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 8007c72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c76:	3304      	adds	r3, #4
 8007c78:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7ff f816 	bl	8006cae <tu_fifo_write>
 8007c82:	4603      	mov	r3, r0
 8007c84:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

  if (!in_isr) {
 8007c88:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007c8c:	f083 0301 	eor.w	r3, r3, #1
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d009      	beq.n	8007caa <dcd_event_handler+0xc2>
 8007c96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  qhdl->interrupt_set(true);
 8007c9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2001      	movs	r0, #1
 8007ca6:	4798      	blx	r3
}
 8007ca8:	bf00      	nop
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 8007caa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007cae:	f083 0301 	eor.w	r3, r3, #1
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00b      	beq.n	8007cd0 <dcd_event_handler+0xe8>
 8007cb8:	4b5c      	ldr	r3, [pc, #368]	; (8007e2c <dcd_event_handler+0x244>)
 8007cba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d003      	beq.n	8007cd4 <dcd_event_handler+0xec>
 8007ccc:	be00      	bkpt	0x0000
 8007cce:	e001      	b.n	8007cd4 <dcd_event_handler+0xec>

  return success;
 8007cd0:	bf00      	nop
 8007cd2:	e172      	b.n	8007fba <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 8007cd4:	bf00      	nop
    break;
 8007cd6:	e170      	b.n	8007fba <dcd_event_handler+0x3d2>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if ( _usbd_dev.connected )
 8007cd8:	4b52      	ldr	r3, [pc, #328]	; (8007e24 <dcd_event_handler+0x23c>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 8164 	beq.w	8007fb0 <dcd_event_handler+0x3c8>
      {
        _usbd_dev.suspended = 1;
 8007ce8:	4a4e      	ldr	r2, [pc, #312]	; (8007e24 <dcd_event_handler+0x23c>)
 8007cea:	7813      	ldrb	r3, [r2, #0]
 8007cec:	f043 0304 	orr.w	r3, r3, #4
 8007cf0:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8007cf2:	4b4d      	ldr	r3, [pc, #308]	; (8007e28 <dcd_event_handler+0x240>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007cfe:	78fb      	ldrb	r3, [r7, #3]
 8007d00:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  if (!in_isr) {
 8007d04:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8007d08:	f083 0301 	eor.w	r3, r3, #1
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d007      	beq.n	8007d22 <dcd_event_handler+0x13a>
 8007d12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d16:	677b      	str	r3, [r7, #116]	; 0x74
  qhdl->interrupt_set(false);
 8007d18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	4798      	blx	r3
}
 8007d20:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8007d22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d26:	3304      	adds	r3, #4
 8007d28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fe ffbf 	bl	8006cae <tu_fifo_write>
 8007d30:	4603      	mov	r3, r0
 8007d32:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  if (!in_isr) {
 8007d36:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8007d3a:	f083 0301 	eor.w	r3, r3, #1
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d007      	beq.n	8007d54 <dcd_event_handler+0x16c>
 8007d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d48:	66fb      	str	r3, [r7, #108]	; 0x6c
  qhdl->interrupt_set(true);
 8007d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2001      	movs	r0, #1
 8007d50:	4798      	blx	r3
}
 8007d52:	bf00      	nop
  TU_ASSERT(success);
 8007d54:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8007d58:	f083 0301 	eor.w	r3, r3, #1
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d009      	beq.n	8007d76 <dcd_event_handler+0x18e>
 8007d62:	4b32      	ldr	r3, [pc, #200]	; (8007e2c <dcd_event_handler+0x244>)
 8007d64:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0301 	and.w	r3, r3, #1
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <dcd_event_handler+0x192>
 8007d72:	be00      	bkpt	0x0000
 8007d74:	e001      	b.n	8007d7a <dcd_event_handler+0x192>
  return success;
 8007d76:	bf00      	nop
 8007d78:	e11a      	b.n	8007fb0 <dcd_event_handler+0x3c8>
  TU_ASSERT(success);
 8007d7a:	bf00      	nop
      }
    break;
 8007d7c:	e118      	b.n	8007fb0 <dcd_event_handler+0x3c8>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if ( _usbd_dev.connected )
 8007d7e:	4b29      	ldr	r3, [pc, #164]	; (8007e24 <dcd_event_handler+0x23c>)
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 8113 	beq.w	8007fb4 <dcd_event_handler+0x3cc>
      {
        _usbd_dev.suspended = 0;
 8007d8e:	4a25      	ldr	r2, [pc, #148]	; (8007e24 <dcd_event_handler+0x23c>)
 8007d90:	7813      	ldrb	r3, [r2, #0]
 8007d92:	f36f 0382 	bfc	r3, #2, #1
 8007d96:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8007d98:	4b23      	ldr	r3, [pc, #140]	; (8007e28 <dcd_event_handler+0x240>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	667b      	str	r3, [r7, #100]	; 0x64
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	663b      	str	r3, [r7, #96]	; 0x60
 8007da2:	78fb      	ldrb	r3, [r7, #3]
 8007da4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (!in_isr) {
 8007da8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007dac:	f083 0301 	eor.w	r3, r3, #1
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d006      	beq.n	8007dc4 <dcd_event_handler+0x1dc>
 8007db6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007db8:	65bb      	str	r3, [r7, #88]	; 0x58
  qhdl->interrupt_set(false);
 8007dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	4798      	blx	r3
}
 8007dc2:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8007dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fe ff6f 	bl	8006cae <tu_fifo_write>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (!in_isr) {
 8007dd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007dda:	f083 0301 	eor.w	r3, r3, #1
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d006      	beq.n	8007df2 <dcd_event_handler+0x20a>
 8007de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007de6:	653b      	str	r3, [r7, #80]	; 0x50
  qhdl->interrupt_set(true);
 8007de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2001      	movs	r0, #1
 8007dee:	4798      	blx	r3
}
 8007df0:	bf00      	nop
  TU_ASSERT(success);
 8007df2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007df6:	f083 0301 	eor.w	r3, r3, #1
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d009      	beq.n	8007e14 <dcd_event_handler+0x22c>
 8007e00:	4b0a      	ldr	r3, [pc, #40]	; (8007e2c <dcd_event_handler+0x244>)
 8007e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <dcd_event_handler+0x230>
 8007e10:	be00      	bkpt	0x0000
 8007e12:	e001      	b.n	8007e18 <dcd_event_handler+0x230>
  return success;
 8007e14:	bf00      	nop
 8007e16:	e0cd      	b.n	8007fb4 <dcd_event_handler+0x3cc>
  TU_ASSERT(success);
 8007e18:	bf00      	nop
      }
    break;
 8007e1a:	e0cb      	b.n	8007fb4 <dcd_event_handler+0x3cc>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8007e22:	e023      	b.n	8007e6c <dcd_event_handler+0x284>
 8007e24:	240019a0 	.word	0x240019a0
 8007e28:	24001aa0 	.word	0x24001aa0
 8007e2c:	e000edf0 	.word	0xe000edf0
      {
        usbd_class_driver_t const * driver = get_driver(i);
 8007e30:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fe ffc5 	bl	8006dc4 <get_driver>
 8007e3a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
        if (driver && driver->sof)
 8007e3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00d      	beq.n	8007e62 <dcd_event_handler+0x27a>
 8007e46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d008      	beq.n	8007e62 <dcd_event_handler+0x27a>
        {
          driver->sof(event->rhport, event->sof.frame_count);
 8007e50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	7810      	ldrb	r0, [r2, #0]
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	6852      	ldr	r2, [r2, #4]
 8007e5e:	4611      	mov	r1, r2
 8007e60:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8007e62:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007e66:	3301      	adds	r3, #1
 8007e68:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8007e6c:	4b55      	ldr	r3, [pc, #340]	; (8007fc4 <dcd_event_handler+0x3dc>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	1c5a      	adds	r2, r3, #1
 8007e72:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007e76:	429a      	cmp	r2, r3
 8007e78:	dada      	bge.n	8007e30 <dcd_event_handler+0x248>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if ( _usbd_dev.suspended )
 8007e7a:	4b53      	ldr	r3, [pc, #332]	; (8007fc8 <dcd_event_handler+0x3e0>)
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 8097 	beq.w	8007fb8 <dcd_event_handler+0x3d0>
      {
        _usbd_dev.suspended = 0;
 8007e8a:	4a4f      	ldr	r2, [pc, #316]	; (8007fc8 <dcd_event_handler+0x3e0>)
 8007e8c:	7813      	ldrb	r3, [r2, #0]
 8007e8e:	f36f 0382 	bfc	r3, #2, #1
 8007e92:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8007e94:	f107 0308 	add.w	r3, r7, #8
 8007e98:	2200      	movs	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	605a      	str	r2, [r3, #4]
 8007e9e:	609a      	str	r2, [r3, #8]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	723b      	strb	r3, [r7, #8]
 8007ea6:	2305      	movs	r3, #5
 8007ea8:	727b      	strb	r3, [r7, #9]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 8007eaa:	4b48      	ldr	r3, [pc, #288]	; (8007fcc <dcd_event_handler+0x3e4>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eb0:	f107 0308 	add.w	r3, r7, #8
 8007eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8007eb6:	78fb      	ldrb	r3, [r7, #3]
 8007eb8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (!in_isr) {
 8007ebc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007ec0:	f083 0301 	eor.w	r3, r3, #1
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d006      	beq.n	8007ed8 <dcd_event_handler+0x2f0>
 8007eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
  qhdl->interrupt_set(false);
 8007ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	4798      	blx	r3
}
 8007ed6:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8007ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eda:	3304      	adds	r3, #4
 8007edc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fe fee5 	bl	8006cae <tu_fifo_write>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (!in_isr) {
 8007eea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007eee:	f083 0301 	eor.w	r3, r3, #1
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d006      	beq.n	8007f06 <dcd_event_handler+0x31e>
 8007ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007efa:	637b      	str	r3, [r7, #52]	; 0x34
  qhdl->interrupt_set(true);
 8007efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2001      	movs	r0, #1
 8007f02:	4798      	blx	r3
}
 8007f04:	bf00      	nop
  TU_ASSERT(success);
 8007f06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007f0a:	f083 0301 	eor.w	r3, r3, #1
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d009      	beq.n	8007f28 <dcd_event_handler+0x340>
 8007f14:	4b2e      	ldr	r3, [pc, #184]	; (8007fd0 <dcd_event_handler+0x3e8>)
 8007f16:	633b      	str	r3, [r7, #48]	; 0x30
 8007f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d003      	beq.n	8007f2c <dcd_event_handler+0x344>
 8007f24:	be00      	bkpt	0x0000
 8007f26:	e001      	b.n	8007f2c <dcd_event_handler+0x344>
  return success;
 8007f28:	bf00      	nop
 8007f2a:	e045      	b.n	8007fb8 <dcd_event_handler+0x3d0>
  TU_ASSERT(success);
 8007f2c:	bf00      	nop
      }

      // skip osal queue for SOF in usbd task
    break;
 8007f2e:	e043      	b.n	8007fb8 <dcd_event_handler+0x3d0>

    default:
      osal_queue_send(_usbd_q, event, in_isr);
 8007f30:	4b26      	ldr	r3, [pc, #152]	; (8007fcc <dcd_event_handler+0x3e4>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f3a:	78fb      	ldrb	r3, [r7, #3]
 8007f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (!in_isr) {
 8007f40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f44:	f083 0301 	eor.w	r3, r3, #1
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d006      	beq.n	8007f5c <dcd_event_handler+0x374>
 8007f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f50:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2000      	movs	r0, #0
 8007f58:	4798      	blx	r3
}
 8007f5a:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8007f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5e:	3304      	adds	r3, #4
 8007f60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fe fea3 	bl	8006cae <tu_fifo_write>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	77fb      	strb	r3, [r7, #31]
  if (!in_isr) {
 8007f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f70:	f083 0301 	eor.w	r3, r3, #1
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d006      	beq.n	8007f88 <dcd_event_handler+0x3a0>
 8007f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7c:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2001      	movs	r0, #1
 8007f84:	4798      	blx	r3
}
 8007f86:	bf00      	nop
  TU_ASSERT(success);
 8007f88:	7ffb      	ldrb	r3, [r7, #31]
 8007f8a:	f083 0301 	eor.w	r3, r3, #1
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d009      	beq.n	8007fa8 <dcd_event_handler+0x3c0>
 8007f94:	4b0e      	ldr	r3, [pc, #56]	; (8007fd0 <dcd_event_handler+0x3e8>)
 8007f96:	617b      	str	r3, [r7, #20]
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <dcd_event_handler+0x3c4>
 8007fa4:	be00      	bkpt	0x0000
 8007fa6:	e001      	b.n	8007fac <dcd_event_handler+0x3c4>
  return success;
 8007fa8:	bf00      	nop
 8007faa:	e006      	b.n	8007fba <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 8007fac:	bf00      	nop
    break;
 8007fae:	e004      	b.n	8007fba <dcd_event_handler+0x3d2>
    break;
 8007fb0:	bf00      	nop
 8007fb2:	e002      	b.n	8007fba <dcd_event_handler+0x3d2>
    break;
 8007fb4:	bf00      	nop
 8007fb6:	e000      	b.n	8007fba <dcd_event_handler+0x3d2>
    break;
 8007fb8:	bf00      	nop
  }
}
 8007fba:	bf00      	nop
 8007fbc:	37a8      	adds	r7, #168	; 0xa8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	240019dc 	.word	0x240019dc
 8007fc8:	240019a0 	.word	0x240019a0
 8007fcc:	24001aa0 	.word	0x24001aa0
 8007fd0:	e000edf0 	.word	0xe000edf0

08007fd4 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 8007fde:	79fb      	ldrb	r3, [r7, #7]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d005      	beq.n	8007ff0 <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 8007fe4:	4b07      	ldr	r3, [pc, #28]	; (8008004 <usbd_int_set+0x30>)
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f001 f82d 	bl	8009048 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 8007fee:	e004      	b.n	8007ffa <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8007ff0:	4b04      	ldr	r3, [pc, #16]	; (8008004 <usbd_int_set+0x30>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f001 f833 	bl	8009060 <dcd_int_disable>
}
 8007ffa:	bf00      	nop
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	24000035 	.word	0x24000035

08008008 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b08a      	sub	sp, #40	; 0x28
 800800c:	af00      	add	r7, sp, #0
 800800e:	6039      	str	r1, [r7, #0]
 8008010:	4611      	mov	r1, r2
 8008012:	461a      	mov	r2, r3
 8008014:	4603      	mov	r3, r0
 8008016:	71fb      	strb	r3, [r7, #7]
 8008018:	460b      	mov	r3, r1
 800801a:	71bb      	strb	r3, [r7, #6]
 800801c:	4613      	mov	r3, r2
 800801e:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8008020:	2300      	movs	r3, #0
 8008022:	627b      	str	r3, [r7, #36]	; 0x24
 8008024:	e04d      	b.n	80080c2 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	785b      	ldrb	r3, [r3, #1]
 800802e:	2b05      	cmp	r3, #5
 8008030:	d108      	bne.n	8008044 <usbd_open_edpt_pair+0x3c>
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	78db      	ldrb	r3, [r3, #3]
 8008036:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800803a:	b2db      	uxtb	r3, r3
 800803c:	461a      	mov	r2, r3
 800803e:	797b      	ldrb	r3, [r7, #5]
 8008040:	4293      	cmp	r3, r2
 8008042:	d00a      	beq.n	800805a <usbd_open_edpt_pair+0x52>
 8008044:	4b23      	ldr	r3, [pc, #140]	; (80080d4 <usbd_open_edpt_pair+0xcc>)
 8008046:	61bb      	str	r3, [r7, #24]
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0301 	and.w	r3, r3, #1
 8008050:	2b00      	cmp	r3, #0
 8008052:	d000      	beq.n	8008056 <usbd_open_edpt_pair+0x4e>
 8008054:	be00      	bkpt	0x0000
 8008056:	2300      	movs	r3, #0
 8008058:	e038      	b.n	80080cc <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800805a:	79fb      	ldrb	r3, [r7, #7]
 800805c:	6a39      	ldr	r1, [r7, #32]
 800805e:	4618      	mov	r0, r3
 8008060:	f000 f83a 	bl	80080d8 <usbd_edpt_open>
 8008064:	4603      	mov	r3, r0
 8008066:	f083 0301 	eor.w	r3, r3, #1
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00a      	beq.n	8008086 <usbd_open_edpt_pair+0x7e>
 8008070:	4b18      	ldr	r3, [pc, #96]	; (80080d4 <usbd_open_edpt_pair+0xcc>)
 8008072:	61fb      	str	r3, [r7, #28]
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	2b00      	cmp	r3, #0
 800807e:	d000      	beq.n	8008082 <usbd_open_edpt_pair+0x7a>
 8008080:	be00      	bkpt	0x0000
 8008082:	2300      	movs	r3, #0
 8008084:	e022      	b.n	80080cc <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	789b      	ldrb	r3, [r3, #2]
 800808a:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800808c:	7dfb      	ldrb	r3, [r7, #23]
 800808e:	09db      	lsrs	r3, r3, #7
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b01      	cmp	r3, #1
 8008094:	d104      	bne.n	80080a0 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8008096:	6a3b      	ldr	r3, [r7, #32]
 8008098:	789a      	ldrb	r2, [r3, #2]
 800809a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809c:	701a      	strb	r2, [r3, #0]
 800809e:	e003      	b.n	80080a8 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 80080a0:	6a3b      	ldr	r3, [r7, #32]
 80080a2:	789a      	ldrb	r2, [r3, #2]
 80080a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a6:	701a      	strb	r2, [r3, #0]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	461a      	mov	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 80080ba:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	3301      	adds	r3, #1
 80080c0:	627b      	str	r3, [r7, #36]	; 0x24
 80080c2:	79bb      	ldrb	r3, [r7, #6]
 80080c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c6:	429a      	cmp	r2, r3
 80080c8:	dbad      	blt.n	8008026 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 80080ca:	2301      	movs	r3, #1
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3728      	adds	r7, #40	; 0x28
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	e000edf0 	.word	0xe000edf0

080080d8 <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	4603      	mov	r3, r0
 80080e0:	6039      	str	r1, [r7, #0]
 80080e2:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 80080e4:	4b1b      	ldr	r3, [pc, #108]	; (8008154 <usbd_edpt_open+0x7c>)
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	789b      	ldrb	r3, [r3, #2]
 80080ee:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80080f0:	7bfb      	ldrb	r3, [r7, #15]
 80080f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	2b08      	cmp	r3, #8
 80080fa:	d90a      	bls.n	8008112 <usbd_edpt_open+0x3a>
 80080fc:	4b16      	ldr	r3, [pc, #88]	; (8008158 <usbd_edpt_open+0x80>)
 80080fe:	613b      	str	r3, [r7, #16]
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	d000      	beq.n	800810e <usbd_edpt_open+0x36>
 800810c:	be00      	bkpt	0x0000
 800810e:	2300      	movs	r3, #0
 8008110:	e01c      	b.n	800814c <usbd_edpt_open+0x74>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8008112:	4b12      	ldr	r3, [pc, #72]	; (800815c <usbd_edpt_open+0x84>)
 8008114:	789b      	ldrb	r3, [r3, #2]
 8008116:	4619      	mov	r1, r3
 8008118:	6838      	ldr	r0, [r7, #0]
 800811a:	f002 f8db 	bl	800a2d4 <tu_edpt_validate>
 800811e:	4603      	mov	r3, r0
 8008120:	f083 0301 	eor.w	r3, r3, #1
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00a      	beq.n	8008140 <usbd_edpt_open+0x68>
 800812a:	4b0b      	ldr	r3, [pc, #44]	; (8008158 <usbd_edpt_open+0x80>)
 800812c:	617b      	str	r3, [r7, #20]
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b00      	cmp	r3, #0
 8008138:	d000      	beq.n	800813c <usbd_edpt_open+0x64>
 800813a:	be00      	bkpt	0x0000
 800813c:	2300      	movs	r3, #0
 800813e:	e005      	b.n	800814c <usbd_edpt_open+0x74>

  return dcd_edpt_open(rhport, desc_ep);
 8008140:	79fb      	ldrb	r3, [r7, #7]
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	4618      	mov	r0, r3
 8008146:	f000 ffdb 	bl	8009100 <dcd_edpt_open>
 800814a:	4603      	mov	r3, r0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3718      	adds	r7, #24
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	24000035 	.word	0x24000035
 8008158:	e000edf0 	.word	0xe000edf0
 800815c:	240019a0 	.word	0x240019a0

08008160 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	4603      	mov	r3, r0
 8008168:	460a      	mov	r2, r1
 800816a:	71fb      	strb	r3, [r7, #7]
 800816c:	4613      	mov	r3, r2
 800816e:	71bb      	strb	r3, [r7, #6]
 8008170:	79bb      	ldrb	r3, [r7, #6]
 8008172:	73bb      	strb	r3, [r7, #14]
 8008174:	7bbb      	ldrb	r3, [r7, #14]
 8008176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800817a:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 800817c:	75fb      	strb	r3, [r7, #23]
 800817e:	79bb      	ldrb	r3, [r7, #6]
 8008180:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008182:	7bfb      	ldrb	r3, [r7, #15]
 8008184:	09db      	lsrs	r3, r3, #7
 8008186:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 8008188:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800818a:	7dfa      	ldrb	r2, [r7, #23]
 800818c:	7dbb      	ldrb	r3, [r7, #22]
 800818e:	0052      	lsls	r2, r2, #1
 8008190:	4413      	add	r3, r2
 8008192:	3320      	adds	r3, #32
 8008194:	4a06      	ldr	r2, [pc, #24]	; (80081b0 <usbd_edpt_claim+0x50>)
 8008196:	4413      	add	r3, r2
 8008198:	3305      	adds	r3, #5
 800819a:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 800819c:	2100      	movs	r1, #0
 800819e:	6938      	ldr	r0, [r7, #16]
 80081a0:	f002 f834 	bl	800a20c <tu_edpt_claim>
 80081a4:	4603      	mov	r3, r0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3718      	adds	r7, #24
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	240019a0 	.word	0x240019a0

080081b4 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	4603      	mov	r3, r0
 80081bc:	460a      	mov	r2, r1
 80081be:	71fb      	strb	r3, [r7, #7]
 80081c0:	4613      	mov	r3, r2
 80081c2:	71bb      	strb	r3, [r7, #6]
 80081c4:	79bb      	ldrb	r3, [r7, #6]
 80081c6:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80081c8:	7bbb      	ldrb	r3, [r7, #14]
 80081ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ce:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 80081d0:	75fb      	strb	r3, [r7, #23]
 80081d2:	79bb      	ldrb	r3, [r7, #6]
 80081d4:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
 80081d8:	09db      	lsrs	r3, r3, #7
 80081da:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 80081dc:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80081de:	7dfa      	ldrb	r2, [r7, #23]
 80081e0:	7dbb      	ldrb	r3, [r7, #22]
 80081e2:	0052      	lsls	r2, r2, #1
 80081e4:	4413      	add	r3, r2
 80081e6:	3320      	adds	r3, #32
 80081e8:	4a06      	ldr	r2, [pc, #24]	; (8008204 <usbd_edpt_release+0x50>)
 80081ea:	4413      	add	r3, r2
 80081ec:	3305      	adds	r3, #5
 80081ee:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 80081f0:	2100      	movs	r1, #0
 80081f2:	6938      	ldr	r0, [r7, #16]
 80081f4:	f002 f844 	bl	800a280 <tu_edpt_release>
 80081f8:	4603      	mov	r3, r0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	240019a0 	.word	0x240019a0

08008208 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	603a      	str	r2, [r7, #0]
 8008210:	461a      	mov	r2, r3
 8008212:	4603      	mov	r3, r0
 8008214:	71fb      	strb	r3, [r7, #7]
 8008216:	460b      	mov	r3, r1
 8008218:	71bb      	strb	r3, [r7, #6]
 800821a:	4613      	mov	r3, r2
 800821c:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 800821e:	4b32      	ldr	r3, [pc, #200]	; (80082e8 <usbd_edpt_xfer+0xe0>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	71fb      	strb	r3, [r7, #7]
 8008224:	79bb      	ldrb	r3, [r7, #6]
 8008226:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008228:	7abb      	ldrb	r3, [r7, #10]
 800822a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800822e:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008230:	75fb      	strb	r3, [r7, #23]
 8008232:	79bb      	ldrb	r3, [r7, #6]
 8008234:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008236:	7afb      	ldrb	r3, [r7, #11]
 8008238:	09db      	lsrs	r3, r3, #7
 800823a:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800823c:	75bb      	strb	r3, [r7, #22]
  // TU_VERIFY(tud_ready());

  TU_LOG(USBD_DBG, "  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 800823e:	7dfa      	ldrb	r2, [r7, #23]
 8008240:	7dbb      	ldrb	r3, [r7, #22]
 8008242:	492a      	ldr	r1, [pc, #168]	; (80082ec <usbd_edpt_xfer+0xe4>)
 8008244:	0052      	lsls	r2, r2, #1
 8008246:	440a      	add	r2, r1
 8008248:	4413      	add	r3, r2
 800824a:	3320      	adds	r3, #32
 800824c:	795b      	ldrb	r3, [r3, #5]
 800824e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00a      	beq.n	800826e <usbd_edpt_xfer+0x66>
 8008258:	4b25      	ldr	r3, [pc, #148]	; (80082f0 <usbd_edpt_xfer+0xe8>)
 800825a:	60fb      	str	r3, [r7, #12]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	2b00      	cmp	r3, #0
 8008266:	d000      	beq.n	800826a <usbd_edpt_xfer+0x62>
 8008268:	be00      	bkpt	0x0000
 800826a:	2300      	movs	r3, #0
 800826c:	e038      	b.n	80082e0 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800826e:	7dfa      	ldrb	r2, [r7, #23]
 8008270:	7dbb      	ldrb	r3, [r7, #22]
 8008272:	491e      	ldr	r1, [pc, #120]	; (80082ec <usbd_edpt_xfer+0xe4>)
 8008274:	0052      	lsls	r2, r2, #1
 8008276:	440a      	add	r2, r1
 8008278:	4413      	add	r3, r2
 800827a:	f103 0220 	add.w	r2, r3, #32
 800827e:	7953      	ldrb	r3, [r2, #5]
 8008280:	f043 0301 	orr.w	r3, r3, #1
 8008284:	7153      	strb	r3, [r2, #5]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8008286:	88bb      	ldrh	r3, [r7, #4]
 8008288:	79b9      	ldrb	r1, [r7, #6]
 800828a:	79f8      	ldrb	r0, [r7, #7]
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	f001 f897 	bl	80093c0 <dcd_edpt_xfer>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <usbd_edpt_xfer+0x94>
  {
    return true;
 8008298:	2301      	movs	r3, #1
 800829a:	e021      	b.n	80082e0 <usbd_edpt_xfer+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 800829c:	7dfa      	ldrb	r2, [r7, #23]
 800829e:	7dbb      	ldrb	r3, [r7, #22]
 80082a0:	4912      	ldr	r1, [pc, #72]	; (80082ec <usbd_edpt_xfer+0xe4>)
 80082a2:	0052      	lsls	r2, r2, #1
 80082a4:	440a      	add	r2, r1
 80082a6:	4413      	add	r3, r2
 80082a8:	f103 0220 	add.w	r2, r3, #32
 80082ac:	7953      	ldrb	r3, [r2, #5]
 80082ae:	f36f 0300 	bfc	r3, #0, #1
 80082b2:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 80082b4:	7dfa      	ldrb	r2, [r7, #23]
 80082b6:	7dbb      	ldrb	r3, [r7, #22]
 80082b8:	490c      	ldr	r1, [pc, #48]	; (80082ec <usbd_edpt_xfer+0xe4>)
 80082ba:	0052      	lsls	r2, r2, #1
 80082bc:	440a      	add	r2, r1
 80082be:	4413      	add	r3, r2
 80082c0:	f103 0220 	add.w	r2, r3, #32
 80082c4:	7953      	ldrb	r3, [r2, #5]
 80082c6:	f36f 0382 	bfc	r3, #2, #1
 80082ca:	7153      	strb	r3, [r2, #5]
    TU_LOG(USBD_DBG, "FAILED\r\n");
    TU_BREAKPOINT();
 80082cc:	4b08      	ldr	r3, [pc, #32]	; (80082f0 <usbd_edpt_xfer+0xe8>)
 80082ce:	613b      	str	r3, [r7, #16]
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0301 	and.w	r3, r3, #1
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d000      	beq.n	80082de <usbd_edpt_xfer+0xd6>
 80082dc:	be00      	bkpt	0x0000
    return false;
 80082de:	2300      	movs	r3, #0
  }
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3718      	adds	r7, #24
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	24000035 	.word	0x24000035
 80082ec:	240019a0 	.word	0x240019a0
 80082f0:	e000edf0 	.word	0xe000edf0

080082f4 <usbd_edpt_xfer_fifo>:
// The number of bytes has to be given explicitly to allow more flexible control of how many
// bytes should be written and second to keep the return value free to give back a boolean
// success message. If total_bytes is too big, the FIFO will copy only what is available
// into the USB buffer!
bool usbd_edpt_xfer_fifo(uint8_t rhport, uint8_t ep_addr, tu_fifo_t * ff, uint16_t total_bytes)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	603a      	str	r2, [r7, #0]
 80082fc:	461a      	mov	r2, r3
 80082fe:	4603      	mov	r3, r0
 8008300:	71fb      	strb	r3, [r7, #7]
 8008302:	460b      	mov	r3, r1
 8008304:	71bb      	strb	r3, [r7, #6]
 8008306:	4613      	mov	r3, r2
 8008308:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 800830a:	4b32      	ldr	r3, [pc, #200]	; (80083d4 <usbd_edpt_xfer_fifo+0xe0>)
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	71fb      	strb	r3, [r7, #7]
 8008310:	79bb      	ldrb	r3, [r7, #6]
 8008312:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008314:	7abb      	ldrb	r3, [r7, #10]
 8008316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800831a:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800831c:	75fb      	strb	r3, [r7, #23]
 800831e:	79bb      	ldrb	r3, [r7, #6]
 8008320:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008322:	7afb      	ldrb	r3, [r7, #11]
 8008324:	09db      	lsrs	r3, r3, #7
 8008326:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8008328:	75bb      	strb	r3, [r7, #22]

  TU_LOG(USBD_DBG, "  Queue ISO EP %02X with %u bytes ... ", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 800832a:	7dfa      	ldrb	r2, [r7, #23]
 800832c:	7dbb      	ldrb	r3, [r7, #22]
 800832e:	492a      	ldr	r1, [pc, #168]	; (80083d8 <usbd_edpt_xfer_fifo+0xe4>)
 8008330:	0052      	lsls	r2, r2, #1
 8008332:	440a      	add	r2, r1
 8008334:	4413      	add	r3, r2
 8008336:	3320      	adds	r3, #32
 8008338:	795b      	ldrb	r3, [r3, #5]
 800833a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00a      	beq.n	800835a <usbd_edpt_xfer_fifo+0x66>
 8008344:	4b25      	ldr	r3, [pc, #148]	; (80083dc <usbd_edpt_xfer_fifo+0xe8>)
 8008346:	60fb      	str	r3, [r7, #12]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 0301 	and.w	r3, r3, #1
 8008350:	2b00      	cmp	r3, #0
 8008352:	d000      	beq.n	8008356 <usbd_edpt_xfer_fifo+0x62>
 8008354:	be00      	bkpt	0x0000
 8008356:	2300      	movs	r3, #0
 8008358:	e038      	b.n	80083cc <usbd_edpt_xfer_fifo+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer() could return
  // and usbd task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800835a:	7dfa      	ldrb	r2, [r7, #23]
 800835c:	7dbb      	ldrb	r3, [r7, #22]
 800835e:	491e      	ldr	r1, [pc, #120]	; (80083d8 <usbd_edpt_xfer_fifo+0xe4>)
 8008360:	0052      	lsls	r2, r2, #1
 8008362:	440a      	add	r2, r1
 8008364:	4413      	add	r3, r2
 8008366:	f103 0220 	add.w	r2, r3, #32
 800836a:	7953      	ldrb	r3, [r2, #5]
 800836c:	f043 0301 	orr.w	r3, r3, #1
 8008370:	7153      	strb	r3, [r2, #5]

  if (dcd_edpt_xfer_fifo(rhport, ep_addr, ff, total_bytes))
 8008372:	88bb      	ldrh	r3, [r7, #4]
 8008374:	79b9      	ldrb	r1, [r7, #6]
 8008376:	79f8      	ldrb	r0, [r7, #7]
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	f001 f889 	bl	8009490 <dcd_edpt_xfer_fifo>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <usbd_edpt_xfer_fifo+0x94>
  {
    TU_LOG(USBD_DBG, "OK\r\n");
    return true;
 8008384:	2301      	movs	r3, #1
 8008386:	e021      	b.n	80083cc <usbd_edpt_xfer_fifo+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8008388:	7dfa      	ldrb	r2, [r7, #23]
 800838a:	7dbb      	ldrb	r3, [r7, #22]
 800838c:	4912      	ldr	r1, [pc, #72]	; (80083d8 <usbd_edpt_xfer_fifo+0xe4>)
 800838e:	0052      	lsls	r2, r2, #1
 8008390:	440a      	add	r2, r1
 8008392:	4413      	add	r3, r2
 8008394:	f103 0220 	add.w	r2, r3, #32
 8008398:	7953      	ldrb	r3, [r2, #5]
 800839a:	f36f 0300 	bfc	r3, #0, #1
 800839e:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 80083a0:	7dfa      	ldrb	r2, [r7, #23]
 80083a2:	7dbb      	ldrb	r3, [r7, #22]
 80083a4:	490c      	ldr	r1, [pc, #48]	; (80083d8 <usbd_edpt_xfer_fifo+0xe4>)
 80083a6:	0052      	lsls	r2, r2, #1
 80083a8:	440a      	add	r2, r1
 80083aa:	4413      	add	r3, r2
 80083ac:	f103 0220 	add.w	r2, r3, #32
 80083b0:	7953      	ldrb	r3, [r2, #5]
 80083b2:	f36f 0382 	bfc	r3, #2, #1
 80083b6:	7153      	strb	r3, [r2, #5]
    TU_LOG(USBD_DBG, "failed\r\n");
    TU_BREAKPOINT();
 80083b8:	4b08      	ldr	r3, [pc, #32]	; (80083dc <usbd_edpt_xfer_fifo+0xe8>)
 80083ba:	613b      	str	r3, [r7, #16]
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d000      	beq.n	80083ca <usbd_edpt_xfer_fifo+0xd6>
 80083c8:	be00      	bkpt	0x0000
    return false;
 80083ca:	2300      	movs	r3, #0
  }
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3718      	adds	r7, #24
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	24000035 	.word	0x24000035
 80083d8:	240019a0 	.word	0x240019a0
 80083dc:	e000edf0 	.word	0xe000edf0

080083e0 <usbd_edpt_stall>:

  return _usbd_dev.ep_status[epnum][dir].busy;
}

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	4603      	mov	r3, r0
 80083e8:	460a      	mov	r2, r1
 80083ea:	71fb      	strb	r3, [r7, #7]
 80083ec:	4613      	mov	r3, r2
 80083ee:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80083f0:	4b1f      	ldr	r3, [pc, #124]	; (8008470 <usbd_edpt_stall+0x90>)
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	71fb      	strb	r3, [r7, #7]
 80083f6:	79bb      	ldrb	r3, [r7, #6]
 80083f8:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80083fa:	7b3b      	ldrb	r3, [r7, #12]
 80083fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008400:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008402:	73fb      	strb	r3, [r7, #15]
 8008404:	79bb      	ldrb	r3, [r7, #6]
 8008406:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008408:	7b7b      	ldrb	r3, [r7, #13]
 800840a:	09db      	lsrs	r3, r3, #7
 800840c:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800840e:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8008410:	7bfa      	ldrb	r2, [r7, #15]
 8008412:	7bbb      	ldrb	r3, [r7, #14]
 8008414:	4917      	ldr	r1, [pc, #92]	; (8008474 <usbd_edpt_stall+0x94>)
 8008416:	0052      	lsls	r2, r2, #1
 8008418:	440a      	add	r2, r1
 800841a:	4413      	add	r3, r2
 800841c:	3320      	adds	r3, #32
 800841e:	795b      	ldrb	r3, [r3, #5]
 8008420:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d11d      	bne.n	8008466 <usbd_edpt_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 800842a:	79ba      	ldrb	r2, [r7, #6]
 800842c:	79fb      	ldrb	r3, [r7, #7]
 800842e:	4611      	mov	r1, r2
 8008430:	4618      	mov	r0, r3
 8008432:	f001 f9e7 	bl	8009804 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 1;
 8008436:	7bfa      	ldrb	r2, [r7, #15]
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	490e      	ldr	r1, [pc, #56]	; (8008474 <usbd_edpt_stall+0x94>)
 800843c:	0052      	lsls	r2, r2, #1
 800843e:	440a      	add	r2, r1
 8008440:	4413      	add	r3, r2
 8008442:	f103 0220 	add.w	r2, r3, #32
 8008446:	7953      	ldrb	r3, [r2, #5]
 8008448:	f043 0302 	orr.w	r3, r3, #2
 800844c:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].busy = 1;
 800844e:	7bfa      	ldrb	r2, [r7, #15]
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	4908      	ldr	r1, [pc, #32]	; (8008474 <usbd_edpt_stall+0x94>)
 8008454:	0052      	lsls	r2, r2, #1
 8008456:	440a      	add	r2, r1
 8008458:	4413      	add	r3, r2
 800845a:	f103 0220 	add.w	r2, r3, #32
 800845e:	7953      	ldrb	r3, [r2, #5]
 8008460:	f043 0301 	orr.w	r3, r3, #1
 8008464:	7153      	strb	r3, [r2, #5]
  }
}
 8008466:	bf00      	nop
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	24000035 	.word	0x24000035
 8008474:	240019a0 	.word	0x240019a0

08008478 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	4603      	mov	r3, r0
 8008480:	460a      	mov	r2, r1
 8008482:	71fb      	strb	r3, [r7, #7]
 8008484:	4613      	mov	r3, r2
 8008486:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8008488:	4b1f      	ldr	r3, [pc, #124]	; (8008508 <usbd_edpt_clear_stall+0x90>)
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	71fb      	strb	r3, [r7, #7]
 800848e:	79bb      	ldrb	r3, [r7, #6]
 8008490:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008492:	7b3b      	ldrb	r3, [r7, #12]
 8008494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008498:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800849a:	73fb      	strb	r3, [r7, #15]
 800849c:	79bb      	ldrb	r3, [r7, #6]
 800849e:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80084a0:	7b7b      	ldrb	r3, [r7, #13]
 80084a2:	09db      	lsrs	r3, r3, #7
 80084a4:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80084a6:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 80084a8:	7bfa      	ldrb	r2, [r7, #15]
 80084aa:	7bbb      	ldrb	r3, [r7, #14]
 80084ac:	4917      	ldr	r1, [pc, #92]	; (800850c <usbd_edpt_clear_stall+0x94>)
 80084ae:	0052      	lsls	r2, r2, #1
 80084b0:	440a      	add	r2, r1
 80084b2:	4413      	add	r3, r2
 80084b4:	3320      	adds	r3, #32
 80084b6:	795b      	ldrb	r3, [r3, #5]
 80084b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d01d      	beq.n	80084fe <usbd_edpt_clear_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 80084c2:	79ba      	ldrb	r2, [r7, #6]
 80084c4:	79fb      	ldrb	r3, [r7, #7]
 80084c6:	4611      	mov	r1, r2
 80084c8:	4618      	mov	r0, r3
 80084ca:	f001 f9ad 	bl	8009828 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
 80084ce:	7bfa      	ldrb	r2, [r7, #15]
 80084d0:	7bbb      	ldrb	r3, [r7, #14]
 80084d2:	490e      	ldr	r1, [pc, #56]	; (800850c <usbd_edpt_clear_stall+0x94>)
 80084d4:	0052      	lsls	r2, r2, #1
 80084d6:	440a      	add	r2, r1
 80084d8:	4413      	add	r3, r2
 80084da:	f103 0220 	add.w	r2, r3, #32
 80084de:	7953      	ldrb	r3, [r2, #5]
 80084e0:	f36f 0341 	bfc	r3, #1, #1
 80084e4:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 80084e6:	7bfa      	ldrb	r2, [r7, #15]
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	4908      	ldr	r1, [pc, #32]	; (800850c <usbd_edpt_clear_stall+0x94>)
 80084ec:	0052      	lsls	r2, r2, #1
 80084ee:	440a      	add	r2, r1
 80084f0:	4413      	add	r3, r2
 80084f2:	f103 0220 	add.w	r2, r3, #32
 80084f6:	7953      	ldrb	r3, [r2, #5]
 80084f8:	f36f 0300 	bfc	r3, #0, #1
 80084fc:	7153      	strb	r3, [r2, #5]
  }
}
 80084fe:	bf00      	nop
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	24000035 	.word	0x24000035
 800850c:	240019a0 	.word	0x240019a0

08008510 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	4603      	mov	r3, r0
 8008518:	460a      	mov	r2, r1
 800851a:	71fb      	strb	r3, [r7, #7]
 800851c:	4613      	mov	r3, r2
 800851e:	71bb      	strb	r3, [r7, #6]
 8008520:	79bb      	ldrb	r3, [r7, #6]
 8008522:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008524:	7b3b      	ldrb	r3, [r7, #12]
 8008526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800852a:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800852c:	73fb      	strb	r3, [r7, #15]
 800852e:	79bb      	ldrb	r3, [r7, #6]
 8008530:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008532:	7b7b      	ldrb	r3, [r7, #13]
 8008534:	09db      	lsrs	r3, r3, #7
 8008536:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8008538:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 800853a:	7bfa      	ldrb	r2, [r7, #15]
 800853c:	7bbb      	ldrb	r3, [r7, #14]
 800853e:	490a      	ldr	r1, [pc, #40]	; (8008568 <usbd_edpt_stalled+0x58>)
 8008540:	0052      	lsls	r2, r2, #1
 8008542:	440a      	add	r2, r1
 8008544:	4413      	add	r3, r2
 8008546:	3320      	adds	r3, #32
 8008548:	795b      	ldrb	r3, [r3, #5]
 800854a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b00      	cmp	r3, #0
 8008552:	bf14      	ite	ne
 8008554:	2301      	movne	r3, #1
 8008556:	2300      	moveq	r3, #0
 8008558:	b2db      	uxtb	r3, r3
}
 800855a:	4618      	mov	r0, r3
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	240019a0 	.word	0x240019a0

0800856c <usbd_edpt_close>:
 *
 * In progress transfers on this EP may be delivered after this call.
 *
 */
void usbd_edpt_close(uint8_t rhport, uint8_t ep_addr)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af00      	add	r7, sp, #0
 8008572:	4603      	mov	r3, r0
 8008574:	460a      	mov	r2, r1
 8008576:	71fb      	strb	r3, [r7, #7]
 8008578:	4613      	mov	r3, r2
 800857a:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 800857c:	4b25      	ldr	r3, [pc, #148]	; (8008614 <usbd_edpt_close+0xa8>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(dcd_edpt_close, /**/);
 8008582:	4b25      	ldr	r3, [pc, #148]	; (8008618 <usbd_edpt_close+0xac>)
 8008584:	2b00      	cmp	r3, #0
 8008586:	d109      	bne.n	800859c <usbd_edpt_close+0x30>
 8008588:	4b24      	ldr	r3, [pc, #144]	; (800861c <usbd_edpt_close+0xb0>)
 800858a:	613b      	str	r3, [r7, #16]
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0301 	and.w	r3, r3, #1
 8008594:	2b00      	cmp	r3, #0
 8008596:	d039      	beq.n	800860c <usbd_edpt_close+0xa0>
 8008598:	be00      	bkpt	0x0000
 800859a:	e037      	b.n	800860c <usbd_edpt_close+0xa0>
 800859c:	79bb      	ldrb	r3, [r7, #6]
 800859e:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80085a0:	7bbb      	ldrb	r3, [r7, #14]
 80085a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085a6:	b2db      	uxtb	r3, r3
  TU_LOG(USBD_DBG, "  CLOSING Endpoint: 0x%02X\r\n", ep_addr);

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80085a8:	75fb      	strb	r3, [r7, #23]
 80085aa:	79bb      	ldrb	r3, [r7, #6]
 80085ac:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80085ae:	7bfb      	ldrb	r3, [r7, #15]
 80085b0:	09db      	lsrs	r3, r3, #7
 80085b2:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80085b4:	75bb      	strb	r3, [r7, #22]

  dcd_edpt_close(rhport, ep_addr);
 80085b6:	79ba      	ldrb	r2, [r7, #6]
 80085b8:	79fb      	ldrb	r3, [r7, #7]
 80085ba:	4611      	mov	r1, r2
 80085bc:	4618      	mov	r0, r3
 80085be:	f001 f8bb 	bl	8009738 <dcd_edpt_close>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 80085c2:	7dfa      	ldrb	r2, [r7, #23]
 80085c4:	7dbb      	ldrb	r3, [r7, #22]
 80085c6:	4916      	ldr	r1, [pc, #88]	; (8008620 <usbd_edpt_close+0xb4>)
 80085c8:	0052      	lsls	r2, r2, #1
 80085ca:	440a      	add	r2, r1
 80085cc:	4413      	add	r3, r2
 80085ce:	f103 0220 	add.w	r2, r3, #32
 80085d2:	7953      	ldrb	r3, [r2, #5]
 80085d4:	f36f 0341 	bfc	r3, #1, #1
 80085d8:	7153      	strb	r3, [r2, #5]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 80085da:	7dfa      	ldrb	r2, [r7, #23]
 80085dc:	7dbb      	ldrb	r3, [r7, #22]
 80085de:	4910      	ldr	r1, [pc, #64]	; (8008620 <usbd_edpt_close+0xb4>)
 80085e0:	0052      	lsls	r2, r2, #1
 80085e2:	440a      	add	r2, r1
 80085e4:	4413      	add	r3, r2
 80085e6:	f103 0220 	add.w	r2, r3, #32
 80085ea:	7953      	ldrb	r3, [r2, #5]
 80085ec:	f36f 0300 	bfc	r3, #0, #1
 80085f0:	7153      	strb	r3, [r2, #5]
  _usbd_dev.ep_status[epnum][dir].claimed = 0;
 80085f2:	7dfa      	ldrb	r2, [r7, #23]
 80085f4:	7dbb      	ldrb	r3, [r7, #22]
 80085f6:	490a      	ldr	r1, [pc, #40]	; (8008620 <usbd_edpt_close+0xb4>)
 80085f8:	0052      	lsls	r2, r2, #1
 80085fa:	440a      	add	r2, r1
 80085fc:	4413      	add	r3, r2
 80085fe:	f103 0220 	add.w	r2, r3, #32
 8008602:	7953      	ldrb	r3, [r2, #5]
 8008604:	f36f 0382 	bfc	r3, #2, #1
 8008608:	7153      	strb	r3, [r2, #5]

  return;
 800860a:	e000      	b.n	800860e <usbd_edpt_close+0xa2>
  TU_ASSERT(dcd_edpt_close, /**/);
 800860c:	bf00      	nop
}
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	24000035 	.word	0x24000035
 8008618:	08009739 	.word	0x08009739
 800861c:	e000edf0 	.word	0xe000edf0
 8008620:	240019a0 	.word	0x240019a0

08008624 <_status_stage_xact>:
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	4603      	mov	r3, r0
 800862c:	6039      	str	r1, [r7, #0]
 800862e:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <_status_stage_xact+0x1e>
 800863e:	2300      	movs	r3, #0
 8008640:	e000      	b.n	8008644 <_status_stage_xact+0x20>
 8008642:	2380      	movs	r3, #128	; 0x80
 8008644:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8008646:	7bf9      	ldrb	r1, [r7, #15]
 8008648:	79f8      	ldrb	r0, [r7, #7]
 800864a:	2300      	movs	r3, #0
 800864c:	2200      	movs	r2, #0
 800864e:	f7ff fddb 	bl	8008208 <usbd_edpt_xfer>
 8008652:	4603      	mov	r3, r0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	4603      	mov	r3, r0
 8008664:	6039      	str	r1, [r7, #0]
 8008666:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request       = (*request);
 8008668:	4b0b      	ldr	r3, [pc, #44]	; (8008698 <tud_control_status+0x3c>)
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	6810      	ldr	r0, [r2, #0]
 800866e:	6851      	ldr	r1, [r2, #4]
 8008670:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8008672:	4b09      	ldr	r3, [pc, #36]	; (8008698 <tud_control_status+0x3c>)
 8008674:	2200      	movs	r2, #0
 8008676:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8008678:	4b07      	ldr	r3, [pc, #28]	; (8008698 <tud_control_status+0x3c>)
 800867a:	2200      	movs	r2, #0
 800867c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 800867e:	4b06      	ldr	r3, [pc, #24]	; (8008698 <tud_control_status+0x3c>)
 8008680:	2200      	movs	r2, #0
 8008682:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 8008684:	79fb      	ldrb	r3, [r7, #7]
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	4618      	mov	r0, r3
 800868a:	f7ff ffcb 	bl	8008624 <_status_stage_xact>
 800868e:	4603      	mov	r3, r0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	24001aa4 	.word	0x24001aa4

0800869c <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b088      	sub	sp, #32
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	4603      	mov	r3, r0
 80086a4:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 80086a6:	4b24      	ldr	r3, [pc, #144]	; (8008738 <_data_stage_xact+0x9c>)
 80086a8:	899a      	ldrh	r2, [r3, #12]
 80086aa:	4b23      	ldr	r3, [pc, #140]	; (8008738 <_data_stage_xact+0x9c>)
 80086ac:	89db      	ldrh	r3, [r3, #14]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	837b      	strh	r3, [r7, #26]
 80086b4:	2340      	movs	r3, #64	; 0x40
 80086b6:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80086b8:	8b7a      	ldrh	r2, [r7, #26]
 80086ba:	8b3b      	ldrh	r3, [r7, #24]
 80086bc:	4293      	cmp	r3, r2
 80086be:	bf28      	it	cs
 80086c0:	4613      	movcs	r3, r2
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	83bb      	strh	r3, [r7, #28]

  uint8_t ep_addr = EDPT_CTRL_OUT;
 80086c6:	2300      	movs	r3, #0
 80086c8:	77fb      	strb	r3, [r7, #31]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 80086ca:	4b1b      	ldr	r3, [pc, #108]	; (8008738 <_data_stage_xact+0x9c>)
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d01e      	beq.n	8008716 <_data_stage_xact+0x7a>
  {
    ep_addr = EDPT_CTRL_IN;
 80086d8:	2380      	movs	r3, #128	; 0x80
 80086da:	77fb      	strb	r3, [r7, #31]
    if ( xact_len ) {
 80086dc:	8bbb      	ldrh	r3, [r7, #28]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d019      	beq.n	8008716 <_data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_usbd_ctrl_buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 80086e2:	4b15      	ldr	r3, [pc, #84]	; (8008738 <_data_stage_xact+0x9c>)
 80086e4:	689a      	ldr	r2, [r3, #8]
 80086e6:	8bbb      	ldrh	r3, [r7, #28]
 80086e8:	4914      	ldr	r1, [pc, #80]	; (800873c <_data_stage_xact+0xa0>)
 80086ea:	6179      	str	r1, [r7, #20]
 80086ec:	2140      	movs	r1, #64	; 0x40
 80086ee:	6139      	str	r1, [r7, #16]
 80086f0:	60fa      	str	r2, [r7, #12]
 80086f2:	60bb      	str	r3, [r7, #8]
  if (count > destsz) {
 80086f4:	693a      	ldr	r2, [r7, #16]
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d202      	bcs.n	8008702 <_data_stage_xact+0x66>
    return -1;
 80086fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008700:	e005      	b.n	800870e <_data_stage_xact+0x72>
  memcpy(dest, src, count);
 8008702:	68ba      	ldr	r2, [r7, #8]
 8008704:	68f9      	ldr	r1, [r7, #12]
 8008706:	6978      	ldr	r0, [r7, #20]
 8008708:	f001 feca 	bl	800a4a0 <memcpy>
  return 0;
 800870c:	2300      	movs	r3, #0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <_data_stage_xact+0x7a>
 8008712:	2300      	movs	r3, #0
 8008714:	e00b      	b.n	800872e <_data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8008716:	8bbb      	ldrh	r3, [r7, #28]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <_data_stage_xact+0x84>
 800871c:	4a07      	ldr	r2, [pc, #28]	; (800873c <_data_stage_xact+0xa0>)
 800871e:	e000      	b.n	8008722 <_data_stage_xact+0x86>
 8008720:	2200      	movs	r2, #0
 8008722:	8bbb      	ldrh	r3, [r7, #28]
 8008724:	7ff9      	ldrb	r1, [r7, #31]
 8008726:	79f8      	ldrb	r0, [r7, #7]
 8008728:	f7ff fd6e 	bl	8008208 <usbd_edpt_xfer>
 800872c:	4603      	mov	r3, r0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3720      	adds	r7, #32
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	24001aa4 	.word	0x24001aa4
 800873c:	24001ab8 	.word	0x24001ab8

08008740 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b088      	sub	sp, #32
 8008744:	af00      	add	r7, sp, #0
 8008746:	60b9      	str	r1, [r7, #8]
 8008748:	607a      	str	r2, [r7, #4]
 800874a:	461a      	mov	r2, r3
 800874c:	4603      	mov	r3, r0
 800874e:	73fb      	strb	r3, [r7, #15]
 8008750:	4613      	mov	r3, r2
 8008752:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request       = (*request);
 8008754:	4b30      	ldr	r3, [pc, #192]	; (8008818 <tud_control_xfer+0xd8>)
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	6810      	ldr	r0, [r2, #0]
 800875a:	6851      	ldr	r1, [r2, #4]
 800875c:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 800875e:	4a2e      	ldr	r2, [pc, #184]	; (8008818 <tud_control_xfer+0xd8>)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8008764:	4b2c      	ldr	r3, [pc, #176]	; (8008818 <tud_control_xfer+0xd8>)
 8008766:	2200      	movs	r2, #0
 8008768:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	88db      	ldrh	r3, [r3, #6]
 800876e:	b29a      	uxth	r2, r3
 8008770:	89bb      	ldrh	r3, [r7, #12]
 8008772:	827b      	strh	r3, [r7, #18]
 8008774:	4613      	mov	r3, r2
 8008776:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008778:	8a7a      	ldrh	r2, [r7, #18]
 800877a:	8a3b      	ldrh	r3, [r7, #16]
 800877c:	4293      	cmp	r3, r2
 800877e:	bf28      	it	cs
 8008780:	4613      	movcs	r3, r2
 8008782:	b29a      	uxth	r2, r3
 8008784:	4b24      	ldr	r3, [pc, #144]	; (8008818 <tud_control_xfer+0xd8>)
 8008786:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	88db      	ldrh	r3, [r3, #6]
 800878c:	b29b      	uxth	r3, r3
 800878e:	2b00      	cmp	r3, #0
 8008790:	d026      	beq.n	80087e0 <tud_control_xfer+0xa0>
  {
    if(_ctrl_xfer.data_len > 0U)
 8008792:	4b21      	ldr	r3, [pc, #132]	; (8008818 <tud_control_xfer+0xd8>)
 8008794:	899b      	ldrh	r3, [r3, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00d      	beq.n	80087b6 <tud_control_xfer+0x76>
    {
      TU_ASSERT(buffer);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10a      	bne.n	80087b6 <tud_control_xfer+0x76>
 80087a0:	4b1e      	ldr	r3, [pc, #120]	; (800881c <tud_control_xfer+0xdc>)
 80087a2:	61bb      	str	r3, [r7, #24]
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 0301 	and.w	r3, r3, #1
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d000      	beq.n	80087b2 <tud_control_xfer+0x72>
 80087b0:	be00      	bkpt	0x0000
 80087b2:	2300      	movs	r3, #0
 80087b4:	e02b      	b.n	800880e <tud_control_xfer+0xce>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 80087b6:	7bfb      	ldrb	r3, [r7, #15]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff ff6f 	bl	800869c <_data_stage_xact>
 80087be:	4603      	mov	r3, r0
 80087c0:	f083 0301 	eor.w	r3, r3, #1
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d020      	beq.n	800880c <tud_control_xfer+0xcc>
 80087ca:	4b14      	ldr	r3, [pc, #80]	; (800881c <tud_control_xfer+0xdc>)
 80087cc:	617b      	str	r3, [r7, #20]
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d000      	beq.n	80087dc <tud_control_xfer+0x9c>
 80087da:	be00      	bkpt	0x0000
 80087dc:	2300      	movs	r3, #0
 80087de:	e016      	b.n	800880e <tud_control_xfer+0xce>
  }
  else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
 80087e0:	7bfb      	ldrb	r3, [r7, #15]
 80087e2:	68b9      	ldr	r1, [r7, #8]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7ff ff1d 	bl	8008624 <_status_stage_xact>
 80087ea:	4603      	mov	r3, r0
 80087ec:	f083 0301 	eor.w	r3, r3, #1
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00a      	beq.n	800880c <tud_control_xfer+0xcc>
 80087f6:	4b09      	ldr	r3, [pc, #36]	; (800881c <tud_control_xfer+0xdc>)
 80087f8:	61fb      	str	r3, [r7, #28]
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	2b00      	cmp	r3, #0
 8008804:	d000      	beq.n	8008808 <tud_control_xfer+0xc8>
 8008806:	be00      	bkpt	0x0000
 8008808:	2300      	movs	r3, #0
 800880a:	e000      	b.n	800880e <tud_control_xfer+0xce>
  }

  return true;
 800880c:	2301      	movs	r3, #1
}
 800880e:	4618      	mov	r0, r3
 8008810:	3720      	adds	r7, #32
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	24001aa4 	.word	0x24001aa4
 800881c:	e000edf0 	.word	0xe000edf0

08008820 <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8008824:	2214      	movs	r2, #20
 8008826:	2100      	movs	r1, #0
 8008828:	4802      	ldr	r0, [pc, #8]	; (8008834 <usbd_control_reset+0x14>)
 800882a:	f001 fe47 	bl	800a4bc <memset>
}
 800882e:	bf00      	nop
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	24001aa4 	.word	0x24001aa4

08008838 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8008840:	4a04      	ldr	r2, [pc, #16]	; (8008854 <usbd_control_set_complete_callback+0x1c>)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6113      	str	r3, [r2, #16]
}
 8008846:	bf00      	nop
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	24001aa4 	.word	0x24001aa4

08008858 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request       = (*request);
 8008860:	4b09      	ldr	r3, [pc, #36]	; (8008888 <usbd_control_set_request+0x30>)
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	6810      	ldr	r0, [r2, #0]
 8008866:	6851      	ldr	r1, [r2, #4]
 8008868:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 800886a:	4b07      	ldr	r3, [pc, #28]	; (8008888 <usbd_control_set_request+0x30>)
 800886c:	2200      	movs	r2, #0
 800886e:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8008870:	4b05      	ldr	r3, [pc, #20]	; (8008888 <usbd_control_set_request+0x30>)
 8008872:	2200      	movs	r2, #0
 8008874:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8008876:	4b04      	ldr	r3, [pc, #16]	; (8008888 <usbd_control_set_request+0x30>)
 8008878:	2200      	movs	r2, #0
 800887a:	819a      	strh	r2, [r3, #12]
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	24001aa4 	.word	0x24001aa4

0800888c <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b088      	sub	sp, #32
 8008890:	af00      	add	r7, sp, #0
 8008892:	603b      	str	r3, [r7, #0]
 8008894:	4603      	mov	r3, r0
 8008896:	71fb      	strb	r3, [r7, #7]
 8008898:	460b      	mov	r3, r1
 800889a:	71bb      	strb	r3, [r7, #6]
 800889c:	4613      	mov	r3, r2
 800889e:	717b      	strb	r3, [r7, #5]
 80088a0:	79bb      	ldrb	r3, [r7, #6]
 80088a2:	73fb      	strb	r3, [r7, #15]
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	09db      	lsrs	r3, r3, #7
 80088a8:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 80088aa:	4a50      	ldr	r2, [pc, #320]	; (80089ec <usbd_control_xfer_cb+0x160>)
 80088ac:	7812      	ldrb	r2, [r2, #0]
 80088ae:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80088b2:	b2d2      	uxtb	r2, r2
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d021      	beq.n	80088fc <usbd_control_xfer_cb+0x70>
  {
    TU_ASSERT(0 == xferred_bytes);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00a      	beq.n	80088d4 <usbd_control_xfer_cb+0x48>
 80088be:	4b4c      	ldr	r3, [pc, #304]	; (80089f0 <usbd_control_xfer_cb+0x164>)
 80088c0:	613b      	str	r3, [r7, #16]
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d000      	beq.n	80088d0 <usbd_control_xfer_cb+0x44>
 80088ce:	be00      	bkpt	0x0000
 80088d0:	2300      	movs	r3, #0
 80088d2:	e087      	b.n	80089e4 <usbd_control_xfer_cb+0x158>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 80088d4:	4b47      	ldr	r3, [pc, #284]	; (80089f4 <usbd_control_xfer_cb+0x168>)
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d004      	beq.n	80088e4 <usbd_control_xfer_cb+0x58>
 80088da:	79fb      	ldrb	r3, [r7, #7]
 80088dc:	4943      	ldr	r1, [pc, #268]	; (80089ec <usbd_control_xfer_cb+0x160>)
 80088de:	4618      	mov	r0, r3
 80088e0:	f3af 8000 	nop.w

    if (_ctrl_xfer.complete_cb)
 80088e4:	4b41      	ldr	r3, [pc, #260]	; (80089ec <usbd_control_xfer_cb+0x160>)
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d005      	beq.n	80088f8 <usbd_control_xfer_cb+0x6c>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 80088ec:	4b3f      	ldr	r3, [pc, #252]	; (80089ec <usbd_control_xfer_cb+0x160>)
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	79f8      	ldrb	r0, [r7, #7]
 80088f2:	4a3e      	ldr	r2, [pc, #248]	; (80089ec <usbd_control_xfer_cb+0x160>)
 80088f4:	2103      	movs	r1, #3
 80088f6:	4798      	blx	r3
    }

    return true;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e073      	b.n	80089e4 <usbd_control_xfer_cb+0x158>
  }

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 80088fc:	4b3b      	ldr	r3, [pc, #236]	; (80089ec <usbd_control_xfer_cb+0x160>)
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10c      	bne.n	8008924 <usbd_control_xfer_cb+0x98>
  {
    TU_VERIFY(_ctrl_xfer.buffer);
 800890a:	4b38      	ldr	r3, [pc, #224]	; (80089ec <usbd_control_xfer_cb+0x160>)
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d101      	bne.n	8008916 <usbd_control_xfer_cb+0x8a>
 8008912:	2300      	movs	r3, #0
 8008914:	e066      	b.n	80089e4 <usbd_control_xfer_cb+0x158>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8008916:	4b35      	ldr	r3, [pc, #212]	; (80089ec <usbd_control_xfer_cb+0x160>)
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	4936      	ldr	r1, [pc, #216]	; (80089f8 <usbd_control_xfer_cb+0x16c>)
 800891e:	4618      	mov	r0, r3
 8008920:	f001 fdbe 	bl	800a4a0 <memcpy>
    TU_LOG_MEM(USBD_CONTROL_DEBUG, _usbd_ctrl_buf, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8008924:	4b31      	ldr	r3, [pc, #196]	; (80089ec <usbd_control_xfer_cb+0x160>)
 8008926:	89da      	ldrh	r2, [r3, #14]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	b29b      	uxth	r3, r3
 800892c:	4413      	add	r3, r2
 800892e:	b29a      	uxth	r2, r3
 8008930:	4b2e      	ldr	r3, [pc, #184]	; (80089ec <usbd_control_xfer_cb+0x160>)
 8008932:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8008934:	4b2d      	ldr	r3, [pc, #180]	; (80089ec <usbd_control_xfer_cb+0x160>)
 8008936:	689a      	ldr	r2, [r3, #8]
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	4413      	add	r3, r2
 800893c:	4a2b      	ldr	r2, [pc, #172]	; (80089ec <usbd_control_xfer_cb+0x160>)
 800893e:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8008940:	4b2a      	ldr	r3, [pc, #168]	; (80089ec <usbd_control_xfer_cb+0x160>)
 8008942:	88da      	ldrh	r2, [r3, #6]
 8008944:	4b29      	ldr	r3, [pc, #164]	; (80089ec <usbd_control_xfer_cb+0x160>)
 8008946:	89db      	ldrh	r3, [r3, #14]
 8008948:	429a      	cmp	r2, r3
 800894a:	d002      	beq.n	8008952 <usbd_control_xfer_cb+0xc6>
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	2b3f      	cmp	r3, #63	; 0x3f
 8008950:	d831      	bhi.n	80089b6 <usbd_control_xfer_cb+0x12a>
  {
    // DATA stage is complete
    bool is_ok = true;
 8008952:	2301      	movs	r3, #1
 8008954:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if ( _ctrl_xfer.complete_cb )
 8008956:	4b25      	ldr	r3, [pc, #148]	; (80089ec <usbd_control_xfer_cb+0x160>)
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d007      	beq.n	800896e <usbd_control_xfer_cb+0xe2>
    {
      #if CFG_TUSB_DEBUG >= USBD_CONTROL_DEBUG
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 800895e:	4b23      	ldr	r3, [pc, #140]	; (80089ec <usbd_control_xfer_cb+0x160>)
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	79f8      	ldrb	r0, [r7, #7]
 8008964:	4a21      	ldr	r2, [pc, #132]	; (80089ec <usbd_control_xfer_cb+0x160>)
 8008966:	2102      	movs	r1, #2
 8008968:	4798      	blx	r3
 800896a:	4603      	mov	r3, r0
 800896c:	77fb      	strb	r3, [r7, #31]
    }

    if ( is_ok )
 800896e:	7ffb      	ldrb	r3, [r7, #31]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d015      	beq.n	80089a0 <usbd_control_xfer_cb+0x114>
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 8008974:	79fb      	ldrb	r3, [r7, #7]
 8008976:	491d      	ldr	r1, [pc, #116]	; (80089ec <usbd_control_xfer_cb+0x160>)
 8008978:	4618      	mov	r0, r3
 800897a:	f7ff fe53 	bl	8008624 <_status_stage_xact>
 800897e:	4603      	mov	r3, r0
 8008980:	f083 0301 	eor.w	r3, r3, #1
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d02a      	beq.n	80089e0 <usbd_control_xfer_cb+0x154>
 800898a:	4b19      	ldr	r3, [pc, #100]	; (80089f0 <usbd_control_xfer_cb+0x164>)
 800898c:	617b      	str	r3, [r7, #20]
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 0301 	and.w	r3, r3, #1
 8008996:	2b00      	cmp	r3, #0
 8008998:	d000      	beq.n	800899c <usbd_control_xfer_cb+0x110>
 800899a:	be00      	bkpt	0x0000
 800899c:	2300      	movs	r3, #0
 800899e:	e021      	b.n	80089e4 <usbd_control_xfer_cb+0x158>
    }else
    {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 80089a0:	79fb      	ldrb	r3, [r7, #7]
 80089a2:	2100      	movs	r1, #0
 80089a4:	4618      	mov	r0, r3
 80089a6:	f000 ff2d 	bl	8009804 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 80089aa:	79fb      	ldrb	r3, [r7, #7]
 80089ac:	2180      	movs	r1, #128	; 0x80
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 ff28 	bl	8009804 <dcd_edpt_stall>
  {
 80089b4:	e014      	b.n	80089e0 <usbd_control_xfer_cb+0x154>
    }
  }
  else
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
 80089b6:	79fb      	ldrb	r3, [r7, #7]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7ff fe6f 	bl	800869c <_data_stage_xact>
 80089be:	4603      	mov	r3, r0
 80089c0:	f083 0301 	eor.w	r3, r3, #1
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00b      	beq.n	80089e2 <usbd_control_xfer_cb+0x156>
 80089ca:	4b09      	ldr	r3, [pc, #36]	; (80089f0 <usbd_control_xfer_cb+0x164>)
 80089cc:	61bb      	str	r3, [r7, #24]
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d000      	beq.n	80089dc <usbd_control_xfer_cb+0x150>
 80089da:	be00      	bkpt	0x0000
 80089dc:	2300      	movs	r3, #0
 80089de:	e001      	b.n	80089e4 <usbd_control_xfer_cb+0x158>
  {
 80089e0:	bf00      	nop
  }

  return true;
 80089e2:	2301      	movs	r3, #1
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3720      	adds	r7, #32
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	24001aa4 	.word	0x24001aa4
 80089f0:	e000edf0 	.word	0xe000edf0
 80089f4:	00000000 	.word	0x00000000
 80089f8:	24001ab8 	.word	0x24001ab8

080089fc <__NVIC_EnableIRQ>:
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	4603      	mov	r3, r0
 8008a04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	db0b      	blt.n	8008a26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008a0e:	88fb      	ldrh	r3, [r7, #6]
 8008a10:	f003 021f 	and.w	r2, r3, #31
 8008a14:	4907      	ldr	r1, [pc, #28]	; (8008a34 <__NVIC_EnableIRQ+0x38>)
 8008a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a1a:	095b      	lsrs	r3, r3, #5
 8008a1c:	2001      	movs	r0, #1
 8008a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8008a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008a26:	bf00      	nop
 8008a28:	370c      	adds	r7, #12
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	e000e100 	.word	0xe000e100

08008a38 <__NVIC_DisableIRQ>:
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	4603      	mov	r3, r0
 8008a40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	db12      	blt.n	8008a70 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008a4a:	88fb      	ldrh	r3, [r7, #6]
 8008a4c:	f003 021f 	and.w	r2, r3, #31
 8008a50:	490a      	ldr	r1, [pc, #40]	; (8008a7c <__NVIC_DisableIRQ+0x44>)
 8008a52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a56:	095b      	lsrs	r3, r3, #5
 8008a58:	2001      	movs	r0, #1
 8008a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8008a5e:	3320      	adds	r3, #32
 8008a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008a64:	f3bf 8f4f 	dsb	sy
}
 8008a68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008a6a:	f3bf 8f6f 	isb	sy
}
 8008a6e:	bf00      	nop
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	e000e100 	.word	0xe000e100

08008a80 <calc_rx_ff_size>:
static uint16_t _allocated_fifo_words_tx;         // TX FIFO size in words (IN EPs)
static bool _out_ep_closed;                       // Flag to check if RX FIFO size needs an update (reduce its size)

// Calculate the RX FIFO size according to recommendations from reference manual
static inline uint16_t calc_rx_ff_size(uint16_t ep_size)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	4603      	mov	r3, r0
 8008a88:	80fb      	strh	r3, [r7, #6]
  return 15 + 2*(ep_size/4) + 2*EP_MAX;
 8008a8a:	88fb      	ldrh	r3, [r7, #6]
 8008a8c:	089b      	lsrs	r3, r3, #2
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	005b      	lsls	r3, r3, #1
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	3321      	adds	r3, #33	; 0x21
 8008a96:	b29b      	uxth	r3, r3
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <update_grxfsiz>:

static void update_grxfsiz(uint8_t rhport)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8008aae:	4b15      	ldr	r3, [pc, #84]	; (8008b04 <update_grxfsiz+0x60>)
 8008ab0:	613b      	str	r3, [r7, #16]

  // Determine largest EP size for RX FIFO
  uint16_t max_epsize = 0;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < EP_MAX; epnum++)
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	757b      	strb	r3, [r7, #21]
 8008aba:	e013      	b.n	8008ae4 <update_grxfsiz+0x40>
  {
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 8008abc:	7d7b      	ldrb	r3, [r7, #21]
 8008abe:	4a12      	ldr	r2, [pc, #72]	; (8008b08 <update_grxfsiz+0x64>)
 8008ac0:	015b      	lsls	r3, r3, #5
 8008ac2:	4413      	add	r3, r2
 8008ac4:	330a      	adds	r3, #10
 8008ac6:	881a      	ldrh	r2, [r3, #0]
 8008ac8:	8afb      	ldrh	r3, [r7, #22]
 8008aca:	81fb      	strh	r3, [r7, #14]
 8008acc:	4613      	mov	r3, r2
 8008ace:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 8008ad0:	89fa      	ldrh	r2, [r7, #14]
 8008ad2:	89bb      	ldrh	r3, [r7, #12]
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	bf38      	it	cc
 8008ad8:	4613      	movcc	r3, r2
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < EP_MAX; epnum++)
 8008ade:	7d7b      	ldrb	r3, [r7, #21]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	757b      	strb	r3, [r7, #21]
 8008ae4:	7d7b      	ldrb	r3, [r7, #21]
 8008ae6:	2b08      	cmp	r3, #8
 8008ae8:	d9e8      	bls.n	8008abc <update_grxfsiz+0x18>
  }

  // Update size of RX FIFO
  usb_otg->GRXFSIZ = calc_rx_ff_size(max_epsize);
 8008aea:	8afb      	ldrh	r3, [r7, #22]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7ff ffc7 	bl	8008a80 <calc_rx_ff_size>
 8008af2:	4603      	mov	r3, r0
 8008af4:	461a      	mov	r2, r3
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008afa:	bf00      	nop
 8008afc:	3718      	adds	r7, #24
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	40040000 	.word	0x40040000
 8008b08:	24001b00 	.word	0x24001b00

08008b0c <bus_reset>:

// Setup the control endpoint 0.
static void bus_reset(uint8_t rhport)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b088      	sub	sp, #32
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	4603      	mov	r3, r0
 8008b14:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8008b16:	4b33      	ldr	r3, [pc, #204]	; (8008be4 <bus_reset+0xd8>)
 8008b18:	61bb      	str	r3, [r7, #24]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8008b1a:	4b33      	ldr	r3, [pc, #204]	; (8008be8 <bus_reset+0xdc>)
 8008b1c:	617b      	str	r3, [r7, #20]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8008b1e:	4b33      	ldr	r3, [pc, #204]	; (8008bec <bus_reset+0xe0>)
 8008b20:	613b      	str	r3, [r7, #16]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8008b22:	4b33      	ldr	r3, [pc, #204]	; (8008bf0 <bus_reset+0xe4>)
 8008b24:	60fb      	str	r3, [r7, #12]

  tu_memclr(xfer_status, sizeof(xfer_status));
 8008b26:	f44f 7290 	mov.w	r2, #288	; 0x120
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	4831      	ldr	r0, [pc, #196]	; (8008bf4 <bus_reset+0xe8>)
 8008b2e:	f001 fcc5 	bl	800a4bc <memset>
  _out_ep_closed = false;
 8008b32:	4b31      	ldr	r3, [pc, #196]	; (8008bf8 <bus_reset+0xec>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	701a      	strb	r2, [r3, #0]

  // clear device address
  dev->DCFG &= ~USB_OTG_DCFG_DAD_Msk;
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	601a      	str	r2, [r3, #0]

  // 1. NAK for all OUT endpoints
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8008b44:	2300      	movs	r3, #0
 8008b46:	77fb      	strb	r3, [r7, #31]
 8008b48:	e00e      	b.n	8008b68 <bus_reset+0x5c>
    out_ep[n].DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b4a:	7ffb      	ldrb	r3, [r7, #31]
 8008b4c:	015b      	lsls	r3, r3, #5
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	4413      	add	r3, r2
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	7ffb      	ldrb	r3, [r7, #31]
 8008b56:	015b      	lsls	r3, r3, #5
 8008b58:	6939      	ldr	r1, [r7, #16]
 8008b5a:	440b      	add	r3, r1
 8008b5c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8008b60:	601a      	str	r2, [r3, #0]
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8008b62:	7ffb      	ldrb	r3, [r7, #31]
 8008b64:	3301      	adds	r3, #1
 8008b66:	77fb      	strb	r3, [r7, #31]
 8008b68:	7ffb      	ldrb	r3, [r7, #31]
 8008b6a:	2b08      	cmp	r3, #8
 8008b6c:	d9ed      	bls.n	8008b4a <bus_reset+0x3e>
  }

  // 2. Un-mask interrupt bits
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8008b74:	61da      	str	r2, [r3, #28]
  dev->DOEPMSK = USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	2209      	movs	r2, #9
 8008b7a:	615a      	str	r2, [r3, #20]
  dev->DIEPMSK = USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	2209      	movs	r2, #9
 8008b80:	611a      	str	r2, [r3, #16]
  //
  //   For Isochronous, largest EP size can be 1023/1024 for FS/HS respectively. In addition if multiple ISO
  //   are enabled at least "2 x (Largest-EPsize/4) + 1" are recommended.  Maybe provide a macro for application to
  //   overwrite this.

  usb_otg->GRXFSIZ = calc_rx_ff_size(TUD_OPT_HIGH_SPEED ? 512 : 64);
 8008b82:	2040      	movs	r0, #64	; 0x40
 8008b84:	f7ff ff7c 	bl	8008a80 <calc_rx_ff_size>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	625a      	str	r2, [r3, #36]	; 0x24

  _allocated_fifo_words_tx = 16;
 8008b90:	4b1a      	ldr	r3, [pc, #104]	; (8008bfc <bus_reset+0xf0>)
 8008b92:	2210      	movs	r2, #16
 8008b94:	801a      	strh	r2, [r3, #0]

  // Control IN uses FIFO 0 with 64 bytes ( 16 32-bit word )
  usb_otg->DIEPTXF0_HNPTXFSIZ = (16 << USB_OTG_TX0FD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8008b96:	4b19      	ldr	r3, [pc, #100]	; (8008bfc <bus_reset+0xf0>)
 8008b98:	881b      	ldrh	r3, [r3, #0]
 8008b9a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8008b9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	629a      	str	r2, [r3, #40]	; 0x28

  // Fixed control EP0 size to 64 bytes
  in_ep[0].DIEPCTL &= ~(0x03 << USB_OTG_DIEPCTL_MPSIZ_Pos);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f023 0203 	bic.w	r2, r3, #3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	601a      	str	r2, [r3, #0]
  xfer_status[0][TUSB_DIR_OUT].max_size = xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8008bb4:	4b0f      	ldr	r3, [pc, #60]	; (8008bf4 <bus_reset+0xe8>)
 8008bb6:	2240      	movs	r2, #64	; 0x40
 8008bb8:	835a      	strh	r2, [r3, #26]
 8008bba:	4b0e      	ldr	r3, [pc, #56]	; (8008bf4 <bus_reset+0xe8>)
 8008bbc:	8b5a      	ldrh	r2, [r3, #26]
 8008bbe:	4b0d      	ldr	r3, [pc, #52]	; (8008bf4 <bus_reset+0xe8>)
 8008bc0:	815a      	strh	r2, [r3, #10]

  out_ep[0].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	611a      	str	r2, [r3, #16]

  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IEPINT;
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	619a      	str	r2, [r3, #24]
}
 8008bda:	bf00      	nop
 8008bdc:	3720      	adds	r7, #32
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	40040000 	.word	0x40040000
 8008be8:	40040800 	.word	0x40040800
 8008bec:	40040b00 	.word	0x40040b00
 8008bf0:	40040900 	.word	0x40040900
 8008bf4:	24001b00 	.word	0x24001b00
 8008bf8:	24001c26 	.word	0x24001c26
 8008bfc:	24001c24 	.word	0x24001c24

08008c00 <set_turnaround>:

// Set turn-around timeout according to link speed
extern uint32_t SystemCoreClock;
static void set_turnaround(USB_OTG_GlobalTypeDef * usb_otg, tusb_speed_t speed)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70fb      	strb	r3, [r7, #3]
  usb_otg->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	60da      	str	r2, [r3, #12]

  if ( speed == TUSB_SPEED_HIGH )
 8008c18:	78fb      	ldrb	r3, [r7, #3]
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d106      	bne.n	8008c2c <set_turnaround+0x2c>
  {
    // Use fixed 0x09 for Highspeed
    usb_otg->GUSBCFG |= (0x09 << USB_OTG_GUSBCFG_TRDT_Pos);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	f443 5210 	orr.w	r2, r3, #9216	; 0x2400
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	60da      	str	r2, [r3, #12]
      turnaround = 0xFU;

    // Fullspeed depends on MCU clocks, but we will use 0x06 for 32+ Mhz
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
  }
}
 8008c2a:	e050      	b.n	8008cce <set_turnaround+0xce>
    if ( SystemCoreClock >= 32000000U )
 8008c2c:	4b2b      	ldr	r3, [pc, #172]	; (8008cdc <set_turnaround+0xdc>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a2b      	ldr	r2, [pc, #172]	; (8008ce0 <set_turnaround+0xe0>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d302      	bcc.n	8008c3c <set_turnaround+0x3c>
      turnaround = 0x6U;
 8008c36:	2306      	movs	r3, #6
 8008c38:	60fb      	str	r3, [r7, #12]
 8008c3a:	e041      	b.n	8008cc0 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 27500000U )
 8008c3c:	4b27      	ldr	r3, [pc, #156]	; (8008cdc <set_turnaround+0xdc>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a28      	ldr	r2, [pc, #160]	; (8008ce4 <set_turnaround+0xe4>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d902      	bls.n	8008c4c <set_turnaround+0x4c>
      turnaround = 0x7U;
 8008c46:	2307      	movs	r3, #7
 8008c48:	60fb      	str	r3, [r7, #12]
 8008c4a:	e039      	b.n	8008cc0 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 24000000U )
 8008c4c:	4b23      	ldr	r3, [pc, #140]	; (8008cdc <set_turnaround+0xdc>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a25      	ldr	r2, [pc, #148]	; (8008ce8 <set_turnaround+0xe8>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d302      	bcc.n	8008c5c <set_turnaround+0x5c>
      turnaround = 0x8U;
 8008c56:	2308      	movs	r3, #8
 8008c58:	60fb      	str	r3, [r7, #12]
 8008c5a:	e031      	b.n	8008cc0 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 21800000U )
 8008c5c:	4b1f      	ldr	r3, [pc, #124]	; (8008cdc <set_turnaround+0xdc>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a22      	ldr	r2, [pc, #136]	; (8008cec <set_turnaround+0xec>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d902      	bls.n	8008c6c <set_turnaround+0x6c>
      turnaround = 0x9U;
 8008c66:	2309      	movs	r3, #9
 8008c68:	60fb      	str	r3, [r7, #12]
 8008c6a:	e029      	b.n	8008cc0 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 20000000U )
 8008c6c:	4b1b      	ldr	r3, [pc, #108]	; (8008cdc <set_turnaround+0xdc>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a1f      	ldr	r2, [pc, #124]	; (8008cf0 <set_turnaround+0xf0>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d902      	bls.n	8008c7c <set_turnaround+0x7c>
      turnaround = 0xAU;
 8008c76:	230a      	movs	r3, #10
 8008c78:	60fb      	str	r3, [r7, #12]
 8008c7a:	e021      	b.n	8008cc0 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 18500000U )
 8008c7c:	4b17      	ldr	r3, [pc, #92]	; (8008cdc <set_turnaround+0xdc>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a1c      	ldr	r2, [pc, #112]	; (8008cf4 <set_turnaround+0xf4>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d902      	bls.n	8008c8c <set_turnaround+0x8c>
      turnaround = 0xBU;
 8008c86:	230b      	movs	r3, #11
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	e019      	b.n	8008cc0 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 17200000U )
 8008c8c:	4b13      	ldr	r3, [pc, #76]	; (8008cdc <set_turnaround+0xdc>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a19      	ldr	r2, [pc, #100]	; (8008cf8 <set_turnaround+0xf8>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d302      	bcc.n	8008c9c <set_turnaround+0x9c>
      turnaround = 0xCU;
 8008c96:	230c      	movs	r3, #12
 8008c98:	60fb      	str	r3, [r7, #12]
 8008c9a:	e011      	b.n	8008cc0 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 16000000U )
 8008c9c:	4b0f      	ldr	r3, [pc, #60]	; (8008cdc <set_turnaround+0xdc>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a16      	ldr	r2, [pc, #88]	; (8008cfc <set_turnaround+0xfc>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d302      	bcc.n	8008cac <set_turnaround+0xac>
      turnaround = 0xDU;
 8008ca6:	230d      	movs	r3, #13
 8008ca8:	60fb      	str	r3, [r7, #12]
 8008caa:	e009      	b.n	8008cc0 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 15000000U )
 8008cac:	4b0b      	ldr	r3, [pc, #44]	; (8008cdc <set_turnaround+0xdc>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a13      	ldr	r2, [pc, #76]	; (8008d00 <set_turnaround+0x100>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d302      	bcc.n	8008cbc <set_turnaround+0xbc>
      turnaround = 0xEU;
 8008cb6:	230e      	movs	r3, #14
 8008cb8:	60fb      	str	r3, [r7, #12]
 8008cba:	e001      	b.n	8008cc0 <set_turnaround+0xc0>
      turnaround = 0xFU;
 8008cbc:	230f      	movs	r3, #15
 8008cbe:	60fb      	str	r3, [r7, #12]
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	68da      	ldr	r2, [r3, #12]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	029b      	lsls	r3, r3, #10
 8008cc8:	431a      	orrs	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	60da      	str	r2, [r3, #12]
}
 8008cce:	bf00      	nop
 8008cd0:	3714      	adds	r7, #20
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	2400000c 	.word	0x2400000c
 8008ce0:	01e84800 	.word	0x01e84800
 8008ce4:	01a39ddf 	.word	0x01a39ddf
 8008ce8:	016e3600 	.word	0x016e3600
 8008cec:	014ca43f 	.word	0x014ca43f
 8008cf0:	01312cff 	.word	0x01312cff
 8008cf4:	011a499f 	.word	0x011a499f
 8008cf8:	01067380 	.word	0x01067380
 8008cfc:	00f42400 	.word	0x00f42400
 8008d00:	00e4e1c0 	.word	0x00e4e1c0

08008d04 <get_speed>:

static tusb_speed_t get_speed(uint8_t rhport)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8008d0e:	4b0a      	ldr	r3, [pc, #40]	; (8008d38 <get_speed+0x34>)
 8008d10:	60fb      	str	r3, [r7, #12]
  uint32_t const enum_spd = (dev->DSTS & USB_OTG_DSTS_ENUMSPD_Msk) >> USB_OTG_DSTS_ENUMSPD_Pos;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	085b      	lsrs	r3, r3, #1
 8008d18:	f003 0303 	and.w	r3, r3, #3
 8008d1c:	60bb      	str	r3, [r7, #8]
  return (enum_spd == DCD_HIGH_SPEED) ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL;
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <get_speed+0x24>
 8008d24:	2302      	movs	r3, #2
 8008d26:	e000      	b.n	8008d2a <get_speed+0x26>
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	40040800 	.word	0x40040800

08008d3c <set_speed>:

static void set_speed(uint8_t rhport, tusb_speed_t speed)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	4603      	mov	r3, r0
 8008d44:	460a      	mov	r2, r1
 8008d46:	71fb      	strb	r3, [r7, #7]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	71bb      	strb	r3, [r7, #6]
  uint32_t bitvalue;

  if ( rhport == 1 )
 8008d4c:	79fb      	ldrb	r3, [r7, #7]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d107      	bne.n	8008d62 <set_speed+0x26>
  {
    bitvalue = ((TUSB_SPEED_HIGH == speed) ? DCD_HIGH_SPEED : DCD_FULL_SPEED_USE_HS);
 8008d52:	79bb      	ldrb	r3, [r7, #6]
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	bf14      	ite	ne
 8008d58:	2301      	movne	r3, #1
 8008d5a:	2300      	moveq	r3, #0
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	e001      	b.n	8008d66 <set_speed+0x2a>
  }
  else
  {
    bitvalue = DCD_FULL_SPEED;
 8008d62:	2303      	movs	r3, #3
 8008d64:	60fb      	str	r3, [r7, #12]
  }

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8008d66:	4b0a      	ldr	r3, [pc, #40]	; (8008d90 <set_speed+0x54>)
 8008d68:	60bb      	str	r3, [r7, #8]

  // Clear and set speed bits
  dev->DCFG &= ~(3 << USB_OTG_DCFG_DSPD_Pos);
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f023 0203 	bic.w	r2, r3, #3
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	601a      	str	r2, [r3, #0]
  dev->DCFG |= (bitvalue << USB_OTG_DCFG_DSPD_Pos);
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	431a      	orrs	r2, r3
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	601a      	str	r2, [r3, #0]
}
 8008d82:	bf00      	nop
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	40040800 	.word	0x40040800

08008d94 <edpt_schedule_packets>:
  return true;
}
#endif

static void edpt_schedule_packets(uint8_t rhport, uint8_t const epnum, uint8_t const dir, uint16_t const num_packets, uint16_t total_bytes)
{
 8008d94:	b490      	push	{r4, r7}
 8008d96:	b08a      	sub	sp, #40	; 0x28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	4608      	mov	r0, r1
 8008d9e:	4611      	mov	r1, r2
 8008da0:	461a      	mov	r2, r3
 8008da2:	4623      	mov	r3, r4
 8008da4:	71fb      	strb	r3, [r7, #7]
 8008da6:	4603      	mov	r3, r0
 8008da8:	71bb      	strb	r3, [r7, #6]
 8008daa:	460b      	mov	r3, r1
 8008dac:	717b      	strb	r3, [r7, #5]
 8008dae:	4613      	mov	r3, r2
 8008db0:	807b      	strh	r3, [r7, #2]
  (void) rhport;

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8008db2:	4b6c      	ldr	r3, [pc, #432]	; (8008f64 <edpt_schedule_packets+0x1d0>)
 8008db4:	627b      	str	r3, [r7, #36]	; 0x24
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8008db6:	4b6c      	ldr	r3, [pc, #432]	; (8008f68 <edpt_schedule_packets+0x1d4>)
 8008db8:	623b      	str	r3, [r7, #32]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8008dba:	4b6c      	ldr	r3, [pc, #432]	; (8008f6c <edpt_schedule_packets+0x1d8>)
 8008dbc:	61fb      	str	r3, [r7, #28]

  // EP0 is limited to one packet each xfer
  // We use multiple transaction of xfer->max_size length to get a whole transfer done
  if(epnum == 0) {
 8008dbe:	79bb      	ldrb	r3, [r7, #6]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d121      	bne.n	8008e08 <edpt_schedule_packets+0x74>
    xfer_ctl_t * const xfer = XFER_CTL_BASE(epnum, dir);
 8008dc4:	79ba      	ldrb	r2, [r7, #6]
 8008dc6:	797b      	ldrb	r3, [r7, #5]
 8008dc8:	0052      	lsls	r2, r2, #1
 8008dca:	4413      	add	r3, r2
 8008dcc:	011b      	lsls	r3, r3, #4
 8008dce:	4a68      	ldr	r2, [pc, #416]	; (8008f70 <edpt_schedule_packets+0x1dc>)
 8008dd0:	4413      	add	r3, r2
 8008dd2:	61bb      	str	r3, [r7, #24]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 8008dd4:	797b      	ldrb	r3, [r7, #5]
 8008dd6:	4a67      	ldr	r2, [pc, #412]	; (8008f74 <edpt_schedule_packets+0x1e0>)
 8008dd8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	895b      	ldrh	r3, [r3, #10]
 8008de0:	81fa      	strh	r2, [r7, #14]
 8008de2:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008de4:	89fa      	ldrh	r2, [r7, #14]
 8008de6:	89bb      	ldrh	r3, [r7, #12]
 8008de8:	4293      	cmp	r3, r2
 8008dea:	bf28      	it	cs
 8008dec:	4613      	movcs	r3, r2
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	863b      	strh	r3, [r7, #48]	; 0x30
    ep0_pending[dir] -= total_bytes;
 8008df2:	797b      	ldrb	r3, [r7, #5]
 8008df4:	4a5f      	ldr	r2, [pc, #380]	; (8008f74 <edpt_schedule_packets+0x1e0>)
 8008df6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8008dfa:	797b      	ldrb	r3, [r7, #5]
 8008dfc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8008dfe:	1a8a      	subs	r2, r1, r2
 8008e00:	b291      	uxth	r1, r2
 8008e02:	4a5c      	ldr	r2, [pc, #368]	; (8008f74 <edpt_schedule_packets+0x1e0>)
 8008e04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  }

  // IN and OUT endpoint xfers are interrupt-driven, we just schedule them here.
  if(dir == TUSB_DIR_IN) {
 8008e08:	797b      	ldrb	r3, [r7, #5]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d14f      	bne.n	8008eae <edpt_schedule_packets+0x11a>
    // A full IN transfer (multiple packets, possibly) triggers XFRC.
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8008e0e:	887b      	ldrh	r3, [r7, #2]
 8008e10:	04db      	lsls	r3, r3, #19
 8008e12:	4618      	mov	r0, r3
        ((total_bytes << USB_OTG_DIEPTSIZ_XFRSIZ_Pos) & USB_OTG_DIEPTSIZ_XFRSIZ_Msk);
 8008e14:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8008e16:	79bb      	ldrb	r3, [r7, #6]
 8008e18:	015b      	lsls	r3, r3, #5
 8008e1a:	69f9      	ldr	r1, [r7, #28]
 8008e1c:	440b      	add	r3, r1
 8008e1e:	4302      	orrs	r2, r0
 8008e20:	611a      	str	r2, [r3, #16]

    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8008e22:	79bb      	ldrb	r3, [r7, #6]
 8008e24:	015b      	lsls	r3, r3, #5
 8008e26:	69fa      	ldr	r2, [r7, #28]
 8008e28:	4413      	add	r3, r2
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	79bb      	ldrb	r3, [r7, #6]
 8008e2e:	015b      	lsls	r3, r3, #5
 8008e30:	69f9      	ldr	r1, [r7, #28]
 8008e32:	440b      	add	r3, r1
 8008e34:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8008e38:	601a      	str	r2, [r3, #0]
    // For ISO endpoint set correct odd/even bit for next frame.
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8008e3a:	79bb      	ldrb	r3, [r7, #6]
 8008e3c:	015b      	lsls	r3, r3, #5
 8008e3e:	69fa      	ldr	r2, [r7, #28]
 8008e40:	4413      	add	r3, r2
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008e48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e4c:	d122      	bne.n	8008e94 <edpt_schedule_packets+0x100>
 8008e4e:	79ba      	ldrb	r2, [r7, #6]
 8008e50:	797b      	ldrb	r3, [r7, #5]
 8008e52:	4947      	ldr	r1, [pc, #284]	; (8008f70 <edpt_schedule_packets+0x1dc>)
 8008e54:	0052      	lsls	r2, r2, #1
 8008e56:	4413      	add	r3, r2
 8008e58:	011b      	lsls	r3, r3, #4
 8008e5a:	440b      	add	r3, r1
 8008e5c:	330c      	adds	r3, #12
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d117      	bne.n	8008e94 <edpt_schedule_packets+0x100>
    {
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e6c:	613b      	str	r3, [r7, #16]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 8008e6e:	79bb      	ldrb	r3, [r7, #6]
 8008e70:	015b      	lsls	r3, r3, #5
 8008e72:	69fa      	ldr	r2, [r7, #28]
 8008e74:	4413      	add	r3, r2
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d002      	beq.n	8008e84 <edpt_schedule_packets+0xf0>
 8008e7e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8008e82:	e001      	b.n	8008e88 <edpt_schedule_packets+0xf4>
 8008e84:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8008e88:	79bb      	ldrb	r3, [r7, #6]
 8008e8a:	015b      	lsls	r3, r3, #5
 8008e8c:	69f8      	ldr	r0, [r7, #28]
 8008e8e:	4403      	add	r3, r0
 8008e90:	430a      	orrs	r2, r1
 8008e92:	601a      	str	r2, [r3, #0]
    }
    // Enable fifo empty interrupt only if there are something to put in the fifo.
    if(total_bytes != 0) {
 8008e94:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d05e      	beq.n	8008f58 <edpt_schedule_packets+0x1c4>
      dev->DIEPEMPMSK |= (1 << epnum);
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e9e:	79ba      	ldrb	r2, [r7, #6]
 8008ea0:	2101      	movs	r1, #1
 8008ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8008ea6:	431a      	orrs	r2, r3
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	635a      	str	r2, [r3, #52]	; 0x34
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
    }
  }
}
 8008eac:	e054      	b.n	8008f58 <edpt_schedule_packets+0x1c4>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 8008eae:	79bb      	ldrb	r3, [r7, #6]
 8008eb0:	015b      	lsls	r3, r3, #5
 8008eb2:	6a3a      	ldr	r2, [r7, #32]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	691a      	ldr	r2, [r3, #16]
 8008eb8:	79bb      	ldrb	r3, [r7, #6]
 8008eba:	015b      	lsls	r3, r3, #5
 8008ebc:	6a39      	ldr	r1, [r7, #32]
 8008ebe:	440b      	add	r3, r1
 8008ec0:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8008ec4:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8008ec6:	79bb      	ldrb	r3, [r7, #6]
 8008ec8:	015b      	lsls	r3, r3, #5
 8008eca:	6a3a      	ldr	r2, [r7, #32]
 8008ecc:	4413      	add	r3, r2
 8008ece:	6919      	ldr	r1, [r3, #16]
 8008ed0:	887b      	ldrh	r3, [r7, #2]
 8008ed2:	04db      	lsls	r3, r3, #19
 8008ed4:	461a      	mov	r2, r3
        ((total_bytes << USB_OTG_DOEPTSIZ_XFRSIZ_Pos) & USB_OTG_DOEPTSIZ_XFRSIZ_Msk);
 8008ed6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8008ed8:	431a      	orrs	r2, r3
 8008eda:	79bb      	ldrb	r3, [r7, #6]
 8008edc:	015b      	lsls	r3, r3, #5
 8008ede:	6a38      	ldr	r0, [r7, #32]
 8008ee0:	4403      	add	r3, r0
 8008ee2:	430a      	orrs	r2, r1
 8008ee4:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 8008ee6:	79bb      	ldrb	r3, [r7, #6]
 8008ee8:	015b      	lsls	r3, r3, #5
 8008eea:	6a3a      	ldr	r2, [r7, #32]
 8008eec:	4413      	add	r3, r2
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	79bb      	ldrb	r3, [r7, #6]
 8008ef2:	015b      	lsls	r3, r3, #5
 8008ef4:	6a39      	ldr	r1, [r7, #32]
 8008ef6:	440b      	add	r3, r1
 8008ef8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8008efc:	601a      	str	r2, [r3, #0]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8008efe:	79bb      	ldrb	r3, [r7, #6]
 8008f00:	015b      	lsls	r3, r3, #5
 8008f02:	6a3a      	ldr	r2, [r7, #32]
 8008f04:	4413      	add	r3, r2
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008f0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f10:	d122      	bne.n	8008f58 <edpt_schedule_packets+0x1c4>
 8008f12:	79ba      	ldrb	r2, [r7, #6]
 8008f14:	797b      	ldrb	r3, [r7, #5]
 8008f16:	4916      	ldr	r1, [pc, #88]	; (8008f70 <edpt_schedule_packets+0x1dc>)
 8008f18:	0052      	lsls	r2, r2, #1
 8008f1a:	4413      	add	r3, r2
 8008f1c:	011b      	lsls	r3, r3, #4
 8008f1e:	440b      	add	r3, r1
 8008f20:	330c      	adds	r3, #12
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d117      	bne.n	8008f58 <edpt_schedule_packets+0x1c4>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8008f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f30:	617b      	str	r3, [r7, #20]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 8008f32:	79bb      	ldrb	r3, [r7, #6]
 8008f34:	015b      	lsls	r3, r3, #5
 8008f36:	6a3a      	ldr	r2, [r7, #32]
 8008f38:	4413      	add	r3, r2
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d002      	beq.n	8008f48 <edpt_schedule_packets+0x1b4>
 8008f42:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8008f46:	e001      	b.n	8008f4c <edpt_schedule_packets+0x1b8>
 8008f48:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8008f4c:	79bb      	ldrb	r3, [r7, #6]
 8008f4e:	015b      	lsls	r3, r3, #5
 8008f50:	6a38      	ldr	r0, [r7, #32]
 8008f52:	4403      	add	r3, r0
 8008f54:	430a      	orrs	r2, r1
 8008f56:	601a      	str	r2, [r3, #0]
}
 8008f58:	bf00      	nop
 8008f5a:	3728      	adds	r7, #40	; 0x28
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bc90      	pop	{r4, r7}
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	40040800 	.word	0x40040800
 8008f68:	40040b00 	.word	0x40040b00
 8008f6c:	40040900 	.word	0x40040900
 8008f70:	24001b00 	.word	0x24001b00
 8008f74:	24001c20 	.word	0x24001c20

08008f78 <dcd_init>:

/*------------------------------------------------------------------*/
/* Controller API
 *------------------------------------------------------------------*/
void dcd_init (uint8_t rhport)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	4603      	mov	r3, r0
 8008f80:	71fb      	strb	r3, [r7, #7]
  // Programming model begins in the last section of the chapter on the USB
  // peripheral in each Reference Manual.

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8008f82:	4b2d      	ldr	r3, [pc, #180]	; (8009038 <dcd_init+0xc0>)
 8008f84:	60fb      	str	r3, [r7, #12]

  // No HNP/SRP (no OTG support), program timeout later.
  if ( rhport == 1 )
 8008f86:	79fb      	ldrb	r3, [r7, #7]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d106      	bne.n	8008f9a <dcd_init+0x22>
    usb_otg->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    // Select default internal VBUS Indicator and Drive for ULPI
    usb_otg->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
#else
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	60da      	str	r2, [r3, #12]
 8008f98:	e005      	b.n	8008fa6 <dcd_init+0x2e>
    USB_HS_PHYCInit();
#endif
  } else
  {
    // Enable internal PHY
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	60da      	str	r2, [r3, #12]
  }

  // Reset core after selecting PHY
  // Wait AHB IDLE, reset then wait until it is cleared
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U) {}
 8008fa6:	bf00      	nop
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	dafb      	bge.n	8008fa8 <dcd_init+0x30>
  usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	f043 0201 	orr.w	r2, r3, #1
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	611a      	str	r2, [r3, #16]
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST) {}
 8008fbc:	bf00      	nop
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d0f9      	beq.n	8008fbe <dcd_init+0x46>

  // Restart PHY clock
  *((volatile uint32_t *)(RHPORT_REGS_BASE + USB_OTG_PCGCCTL_BASE)) = 0;
 8008fca:	4b1c      	ldr	r3, [pc, #112]	; (800903c <dcd_init+0xc4>)
 8008fcc:	2200      	movs	r2, #0
 8008fce:	601a      	str	r2, [r3, #0]

  // Clear all interrupts
  usb_otg->GINTSTS |= usb_otg->GINTSTS;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	695a      	ldr	r2, [r3, #20]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	695b      	ldr	r3, [r3, #20]
 8008fd8:	431a      	orrs	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	615a      	str	r2, [r3, #20]

  // Required as part of core initialization.
  // TODO: How should mode mismatch be handled? It will cause
  // the core to stop working/require reset.
  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OTGINT | USB_OTG_GINTMSK_MMISM;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	f043 0206 	orr.w	r2, r3, #6
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	619a      	str	r2, [r3, #24]

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8008fea:	4b15      	ldr	r3, [pc, #84]	; (8009040 <dcd_init+0xc8>)
 8008fec:	60bb      	str	r3, [r7, #8]

  // If USB host misbehaves during status portion of control xfer
  // (non zero-length packet), send STALL back and discard.
  dev->DCFG |=  USB_OTG_DCFG_NZLSOHSK;
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f043 0204 	orr.w	r2, r3, #4
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	601a      	str	r2, [r3, #0]

  set_speed(rhport, TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL);
 8008ffa:	79fb      	ldrb	r3, [r7, #7]
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7ff fe9c 	bl	8008d3c <set_speed>

  // Enable internal USB transceiver, unless using HS core (port 1) with external PHY.
  if (!(rhport == 1 && (CFG_TUSB_RHPORT1_MODE & OPT_MODE_HIGH_SPEED))) usb_otg->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009008:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	639a      	str	r2, [r3, #56]	; 0x38

  usb_otg->GINTMSK |= USB_OTG_GINTMSK_USBRST   | USB_OTG_GINTMSK_ENUMDNEM |
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	699a      	ldr	r2, [r3, #24]
 8009014:	4b0b      	ldr	r3, [pc, #44]	; (8009044 <dcd_init+0xcc>)
 8009016:	4313      	orrs	r3, r2
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	6193      	str	r3, [r2, #24]
      USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_WUIM     |
      USB_OTG_GINTMSK_RXFLVLM  | (USE_SOF ? USB_OTG_GINTMSK_SOFM : 0);

  // Enable global interrupt
  usb_otg->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f043 0201 	orr.w	r2, r3, #1
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 8009028:	79fb      	ldrb	r3, [r7, #7]
 800902a:	4618      	mov	r0, r3
 800902c:	f000 f852 	bl	80090d4 <dcd_connect>
}
 8009030:	bf00      	nop
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	40040000 	.word	0x40040000
 800903c:	40040e00 	.word	0x40040e00
 8009040:	40040800 	.word	0x40040800
 8009044:	80003810 	.word	0x80003810

08009048 <dcd_int_enable>:

void dcd_int_enable (uint8_t rhport)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	4603      	mov	r3, r0
 8009050:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  NVIC_EnableIRQ(RHPORT_IRQn);
 8009052:	204d      	movs	r0, #77	; 0x4d
 8009054:	f7ff fcd2 	bl	80089fc <__NVIC_EnableIRQ>
}
 8009058:	bf00      	nop
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <dcd_int_disable>:

void dcd_int_disable (uint8_t rhport)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	4603      	mov	r3, r0
 8009068:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  NVIC_DisableIRQ(RHPORT_IRQn);
 800906a:	204d      	movs	r0, #77	; 0x4d
 800906c:	f7ff fce4 	bl	8008a38 <__NVIC_DisableIRQ>
}
 8009070:	bf00      	nop
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <dcd_set_address>:

void dcd_set_address (uint8_t rhport, uint8_t dev_addr)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	4603      	mov	r3, r0
 8009080:	460a      	mov	r2, r1
 8009082:	71fb      	strb	r3, [r7, #7]
 8009084:	4613      	mov	r3, r2
 8009086:	71bb      	strb	r3, [r7, #6]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8009088:	4b11      	ldr	r3, [pc, #68]	; (80090d0 <dcd_set_address+0x58>)
 800908a:	60fb      	str	r3, [r7, #12]
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009094:	79ba      	ldrb	r2, [r7, #6]
 8009096:	0112      	lsls	r2, r2, #4
 8009098:	431a      	orrs	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	601a      	str	r2, [r3, #0]
 800909e:	2300      	movs	r3, #0
 80090a0:	72fb      	strb	r3, [r7, #11]
 80090a2:	2301      	movs	r3, #1
 80090a4:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 80090a6:	7abb      	ldrb	r3, [r7, #10]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d002      	beq.n	80090b2 <dcd_set_address+0x3a>
 80090ac:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80090b0:	e000      	b.n	80090b4 <dcd_set_address+0x3c>
 80090b2:	2300      	movs	r3, #0
 80090b4:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	b25b      	sxtb	r3, r3
 80090bc:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 80090be:	79f8      	ldrb	r0, [r7, #7]
 80090c0:	2300      	movs	r3, #0
 80090c2:	2200      	movs	r2, #0
 80090c4:	f000 f97c 	bl	80093c0 <dcd_edpt_xfer>
}
 80090c8:	bf00      	nop
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	40040800 	.word	0x40040800

080090d4 <dcd_connect>:

  dev->DCTL &= ~USB_OTG_DCTL_RWUSIG;
}

void dcd_connect(uint8_t rhport)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	4603      	mov	r3, r0
 80090dc:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 80090de:	4b07      	ldr	r3, [pc, #28]	; (80090fc <dcd_connect+0x28>)
 80090e0:	60fb      	str	r3, [r7, #12]
  dev->DCTL &= ~USB_OTG_DCTL_SDIS;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	f023 0202 	bic.w	r2, r3, #2
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	605a      	str	r2, [r3, #4]
}
 80090ee:	bf00      	nop
 80090f0:	3714      	adds	r7, #20
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	40040800 	.word	0x40040800

08009100 <dcd_edpt_open>:
/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b090      	sub	sp, #64	; 0x40
 8009104:	af00      	add	r7, sp, #0
 8009106:	4603      	mov	r3, r0
 8009108:	6039      	str	r1, [r7, #0]
 800910a:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 800910c:	4b82      	ldr	r3, [pc, #520]	; (8009318 <dcd_edpt_open+0x218>)
 800910e:	63fb      	str	r3, [r7, #60]	; 0x3c
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8009110:	4b82      	ldr	r3, [pc, #520]	; (800931c <dcd_edpt_open+0x21c>)
 8009112:	63bb      	str	r3, [r7, #56]	; 0x38
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8009114:	4b82      	ldr	r3, [pc, #520]	; (8009320 <dcd_edpt_open+0x220>)
 8009116:	637b      	str	r3, [r7, #52]	; 0x34
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8009118:	4b82      	ldr	r3, [pc, #520]	; (8009324 <dcd_edpt_open+0x224>)
 800911a:	633b      	str	r3, [r7, #48]	; 0x30

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	789b      	ldrb	r3, [r3, #2]
 8009120:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009122:	7cbb      	ldrb	r3, [r7, #18]
 8009124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009128:	b2db      	uxtb	r3, r3
 800912a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t const dir   = tu_edpt_dir(desc_edpt->bEndpointAddress);
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	789b      	ldrb	r3, [r3, #2]
 8009132:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009134:	7cfb      	ldrb	r3, [r7, #19]
 8009136:	09db      	lsrs	r3, r3, #7
 8009138:	b2db      	uxtb	r3, r3
 800913a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

  TU_ASSERT(epnum < EP_MAX);
 800913e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009142:	2b08      	cmp	r3, #8
 8009144:	d90a      	bls.n	800915c <dcd_edpt_open+0x5c>
 8009146:	4b78      	ldr	r3, [pc, #480]	; (8009328 <dcd_edpt_open+0x228>)
 8009148:	617b      	str	r3, [r7, #20]
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 0301 	and.w	r3, r3, #1
 8009152:	2b00      	cmp	r3, #0
 8009154:	d000      	beq.n	8009158 <dcd_edpt_open+0x58>
 8009156:	be00      	bkpt	0x0000
 8009158:	2300      	movs	r3, #0
 800915a:	e0d8      	b.n	800930e <dcd_edpt_open+0x20e>

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 800915c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009160:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009164:	0052      	lsls	r2, r2, #1
 8009166:	4413      	add	r3, r2
 8009168:	011b      	lsls	r3, r3, #4
 800916a:	4a70      	ldr	r2, [pc, #448]	; (800932c <dcd_edpt_open+0x22c>)
 800916c:	4413      	add	r3, r2
 800916e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	889b      	ldrh	r3, [r3, #4]
 8009178:	b29b      	uxth	r3, r3
 800917a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800917e:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8009180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009182:	815a      	strh	r2, [r3, #10]
  xfer->interval = desc_edpt->bInterval;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	799a      	ldrb	r2, [r3, #6]
 8009188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918a:	731a      	strb	r2, [r3, #12]

  uint16_t const fifo_size = (xfer->max_size + 3) / 4; // Round up to next full word
 800918c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918e:	895b      	ldrh	r3, [r3, #10]
 8009190:	3303      	adds	r3, #3
 8009192:	2b00      	cmp	r3, #0
 8009194:	da00      	bge.n	8009198 <dcd_edpt_open+0x98>
 8009196:	3303      	adds	r3, #3
 8009198:	109b      	asrs	r3, r3, #2
 800919a:	84fb      	strh	r3, [r7, #38]	; 0x26

  if(dir == TUSB_DIR_OUT)
 800919c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d152      	bne.n	800924a <dcd_edpt_open+0x14a>
  {
    // Calculate required size of RX FIFO
    uint16_t const sz = calc_rx_ff_size(4*fifo_size);
 80091a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7ff fc68 	bl	8008a80 <calc_rx_ff_size>
 80091b0:	4603      	mov	r3, r0
 80091b2:	83fb      	strh	r3, [r7, #30]

    // If size_rx needs to be extended check if possible and if so enlarge it
    if (usb_otg->GRXFSIZ < sz)
 80091b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091b8:	8bfb      	ldrh	r3, [r7, #30]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d214      	bcs.n	80091e8 <dcd_edpt_open+0xe8>
    {
      TU_ASSERT(sz + _allocated_fifo_words_tx <= EP_FIFO_SIZE/4);
 80091be:	8bfb      	ldrh	r3, [r7, #30]
 80091c0:	4a5b      	ldr	r2, [pc, #364]	; (8009330 <dcd_edpt_open+0x230>)
 80091c2:	8812      	ldrh	r2, [r2, #0]
 80091c4:	4413      	add	r3, r2
 80091c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091ca:	dd0a      	ble.n	80091e2 <dcd_edpt_open+0xe2>
 80091cc:	4b56      	ldr	r3, [pc, #344]	; (8009328 <dcd_edpt_open+0x228>)
 80091ce:	61bb      	str	r3, [r7, #24]
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d000      	beq.n	80091de <dcd_edpt_open+0xde>
 80091dc:	be00      	bkpt	0x0000
 80091de:	2300      	movs	r3, #0
 80091e0:	e095      	b.n	800930e <dcd_edpt_open+0x20e>

      // Enlarge RX FIFO
      usb_otg->GRXFSIZ = sz;
 80091e2:	8bfa      	ldrh	r2, [r7, #30]
 80091e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091e6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 80091e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80091ec:	015b      	lsls	r3, r3, #5
 80091ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091f0:	4413      	add	r3, r2
 80091f2:	681a      	ldr	r2, [r3, #0]
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	78db      	ldrb	r3, [r3, #3]
 80091f8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	049b      	lsls	r3, r3, #18
 8009200:	4619      	mov	r1, r3
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	78db      	ldrb	r3, [r3, #3]
 8009206:	f003 0303 	and.w	r3, r3, #3
 800920a:	b2db      	uxtb	r3, r3
 800920c:	2b01      	cmp	r3, #1
 800920e:	d002      	beq.n	8009216 <dcd_edpt_open+0x116>
 8009210:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009214:	e000      	b.n	8009218 <dcd_edpt_open+0x118>
 8009216:	2300      	movs	r3, #0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 8009218:	430b      	orrs	r3, r1
        (xfer->max_size << USB_OTG_DOEPCTL_MPSIZ_Pos);
 800921a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800921c:	8949      	ldrh	r1, [r1, #10]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 800921e:	430b      	orrs	r3, r1
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 8009220:	431a      	orrs	r2, r3
 8009222:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009226:	015b      	lsls	r3, r3, #5
 8009228:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800922a:	440b      	add	r3, r1
 800922c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009230:	601a      	str	r2, [r3, #0]

    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_OEPM_Pos + epnum));
 8009232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009234:	69db      	ldr	r3, [r3, #28]
 8009236:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800923a:	3210      	adds	r2, #16
 800923c:	2101      	movs	r1, #1
 800923e:	fa01 f202 	lsl.w	r2, r1, r2
 8009242:	431a      	orrs	r2, r3
 8009244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009246:	61da      	str	r2, [r3, #28]
 8009248:	e060      	b.n	800930c <dcd_edpt_open+0x20c>
    //
    // In FIFO is allocated by following rules:
    // - IN EP 1 gets FIFO 1, IN EP "n" gets FIFO "n".

    // Check if free space is available
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + usb_otg->GRXFSIZ <= EP_FIFO_SIZE/4);
 800924a:	4b39      	ldr	r3, [pc, #228]	; (8009330 <dcd_edpt_open+0x230>)
 800924c:	881b      	ldrh	r3, [r3, #0]
 800924e:	461a      	mov	r2, r3
 8009250:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009252:	4413      	add	r3, r2
 8009254:	461a      	mov	r2, r3
 8009256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925a:	4413      	add	r3, r2
 800925c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009260:	d90a      	bls.n	8009278 <dcd_edpt_open+0x178>
 8009262:	4b31      	ldr	r3, [pc, #196]	; (8009328 <dcd_edpt_open+0x228>)
 8009264:	623b      	str	r3, [r7, #32]
 8009266:	6a3b      	ldr	r3, [r7, #32]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0301 	and.w	r3, r3, #1
 800926e:	2b00      	cmp	r3, #0
 8009270:	d000      	beq.n	8009274 <dcd_edpt_open+0x174>
 8009272:	be00      	bkpt	0x0000
 8009274:	2300      	movs	r3, #0
 8009276:	e04a      	b.n	800930e <dcd_edpt_open+0x20e>

    _allocated_fifo_words_tx += fifo_size;
 8009278:	4b2d      	ldr	r3, [pc, #180]	; (8009330 <dcd_edpt_open+0x230>)
 800927a:	881a      	ldrh	r2, [r3, #0]
 800927c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800927e:	4413      	add	r3, r2
 8009280:	b29a      	uxth	r2, r3
 8009282:	4b2b      	ldr	r3, [pc, #172]	; (8009330 <dcd_edpt_open+0x230>)
 8009284:	801a      	strh	r2, [r3, #0]

    TU_LOG(2, "    Allocated %u bytes at offset %u", fifo_size*4, EP_FIFO_SIZE-_allocated_fifo_words_tx*4);

    // DIEPTXF starts at FIFO #1.
    // Both TXFD and TXSA are in unit of 32-bit words.
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8009286:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009288:	041a      	lsls	r2, r3, #16
 800928a:	4b29      	ldr	r3, [pc, #164]	; (8009330 <dcd_edpt_open+0x230>)
 800928c:	881b      	ldrh	r3, [r3, #0]
 800928e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8009292:	431a      	orrs	r2, r3
 8009294:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009298:	3b01      	subs	r3, #1
 800929a:	4611      	mov	r1, r2
 800929c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800929e:	3340      	adds	r3, #64	; 0x40
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	4413      	add	r3, r2
 80092a4:	6059      	str	r1, [r3, #4]

    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 80092a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092aa:	015b      	lsls	r3, r3, #5
 80092ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ae:	4413      	add	r3, r2
 80092b0:	6819      	ldr	r1, [r3, #0]
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 80092b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092b6:	059b      	lsls	r3, r3, #22
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 80092b8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	78db      	ldrb	r3, [r3, #3]
 80092c0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	049b      	lsls	r3, r3, #18
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 80092c8:	4313      	orrs	r3, r2
 80092ca:	461a      	mov	r2, r3
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	78db      	ldrb	r3, [r3, #3]
 80092d0:	f003 0303 	and.w	r3, r3, #3
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d002      	beq.n	80092e0 <dcd_edpt_open+0x1e0>
 80092da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80092de:	e000      	b.n	80092e2 <dcd_edpt_open+0x1e2>
 80092e0:	2300      	movs	r3, #0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 80092e2:	4313      	orrs	r3, r2
        (xfer->max_size << USB_OTG_DIEPCTL_MPSIZ_Pos);
 80092e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092e6:	8952      	ldrh	r2, [r2, #10]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 80092e8:	431a      	orrs	r2, r3
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 80092ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092ee:	015b      	lsls	r3, r3, #5
 80092f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092f2:	4403      	add	r3, r0
 80092f4:	430a      	orrs	r2, r1
 80092f6:	601a      	str	r2, [r3, #0]

    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_IEPM_Pos + epnum));
 80092f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fa:	69db      	ldr	r3, [r3, #28]
 80092fc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009300:	2101      	movs	r1, #1
 8009302:	fa01 f202 	lsl.w	r2, r1, r2
 8009306:	431a      	orrs	r2, r3
 8009308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930a:	61da      	str	r2, [r3, #28]
  }

  return true;
 800930c:	2301      	movs	r3, #1
}
 800930e:	4618      	mov	r0, r3
 8009310:	3740      	adds	r7, #64	; 0x40
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	40040000 	.word	0x40040000
 800931c:	40040800 	.word	0x40040800
 8009320:	40040b00 	.word	0x40040b00
 8009324:	40040900 	.word	0x40040900
 8009328:	e000edf0 	.word	0xe000edf0
 800932c:	24001b00 	.word	0x24001b00
 8009330:	24001c24 	.word	0x24001c24

08009334 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all (uint8_t rhport)
{
 8009334:	b480      	push	{r7}
 8009336:	b087      	sub	sp, #28
 8009338:	af00      	add	r7, sp, #0
 800933a:	4603      	mov	r3, r0
 800933c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

//  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 800933e:	4b1b      	ldr	r3, [pc, #108]	; (80093ac <dcd_edpt_close_all+0x78>)
 8009340:	613b      	str	r3, [r7, #16]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8009342:	4b1b      	ldr	r3, [pc, #108]	; (80093b0 <dcd_edpt_close_all+0x7c>)
 8009344:	60fb      	str	r3, [r7, #12]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8009346:	4b1b      	ldr	r3, [pc, #108]	; (80093b4 <dcd_edpt_close_all+0x80>)
 8009348:	60bb      	str	r3, [r7, #8]

  // Disable non-control interrupt
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8009350:	61da      	str	r2, [r3, #28]

  for(uint8_t n = 1; n < EP_MAX; n++)
 8009352:	2301      	movs	r3, #1
 8009354:	75fb      	strb	r3, [r7, #23]
 8009356:	e01c      	b.n	8009392 <dcd_edpt_close_all+0x5e>
  {
    // disable OUT endpoint
    out_ep[n].DOEPCTL = 0;
 8009358:	7dfb      	ldrb	r3, [r7, #23]
 800935a:	015b      	lsls	r3, r3, #5
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	4413      	add	r3, r2
 8009360:	2200      	movs	r2, #0
 8009362:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8009364:	7dfb      	ldrb	r3, [r7, #23]
 8009366:	4a14      	ldr	r2, [pc, #80]	; (80093b8 <dcd_edpt_close_all+0x84>)
 8009368:	015b      	lsls	r3, r3, #5
 800936a:	4413      	add	r3, r2
 800936c:	330a      	adds	r3, #10
 800936e:	2200      	movs	r2, #0
 8009370:	801a      	strh	r2, [r3, #0]

    // disable IN endpoint
    in_ep[n].DIEPCTL = 0;
 8009372:	7dfb      	ldrb	r3, [r7, #23]
 8009374:	015b      	lsls	r3, r3, #5
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	4413      	add	r3, r2
 800937a:	2200      	movs	r2, #0
 800937c:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 800937e:	7dfb      	ldrb	r3, [r7, #23]
 8009380:	4a0d      	ldr	r2, [pc, #52]	; (80093b8 <dcd_edpt_close_all+0x84>)
 8009382:	015b      	lsls	r3, r3, #5
 8009384:	4413      	add	r3, r2
 8009386:	331a      	adds	r3, #26
 8009388:	2200      	movs	r2, #0
 800938a:	801a      	strh	r2, [r3, #0]
  for(uint8_t n = 1; n < EP_MAX; n++)
 800938c:	7dfb      	ldrb	r3, [r7, #23]
 800938e:	3301      	adds	r3, #1
 8009390:	75fb      	strb	r3, [r7, #23]
 8009392:	7dfb      	ldrb	r3, [r7, #23]
 8009394:	2b08      	cmp	r3, #8
 8009396:	d9df      	bls.n	8009358 <dcd_edpt_close_all+0x24>
  }

  // reset allocated fifo IN
  _allocated_fifo_words_tx = 16;
 8009398:	4b08      	ldr	r3, [pc, #32]	; (80093bc <dcd_edpt_close_all+0x88>)
 800939a:	2210      	movs	r2, #16
 800939c:	801a      	strh	r2, [r3, #0]
}
 800939e:	bf00      	nop
 80093a0:	371c      	adds	r7, #28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	40040800 	.word	0x40040800
 80093b0:	40040b00 	.word	0x40040b00
 80093b4:	40040900 	.word	0x40040900
 80093b8:	24001b00 	.word	0x24001b00
 80093bc:	24001c24 	.word	0x24001c24

080093c0 <dcd_edpt_xfer>:

bool dcd_edpt_xfer (uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 80093c0:	b590      	push	{r4, r7, lr}
 80093c2:	b089      	sub	sp, #36	; 0x24
 80093c4:	af02      	add	r7, sp, #8
 80093c6:	603a      	str	r2, [r7, #0]
 80093c8:	461a      	mov	r2, r3
 80093ca:	4603      	mov	r3, r0
 80093cc:	71fb      	strb	r3, [r7, #7]
 80093ce:	460b      	mov	r3, r1
 80093d0:	71bb      	strb	r3, [r7, #6]
 80093d2:	4613      	mov	r3, r2
 80093d4:	80bb      	strh	r3, [r7, #4]
 80093d6:	79bb      	ldrb	r3, [r7, #6]
 80093d8:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80093da:	7b3b      	ldrb	r3, [r7, #12]
 80093dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093e0:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 80093e2:	757b      	strb	r3, [r7, #21]
 80093e4:	79bb      	ldrb	r3, [r7, #6]
 80093e6:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80093e8:	7b7b      	ldrb	r3, [r7, #13]
 80093ea:	09db      	lsrs	r3, r3, #7
 80093ec:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80093ee:	753b      	strb	r3, [r7, #20]

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 80093f0:	7d7a      	ldrb	r2, [r7, #21]
 80093f2:	7d3b      	ldrb	r3, [r7, #20]
 80093f4:	0052      	lsls	r2, r2, #1
 80093f6:	4413      	add	r3, r2
 80093f8:	011b      	lsls	r3, r3, #4
 80093fa:	4a23      	ldr	r2, [pc, #140]	; (8009488 <dcd_edpt_xfer+0xc8>)
 80093fc:	4413      	add	r3, r2
 80093fe:	613b      	str	r3, [r7, #16]
  xfer->buffer      = buffer;
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	601a      	str	r2, [r3, #0]
  xfer->ff          = NULL;
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	2200      	movs	r2, #0
 800940a:	605a      	str	r2, [r3, #4]
  xfer->total_len   = total_bytes;
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	88ba      	ldrh	r2, [r7, #4]
 8009410:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if(epnum == 0) {
 8009412:	7d7b      	ldrb	r3, [r7, #21]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d111      	bne.n	800943c <dcd_edpt_xfer+0x7c>
    ep0_pending[dir] = total_bytes;
 8009418:	7d3b      	ldrb	r3, [r7, #20]
 800941a:	491c      	ldr	r1, [pc, #112]	; (800948c <dcd_edpt_xfer+0xcc>)
 800941c:	88ba      	ldrh	r2, [r7, #4]
 800941e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
 8009422:	7d3b      	ldrb	r3, [r7, #20]
 8009424:	4a19      	ldr	r2, [pc, #100]	; (800948c <dcd_edpt_xfer+0xcc>)
 8009426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800942a:	7d3a      	ldrb	r2, [r7, #20]
 800942c:	7d79      	ldrb	r1, [r7, #21]
 800942e:	79f8      	ldrb	r0, [r7, #7]
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	2301      	movs	r3, #1
 8009434:	f7ff fcae 	bl	8008d94 <edpt_schedule_packets>
    return true;
 8009438:	2301      	movs	r3, #1
 800943a:	e021      	b.n	8009480 <dcd_edpt_xfer+0xc0>
  }

  uint16_t num_packets = (total_bytes / xfer->max_size);
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	895b      	ldrh	r3, [r3, #10]
 8009440:	88ba      	ldrh	r2, [r7, #4]
 8009442:	fbb2 f3f3 	udiv	r3, r2, r3
 8009446:	82fb      	strh	r3, [r7, #22]
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	895a      	ldrh	r2, [r3, #10]
 800944c:	88bb      	ldrh	r3, [r7, #4]
 800944e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009452:	fb01 f202 	mul.w	r2, r1, r2
 8009456:	1a9b      	subs	r3, r3, r2
 8009458:	81fb      	strh	r3, [r7, #14]

  // Zero-size packet is special case.
  if(short_packet_size > 0 || (total_bytes == 0)) {
 800945a:	89fb      	ldrh	r3, [r7, #14]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d102      	bne.n	8009466 <dcd_edpt_xfer+0xa6>
 8009460:	88bb      	ldrh	r3, [r7, #4]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d102      	bne.n	800946c <dcd_edpt_xfer+0xac>
    num_packets++;
 8009466:	8afb      	ldrh	r3, [r7, #22]
 8009468:	3301      	adds	r3, #1
 800946a:	82fb      	strh	r3, [r7, #22]
  }

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 800946c:	8afc      	ldrh	r4, [r7, #22]
 800946e:	7d3a      	ldrb	r2, [r7, #20]
 8009470:	7d79      	ldrb	r1, [r7, #21]
 8009472:	79f8      	ldrb	r0, [r7, #7]
 8009474:	88bb      	ldrh	r3, [r7, #4]
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	4623      	mov	r3, r4
 800947a:	f7ff fc8b 	bl	8008d94 <edpt_schedule_packets>

  return true;
 800947e:	2301      	movs	r3, #1
}
 8009480:	4618      	mov	r0, r3
 8009482:	371c      	adds	r7, #28
 8009484:	46bd      	mov	sp, r7
 8009486:	bd90      	pop	{r4, r7, pc}
 8009488:	24001b00 	.word	0x24001b00
 800948c:	24001c20 	.word	0x24001c20

08009490 <dcd_edpt_xfer_fifo>:
// The number of bytes has to be given explicitly to allow more flexible control of how many
// bytes should be written and second to keep the return value free to give back a boolean
// success message. If total_bytes is too big, the FIFO will copy only what is available
// into the USB buffer!
bool dcd_edpt_xfer_fifo (uint8_t rhport, uint8_t ep_addr, tu_fifo_t * ff, uint16_t total_bytes)
{
 8009490:	b590      	push	{r4, r7, lr}
 8009492:	b08b      	sub	sp, #44	; 0x2c
 8009494:	af02      	add	r7, sp, #8
 8009496:	603a      	str	r2, [r7, #0]
 8009498:	461a      	mov	r2, r3
 800949a:	4603      	mov	r3, r0
 800949c:	71fb      	strb	r3, [r7, #7]
 800949e:	460b      	mov	r3, r1
 80094a0:	71bb      	strb	r3, [r7, #6]
 80094a2:	4613      	mov	r3, r2
 80094a4:	80bb      	strh	r3, [r7, #4]
  // USB buffers always work in bytes so to avoid unnecessary divisions we demand item_size = 1
  TU_ASSERT(ff->item_size == 1);
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	88db      	ldrh	r3, [r3, #6]
 80094aa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d00a      	beq.n	80094ca <dcd_edpt_xfer_fifo+0x3a>
 80094b4:	4b27      	ldr	r3, [pc, #156]	; (8009554 <dcd_edpt_xfer_fifo+0xc4>)
 80094b6:	613b      	str	r3, [r7, #16]
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 0301 	and.w	r3, r3, #1
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d000      	beq.n	80094c6 <dcd_edpt_xfer_fifo+0x36>
 80094c4:	be00      	bkpt	0x0000
 80094c6:	2300      	movs	r3, #0
 80094c8:	e03f      	b.n	800954a <dcd_edpt_xfer_fifo+0xba>
 80094ca:	79bb      	ldrb	r3, [r7, #6]
 80094cc:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
 80094d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094d4:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80094d6:	777b      	strb	r3, [r7, #29]
 80094d8:	79bb      	ldrb	r3, [r7, #6]
 80094da:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80094dc:	7bfb      	ldrb	r3, [r7, #15]
 80094de:	09db      	lsrs	r3, r3, #7
 80094e0:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80094e2:	773b      	strb	r3, [r7, #28]

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 80094e4:	7f7a      	ldrb	r2, [r7, #29]
 80094e6:	7f3b      	ldrb	r3, [r7, #28]
 80094e8:	0052      	lsls	r2, r2, #1
 80094ea:	4413      	add	r3, r2
 80094ec:	011b      	lsls	r3, r3, #4
 80094ee:	4a1a      	ldr	r2, [pc, #104]	; (8009558 <dcd_edpt_xfer_fifo+0xc8>)
 80094f0:	4413      	add	r3, r2
 80094f2:	61bb      	str	r3, [r7, #24]
  xfer->buffer      = NULL;
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	2200      	movs	r2, #0
 80094f8:	601a      	str	r2, [r3, #0]
  xfer->ff          = ff;
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	683a      	ldr	r2, [r7, #0]
 80094fe:	605a      	str	r2, [r3, #4]
  xfer->total_len   = total_bytes;
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	88ba      	ldrh	r2, [r7, #4]
 8009504:	811a      	strh	r2, [r3, #8]

  uint16_t num_packets = (total_bytes / xfer->max_size);
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	895b      	ldrh	r3, [r3, #10]
 800950a:	88ba      	ldrh	r2, [r7, #4]
 800950c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009510:	83fb      	strh	r3, [r7, #30]
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	895a      	ldrh	r2, [r3, #10]
 8009516:	88bb      	ldrh	r3, [r7, #4]
 8009518:	fbb3 f1f2 	udiv	r1, r3, r2
 800951c:	fb01 f202 	mul.w	r2, r1, r2
 8009520:	1a9b      	subs	r3, r3, r2
 8009522:	82fb      	strh	r3, [r7, #22]

  // Zero-size packet is special case.
  if(short_packet_size > 0 || (total_bytes == 0)) num_packets++;
 8009524:	8afb      	ldrh	r3, [r7, #22]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d102      	bne.n	8009530 <dcd_edpt_xfer_fifo+0xa0>
 800952a:	88bb      	ldrh	r3, [r7, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d102      	bne.n	8009536 <dcd_edpt_xfer_fifo+0xa6>
 8009530:	8bfb      	ldrh	r3, [r7, #30]
 8009532:	3301      	adds	r3, #1
 8009534:	83fb      	strh	r3, [r7, #30]

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 8009536:	8bfc      	ldrh	r4, [r7, #30]
 8009538:	7f3a      	ldrb	r2, [r7, #28]
 800953a:	7f79      	ldrb	r1, [r7, #29]
 800953c:	79f8      	ldrb	r0, [r7, #7]
 800953e:	88bb      	ldrh	r3, [r7, #4]
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	4623      	mov	r3, r4
 8009544:	f7ff fc26 	bl	8008d94 <edpt_schedule_packets>

  return true;
 8009548:	2301      	movs	r3, #1
}
 800954a:	4618      	mov	r0, r3
 800954c:	3724      	adds	r7, #36	; 0x24
 800954e:	46bd      	mov	sp, r7
 8009550:	bd90      	pop	{r4, r7, pc}
 8009552:	bf00      	nop
 8009554:	e000edf0 	.word	0xe000edf0
 8009558:	24001b00 	.word	0x24001b00

0800955c <dcd_edpt_disable>:

static void dcd_edpt_disable (uint8_t rhport, uint8_t ep_addr, bool stall)
{
 800955c:	b480      	push	{r7}
 800955e:	b089      	sub	sp, #36	; 0x24
 8009560:	af00      	add	r7, sp, #0
 8009562:	4603      	mov	r3, r0
 8009564:	71fb      	strb	r3, [r7, #7]
 8009566:	460b      	mov	r3, r1
 8009568:	71bb      	strb	r3, [r7, #6]
 800956a:	4613      	mov	r3, r2
 800956c:	717b      	strb	r3, [r7, #5]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 800956e:	4b6d      	ldr	r3, [pc, #436]	; (8009724 <dcd_edpt_disable+0x1c8>)
 8009570:	61fb      	str	r3, [r7, #28]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8009572:	4b6d      	ldr	r3, [pc, #436]	; (8009728 <dcd_edpt_disable+0x1cc>)
 8009574:	61bb      	str	r3, [r7, #24]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8009576:	4b6d      	ldr	r3, [pc, #436]	; (800972c <dcd_edpt_disable+0x1d0>)
 8009578:	617b      	str	r3, [r7, #20]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 800957a:	4b6d      	ldr	r3, [pc, #436]	; (8009730 <dcd_edpt_disable+0x1d4>)
 800957c:	613b      	str	r3, [r7, #16]
 800957e:	79bb      	ldrb	r3, [r7, #6]
 8009580:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009582:	7b3b      	ldrb	r3, [r7, #12]
 8009584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009588:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800958a:	73fb      	strb	r3, [r7, #15]
 800958c:	79bb      	ldrb	r3, [r7, #6]
 800958e:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009590:	7b7b      	ldrb	r3, [r7, #13]
 8009592:	09db      	lsrs	r3, r3, #7
 8009594:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8009596:	73bb      	strb	r3, [r7, #14]

  if(dir == TUSB_DIR_IN) {
 8009598:	7bbb      	ldrb	r3, [r7, #14]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d16a      	bne.n	8009674 <dcd_edpt_disable+0x118>
    // Only disable currently enabled non-control endpoint
    if ( (epnum == 0) || !(in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPENA) ){
 800959e:	7bfb      	ldrb	r3, [r7, #15]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d006      	beq.n	80095b2 <dcd_edpt_disable+0x56>
 80095a4:	7bfb      	ldrb	r3, [r7, #15]
 80095a6:	015b      	lsls	r3, r3, #5
 80095a8:	693a      	ldr	r2, [r7, #16]
 80095aa:	4413      	add	r3, r2
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	db13      	blt.n	80095da <dcd_edpt_disable+0x7e>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
 80095b4:	015b      	lsls	r3, r3, #5
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	4413      	add	r3, r2
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	797b      	ldrb	r3, [r7, #5]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d002      	beq.n	80095c8 <dcd_edpt_disable+0x6c>
 80095c2:	f04f 6102 	mov.w	r1, #136314880	; 0x8200000
 80095c6:	e001      	b.n	80095cc <dcd_edpt_disable+0x70>
 80095c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
 80095ce:	015b      	lsls	r3, r3, #5
 80095d0:	6938      	ldr	r0, [r7, #16]
 80095d2:	4403      	add	r3, r0
 80095d4:	430a      	orrs	r2, r1
 80095d6:	601a      	str	r2, [r3, #0]
 80095d8:	e037      	b.n	800964a <dcd_edpt_disable+0xee>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80095da:	7bfb      	ldrb	r3, [r7, #15]
 80095dc:	015b      	lsls	r3, r3, #5
 80095de:	693a      	ldr	r2, [r7, #16]
 80095e0:	4413      	add	r3, r2
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
 80095e6:	015b      	lsls	r3, r3, #5
 80095e8:	6939      	ldr	r1, [r7, #16]
 80095ea:	440b      	add	r3, r1
 80095ec:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80095f0:	601a      	str	r2, [r3, #0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_INEPNE) == 0);
 80095f2:	bf00      	nop
 80095f4:	7bfb      	ldrb	r3, [r7, #15]
 80095f6:	015b      	lsls	r3, r3, #5
 80095f8:	693a      	ldr	r2, [r7, #16]
 80095fa:	4413      	add	r3, r2
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009602:	2b00      	cmp	r3, #0
 8009604:	d0f6      	beq.n	80095f4 <dcd_edpt_disable+0x98>

      // Disable the endpoint.
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPDIS | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 8009606:	7bfb      	ldrb	r3, [r7, #15]
 8009608:	015b      	lsls	r3, r3, #5
 800960a:	693a      	ldr	r2, [r7, #16]
 800960c:	4413      	add	r3, r2
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	797b      	ldrb	r3, [r7, #5]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <dcd_edpt_disable+0xbe>
 8009616:	4947      	ldr	r1, [pc, #284]	; (8009734 <dcd_edpt_disable+0x1d8>)
 8009618:	e001      	b.n	800961e <dcd_edpt_disable+0xc2>
 800961a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800961e:	7bfb      	ldrb	r3, [r7, #15]
 8009620:	015b      	lsls	r3, r3, #5
 8009622:	6938      	ldr	r0, [r7, #16]
 8009624:	4403      	add	r3, r0
 8009626:	430a      	orrs	r2, r1
 8009628:	601a      	str	r2, [r3, #0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_EPDISD_Msk) == 0);
 800962a:	bf00      	nop
 800962c:	7bfb      	ldrb	r3, [r7, #15]
 800962e:	015b      	lsls	r3, r3, #5
 8009630:	693a      	ldr	r2, [r7, #16]
 8009632:	4413      	add	r3, r2
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	f003 0302 	and.w	r3, r3, #2
 800963a:	2b00      	cmp	r3, #0
 800963c:	d0f6      	beq.n	800962c <dcd_edpt_disable+0xd0>
      in_ep[epnum].DIEPINT = USB_OTG_DIEPINT_EPDISD;
 800963e:	7bfb      	ldrb	r3, [r7, #15]
 8009640:	015b      	lsls	r3, r3, #5
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	4413      	add	r3, r2
 8009646:	2202      	movs	r2, #2
 8009648:	609a      	str	r2, [r3, #8]
    }

    // Flush the FIFO, and wait until we have confirmed it cleared.
    usb_otg->GRSTCTL |= (epnum << USB_OTG_GRSTCTL_TXFNUM_Pos);
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	7bfa      	ldrb	r2, [r7, #15]
 8009650:	0192      	lsls	r2, r2, #6
 8009652:	431a      	orrs	r2, r3
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	611a      	str	r2, [r3, #16]
    usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	f043 0220 	orr.w	r2, r3, #32
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	611a      	str	r2, [r3, #16]
    while((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH_Msk) != 0);
 8009664:	bf00      	nop
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	f003 0320 	and.w	r3, r3, #32
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1f9      	bne.n	8009666 <dcd_edpt_disable+0x10a>

      // Allow other OUT endpoints to keep receiving.
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
    }
  }
}
 8009672:	e051      	b.n	8009718 <dcd_edpt_disable+0x1bc>
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 8009674:	7bfb      	ldrb	r3, [r7, #15]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d006      	beq.n	8009688 <dcd_edpt_disable+0x12c>
 800967a:	7bfb      	ldrb	r3, [r7, #15]
 800967c:	015b      	lsls	r3, r3, #5
 800967e:	697a      	ldr	r2, [r7, #20]
 8009680:	4413      	add	r3, r2
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	db12      	blt.n	80096ae <dcd_edpt_disable+0x152>
      out_ep[epnum].DOEPCTL |= stall ? USB_OTG_DOEPCTL_STALL : 0;
 8009688:	7bfb      	ldrb	r3, [r7, #15]
 800968a:	015b      	lsls	r3, r3, #5
 800968c:	697a      	ldr	r2, [r7, #20]
 800968e:	4413      	add	r3, r2
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	797b      	ldrb	r3, [r7, #5]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d002      	beq.n	800969e <dcd_edpt_disable+0x142>
 8009698:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800969c:	e000      	b.n	80096a0 <dcd_edpt_disable+0x144>
 800969e:	2100      	movs	r1, #0
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
 80096a2:	015b      	lsls	r3, r3, #5
 80096a4:	6978      	ldr	r0, [r7, #20]
 80096a6:	4403      	add	r3, r0
 80096a8:	430a      	orrs	r2, r1
 80096aa:	601a      	str	r2, [r3, #0]
}
 80096ac:	e034      	b.n	8009718 <dcd_edpt_disable+0x1bc>
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	605a      	str	r2, [r3, #4]
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 80096ba:	bf00      	nop
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	695b      	ldr	r3, [r3, #20]
 80096c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d0f9      	beq.n	80096bc <dcd_edpt_disable+0x160>
      out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPDIS | (stall ? USB_OTG_DOEPCTL_STALL : 0);
 80096c8:	7bfb      	ldrb	r3, [r7, #15]
 80096ca:	015b      	lsls	r3, r3, #5
 80096cc:	697a      	ldr	r2, [r7, #20]
 80096ce:	4413      	add	r3, r2
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	797b      	ldrb	r3, [r7, #5]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d001      	beq.n	80096dc <dcd_edpt_disable+0x180>
 80096d8:	4916      	ldr	r1, [pc, #88]	; (8009734 <dcd_edpt_disable+0x1d8>)
 80096da:	e001      	b.n	80096e0 <dcd_edpt_disable+0x184>
 80096dc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	015b      	lsls	r3, r3, #5
 80096e4:	6978      	ldr	r0, [r7, #20]
 80096e6:	4403      	add	r3, r0
 80096e8:	430a      	orrs	r2, r1
 80096ea:	601a      	str	r2, [r3, #0]
      while((out_ep[epnum].DOEPINT & USB_OTG_DOEPINT_EPDISD_Msk) == 0);
 80096ec:	bf00      	nop
 80096ee:	7bfb      	ldrb	r3, [r7, #15]
 80096f0:	015b      	lsls	r3, r3, #5
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	4413      	add	r3, r2
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	f003 0302 	and.w	r3, r3, #2
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d0f6      	beq.n	80096ee <dcd_edpt_disable+0x192>
      out_ep[epnum].DOEPINT = USB_OTG_DOEPINT_EPDISD;
 8009700:	7bfb      	ldrb	r3, [r7, #15]
 8009702:	015b      	lsls	r3, r3, #5
 8009704:	697a      	ldr	r2, [r7, #20]
 8009706:	4413      	add	r3, r2
 8009708:	2202      	movs	r2, #2
 800970a:	609a      	str	r2, [r3, #8]
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	605a      	str	r2, [r3, #4]
}
 8009718:	bf00      	nop
 800971a:	3724      	adds	r7, #36	; 0x24
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr
 8009724:	40040000 	.word	0x40040000
 8009728:	40040800 	.word	0x40040800
 800972c:	40040b00 	.word	0x40040b00
 8009730:	40040900 	.word	0x40040900
 8009734:	40200000 	.word	0x40200000

08009738 <dcd_edpt_close>:

/**
 * Close an endpoint.
 */
void dcd_edpt_close (uint8_t rhport, uint8_t ep_addr)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b088      	sub	sp, #32
 800973c:	af00      	add	r7, sp, #0
 800973e:	4603      	mov	r3, r0
 8009740:	460a      	mov	r2, r1
 8009742:	71fb      	strb	r3, [r7, #7]
 8009744:	4613      	mov	r3, r2
 8009746:	71bb      	strb	r3, [r7, #6]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8009748:	4b29      	ldr	r3, [pc, #164]	; (80097f0 <dcd_edpt_close+0xb8>)
 800974a:	61fb      	str	r3, [r7, #28]
 800974c:	79bb      	ldrb	r3, [r7, #6]
 800974e:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009750:	7bbb      	ldrb	r3, [r7, #14]
 8009752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009756:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009758:	76fb      	strb	r3, [r7, #27]
 800975a:	79bb      	ldrb	r3, [r7, #6]
 800975c:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800975e:	7bfb      	ldrb	r3, [r7, #15]
 8009760:	09db      	lsrs	r3, r3, #7
 8009762:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8009764:	76bb      	strb	r3, [r7, #26]

  dcd_edpt_disable(rhport, ep_addr, false);
 8009766:	79b9      	ldrb	r1, [r7, #6]
 8009768:	79fb      	ldrb	r3, [r7, #7]
 800976a:	2200      	movs	r2, #0
 800976c:	4618      	mov	r0, r3
 800976e:	f7ff fef5 	bl	800955c <dcd_edpt_disable>

  // Update max_size
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 8009772:	7efa      	ldrb	r2, [r7, #27]
 8009774:	7ebb      	ldrb	r3, [r7, #26]
 8009776:	491f      	ldr	r1, [pc, #124]	; (80097f4 <dcd_edpt_close+0xbc>)
 8009778:	0052      	lsls	r2, r2, #1
 800977a:	4413      	add	r3, r2
 800977c:	011b      	lsls	r3, r3, #4
 800977e:	440b      	add	r3, r1
 8009780:	330a      	adds	r3, #10
 8009782:	2200      	movs	r2, #0
 8009784:	801a      	strh	r2, [r3, #0]

  if (dir == TUSB_DIR_IN)
 8009786:	7ebb      	ldrb	r3, [r7, #26]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d129      	bne.n	80097e0 <dcd_edpt_close+0xa8>
  {
    uint16_t const fifo_size = (usb_otg->DIEPTXF[epnum - 1] & USB_OTG_DIEPTXF_INEPTXFD_Msk) >> USB_OTG_DIEPTXF_INEPTXFD_Pos;
 800978c:	7efb      	ldrb	r3, [r7, #27]
 800978e:	3b01      	subs	r3, #1
 8009790:	69fa      	ldr	r2, [r7, #28]
 8009792:	3340      	adds	r3, #64	; 0x40
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4413      	add	r3, r2
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	0c1b      	lsrs	r3, r3, #16
 800979c:	833b      	strh	r3, [r7, #24]
    uint16_t const fifo_start = (usb_otg->DIEPTXF[epnum - 1] & USB_OTG_DIEPTXF_INEPTXSA_Msk) >> USB_OTG_DIEPTXF_INEPTXSA_Pos;
 800979e:	7efb      	ldrb	r3, [r7, #27]
 80097a0:	3b01      	subs	r3, #1
 80097a2:	69fa      	ldr	r2, [r7, #28]
 80097a4:	3340      	adds	r3, #64	; 0x40
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	4413      	add	r3, r2
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	82fb      	strh	r3, [r7, #22]
    // For now only the last opened endpoint can be closed without fuss.
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
 80097ae:	8afa      	ldrh	r2, [r7, #22]
 80097b0:	4b11      	ldr	r3, [pc, #68]	; (80097f8 <dcd_edpt_close+0xc0>)
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d009      	beq.n	80097d0 <dcd_edpt_close+0x98>
 80097bc:	4b0f      	ldr	r3, [pc, #60]	; (80097fc <dcd_edpt_close+0xc4>)
 80097be:	613b      	str	r3, [r7, #16]
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 0301 	and.w	r3, r3, #1
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00d      	beq.n	80097e8 <dcd_edpt_close+0xb0>
 80097cc:	be00      	bkpt	0x0000
 80097ce:	e00b      	b.n	80097e8 <dcd_edpt_close+0xb0>
    _allocated_fifo_words_tx -= fifo_size;
 80097d0:	4b09      	ldr	r3, [pc, #36]	; (80097f8 <dcd_edpt_close+0xc0>)
 80097d2:	881a      	ldrh	r2, [r3, #0]
 80097d4:	8b3b      	ldrh	r3, [r7, #24]
 80097d6:	1ad3      	subs	r3, r2, r3
 80097d8:	b29a      	uxth	r2, r3
 80097da:	4b07      	ldr	r3, [pc, #28]	; (80097f8 <dcd_edpt_close+0xc0>)
 80097dc:	801a      	strh	r2, [r3, #0]
 80097de:	e004      	b.n	80097ea <dcd_edpt_close+0xb2>
  }
  else
  {
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
 80097e0:	4b07      	ldr	r3, [pc, #28]	; (8009800 <dcd_edpt_close+0xc8>)
 80097e2:	2201      	movs	r2, #1
 80097e4:	701a      	strb	r2, [r3, #0]
 80097e6:	e000      	b.n	80097ea <dcd_edpt_close+0xb2>
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
 80097e8:	bf00      	nop
  }
}
 80097ea:	3720      	adds	r7, #32
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	40040000 	.word	0x40040000
 80097f4:	24001b00 	.word	0x24001b00
 80097f8:	24001c24 	.word	0x24001c24
 80097fc:	e000edf0 	.word	0xe000edf0
 8009800:	24001c26 	.word	0x24001c26

08009804 <dcd_edpt_stall>:

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	4603      	mov	r3, r0
 800980c:	460a      	mov	r2, r1
 800980e:	71fb      	strb	r3, [r7, #7]
 8009810:	4613      	mov	r3, r2
 8009812:	71bb      	strb	r3, [r7, #6]
  dcd_edpt_disable(rhport, ep_addr, true);
 8009814:	79b9      	ldrb	r1, [r7, #6]
 8009816:	79fb      	ldrb	r3, [r7, #7]
 8009818:	2201      	movs	r2, #1
 800981a:	4618      	mov	r0, r3
 800981c:	f7ff fe9e 	bl	800955c <dcd_edpt_disable>
}
 8009820:	bf00      	nop
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
 8009828:	b480      	push	{r7}
 800982a:	b087      	sub	sp, #28
 800982c:	af00      	add	r7, sp, #0
 800982e:	4603      	mov	r3, r0
 8009830:	460a      	mov	r2, r1
 8009832:	71fb      	strb	r3, [r7, #7]
 8009834:	4613      	mov	r3, r2
 8009836:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8009838:	4b25      	ldr	r3, [pc, #148]	; (80098d0 <dcd_edpt_clear_stall+0xa8>)
 800983a:	617b      	str	r3, [r7, #20]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 800983c:	4b25      	ldr	r3, [pc, #148]	; (80098d4 <dcd_edpt_clear_stall+0xac>)
 800983e:	613b      	str	r3, [r7, #16]
 8009840:	79bb      	ldrb	r3, [r7, #6]
 8009842:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009844:	7b3b      	ldrb	r3, [r7, #12]
 8009846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800984a:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800984c:	73fb      	strb	r3, [r7, #15]
 800984e:	79bb      	ldrb	r3, [r7, #6]
 8009850:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009852:	7b7b      	ldrb	r3, [r7, #13]
 8009854:	09db      	lsrs	r3, r3, #7
 8009856:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8009858:	73bb      	strb	r3, [r7, #14]

  // Clear stall and reset data toggle
  if(dir == TUSB_DIR_IN) {
 800985a:	7bbb      	ldrb	r3, [r7, #14]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d118      	bne.n	8009892 <dcd_edpt_clear_stall+0x6a>
    in_ep[epnum].DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009860:	7bfb      	ldrb	r3, [r7, #15]
 8009862:	015b      	lsls	r3, r3, #5
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	4413      	add	r3, r2
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	7bfb      	ldrb	r3, [r7, #15]
 800986c:	015b      	lsls	r3, r3, #5
 800986e:	6939      	ldr	r1, [r7, #16]
 8009870:	440b      	add	r3, r1
 8009872:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8009876:	601a      	str	r2, [r3, #0]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009878:	7bfb      	ldrb	r3, [r7, #15]
 800987a:	015b      	lsls	r3, r3, #5
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	4413      	add	r3, r2
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	015b      	lsls	r3, r3, #5
 8009886:	6939      	ldr	r1, [r7, #16]
 8009888:	440b      	add	r3, r1
 800988a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800988e:	601a      	str	r2, [r3, #0]
  } else {
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
  }
}
 8009890:	e017      	b.n	80098c2 <dcd_edpt_clear_stall+0x9a>
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009892:	7bfb      	ldrb	r3, [r7, #15]
 8009894:	015b      	lsls	r3, r3, #5
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	4413      	add	r3, r2
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	7bfb      	ldrb	r3, [r7, #15]
 800989e:	015b      	lsls	r3, r3, #5
 80098a0:	6979      	ldr	r1, [r7, #20]
 80098a2:	440b      	add	r3, r1
 80098a4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80098a8:	601a      	str	r2, [r3, #0]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80098aa:	7bfb      	ldrb	r3, [r7, #15]
 80098ac:	015b      	lsls	r3, r3, #5
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	4413      	add	r3, r2
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
 80098b6:	015b      	lsls	r3, r3, #5
 80098b8:	6979      	ldr	r1, [r7, #20]
 80098ba:	440b      	add	r3, r1
 80098bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80098c0:	601a      	str	r2, [r3, #0]
}
 80098c2:	bf00      	nop
 80098c4:	371c      	adds	r7, #28
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	40040b00 	.word	0x40040b00
 80098d4:	40040900 	.word	0x40040900

080098d8 <read_fifo_packet>:

/*------------------------------------------------------------------*/

// Read a single data packet from receive FIFO
static void read_fifo_packet(uint8_t rhport, uint8_t * dst, uint16_t len)
{
 80098d8:	b480      	push	{r7}
 80098da:	b089      	sub	sp, #36	; 0x24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	4603      	mov	r3, r0
 80098e0:	6039      	str	r1, [r7, #0]
 80098e2:	71fb      	strb	r3, [r7, #7]
 80098e4:	4613      	mov	r3, r2
 80098e6:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  usb_fifo_t rx_fifo = FIFO_BASE(rhport, 0);
 80098e8:	4b28      	ldr	r3, [pc, #160]	; (800998c <read_fifo_packet+0xb4>)
 80098ea:	61bb      	str	r3, [r7, #24]

  // Reading full available 32 bit words from fifo
  uint16_t full_words = len >> 2;
 80098ec:	88bb      	ldrh	r3, [r7, #4]
 80098ee:	089b      	lsrs	r3, r3, #2
 80098f0:	82fb      	strh	r3, [r7, #22]
  for(uint16_t i = 0; i < full_words; i++) {
 80098f2:	2300      	movs	r3, #0
 80098f4:	83fb      	strh	r3, [r7, #30]
 80098f6:	e01e      	b.n	8009936 <read_fifo_packet+0x5e>
    uint32_t tmp = *rx_fifo;
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	60fb      	str	r3, [r7, #12]
    dst[0] = tmp & 0x000000FF;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	b2da      	uxtb	r2, r3
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	701a      	strb	r2, [r3, #0]
    dst[1] = (tmp & 0x0000FF00) >> 8;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	0a1a      	lsrs	r2, r3, #8
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	3301      	adds	r3, #1
 800990e:	b2d2      	uxtb	r2, r2
 8009910:	701a      	strb	r2, [r3, #0]
    dst[2] = (tmp & 0x00FF0000) >> 16;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	0c1a      	lsrs	r2, r3, #16
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	3302      	adds	r3, #2
 800991a:	b2d2      	uxtb	r2, r2
 800991c:	701a      	strb	r2, [r3, #0]
    dst[3] = (tmp & 0xFF000000) >> 24;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	0e1a      	lsrs	r2, r3, #24
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	3303      	adds	r3, #3
 8009926:	b2d2      	uxtb	r2, r2
 8009928:	701a      	strb	r2, [r3, #0]
    dst += 4;
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	3304      	adds	r3, #4
 800992e:	603b      	str	r3, [r7, #0]
  for(uint16_t i = 0; i < full_words; i++) {
 8009930:	8bfb      	ldrh	r3, [r7, #30]
 8009932:	3301      	adds	r3, #1
 8009934:	83fb      	strh	r3, [r7, #30]
 8009936:	8bfa      	ldrh	r2, [r7, #30]
 8009938:	8afb      	ldrh	r3, [r7, #22]
 800993a:	429a      	cmp	r2, r3
 800993c:	d3dc      	bcc.n	80098f8 <read_fifo_packet+0x20>
  }

  // Read the remaining 1-3 bytes from fifo
  uint8_t bytes_rem = len & 0x03;
 800993e:	88bb      	ldrh	r3, [r7, #4]
 8009940:	b2db      	uxtb	r3, r3
 8009942:	f003 0303 	and.w	r3, r3, #3
 8009946:	757b      	strb	r3, [r7, #21]
  if(bytes_rem != 0) {
 8009948:	7d7b      	ldrb	r3, [r7, #21]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d018      	beq.n	8009980 <read_fifo_packet+0xa8>
    uint32_t tmp = *rx_fifo;
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	613b      	str	r3, [r7, #16]
    dst[0] = tmp & 0x000000FF;
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	b2da      	uxtb	r2, r3
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	701a      	strb	r2, [r3, #0]
    if(bytes_rem > 1) {
 800995c:	7d7b      	ldrb	r3, [r7, #21]
 800995e:	2b01      	cmp	r3, #1
 8009960:	d905      	bls.n	800996e <read_fifo_packet+0x96>
      dst[1] = (tmp & 0x0000FF00) >> 8;
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	0a1a      	lsrs	r2, r3, #8
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	3301      	adds	r3, #1
 800996a:	b2d2      	uxtb	r2, r2
 800996c:	701a      	strb	r2, [r3, #0]
    }
    if(bytes_rem > 2) {
 800996e:	7d7b      	ldrb	r3, [r7, #21]
 8009970:	2b02      	cmp	r3, #2
 8009972:	d905      	bls.n	8009980 <read_fifo_packet+0xa8>
      dst[2] = (tmp & 0x00FF0000) >> 16;
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	0c1a      	lsrs	r2, r3, #16
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	3302      	adds	r3, #2
 800997c:	b2d2      	uxtb	r2, r2
 800997e:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8009980:	bf00      	nop
 8009982:	3724      	adds	r7, #36	; 0x24
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	40041000 	.word	0x40041000

08009990 <write_fifo_packet>:

// Write a single data packet to EPIN FIFO
static void write_fifo_packet(uint8_t rhport, uint8_t fifo_num, uint8_t * src, uint16_t len)
{
 8009990:	b480      	push	{r7}
 8009992:	b087      	sub	sp, #28
 8009994:	af00      	add	r7, sp, #0
 8009996:	603a      	str	r2, [r7, #0]
 8009998:	461a      	mov	r2, r3
 800999a:	4603      	mov	r3, r0
 800999c:	71fb      	strb	r3, [r7, #7]
 800999e:	460b      	mov	r3, r1
 80099a0:	71bb      	strb	r3, [r7, #6]
 80099a2:	4613      	mov	r3, r2
 80099a4:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  usb_fifo_t tx_fifo = FIFO_BASE(rhport, fifo_num);
 80099a6:	79ba      	ldrb	r2, [r7, #6]
 80099a8:	4b2b      	ldr	r3, [pc, #172]	; (8009a58 <write_fifo_packet+0xc8>)
 80099aa:	4413      	add	r3, r2
 80099ac:	031b      	lsls	r3, r3, #12
 80099ae:	60fb      	str	r3, [r7, #12]

  // Pushing full available 32 bit words to fifo
  uint16_t full_words = len >> 2;
 80099b0:	88bb      	ldrh	r3, [r7, #4]
 80099b2:	089b      	lsrs	r3, r3, #2
 80099b4:	817b      	strh	r3, [r7, #10]
  for(uint16_t i = 0; i < full_words; i++){
 80099b6:	2300      	movs	r3, #0
 80099b8:	82fb      	strh	r3, [r7, #22]
 80099ba:	e019      	b.n	80099f0 <write_fifo_packet+0x60>
    *tx_fifo = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	3303      	adds	r3, #3
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	061a      	lsls	r2, r3, #24
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	3302      	adds	r3, #2
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	041b      	lsls	r3, r3, #16
 80099cc:	431a      	orrs	r2, r3
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	3301      	adds	r3, #1
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	021b      	lsls	r3, r3, #8
 80099d6:	4313      	orrs	r3, r2
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	7812      	ldrb	r2, [r2, #0]
 80099dc:	4313      	orrs	r3, r2
 80099de:	461a      	mov	r2, r3
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	601a      	str	r2, [r3, #0]
    src += 4;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	3304      	adds	r3, #4
 80099e8:	603b      	str	r3, [r7, #0]
  for(uint16_t i = 0; i < full_words; i++){
 80099ea:	8afb      	ldrh	r3, [r7, #22]
 80099ec:	3301      	adds	r3, #1
 80099ee:	82fb      	strh	r3, [r7, #22]
 80099f0:	8afa      	ldrh	r2, [r7, #22]
 80099f2:	897b      	ldrh	r3, [r7, #10]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d3e1      	bcc.n	80099bc <write_fifo_packet+0x2c>
  }

  // Write the remaining 1-3 bytes into fifo
  uint8_t bytes_rem = len & 0x03;
 80099f8:	88bb      	ldrh	r3, [r7, #4]
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	f003 0303 	and.w	r3, r3, #3
 8009a00:	727b      	strb	r3, [r7, #9]
  if(bytes_rem){
 8009a02:	7a7b      	ldrb	r3, [r7, #9]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d020      	beq.n	8009a4a <write_fifo_packet+0xba>
    uint32_t tmp_word = 0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	613b      	str	r3, [r7, #16]
    tmp_word |= src[0];
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	461a      	mov	r2, r3
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	613b      	str	r3, [r7, #16]
    if(bytes_rem > 1){
 8009a18:	7a7b      	ldrb	r3, [r7, #9]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d907      	bls.n	8009a2e <write_fifo_packet+0x9e>
      tmp_word |= src[1] << 8;
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	3301      	adds	r3, #1
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	021b      	lsls	r3, r3, #8
 8009a26:	461a      	mov	r2, r3
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	613b      	str	r3, [r7, #16]
    }
    if(bytes_rem > 2){
 8009a2e:	7a7b      	ldrb	r3, [r7, #9]
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d907      	bls.n	8009a44 <write_fifo_packet+0xb4>
      tmp_word |= src[2] << 16;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	3302      	adds	r3, #2
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	041b      	lsls	r3, r3, #16
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	4313      	orrs	r3, r2
 8009a42:	613b      	str	r3, [r7, #16]
    }
    *tx_fifo = tmp_word;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	601a      	str	r2, [r3, #0]
  }
}
 8009a4a:	bf00      	nop
 8009a4c:	371c      	adds	r7, #28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	00040041 	.word	0x00040041

08009a5c <handle_rxflvl_ints>:

static void handle_rxflvl_ints(uint8_t rhport, USB_OTG_OUTEndpointTypeDef * out_ep) {
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b088      	sub	sp, #32
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	4603      	mov	r3, r0
 8009a64:	6039      	str	r1, [r7, #0]
 8009a66:	71fb      	strb	r3, [r7, #7]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8009a68:	4b4a      	ldr	r3, [pc, #296]	; (8009b94 <handle_rxflvl_ints+0x138>)
 8009a6a:	61fb      	str	r3, [r7, #28]
  usb_fifo_t rx_fifo = FIFO_BASE(rhport, 0);
 8009a6c:	4b4a      	ldr	r3, [pc, #296]	; (8009b98 <handle_rxflvl_ints+0x13c>)
 8009a6e:	61bb      	str	r3, [r7, #24]

  // Pop control word off FIFO
  uint32_t ctl_word = usb_otg->GRXSTSP;
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	6a1b      	ldr	r3, [r3, #32]
 8009a74:	617b      	str	r3, [r7, #20]
  uint8_t pktsts = (ctl_word & USB_OTG_GRXSTSP_PKTSTS_Msk) >> USB_OTG_GRXSTSP_PKTSTS_Pos;
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	0c5b      	lsrs	r3, r3, #17
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	f003 030f 	and.w	r3, r3, #15
 8009a80:	74fb      	strb	r3, [r7, #19]
  uint8_t epnum = (ctl_word &  USB_OTG_GRXSTSP_EPNUM_Msk) >>  USB_OTG_GRXSTSP_EPNUM_Pos;
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	f003 030f 	and.w	r3, r3, #15
 8009a8a:	74bb      	strb	r3, [r7, #18]
  uint16_t bcnt = (ctl_word & USB_OTG_GRXSTSP_BCNT_Msk) >> USB_OTG_GRXSTSP_BCNT_Pos;
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	091b      	lsrs	r3, r3, #4
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a96:	823b      	strh	r3, [r7, #16]

  switch(pktsts) {
 8009a98:	7cfb      	ldrb	r3, [r7, #19]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	2b05      	cmp	r3, #5
 8009a9e:	d865      	bhi.n	8009b6c <handle_rxflvl_ints+0x110>
 8009aa0:	a201      	add	r2, pc, #4	; (adr r2, 8009aa8 <handle_rxflvl_ints+0x4c>)
 8009aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa6:	bf00      	nop
 8009aa8:	08009b81 	.word	0x08009b81
 8009aac:	08009ac1 	.word	0x08009ac1
 8009ab0:	08009b81 	.word	0x08009b81
 8009ab4:	08009b41 	.word	0x08009b41
 8009ab8:	08009b6d 	.word	0x08009b6d
 8009abc:	08009b5b 	.word	0x08009b5b
    case 0x01: // Global OUT NAK (Interrupt)
      break;

    case 0x02: // Out packet recvd
    {
      xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8009ac0:	7cbb      	ldrb	r3, [r7, #18]
 8009ac2:	015b      	lsls	r3, r3, #5
 8009ac4:	4a35      	ldr	r2, [pc, #212]	; (8009b9c <handle_rxflvl_ints+0x140>)
 8009ac6:	4413      	add	r3, r2
 8009ac8:	60fb      	str	r3, [r7, #12]

      // Read packet off RxFIFO
      if (xfer->ff)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d007      	beq.n	8009ae2 <handle_rxflvl_ints+0x86>
      {
        // Ring buffer
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void *)(uintptr_t) rx_fifo, bcnt);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	8a3a      	ldrh	r2, [r7, #16]
 8009ad8:	69b9      	ldr	r1, [r7, #24]
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fd f93c 	bl	8006d58 <tu_fifo_write_n_const_addr_full_words>
 8009ae0:	e00c      	b.n	8009afc <handle_rxflvl_ints+0xa0>
      }
      else
      {
        // Linear buffer
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6819      	ldr	r1, [r3, #0]
 8009ae6:	8a3a      	ldrh	r2, [r7, #16]
 8009ae8:	79fb      	ldrb	r3, [r7, #7]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7ff fef4 	bl	80098d8 <read_fifo_packet>

        // Increment pointer to xfer data
        xfer->buffer += bcnt;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	8a3b      	ldrh	r3, [r7, #16]
 8009af6:	441a      	add	r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	601a      	str	r2, [r3, #0]
      }

      // Truncate transfer length in case of short packet
      if(bcnt < xfer->max_size) {
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	895b      	ldrh	r3, [r3, #10]
 8009b00:	8a3a      	ldrh	r2, [r7, #16]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d23e      	bcs.n	8009b84 <handle_rxflvl_ints+0x128>
        xfer->total_len -= (out_ep[epnum].DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DOEPTSIZ_XFRSIZ_Pos;
 8009b06:	7cbb      	ldrb	r3, [r7, #18]
 8009b08:	015b      	lsls	r3, r3, #5
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	f3c3 0112 	ubfx	r1, r3, #0, #19
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	891a      	ldrh	r2, [r3, #8]
 8009b18:	b28b      	uxth	r3, r1
 8009b1a:	1ad3      	subs	r3, r2, r3
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	811a      	strh	r2, [r3, #8]
        if(epnum == 0) {
 8009b22:	7cbb      	ldrb	r3, [r7, #18]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d12d      	bne.n	8009b84 <handle_rxflvl_ints+0x128>
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	891a      	ldrh	r2, [r3, #8]
 8009b2c:	4b1c      	ldr	r3, [pc, #112]	; (8009ba0 <handle_rxflvl_ints+0x144>)
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 8009b38:	4b19      	ldr	r3, [pc, #100]	; (8009ba0 <handle_rxflvl_ints+0x144>)
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	801a      	strh	r2, [r3, #0]
        }
      }
    }
    break;
 8009b3e:	e021      	b.n	8009b84 <handle_rxflvl_ints+0x128>

    case 0x03: // Out packet done (Interrupt)
      break;

    case 0x04: // Setup packet done (Interrupt)
      out_ep[epnum].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 8009b40:	7cbb      	ldrb	r3, [r7, #18]
 8009b42:	015b      	lsls	r3, r3, #5
 8009b44:	683a      	ldr	r2, [r7, #0]
 8009b46:	4413      	add	r3, r2
 8009b48:	691a      	ldr	r2, [r3, #16]
 8009b4a:	7cbb      	ldrb	r3, [r7, #18]
 8009b4c:	015b      	lsls	r3, r3, #5
 8009b4e:	6839      	ldr	r1, [r7, #0]
 8009b50:	440b      	add	r3, r1
 8009b52:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8009b56:	611a      	str	r2, [r3, #16]
      break;
 8009b58:	e017      	b.n	8009b8a <handle_rxflvl_ints+0x12e>

    case 0x06: // Setup packet recvd
      // We can receive up to three setup packets in succession, but
      // only the last one is valid.
      _setup_packet[0] = (* rx_fifo);
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a11      	ldr	r2, [pc, #68]	; (8009ba4 <handle_rxflvl_ints+0x148>)
 8009b60:	6013      	str	r3, [r2, #0]
      _setup_packet[1] = (* rx_fifo);
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a0f      	ldr	r2, [pc, #60]	; (8009ba4 <handle_rxflvl_ints+0x148>)
 8009b68:	6053      	str	r3, [r2, #4]
      break;
 8009b6a:	e00e      	b.n	8009b8a <handle_rxflvl_ints+0x12e>

    default: // Invalid
      TU_BREAKPOINT();
 8009b6c:	4b0e      	ldr	r3, [pc, #56]	; (8009ba8 <handle_rxflvl_ints+0x14c>)
 8009b6e:	60bb      	str	r3, [r7, #8]
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f003 0301 	and.w	r3, r3, #1
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d005      	beq.n	8009b88 <handle_rxflvl_ints+0x12c>
 8009b7c:	be00      	bkpt	0x0000
      break;
 8009b7e:	e003      	b.n	8009b88 <handle_rxflvl_ints+0x12c>
      break;
 8009b80:	bf00      	nop
 8009b82:	e002      	b.n	8009b8a <handle_rxflvl_ints+0x12e>
    break;
 8009b84:	bf00      	nop
 8009b86:	e000      	b.n	8009b8a <handle_rxflvl_ints+0x12e>
      break;
 8009b88:	bf00      	nop
  }
}
 8009b8a:	bf00      	nop
 8009b8c:	3720      	adds	r7, #32
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	40040000 	.word	0x40040000
 8009b98:	40041000 	.word	0x40041000
 8009b9c:	24001b00 	.word	0x24001b00
 8009ba0:	24001c20 	.word	0x24001c20
 8009ba4:	24001af8 	.word	0x24001af8
 8009ba8:	e000edf0 	.word	0xe000edf0

08009bac <handle_epout_ints>:

static void handle_epout_ints(uint8_t rhport, USB_OTG_DeviceTypeDef * dev, USB_OTG_OUTEndpointTypeDef * out_ep) {
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b094      	sub	sp, #80	; 0x50
 8009bb0:	af02      	add	r7, sp, #8
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
 8009bb8:	73fb      	strb	r3, [r7, #15]
  // DAINT for a given EP clears when DOEPINTx is cleared.
  // OEPINT will be cleared when DAINT's out bits are cleared.
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8009bba:	2300      	movs	r3, #0
 8009bbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009bc0:	e09e      	b.n	8009d00 <handle_epout_ints+0x154>
    xfer_ctl_t * xfer = XFER_CTL_BASE(n, TUSB_DIR_OUT);
 8009bc2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009bc6:	015b      	lsls	r3, r3, #5
 8009bc8:	4a52      	ldr	r2, [pc, #328]	; (8009d14 <handle_epout_ints+0x168>)
 8009bca:	4413      	add	r3, r2
 8009bcc:	643b      	str	r3, [r7, #64]	; 0x40

    if(dev->DAINT & (1 << (USB_OTG_DAINT_OEPINT_Pos + n))) {
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8009bd6:	3210      	adds	r2, #16
 8009bd8:	2101      	movs	r1, #1
 8009bda:	fa01 f202 	lsl.w	r2, r1, r2
 8009bde:	4013      	ands	r3, r2
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f000 8088 	beq.w	8009cf6 <handle_epout_ints+0x14a>
      // SETUP packet Setup Phase done.
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_STUP) {
 8009be6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009bea:	015b      	lsls	r3, r3, #5
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	4413      	add	r3, r2
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	f003 0308 	and.w	r3, r3, #8
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d028      	beq.n	8009c4c <handle_epout_ints+0xa0>
        out_ep[n].DOEPINT =  USB_OTG_DOEPINT_STUP;
 8009bfa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009bfe:	015b      	lsls	r3, r3, #5
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	4413      	add	r3, r2
 8009c04:	2208      	movs	r2, #8
 8009c06:	609a      	str	r2, [r3, #8]
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
 8009c0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009c0e:	4b42      	ldr	r3, [pc, #264]	; (8009d18 <handle_epout_ints+0x16c>)
 8009c10:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c12:	2301      	movs	r3, #1
 8009c14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
}

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8009c18:	f107 0314 	add.w	r3, r7, #20
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	601a      	str	r2, [r3, #0]
 8009c20:	605a      	str	r2, [r3, #4]
 8009c22:	609a      	str	r2, [r3, #8]
 8009c24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009c28:	753b      	strb	r3, [r7, #20]
 8009c2a:	2306      	movs	r3, #6
 8009c2c:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8009c2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c30:	f107 0318 	add.w	r3, r7, #24
 8009c34:	6810      	ldr	r0, [r2, #0]
 8009c36:	6851      	ldr	r1, [r2, #4]
 8009c38:	c303      	stmia	r3!, {r0, r1}

  dcd_event_handler(&event, in_isr);
 8009c3a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009c3e:	f107 0314 	add.w	r3, r7, #20
 8009c42:	4611      	mov	r1, r2
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fd ffcf 	bl	8007be8 <dcd_event_handler>
}
 8009c4a:	bf00      	nop
        dcd_event_setup_received(rhport, (uint8_t*) &_setup_packet[0], true);
      }

      // OUT XFER complete
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_XFRC) {
 8009c4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009c50:	015b      	lsls	r3, r3, #5
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	4413      	add	r3, r2
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	f003 0301 	and.w	r3, r3, #1
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d04a      	beq.n	8009cf6 <handle_epout_ints+0x14a>
        out_ep[n].DOEPINT = USB_OTG_DOEPINT_XFRC;
 8009c60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009c64:	015b      	lsls	r3, r3, #5
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	4413      	add	r3, r2
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if((n == 0) && ep0_pending[TUSB_DIR_OUT]) {
 8009c6e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10e      	bne.n	8009c94 <handle_epout_ints+0xe8>
 8009c76:	4b29      	ldr	r3, [pc, #164]	; (8009d1c <handle_epout_ints+0x170>)
 8009c78:	881b      	ldrh	r3, [r3, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00a      	beq.n	8009c94 <handle_epout_ints+0xe8>
          // Schedule another packet to be received.
          edpt_schedule_packets(rhport, n, TUSB_DIR_OUT, 1, ep0_pending[TUSB_DIR_OUT]);
 8009c7e:	4b27      	ldr	r3, [pc, #156]	; (8009d1c <handle_epout_ints+0x170>)
 8009c80:	881b      	ldrh	r3, [r3, #0]
 8009c82:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8009c86:	7bf8      	ldrb	r0, [r7, #15]
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f7ff f881 	bl	8008d94 <edpt_schedule_packets>
 8009c92:	e030      	b.n	8009cf6 <handle_epout_ints+0x14a>
        } else {
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8009c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c96:	891b      	ldrh	r3, [r3, #8]
 8009c98:	461a      	mov	r2, r3
 8009c9a:	7bfb      	ldrb	r3, [r7, #15]
 8009c9c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8009ca0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009ca4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009ca8:	633a      	str	r2, [r7, #48]	; 0x30
 8009caa:	2300      	movs	r3, #0
 8009cac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8009cb6:	f107 0320 	add.w	r3, r7, #32
 8009cba:	2200      	movs	r2, #0
 8009cbc:	601a      	str	r2, [r3, #0]
 8009cbe:	605a      	str	r2, [r3, #4]
 8009cc0:	609a      	str	r2, [r3, #8]
 8009cc2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009cc6:	f887 3020 	strb.w	r3, [r7, #32]
 8009cca:	2307      	movs	r3, #7
 8009ccc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  event.xfer_complete.ep_addr = ep_addr;
 8009cd0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009cd4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  event.xfer_complete.len     = xferred_bytes;
 8009cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cda:	62bb      	str	r3, [r7, #40]	; 0x28
  event.xfer_complete.result  = result;
 8009cdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ce0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  dcd_event_handler(&event, in_isr);
 8009ce4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009ce8:	f107 0320 	add.w	r3, r7, #32
 8009cec:	4611      	mov	r1, r2
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fd ff7a 	bl	8007be8 <dcd_event_handler>
}
 8009cf4:	bf00      	nop
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8009cf6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009d00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009d04:	2b08      	cmp	r3, #8
 8009d06:	f67f af5c 	bls.w	8009bc2 <handle_epout_ints+0x16>
        }
      }
    }
  }
}
 8009d0a:	bf00      	nop
 8009d0c:	bf00      	nop
 8009d0e:	3748      	adds	r7, #72	; 0x48
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	24001b00 	.word	0x24001b00
 8009d18:	24001af8 	.word	0x24001af8
 8009d1c:	24001c20 	.word	0x24001c20

08009d20 <handle_epin_ints>:

static void handle_epin_ints(uint8_t rhport, USB_OTG_DeviceTypeDef * dev, USB_OTG_INEndpointTypeDef * in_ep) {
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b092      	sub	sp, #72	; 0x48
 8009d24:	af02      	add	r7, sp, #8
 8009d26:	4603      	mov	r3, r0
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
 8009d2c:	73fb      	strb	r3, [r7, #15]
  // DAINT for a given EP clears when DIEPINTx is cleared.
  // IEPINT will be cleared when DAINT's out bits are cleared.
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 8009d2e:	2300      	movs	r3, #0
 8009d30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009d34:	e0eb      	b.n	8009f0e <handle_epin_ints+0x1ee>
  {
    xfer_ctl_t *xfer = XFER_CTL_BASE(n, TUSB_DIR_IN);
 8009d36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009d3a:	015b      	lsls	r3, r3, #5
 8009d3c:	3310      	adds	r3, #16
 8009d3e:	4a79      	ldr	r2, [pc, #484]	; (8009f24 <handle_epin_ints+0x204>)
 8009d40:	4413      	add	r3, r2
 8009d42:	63bb      	str	r3, [r7, #56]	; 0x38

    if ( dev->DAINT & (1 << (USB_OTG_DAINT_IEPINT_Pos + n)) )
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009d4c:	2101      	movs	r1, #1
 8009d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8009d52:	4013      	ands	r3, r2
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f000 80d5 	beq.w	8009f04 <handle_epin_ints+0x1e4>
    {
      // IN XFER complete (entire xfer).
      if ( in_ep[n].DIEPINT & USB_OTG_DIEPINT_XFRC )
 8009d5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009d5e:	015b      	lsls	r3, r3, #5
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	4413      	add	r3, r2
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	f003 0301 	and.w	r3, r3, #1
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d04a      	beq.n	8009e04 <handle_epin_ints+0xe4>
      {
        in_ep[n].DIEPINT = USB_OTG_DIEPINT_XFRC;
 8009d6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009d72:	015b      	lsls	r3, r3, #5
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	4413      	add	r3, r2
 8009d78:	2201      	movs	r2, #1
 8009d7a:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if((n == 0) && ep0_pending[TUSB_DIR_IN]) {
 8009d7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10e      	bne.n	8009da2 <handle_epin_ints+0x82>
 8009d84:	4b68      	ldr	r3, [pc, #416]	; (8009f28 <handle_epin_ints+0x208>)
 8009d86:	885b      	ldrh	r3, [r3, #2]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00a      	beq.n	8009da2 <handle_epin_ints+0x82>
          // Schedule another packet to be transmitted.
          edpt_schedule_packets(rhport, n, TUSB_DIR_IN, 1, ep0_pending[TUSB_DIR_IN]);
 8009d8c:	4b66      	ldr	r3, [pc, #408]	; (8009f28 <handle_epin_ints+0x208>)
 8009d8e:	885b      	ldrh	r3, [r3, #2]
 8009d90:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8009d94:	7bf8      	ldrb	r0, [r7, #15]
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	2301      	movs	r3, #1
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f7fe fffa 	bl	8008d94 <edpt_schedule_packets>
 8009da0:	e030      	b.n	8009e04 <handle_epin_ints+0xe4>
        } else {
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8009da2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009da6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009daa:	b2d9      	uxtb	r1, r3
 8009dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dae:	891b      	ldrh	r3, [r3, #8]
 8009db0:	461a      	mov	r2, r3
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
 8009db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009db8:	460b      	mov	r3, r1
 8009dba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009dbe:	627a      	str	r2, [r7, #36]	; 0x24
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8009dcc:	f107 0310 	add.w	r3, r7, #16
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	601a      	str	r2, [r3, #0]
 8009dd4:	605a      	str	r2, [r3, #4]
 8009dd6:	609a      	str	r2, [r3, #8]
 8009dd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ddc:	743b      	strb	r3, [r7, #16]
 8009dde:	2307      	movs	r3, #7
 8009de0:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 8009de2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009de6:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 8009de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dea:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 8009dec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009df0:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8009df2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009df6:	f107 0310 	add.w	r3, r7, #16
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fd fef3 	bl	8007be8 <dcd_event_handler>
}
 8009e02:	bf00      	nop
        }
      }

      // XFER FIFO empty
      if ( (in_ep[n].DIEPINT & USB_OTG_DIEPINT_TXFE) && (dev->DIEPEMPMSK & (1 << n)) )
 8009e04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e08:	015b      	lsls	r3, r3, #5
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d075      	beq.n	8009f04 <handle_epin_ints+0x1e4>
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e1c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009e20:	2101      	movs	r1, #1
 8009e22:	fa01 f202 	lsl.w	r2, r1, r2
 8009e26:	4013      	ands	r3, r2
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d06b      	beq.n	8009f04 <handle_epin_ints+0x1e4>
        // DIEPINT's TXFE bit is read-only, software cannot clear it.
        // It will only be cleared by hardware when written bytes is more than
        // - 64 bytes or
        // - Half of TX FIFO size (configured by DIEPTXF)

        uint16_t remaining_packets = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_PKTCNT_Msk) >> USB_OTG_DIEPTSIZ_PKTCNT_Pos;
 8009e2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e30:	015b      	lsls	r3, r3, #5
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	4413      	add	r3, r2
 8009e36:	691b      	ldr	r3, [r3, #16]
 8009e38:	0cdb      	lsrs	r3, r3, #19
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e40:	86fb      	strh	r3, [r7, #54]	; 0x36

        // Process every single packet (only whole packets can be written to fifo)
        for(uint16_t i = 0; i < remaining_packets; i++)
 8009e42:	2300      	movs	r3, #0
 8009e44:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009e46:	e042      	b.n	8009ece <handle_epin_ints+0x1ae>
        {
          uint16_t const remaining_bytes = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos;
 8009e48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e4c:	015b      	lsls	r3, r3, #5
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	4413      	add	r3, r2
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	86bb      	strh	r3, [r7, #52]	; 0x34

          // Packet can not be larger than ep max size
          uint16_t const packet_size = tu_min16(remaining_bytes, xfer->max_size);
 8009e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e58:	895a      	ldrh	r2, [r3, #10]
 8009e5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009e5c:	843b      	strh	r3, [r7, #32]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	83fb      	strh	r3, [r7, #30]
 8009e62:	8c3a      	ldrh	r2, [r7, #32]
 8009e64:	8bfb      	ldrh	r3, [r7, #30]
 8009e66:	4293      	cmp	r3, r2
 8009e68:	bf28      	it	cs
 8009e6a:	4613      	movcs	r3, r2
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	867b      	strh	r3, [r7, #50]	; 0x32

          // It's only possible to write full packets into FIFO. Therefore DTXFSTS register of current
          // EP has to be checked if the buffer can take another WHOLE packet
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8009e70:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009e72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e76:	015b      	lsls	r3, r3, #5
 8009e78:	6879      	ldr	r1, [r7, #4]
 8009e7a:	440b      	add	r3, r1
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	0099      	lsls	r1, r3, #2
 8009e80:	4b2a      	ldr	r3, [pc, #168]	; (8009f2c <handle_epin_ints+0x20c>)
 8009e82:	400b      	ands	r3, r1
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d827      	bhi.n	8009ed8 <handle_epin_ints+0x1b8>

          // Push packet to Tx-FIFO
          if (xfer->ff)
 8009e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00d      	beq.n	8009eac <handle_epin_ints+0x18c>
          {
            usb_fifo_t tx_fifo = FIFO_BASE(rhport, n);
 8009e90:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009e94:	4b26      	ldr	r3, [pc, #152]	; (8009f30 <handle_epin_ints+0x210>)
 8009e96:	4413      	add	r3, r2
 8009e98:	031b      	lsls	r3, r3, #12
 8009e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void *)(uintptr_t) tx_fifo, packet_size);
 8009e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009ea2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7fc fef0 	bl	8006c8a <tu_fifo_read_n_const_addr_full_words>
 8009eaa:	e00d      	b.n	8009ec8 <handle_epin_ints+0x1a8>
          }
          else
          {
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 8009eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009eb2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8009eb6:	7bf8      	ldrb	r0, [r7, #15]
 8009eb8:	f7ff fd6a 	bl	8009990 <write_fifo_packet>

            // Increment pointer to xfer data
            xfer->buffer += packet_size;
 8009ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009ec2:	441a      	add	r2, r3
 8009ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec6:	601a      	str	r2, [r3, #0]
        for(uint16_t i = 0; i < remaining_packets; i++)
 8009ec8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009eca:	3301      	adds	r3, #1
 8009ecc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009ece:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8009ed0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d3b8      	bcc.n	8009e48 <handle_epin_ints+0x128>
 8009ed6:	e000      	b.n	8009eda <handle_epin_ints+0x1ba>
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8009ed8:	bf00      	nop
          }
        }

        // Turn off TXFE if all bytes are written.
        if (((in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos) == 0)
 8009eda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ede:	015b      	lsls	r3, r3, #5
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	691b      	ldr	r3, [r3, #16]
 8009ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d10a      	bne.n	8009f04 <handle_epin_ints+0x1e4>
        {
          dev->DIEPEMPMSK &= ~(1 << n);
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009ef6:	2101      	movs	r1, #1
 8009ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8009efc:	43d2      	mvns	r2, r2
 8009efe:	401a      	ands	r2, r3
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	635a      	str	r2, [r3, #52]	; 0x34
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 8009f04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009f08:	3301      	adds	r3, #1
 8009f0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009f0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009f12:	2b08      	cmp	r3, #8
 8009f14:	f67f af0f 	bls.w	8009d36 <handle_epin_ints+0x16>
        }
      }
    }
  }
}
 8009f18:	bf00      	nop
 8009f1a:	bf00      	nop
 8009f1c:	3740      	adds	r7, #64	; 0x40
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	24001b00 	.word	0x24001b00
 8009f28:	24001c20 	.word	0x24001c20
 8009f2c:	0003fffc 	.word	0x0003fffc
 8009f30:	00040041 	.word	0x00040041

08009f34 <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b09c      	sub	sp, #112	; 0x70
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	71fb      	strb	r3, [r7, #7]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8009f3e:	4b9f      	ldr	r3, [pc, #636]	; (800a1bc <dcd_int_handler+0x288>)
 8009f40:	66fb      	str	r3, [r7, #108]	; 0x6c
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8009f42:	4b9f      	ldr	r3, [pc, #636]	; (800a1c0 <dcd_int_handler+0x28c>)
 8009f44:	66bb      	str	r3, [r7, #104]	; 0x68
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8009f46:	4b9f      	ldr	r3, [pc, #636]	; (800a1c4 <dcd_int_handler+0x290>)
 8009f48:	667b      	str	r3, [r7, #100]	; 0x64
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8009f4a:	4b9f      	ldr	r3, [pc, #636]	; (800a1c8 <dcd_int_handler+0x294>)
 8009f4c:	663b      	str	r3, [r7, #96]	; 0x60

  uint32_t const int_status = usb_otg->GINTSTS & usb_otg->GINTMSK;
 8009f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f50:	695a      	ldr	r2, [r3, #20]
 8009f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	4013      	ands	r3, r2
 8009f58:	65fb      	str	r3, [r7, #92]	; 0x5c

  if(int_status & USB_OTG_GINTSTS_USBRST)
 8009f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d007      	beq.n	8009f74 <dcd_int_handler+0x40>
  {
    // USBRST is start of reset.
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBRST;
 8009f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009f6a:	615a      	str	r2, [r3, #20]
    bus_reset(rhport);
 8009f6c:	79fb      	ldrb	r3, [r7, #7]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fe fdcc 	bl	8008b0c <bus_reset>
  }

  if(int_status & USB_OTG_GINTSTS_ENUMDNE)
 8009f74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d031      	beq.n	8009fe2 <dcd_int_handler+0xae>
  {
    // ENUMDNE is the end of reset where speed of the link is detected

    usb_otg->GINTSTS = USB_OTG_GINTSTS_ENUMDNE;
 8009f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009f84:	615a      	str	r2, [r3, #20]

    tusb_speed_t const speed = get_speed(rhport);
 8009f86:	79fb      	ldrb	r3, [r7, #7]
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fe febb 	bl	8008d04 <get_speed>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

    set_turnaround(usb_otg, speed);
 8009f94:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009f98:	4619      	mov	r1, r3
 8009f9a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009f9c:	f7fe fe30 	bl	8008c00 <set_turnaround>
 8009fa0:	79fb      	ldrb	r3, [r7, #7]
 8009fa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8009fa6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009faa:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8009fae:	2301      	movs	r3, #1
 8009fb0:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8009fb4:	f107 0314 	add.w	r3, r7, #20
 8009fb8:	2200      	movs	r2, #0
 8009fba:	601a      	str	r2, [r3, #0]
 8009fbc:	605a      	str	r2, [r3, #4]
 8009fbe:	609a      	str	r2, [r3, #8]
 8009fc0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009fc4:	753b      	strb	r3, [r7, #20]
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	757b      	strb	r3, [r7, #21]
  event.bus_reset.speed = speed;
 8009fca:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8009fce:	763b      	strb	r3, [r7, #24]
  dcd_event_handler(&event, in_isr);
 8009fd0:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8009fd4:	f107 0314 	add.w	r3, r7, #20
 8009fd8:	4611      	mov	r1, r2
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fd fe04 	bl	8007be8 <dcd_event_handler>
}
 8009fe0:	bf00      	nop
    dcd_event_bus_reset(rhport, speed, true);
  }

  if(int_status & USB_OTG_GINTSTS_USBSUSP)
 8009fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d023      	beq.n	800a034 <dcd_int_handler+0x100>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBSUSP;
 8009fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ff2:	615a      	str	r2, [r3, #20]
 8009ff4:	79fb      	ldrb	r3, [r7, #7]
 8009ff6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8009ffa:	2304      	movs	r3, #4
 8009ffc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a000:	2301      	movs	r3, #1
 800a002:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800a006:	f107 0320 	add.w	r3, r7, #32
 800a00a:	2200      	movs	r2, #0
 800a00c:	601a      	str	r2, [r3, #0]
 800a00e:	605a      	str	r2, [r3, #4]
 800a010:	609a      	str	r2, [r3, #8]
 800a012:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800a016:	f887 3020 	strb.w	r3, [r7, #32]
 800a01a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a01e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  dcd_event_handler(&event, in_isr);
 800a022:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800a026:	f107 0320 	add.w	r3, r7, #32
 800a02a:	4611      	mov	r1, r2
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fd fddb 	bl	8007be8 <dcd_event_handler>
}
 800a032:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if(int_status & USB_OTG_GINTSTS_WKUINT)
 800a034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a036:	2b00      	cmp	r3, #0
 800a038:	da23      	bge.n	800a082 <dcd_int_handler+0x14e>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_WKUINT;
 800a03a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a03c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a040:	615a      	str	r2, [r3, #20]
 800a042:	79fb      	ldrb	r3, [r7, #7]
 800a044:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800a048:	2305      	movs	r3, #5
 800a04a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 800a04e:	2301      	movs	r3, #1
 800a050:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800a054:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a058:	2200      	movs	r2, #0
 800a05a:	601a      	str	r2, [r3, #0]
 800a05c:	605a      	str	r2, [r3, #4]
 800a05e:	609a      	str	r2, [r3, #8]
 800a060:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a064:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800a068:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800a06c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dcd_event_handler(&event, in_isr);
 800a070:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800a074:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a078:	4611      	mov	r1, r2
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fd fdb4 	bl	8007be8 <dcd_event_handler>
}
 800a080:	bf00      	nop
  }

  // TODO check USB_OTG_GINTSTS_DISCINT for disconnect detection
  // if(int_status & USB_OTG_GINTSTS_DISCINT)

  if(int_status & USB_OTG_GINTSTS_OTGINT)
 800a082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a084:	f003 0304 	and.w	r3, r3, #4
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d028      	beq.n	800a0de <dcd_int_handler+0x1aa>
  {
    // OTG INT bit is read-only
    uint32_t const otg_int = usb_otg->GOTGINT;
 800a08c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	657b      	str	r3, [r7, #84]	; 0x54

    if (otg_int & USB_OTG_GOTGINT_SEDET)
 800a092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a094:	f003 0304 	and.w	r3, r3, #4
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d01d      	beq.n	800a0d8 <dcd_int_handler+0x1a4>
 800a09c:	79fb      	ldrb	r3, [r7, #7]
 800a09e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800a0ae:	f107 0308 	add.w	r3, r7, #8
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	601a      	str	r2, [r3, #0]
 800a0b6:	605a      	str	r2, [r3, #4]
 800a0b8:	609a      	str	r2, [r3, #8]
 800a0ba:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800a0be:	723b      	strb	r3, [r7, #8]
 800a0c0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800a0c4:	727b      	strb	r3, [r7, #9]
  dcd_event_handler(&event, in_isr);
 800a0c6:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800a0ca:	f107 0308 	add.w	r3, r7, #8
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7fd fd89 	bl	8007be8 <dcd_event_handler>
}
 800a0d6:	bf00      	nop
    {
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    usb_otg->GOTGINT = otg_int;
 800a0d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a0dc:	605a      	str	r2, [r3, #4]
  }

  if(int_status & USB_OTG_GINTSTS_SOF)
 800a0de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0e0:	f003 0308 	and.w	r3, r3, #8
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d028      	beq.n	800a13a <dcd_int_handler+0x206>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_SOF;
 800a0e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0ea:	2208      	movs	r2, #8
 800a0ec:	615a      	str	r2, [r3, #20]

    // Disable SOF interrupt since currently only used for remote wakeup detection
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_SOFM;
 800a0ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	f023 0208 	bic.w	r2, r3, #8
 800a0f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0f8:	619a      	str	r2, [r3, #24]
 800a0fa:	79fb      	ldrb	r3, [r7, #7]
 800a0fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a100:	2303      	movs	r3, #3
 800a102:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800a106:	2301      	movs	r3, #1
 800a108:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800a10c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a110:	2200      	movs	r2, #0
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	605a      	str	r2, [r3, #4]
 800a116:	609a      	str	r2, [r3, #8]
 800a118:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a11c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800a120:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a124:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  dcd_event_handler(&event, in_isr);
 800a128:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a12c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a130:	4611      	mov	r1, r2
 800a132:	4618      	mov	r0, r3
 800a134:	f7fd fd58 	bl	8007be8 <dcd_event_handler>
}
 800a138:	bf00      	nop

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if(int_status & USB_OTG_GINTSTS_RXFLVL)
 800a13a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a13c:	f003 0310 	and.w	r3, r3, #16
 800a140:	2b00      	cmp	r3, #0
 800a142:	d021      	beq.n	800a188 <dcd_int_handler+0x254>
  {
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_RXFLVLM;
 800a144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a146:	699b      	ldr	r3, [r3, #24]
 800a148:	f023 0210 	bic.w	r2, r3, #16
 800a14c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a14e:	619a      	str	r2, [r3, #24]

    // Loop until all available packets were handled
    do
    {
      handle_rxflvl_ints(rhport, out_ep);
 800a150:	79fb      	ldrb	r3, [r7, #7]
 800a152:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a154:	4618      	mov	r0, r3
 800a156:	f7ff fc81 	bl	8009a5c <handle_rxflvl_ints>
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 800a15a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a15c:	695b      	ldr	r3, [r3, #20]
 800a15e:	f003 0310 	and.w	r3, r3, #16
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1f4      	bne.n	800a150 <dcd_int_handler+0x21c>

    // Manage RX FIFO size
    if (_out_ep_closed)
 800a166:	4b19      	ldr	r3, [pc, #100]	; (800a1cc <dcd_int_handler+0x298>)
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d006      	beq.n	800a17c <dcd_int_handler+0x248>
    {
      update_grxfsiz(rhport);
 800a16e:	79fb      	ldrb	r3, [r7, #7]
 800a170:	4618      	mov	r0, r3
 800a172:	f7fe fc97 	bl	8008aa4 <update_grxfsiz>

      // Disable flag
      _out_ep_closed = false;
 800a176:	4b15      	ldr	r3, [pc, #84]	; (800a1cc <dcd_int_handler+0x298>)
 800a178:	2200      	movs	r2, #0
 800a17a:	701a      	strb	r2, [r3, #0]
    }

    usb_otg->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a17c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	f043 0210 	orr.w	r2, r3, #16
 800a184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a186:	619a      	str	r2, [r3, #24]
  }

  // OUT endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_OEPINT)
 800a188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a18a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d005      	beq.n	800a19e <dcd_int_handler+0x26a>
  {
    // OEPINT is read-only
    handle_epout_ints(rhport, dev, out_ep);
 800a192:	79fb      	ldrb	r3, [r7, #7]
 800a194:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a196:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a198:	4618      	mov	r0, r3
 800a19a:	f7ff fd07 	bl	8009bac <handle_epout_ints>
  }

  // IN endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_IEPINT)
 800a19e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d005      	beq.n	800a1b4 <dcd_int_handler+0x280>
  {
    // IEPINT bit read-only
    handle_epin_ints(rhport, dev, in_ep);
 800a1a8:	79fb      	ldrb	r3, [r7, #7]
 800a1aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7ff fdb6 	bl	8009d20 <handle_epin_ints>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & USB_OTG_GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG2("      IISOIXFR!\r\n");
  //  }
}
 800a1b4:	bf00      	nop
 800a1b6:	3770      	adds	r7, #112	; 0x70
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	40040000 	.word	0x40040000
 800a1c0:	40040800 	.word	0x40040800
 800a1c4:	40040b00 	.word	0x40040b00
 800a1c8:	40040900 	.word	0x40040900
 800a1cc:	24001c26 	.word	0x24001c26

0800a1d0 <tusb_init>:
//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+

bool tusb_init(void)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
#if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
  // init device stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
 800a1d6:	2001      	movs	r0, #1
 800a1d8:	f7fc fe60 	bl	8006e9c <tud_init>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	f083 0301 	eor.w	r3, r3, #1
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00a      	beq.n	800a1fe <tusb_init+0x2e>
 800a1e8:	4b07      	ldr	r3, [pc, #28]	; (800a208 <tusb_init+0x38>)
 800a1ea:	607b      	str	r3, [r7, #4]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 0301 	and.w	r3, r3, #1
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d000      	beq.n	800a1fa <tusb_init+0x2a>
 800a1f8:	be00      	bkpt	0x0000
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	e000      	b.n	800a200 <tusb_init+0x30>
#if CFG_TUH_ENABLED && defined(TUH_OPT_RHPORT)
  // init host stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) );
#endif

  return true;
 800a1fe:	2301      	movs	r3, #1
}
 800a200:	4618      	mov	r0, r3
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	e000edf0 	.word	0xe000edf0

0800a20c <tu_edpt_claim>:
//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	2b00      	cmp	r3, #0
 800a222:	d106      	bne.n	800a232 <tu_edpt_claim+0x26>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d001      	beq.n	800a236 <tu_edpt_claim+0x2a>
 800a232:	2300      	movs	r3, #0
 800a234:	e01e      	b.n	800a274 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	2b00      	cmp	r3, #0
 800a242:	d108      	bne.n	800a256 <tu_edpt_claim+0x4a>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d101      	bne.n	800a256 <tu_edpt_claim+0x4a>
 800a252:	2301      	movs	r3, #1
 800a254:	e000      	b.n	800a258 <tu_edpt_claim+0x4c>
 800a256:	2300      	movs	r3, #0
 800a258:	73fb      	strb	r3, [r7, #15]
 800a25a:	7bfb      	ldrb	r3, [r7, #15]
 800a25c:	f003 0301 	and.w	r3, r3, #1
 800a260:	73fb      	strb	r3, [r7, #15]
  if (available)
 800a262:	7bfb      	ldrb	r3, [r7, #15]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d004      	beq.n	800a272 <tu_edpt_claim+0x66>
  {
    ep_state->claimed = 1;
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	7813      	ldrb	r3, [r2, #0]
 800a26c:	f043 0304 	orr.w	r3, r3, #4
 800a270:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return available;
 800a272:	7bfb      	ldrb	r3, [r7, #15]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3714      	adds	r7, #20
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 800a280:	b480      	push	{r7}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  (void) mutex;

  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a292:	b2db      	uxtb	r3, r3
 800a294:	2b01      	cmp	r3, #1
 800a296:	d108      	bne.n	800a2aa <tu_edpt_release+0x2a>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d101      	bne.n	800a2aa <tu_edpt_release+0x2a>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e000      	b.n	800a2ac <tu_edpt_release+0x2c>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	73fb      	strb	r3, [r7, #15]
 800a2ae:	7bfb      	ldrb	r3, [r7, #15]
 800a2b0:	f003 0301 	and.w	r3, r3, #1
 800a2b4:	73fb      	strb	r3, [r7, #15]
  if (ret)
 800a2b6:	7bfb      	ldrb	r3, [r7, #15]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d004      	beq.n	800a2c6 <tu_edpt_release+0x46>
  {
    ep_state->claimed = 0;
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	7813      	ldrb	r3, [r2, #0]
 800a2c0:	f36f 0382 	bfc	r3, #2, #1
 800a2c4:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return ret;
 800a2c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3714      	adds	r7, #20
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b08b      	sub	sp, #44	; 0x2c
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	460b      	mov	r3, r1
 800a2de:	70fb      	strb	r3, [r7, #3]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	889b      	ldrh	r3, [r3, #4]
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a2ee:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800a2f0:	84fb      	strh	r3, [r7, #38]	; 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	78db      	ldrb	r3, [r3, #3]
 800a2f6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	2b03      	cmp	r3, #3
 800a2fe:	d03e      	beq.n	800a37e <tu_edpt_validate+0xaa>
 800a300:	2b03      	cmp	r3, #3
 800a302:	dc53      	bgt.n	800a3ac <tu_edpt_validate+0xd8>
 800a304:	2b01      	cmp	r3, #1
 800a306:	d002      	beq.n	800a30e <tu_edpt_validate+0x3a>
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d018      	beq.n	800a33e <tu_edpt_validate+0x6a>
 800a30c:	e04e      	b.n	800a3ac <tu_edpt_validate+0xd8>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800a30e:	78fb      	ldrb	r3, [r7, #3]
 800a310:	2b02      	cmp	r3, #2
 800a312:	d102      	bne.n	800a31a <tu_edpt_validate+0x46>
 800a314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a318:	e001      	b.n	800a31e <tu_edpt_validate+0x4a>
 800a31a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800a31e:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 800a320:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a322:	8afb      	ldrh	r3, [r7, #22]
 800a324:	429a      	cmp	r2, r3
 800a326:	d943      	bls.n	800a3b0 <tu_edpt_validate+0xdc>
 800a328:	4b27      	ldr	r3, [pc, #156]	; (800a3c8 <tu_edpt_validate+0xf4>)
 800a32a:	613b      	str	r3, [r7, #16]
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 0301 	and.w	r3, r3, #1
 800a334:	2b00      	cmp	r3, #0
 800a336:	d000      	beq.n	800a33a <tu_edpt_validate+0x66>
 800a338:	be00      	bkpt	0x0000
 800a33a:	2300      	movs	r3, #0
 800a33c:	e03e      	b.n	800a3bc <tu_edpt_validate+0xe8>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 800a33e:	78fb      	ldrb	r3, [r7, #3]
 800a340:	2b02      	cmp	r3, #2
 800a342:	d10e      	bne.n	800a362 <tu_edpt_validate+0x8e>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 800a344:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a34a:	d033      	beq.n	800a3b4 <tu_edpt_validate+0xe0>
 800a34c:	4b1e      	ldr	r3, [pc, #120]	; (800a3c8 <tu_edpt_validate+0xf4>)
 800a34e:	61bb      	str	r3, [r7, #24]
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f003 0301 	and.w	r3, r3, #1
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d000      	beq.n	800a35e <tu_edpt_validate+0x8a>
 800a35c:	be00      	bkpt	0x0000
 800a35e:	2300      	movs	r3, #0
 800a360:	e02c      	b.n	800a3bc <tu_edpt_validate+0xe8>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 800a362:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a364:	2b40      	cmp	r3, #64	; 0x40
 800a366:	d925      	bls.n	800a3b4 <tu_edpt_validate+0xe0>
 800a368:	4b17      	ldr	r3, [pc, #92]	; (800a3c8 <tu_edpt_validate+0xf4>)
 800a36a:	61fb      	str	r3, [r7, #28]
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 0301 	and.w	r3, r3, #1
 800a374:	2b00      	cmp	r3, #0
 800a376:	d000      	beq.n	800a37a <tu_edpt_validate+0xa6>
 800a378:	be00      	bkpt	0x0000
 800a37a:	2300      	movs	r3, #0
 800a37c:	e01e      	b.n	800a3bc <tu_edpt_validate+0xe8>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800a37e:	78fb      	ldrb	r3, [r7, #3]
 800a380:	2b02      	cmp	r3, #2
 800a382:	d102      	bne.n	800a38a <tu_edpt_validate+0xb6>
 800a384:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a388:	e000      	b.n	800a38c <tu_edpt_validate+0xb8>
 800a38a:	2340      	movs	r3, #64	; 0x40
 800a38c:	84bb      	strh	r3, [r7, #36]	; 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800a38e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a390:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a392:	429a      	cmp	r2, r3
 800a394:	d910      	bls.n	800a3b8 <tu_edpt_validate+0xe4>
 800a396:	4b0c      	ldr	r3, [pc, #48]	; (800a3c8 <tu_edpt_validate+0xf4>)
 800a398:	623b      	str	r3, [r7, #32]
 800a39a:	6a3b      	ldr	r3, [r7, #32]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f003 0301 	and.w	r3, r3, #1
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d000      	beq.n	800a3a8 <tu_edpt_validate+0xd4>
 800a3a6:	be00      	bkpt	0x0000
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	e007      	b.n	800a3bc <tu_edpt_validate+0xe8>
    }
    break;

    default: return false;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	e005      	b.n	800a3bc <tu_edpt_validate+0xe8>
    break;
 800a3b0:	bf00      	nop
 800a3b2:	e002      	b.n	800a3ba <tu_edpt_validate+0xe6>
    break;
 800a3b4:	bf00      	nop
 800a3b6:	e000      	b.n	800a3ba <tu_edpt_validate+0xe6>
    break;
 800a3b8:	bf00      	nop
  }

  return true;
 800a3ba:	2301      	movs	r3, #1
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	372c      	adds	r7, #44	; 0x2c
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr
 800a3c8:	e000edf0 	.word	0xe000edf0

0800a3cc <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b08d      	sub	sp, #52	; 0x34
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	4611      	mov	r1, r2
 800a3d8:	461a      	mov	r2, r3
 800a3da:	460b      	mov	r3, r1
 800a3dc:	80fb      	strh	r3, [r7, #6]
 800a3de:	4613      	mov	r3, r2
 800a3e0:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800a3e6:	88fb      	ldrh	r3, [r7, #6]
 800a3e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3ea:	4413      	add	r3, r2
 800a3ec:	62bb      	str	r3, [r7, #40]	; 0x28

  while( p_desc < desc_end )
 800a3ee:	e027      	b.n	800a440 <tu_edpt_bind_driver+0x74>
 800a3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f2:	623b      	str	r3, [r7, #32]
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800a3f4:	6a3b      	ldr	r3, [r7, #32]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	781b      	ldrb	r3, [r3, #0]
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 800a3fa:	2b05      	cmp	r3, #5
 800a3fc:	d116      	bne.n	800a42c <tu_edpt_bind_driver+0x60>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800a3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a400:	789b      	ldrb	r3, [r3, #2]
 800a402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a406:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a40a:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a40c:	7fbb      	ldrb	r3, [r7, #30]
 800a40e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a412:	b2db      	uxtb	r3, r3

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800a414:	005b      	lsls	r3, r3, #1
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	4413      	add	r3, r2
 800a41a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a41e:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a420:	7ffa      	ldrb	r2, [r7, #31]
 800a422:	09d2      	lsrs	r2, r2, #7
 800a424:	b2d2      	uxtb	r2, r2
 800a426:	4611      	mov	r1, r2
 800a428:	797a      	ldrb	r2, [r7, #5]
 800a42a:	545a      	strb	r2, [r3, r1]
 800a42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42e:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	461a      	mov	r2, r3
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 800a43e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while( p_desc < desc_end )
 800a440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a444:	429a      	cmp	r2, r3
 800a446:	d3d3      	bcc.n	800a3f0 <tu_edpt_bind_driver+0x24>
  }
}
 800a448:	bf00      	nop
 800a44a:	bf00      	nop
 800a44c:	3734      	adds	r7, #52	; 0x34
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr
	...

0800a458 <__libc_init_array>:
 800a458:	b570      	push	{r4, r5, r6, lr}
 800a45a:	4d0d      	ldr	r5, [pc, #52]	; (800a490 <__libc_init_array+0x38>)
 800a45c:	4c0d      	ldr	r4, [pc, #52]	; (800a494 <__libc_init_array+0x3c>)
 800a45e:	1b64      	subs	r4, r4, r5
 800a460:	10a4      	asrs	r4, r4, #2
 800a462:	2600      	movs	r6, #0
 800a464:	42a6      	cmp	r6, r4
 800a466:	d109      	bne.n	800a47c <__libc_init_array+0x24>
 800a468:	4d0b      	ldr	r5, [pc, #44]	; (800a498 <__libc_init_array+0x40>)
 800a46a:	4c0c      	ldr	r4, [pc, #48]	; (800a49c <__libc_init_array+0x44>)
 800a46c:	f000 f82e 	bl	800a4cc <_init>
 800a470:	1b64      	subs	r4, r4, r5
 800a472:	10a4      	asrs	r4, r4, #2
 800a474:	2600      	movs	r6, #0
 800a476:	42a6      	cmp	r6, r4
 800a478:	d105      	bne.n	800a486 <__libc_init_array+0x2e>
 800a47a:	bd70      	pop	{r4, r5, r6, pc}
 800a47c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a480:	4798      	blx	r3
 800a482:	3601      	adds	r6, #1
 800a484:	e7ee      	b.n	800a464 <__libc_init_array+0xc>
 800a486:	f855 3b04 	ldr.w	r3, [r5], #4
 800a48a:	4798      	blx	r3
 800a48c:	3601      	adds	r6, #1
 800a48e:	e7f2      	b.n	800a476 <__libc_init_array+0x1e>
 800a490:	0800a73c 	.word	0x0800a73c
 800a494:	0800a73c 	.word	0x0800a73c
 800a498:	0800a73c 	.word	0x0800a73c
 800a49c:	0800a740 	.word	0x0800a740

0800a4a0 <memcpy>:
 800a4a0:	440a      	add	r2, r1
 800a4a2:	4291      	cmp	r1, r2
 800a4a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4a8:	d100      	bne.n	800a4ac <memcpy+0xc>
 800a4aa:	4770      	bx	lr
 800a4ac:	b510      	push	{r4, lr}
 800a4ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4b6:	4291      	cmp	r1, r2
 800a4b8:	d1f9      	bne.n	800a4ae <memcpy+0xe>
 800a4ba:	bd10      	pop	{r4, pc}

0800a4bc <memset>:
 800a4bc:	4402      	add	r2, r0
 800a4be:	4603      	mov	r3, r0
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d100      	bne.n	800a4c6 <memset+0xa>
 800a4c4:	4770      	bx	lr
 800a4c6:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ca:	e7f9      	b.n	800a4c0 <memset+0x4>

0800a4cc <_init>:
 800a4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ce:	bf00      	nop
 800a4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4d2:	bc08      	pop	{r3}
 800a4d4:	469e      	mov	lr, r3
 800a4d6:	4770      	bx	lr

0800a4d8 <_fini>:
 800a4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4da:	bf00      	nop
 800a4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4de:	bc08      	pop	{r3}
 800a4e0:	469e      	mov	lr, r3
 800a4e2:	4770      	bx	lr
