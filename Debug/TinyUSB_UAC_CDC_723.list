
TinyUSB_UAC_CDC_723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a92c  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  0800abf8  0800abf8  0001abf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ae50  0800ae50  0001ae50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ae54  0800ae54  0001ae54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000048  24000000  0800ae58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001c2c  24000048  0800aea0  00020048  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24001c74  0800aea0  00021c74  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001fb8d  00000000  00000000  00020076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000041d4  00000000  00000000  0003fc03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001708  00000000  00000000  00043dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001640  00000000  00000000  000454e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035a8e  00000000  00000000  00046b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001bf78  00000000  00000000  0007c5ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00159b73  00000000  00000000  00098526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f2099  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000061d8  00000000  00000000  001f20ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000048 	.word	0x24000048
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800abe0 	.word	0x0800abe0

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400004c 	.word	0x2400004c
 8000308:	0800abe0 	.word	0x0800abe0

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <tud_cdc_connected>:
{
  return tud_cdc_n_write(itf, str, strlen(str));
}

static inline bool tud_cdc_connected (void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  return tud_cdc_n_connected(0);
 8000320:	2000      	movs	r0, #0
 8000322:	f005 fe5f 	bl	8005fe4 <tud_cdc_n_connected>
 8000326:	4603      	mov	r3, r0
}
 8000328:	4618      	mov	r0, r3
 800032a:	bd80      	pop	{r7, pc}

0800032c <tud_cdc_available>:
{
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  return tud_cdc_n_available(0);
 8000330:	2000      	movs	r0, #0
 8000332:	f005 fe97 	bl	8006064 <tud_cdc_n_available>
 8000336:	4603      	mov	r3, r0
}
 8000338:	4618      	mov	r0, r3
 800033a:	bd80      	pop	{r7, pc}

0800033c <tud_cdc_read>:
{
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_read(0, buffer, bufsize);
 8000346:	683a      	ldr	r2, [r7, #0]
 8000348:	6879      	ldr	r1, [r7, #4]
 800034a:	2000      	movs	r0, #0
 800034c:	f005 fea2 	bl	8006094 <tud_cdc_n_read>
 8000350:	4603      	mov	r3, r0
}
 8000352:	4618      	mov	r0, r3
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}

0800035a <tud_cdc_write>:
{
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
 800035a:	b580      	push	{r7, lr}
 800035c:	b082      	sub	sp, #8
 800035e:	af00      	add	r7, sp, #0
 8000360:	6078      	str	r0, [r7, #4]
 8000362:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_write(0, buffer, bufsize);
 8000364:	683a      	ldr	r2, [r7, #0]
 8000366:	6879      	ldr	r1, [r7, #4]
 8000368:	2000      	movs	r0, #0
 800036a:	f005 feb7 	bl	80060dc <tud_cdc_n_write>
 800036e:	4603      	mov	r3, r0
}
 8000370:	4618      	mov	r0, r3
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <tud_cdc_write_flush>:
{
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 800037c:	2000      	movs	r0, #0
 800037e:	f005 fed9 	bl	8006134 <tud_cdc_n_write_flush>
 8000382:	4603      	mov	r3, r0
}
 8000384:	4618      	mov	r0, r3
 8000386:	bd80      	pop	{r7, pc}

08000388 <tud_cdc_write_available>:

static inline uint32_t tud_cdc_write_available(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_available(0);
 800038c:	2000      	movs	r0, #0
 800038e:	f005 ff4d 	bl	800622c <tud_cdc_n_write_available>
 8000392:	4603      	mov	r3, r0
}
 8000394:	4618      	mov	r0, r3
 8000396:	bd80      	pop	{r7, pc}

08000398 <tud_audio_read>:
{
  return tud_audio_n_available(0);
}

static inline uint16_t tud_audio_read(void* buffer, uint16_t bufsize)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	460b      	mov	r3, r1
 80003a2:	807b      	strh	r3, [r7, #2]
  return tud_audio_n_read(0, buffer, bufsize);
 80003a4:	887b      	ldrh	r3, [r7, #2]
 80003a6:	461a      	mov	r2, r3
 80003a8:	6879      	ldr	r1, [r7, #4]
 80003aa:	2000      	movs	r0, #0
 80003ac:	f004 fca2 	bl	8004cf4 <tud_audio_n_read>
 80003b0:	4603      	mov	r3, r0
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <tud_audio_write>:
// TX API

#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING

static inline uint16_t tud_audio_write(const void * data, uint16_t len)
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b082      	sub	sp, #8
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
 80003c2:	460b      	mov	r3, r1
 80003c4:	807b      	strh	r3, [r7, #2]
  return tud_audio_n_write(0, data, len);
 80003c6:	887b      	ldrh	r3, [r7, #2]
 80003c8:	461a      	mov	r2, r3
 80003ca:	6879      	ldr	r1, [r7, #4]
 80003cc:	2000      	movs	r0, #0
 80003ce:	f004 fd33 	bl	8004e38 <tud_audio_n_write>
 80003d2:	4603      	mov	r3, r0
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <tud_mount_cb>:
// Device callbacks
//--------------------------------------------------------------------+

// Invoked when device is mounted
void tud_mount_cb(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
	blink_interval_ms = BLINK_MOUNTED;
 80003e0:	4b04      	ldr	r3, [pc, #16]	; (80003f4 <tud_mount_cb+0x18>)
 80003e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003e6:	601a      	str	r2, [r3, #0]
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	24000004 	.word	0x24000004

080003f8 <tud_umount_cb>:

// Invoked when device is unmounted
void tud_umount_cb(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
	blink_interval_ms = BLINK_NOT_MOUNTED;
 80003fc:	4b03      	ldr	r3, [pc, #12]	; (800040c <tud_umount_cb+0x14>)
 80003fe:	22fa      	movs	r2, #250	; 0xfa
 8000400:	601a      	str	r2, [r3, #0]
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	24000004 	.word	0x24000004

08000410 <tud_suspend_cb>:

// Invoked when usb bus is suspended
// remote_wakeup_en : if host allow us  to perform remote wakeup
// Within 7ms, device must draw an average of current less than 2.5 mA from bus
void tud_suspend_cb(bool remote_wakeup_en)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
	(void)remote_wakeup_en;
	blink_interval_ms = BLINK_SUSPENDED;
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <tud_suspend_cb+0x20>)
 800041c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000420:	601a      	str	r2, [r3, #0]
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	24000004 	.word	0x24000004

08000434 <tud_resume_cb>:

// Invoked when usb bus is resumed
void tud_resume_cb(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
	blink_interval_ms = BLINK_MOUNTED;
 8000438:	4b04      	ldr	r3, [pc, #16]	; (800044c <tud_resume_cb+0x18>)
 800043a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800043e:	601a      	str	r2, [r3, #0]
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	24000004 	.word	0x24000004

08000450 <tud_audio_clock_get_request>:

// Helper for clock get requests
static bool tud_audio_clock_get_request(uint8_t rhport, audio_control_request_t const *request)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b094      	sub	sp, #80	; 0x50
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	6039      	str	r1, [r7, #0]
 800045a:	71fb      	strb	r3, [r7, #7]
	TU_ASSERT(request->bEntityID == UAC2_ENTITY_CLOCK);
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	795b      	ldrb	r3, [r3, #5]
 8000460:	2b04      	cmp	r3, #4
 8000462:	d00a      	beq.n	800047a <tud_audio_clock_get_request+0x2a>
 8000464:	4b44      	ldr	r3, [pc, #272]	; (8000578 <tud_audio_clock_get_request+0x128>)
 8000466:	64bb      	str	r3, [r7, #72]	; 0x48
 8000468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f003 0301 	and.w	r3, r3, #1
 8000470:	2b00      	cmp	r3, #0
 8000472:	d000      	beq.n	8000476 <tud_audio_clock_get_request+0x26>
 8000474:	be00      	bkpt	0x0000
 8000476:	2300      	movs	r3, #0
 8000478:	e07a      	b.n	8000570 <tud_audio_clock_get_request+0x120>

	if (request->bControlSelector == AUDIO_CS_CTRL_SAM_FREQ)
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	78db      	ldrb	r3, [r3, #3]
 800047e:	2b01      	cmp	r3, #1
 8000480:	d161      	bne.n	8000546 <tud_audio_clock_get_request+0xf6>
	{
		if (request->bRequest == AUDIO_CS_REQ_CUR)
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	785b      	ldrb	r3, [r3, #1]
 8000486:	2b01      	cmp	r3, #1
 8000488:	d10b      	bne.n	80004a2 <tud_audio_clock_get_request+0x52>
		{
			TU_LOG1("Clock get current freq %lu\r\n", current_sample_rate);

			audio_control_cur_4_t curf = { (int32_t) tu_htole32(current_sample_rate) };
 800048a:	4b3c      	ldr	r3, [pc, #240]	; (800057c <tud_audio_clock_get_request+0x12c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	647b      	str	r3, [r7, #68]	; 0x44
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &curf, sizeof(curf));
 8000490:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000494:	79f8      	ldrb	r0, [r7, #7]
 8000496:	2304      	movs	r3, #4
 8000498:	6839      	ldr	r1, [r7, #0]
 800049a:	f005 fa8d 	bl	80059b8 <tud_audio_buffer_and_schedule_control_xfer>
 800049e:	4603      	mov	r3, r0
 80004a0:	e066      	b.n	8000570 <tud_audio_clock_get_request+0x120>
		}
		else if (request->bRequest == AUDIO_CS_REQ_RANGE)
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	785b      	ldrb	r3, [r3, #1]
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	d161      	bne.n	800056e <tud_audio_clock_get_request+0x11e>
		{
			audio_control_range_4_n_t(N_SAMPLE_RATES) rangef =
 80004aa:	f107 030c 	add.w	r3, r7, #12
 80004ae:	2232      	movs	r2, #50	; 0x32
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f00a fb8c 	bl	800abd0 <memset>
 80004b8:	2304      	movs	r3, #4
 80004ba:	81bb      	strh	r3, [r7, #12]
			{
					.wNumSubRanges = tu_htole16(N_SAMPLE_RATES)
			};
			TU_LOG1("Clock get %d freq ranges\r\n", N_SAMPLE_RATES);
			for(uint8_t i = 0; i < N_SAMPLE_RATES; i++)
 80004bc:	2300      	movs	r3, #0
 80004be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80004c2:	e033      	b.n	800052c <tud_audio_clock_get_request+0xdc>
			{
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 80004c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80004c8:	4a2d      	ldr	r2, [pc, #180]	; (8000580 <tud_audio_clock_get_request+0x130>)
 80004ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ce:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80004d2:	4619      	mov	r1, r3
 80004d4:	4613      	mov	r3, r2
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	4413      	add	r3, r2
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	3350      	adds	r3, #80	; 0x50
 80004de:	443b      	add	r3, r7
 80004e0:	3b44      	subs	r3, #68	; 0x44
 80004e2:	f8c3 1002 	str.w	r1, [r3, #2]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80004e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80004ea:	4a25      	ldr	r2, [pc, #148]	; (8000580 <tud_audio_clock_get_request+0x130>)
 80004ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004f0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80004f4:	4619      	mov	r1, r3
 80004f6:	4613      	mov	r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	4413      	add	r3, r2
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	3350      	adds	r3, #80	; 0x50
 8000500:	443b      	add	r3, r7
 8000502:	3b44      	subs	r3, #68	; 0x44
 8000504:	f8c3 1006 	str.w	r1, [r3, #6]
				rangef.subrange[i].bRes = 0;
 8000508:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800050c:	4613      	mov	r3, r2
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	4413      	add	r3, r2
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	3350      	adds	r3, #80	; 0x50
 8000516:	443b      	add	r3, r7
 8000518:	3b3c      	subs	r3, #60	; 0x3c
 800051a:	2200      	movs	r2, #0
 800051c:	805a      	strh	r2, [r3, #2]
 800051e:	2200      	movs	r2, #0
 8000520:	809a      	strh	r2, [r3, #4]
			for(uint8_t i = 0; i < N_SAMPLE_RATES; i++)
 8000522:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000526:	3301      	adds	r3, #1
 8000528:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800052c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000530:	2b03      	cmp	r3, #3
 8000532:	d9c7      	bls.n	80004c4 <tud_audio_clock_get_request+0x74>
				TU_LOG1("Range %d (%d, %d, %d)\r\n", i, (int)rangef.subrange[i].bMin, (int)rangef.subrange[i].bMax, (int)rangef.subrange[i].bRes);
			}

			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 8000534:	f107 020c 	add.w	r2, r7, #12
 8000538:	79f8      	ldrb	r0, [r7, #7]
 800053a:	2332      	movs	r3, #50	; 0x32
 800053c:	6839      	ldr	r1, [r7, #0]
 800053e:	f005 fa3b 	bl	80059b8 <tud_audio_buffer_and_schedule_control_xfer>
 8000542:	4603      	mov	r3, r0
 8000544:	e014      	b.n	8000570 <tud_audio_clock_get_request+0x120>
		}
	}
	else if (request->bControlSelector == AUDIO_CS_CTRL_CLK_VALID &&
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	78db      	ldrb	r3, [r3, #3]
 800054a:	2b02      	cmp	r3, #2
 800054c:	d10f      	bne.n	800056e <tud_audio_clock_get_request+0x11e>
			request->bRequest == AUDIO_CS_REQ_CUR)
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	785b      	ldrb	r3, [r3, #1]
	else if (request->bControlSelector == AUDIO_CS_CTRL_CLK_VALID &&
 8000552:	2b01      	cmp	r3, #1
 8000554:	d10b      	bne.n	800056e <tud_audio_clock_get_request+0x11e>
	{
		audio_control_cur_1_t cur_valid = { .bCur = 1 };
 8000556:	2301      	movs	r3, #1
 8000558:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		TU_LOG1("Clock get is valid %u\r\n", cur_valid.bCur);
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_valid, sizeof(cur_valid));
 800055c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000560:	79f8      	ldrb	r0, [r7, #7]
 8000562:	2301      	movs	r3, #1
 8000564:	6839      	ldr	r1, [r7, #0]
 8000566:	f005 fa27 	bl	80059b8 <tud_audio_buffer_and_schedule_control_xfer>
 800056a:	4603      	mov	r3, r0
 800056c:	e000      	b.n	8000570 <tud_audio_clock_get_request+0x120>
	}
	TU_LOG1("Clock get request not supported, entity = %u, selector = %u, request = %u\r\n",
			request->bEntityID, request->bControlSelector, request->bRequest);
	return false;
 800056e:	2300      	movs	r3, #0
}
 8000570:	4618      	mov	r0, r3
 8000572:	3750      	adds	r7, #80	; 0x50
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	e000edf0 	.word	0xe000edf0
 800057c:	24000000 	.word	0x24000000
 8000580:	0800ac60 	.word	0x0800ac60

08000584 <tud_audio_clock_set_request>:

// Helper for clock set requests
static bool tud_audio_clock_set_request(uint8_t rhport, audio_control_request_t const *request, uint8_t const *buf)
{
 8000584:	b480      	push	{r7}
 8000586:	b087      	sub	sp, #28
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	73fb      	strb	r3, [r7, #15]
	(void)rhport;

	TU_ASSERT(request->bEntityID == UAC2_ENTITY_CLOCK);
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	795b      	ldrb	r3, [r3, #5]
 8000596:	2b04      	cmp	r3, #4
 8000598:	d00a      	beq.n	80005b0 <tud_audio_clock_set_request+0x2c>
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <tud_audio_clock_set_request+0x6c>)
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d000      	beq.n	80005ac <tud_audio_clock_set_request+0x28>
 80005aa:	be00      	bkpt	0x0000
 80005ac:	2300      	movs	r3, #0
 80005ae:	e018      	b.n	80005e2 <tud_audio_clock_set_request+0x5e>
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d001      	beq.n	80005bc <tud_audio_clock_set_request+0x38>
 80005b8:	2300      	movs	r3, #0
 80005ba:	e012      	b.n	80005e2 <tud_audio_clock_set_request+0x5e>

	if (request->bControlSelector == AUDIO_CS_CTRL_SAM_FREQ)
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	78db      	ldrb	r3, [r3, #3]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d10d      	bne.n	80005e0 <tud_audio_clock_set_request+0x5c>
	{
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_4_t));
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	88db      	ldrh	r3, [r3, #6]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	2b04      	cmp	r3, #4
 80005cc:	d001      	beq.n	80005d2 <tud_audio_clock_set_request+0x4e>
 80005ce:	2300      	movs	r3, #0
 80005d0:	e007      	b.n	80005e2 <tud_audio_clock_set_request+0x5e>

		current_sample_rate = (uint32_t) ((audio_control_cur_4_t const *)buf)->bCur;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	461a      	mov	r2, r3
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <tud_audio_clock_set_request+0x70>)
 80005da:	601a      	str	r2, [r3, #0]

		TU_LOG1("Clock set current freq: %ld\r\n", current_sample_rate);

		return true;
 80005dc:	2301      	movs	r3, #1
 80005de:	e000      	b.n	80005e2 <tud_audio_clock_set_request+0x5e>
	}
	else
	{
		TU_LOG1("Clock set request not supported, entity = %u, selector = %u, request = %u\r\n",
				request->bEntityID, request->bControlSelector, request->bRequest);
		return false;
 80005e0:	2300      	movs	r3, #0
	}
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	371c      	adds	r7, #28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000edf0 	.word	0xe000edf0
 80005f4:	24000000 	.word	0x24000000

080005f8 <tud_audio_feature_unit_get_request>:

// Helper for feature unit get requests
static bool tud_audio_feature_unit_get_request(uint8_t rhport, audio_control_request_t const *request)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	6039      	str	r1, [r7, #0]
 8000602:	71fb      	strb	r3, [r7, #7]
	TU_ASSERT(request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT);
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	795b      	ldrb	r3, [r3, #5]
 8000608:	2b02      	cmp	r3, #2
 800060a:	d00a      	beq.n	8000622 <tud_audio_feature_unit_get_request+0x2a>
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <tud_audio_feature_unit_get_request+0xbc>)
 800060e:	61fb      	str	r3, [r7, #28]
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f003 0301 	and.w	r3, r3, #1
 8000618:	2b00      	cmp	r3, #0
 800061a:	d000      	beq.n	800061e <tud_audio_feature_unit_get_request+0x26>
 800061c:	be00      	bkpt	0x0000
 800061e:	2300      	movs	r3, #0
 8000620:	e043      	b.n	80006aa <tud_audio_feature_unit_get_request+0xb2>

	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE && request->bRequest == AUDIO_CS_REQ_CUR)
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	78db      	ldrb	r3, [r3, #3]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d112      	bne.n	8000650 <tud_audio_feature_unit_get_request+0x58>
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	785b      	ldrb	r3, [r3, #1]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d10e      	bne.n	8000650 <tud_audio_feature_unit_get_request+0x58>
	{
		audio_control_cur_1_t mute1 = { .bCur = mute[request->bChannelNumber] };
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	789b      	ldrb	r3, [r3, #2]
 8000636:	461a      	mov	r2, r3
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <tud_audio_feature_unit_get_request+0xc0>)
 800063a:	569b      	ldrsb	r3, [r3, r2]
 800063c:	763b      	strb	r3, [r7, #24]
		TU_LOG1("Get channel %u mute %d\r\n", request->bChannelNumber, mute1.bCur);
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &mute1, sizeof(mute1));
 800063e:	f107 0218 	add.w	r2, r7, #24
 8000642:	79f8      	ldrb	r0, [r7, #7]
 8000644:	2301      	movs	r3, #1
 8000646:	6839      	ldr	r1, [r7, #0]
 8000648:	f005 f9b6 	bl	80059b8 <tud_audio_buffer_and_schedule_control_xfer>
 800064c:	4603      	mov	r3, r0
 800064e:	e02c      	b.n	80006aa <tud_audio_feature_unit_get_request+0xb2>
	}
	else if (UAC2_ENTITY_SPK_FEATURE_UNIT && request->bControlSelector == AUDIO_FU_CTRL_VOLUME)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	78db      	ldrb	r3, [r3, #3]
 8000654:	2b02      	cmp	r3, #2
 8000656:	d127      	bne.n	80006a8 <tud_audio_feature_unit_get_request+0xb0>
	{
		if (request->bRequest == AUDIO_CS_REQ_RANGE)
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	785b      	ldrb	r3, [r3, #1]
 800065c:	2b02      	cmp	r3, #2
 800065e:	d10f      	bne.n	8000680 <tud_audio_feature_unit_get_request+0x88>
		{
			audio_control_range_2_n_t(1) range_vol = {
 8000660:	4a16      	ldr	r2, [pc, #88]	; (80006bc <tud_audio_feature_unit_get_request+0xc4>)
 8000662:	f107 0310 	add.w	r3, r7, #16
 8000666:	e892 0003 	ldmia.w	r2, {r0, r1}
 800066a:	e883 0003 	stmia.w	r3, {r0, r1}
					.wNumSubRanges = tu_htole16(1),
					.subrange[0] = { .bMin = tu_htole16(-VOLUME_CTRL_50_DB), tu_htole16(VOLUME_CTRL_0_DB), tu_htole16(256) }
			};
			TU_LOG1("Get channel %u volume range (%d, %d, %u) dB\r\n", request->bChannelNumber,
					range_vol.subrange[0].bMin / 256, range_vol.subrange[0].bMax / 256, range_vol.subrange[0].bRes / 256);
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &range_vol, sizeof(range_vol));
 800066e:	f107 0210 	add.w	r2, r7, #16
 8000672:	79f8      	ldrb	r0, [r7, #7]
 8000674:	2308      	movs	r3, #8
 8000676:	6839      	ldr	r1, [r7, #0]
 8000678:	f005 f99e 	bl	80059b8 <tud_audio_buffer_and_schedule_control_xfer>
 800067c:	4603      	mov	r3, r0
 800067e:	e014      	b.n	80006aa <tud_audio_feature_unit_get_request+0xb2>
		}
		else if (request->bRequest == AUDIO_CS_REQ_CUR)
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	785b      	ldrb	r3, [r3, #1]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d10f      	bne.n	80006a8 <tud_audio_feature_unit_get_request+0xb0>
		{
			audio_control_cur_2_t cur_vol = { .bCur = tu_htole16(volume[request->bChannelNumber]) };
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	789b      	ldrb	r3, [r3, #2]
 800068c:	461a      	mov	r2, r3
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <tud_audio_feature_unit_get_request+0xc8>)
 8000690:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000694:	81bb      	strh	r3, [r7, #12]
			TU_LOG1("Get channel %u volume %d dB\r\n", request->bChannelNumber, cur_vol.bCur / 256);
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_vol, sizeof(cur_vol));
 8000696:	f107 020c 	add.w	r2, r7, #12
 800069a:	79f8      	ldrb	r0, [r7, #7]
 800069c:	2302      	movs	r3, #2
 800069e:	6839      	ldr	r1, [r7, #0]
 80006a0:	f005 f98a 	bl	80059b8 <tud_audio_buffer_and_schedule_control_xfer>
 80006a4:	4603      	mov	r3, r0
 80006a6:	e000      	b.n	80006aa <tud_audio_feature_unit_get_request+0xb2>
		}
	}
	TU_LOG1("Feature unit get request not supported, entity = %u, selector = %u, request = %u\r\n",
			request->bEntityID, request->bControlSelector, request->bRequest);

	return false;
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3720      	adds	r7, #32
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	e000edf0 	.word	0xe000edf0
 80006b8:	240005bc 	.word	0x240005bc
 80006bc:	0800abf8 	.word	0x0800abf8
 80006c0:	240005c0 	.word	0x240005c0

080006c4 <tud_audio_feature_unit_set_request>:

// Helper for feature unit set requests
static bool tud_audio_feature_unit_set_request(uint8_t rhport, audio_control_request_t const *request, uint8_t const *buf)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b087      	sub	sp, #28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
 80006d0:	73fb      	strb	r3, [r7, #15]
	(void)rhport;

	TU_ASSERT(request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT);
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	795b      	ldrb	r3, [r3, #5]
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	d00a      	beq.n	80006f0 <tud_audio_feature_unit_set_request+0x2c>
 80006da:	4b22      	ldr	r3, [pc, #136]	; (8000764 <tud_audio_feature_unit_set_request+0xa0>)
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d000      	beq.n	80006ec <tud_audio_feature_unit_set_request+0x28>
 80006ea:	be00      	bkpt	0x0000
 80006ec:	2300      	movs	r3, #0
 80006ee:	e032      	b.n	8000756 <tud_audio_feature_unit_set_request+0x92>
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	785b      	ldrb	r3, [r3, #1]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d001      	beq.n	80006fc <tud_audio_feature_unit_set_request+0x38>
 80006f8:	2300      	movs	r3, #0
 80006fa:	e02c      	b.n	8000756 <tud_audio_feature_unit_set_request+0x92>

	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	78db      	ldrb	r3, [r3, #3]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d110      	bne.n	8000726 <tud_audio_feature_unit_set_request+0x62>
	{
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_1_t));
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	88db      	ldrh	r3, [r3, #6]
 8000708:	b29b      	uxth	r3, r3
 800070a:	2b01      	cmp	r3, #1
 800070c:	d001      	beq.n	8000712 <tud_audio_feature_unit_set_request+0x4e>
 800070e:	2300      	movs	r3, #0
 8000710:	e021      	b.n	8000756 <tud_audio_feature_unit_set_request+0x92>

		mute[request->bChannelNumber] = ((audio_control_cur_1_t const *)buf)->bCur;
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	789b      	ldrb	r3, [r3, #2]
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f993 1000 	ldrsb.w	r1, [r3]
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <tud_audio_feature_unit_set_request+0xa4>)
 8000720:	5499      	strb	r1, [r3, r2]

		TU_LOG1("Set channel %d Mute: %d\r\n", request->bChannelNumber, mute[request->bChannelNumber]);

		return true;
 8000722:	2301      	movs	r3, #1
 8000724:	e017      	b.n	8000756 <tud_audio_feature_unit_set_request+0x92>
	}
	else if (request->bControlSelector == AUDIO_FU_CTRL_VOLUME)
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	78db      	ldrb	r3, [r3, #3]
 800072a:	2b02      	cmp	r3, #2
 800072c:	d112      	bne.n	8000754 <tud_audio_feature_unit_set_request+0x90>
	{
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_2_t));
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	88db      	ldrh	r3, [r3, #6]
 8000732:	b29b      	uxth	r3, r3
 8000734:	2b02      	cmp	r3, #2
 8000736:	d001      	beq.n	800073c <tud_audio_feature_unit_set_request+0x78>
 8000738:	2300      	movs	r3, #0
 800073a:	e00c      	b.n	8000756 <tud_audio_feature_unit_set_request+0x92>

		volume[request->bChannelNumber] = ((audio_control_cur_2_t const *)buf)->bCur;
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	789b      	ldrb	r3, [r3, #2]
 8000740:	461a      	mov	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000748:	b219      	sxth	r1, r3
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <tud_audio_feature_unit_set_request+0xa8>)
 800074c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		TU_LOG1("Set channel %d volume: %d dB\r\n", request->bChannelNumber, volume[request->bChannelNumber] / 256);

		return true;
 8000750:	2301      	movs	r3, #1
 8000752:	e000      	b.n	8000756 <tud_audio_feature_unit_set_request+0x92>
	}
	else
	{
		TU_LOG1("Feature unit set request not supported, entity = %u, selector = %u, request = %u\r\n",
				request->bEntityID, request->bControlSelector, request->bRequest);
		return false;
 8000754:	2300      	movs	r3, #0
	}
}
 8000756:	4618      	mov	r0, r3
 8000758:	371c      	adds	r7, #28
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000edf0 	.word	0xe000edf0
 8000768:	240005bc 	.word	0x240005bc
 800076c:	240005c0 	.word	0x240005c0

08000770 <tud_audio_get_req_entity_cb>:
// Application Callback API Implementations
//--------------------------------------------------------------------+

// Invoked when audio class specific get request received for an entity
bool tud_audio_get_req_entity_cb(uint8_t rhport, tusb_control_request_t const *p_request)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	6039      	str	r1, [r7, #0]
 800077a:	71fb      	strb	r3, [r7, #7]
	audio_control_request_t const *request = (audio_control_request_t const *)p_request;
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	60fb      	str	r3, [r7, #12]

	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	795b      	ldrb	r3, [r3, #5]
 8000784:	2b04      	cmp	r3, #4
 8000786:	d106      	bne.n	8000796 <tud_audio_get_req_entity_cb+0x26>
		return tud_audio_clock_get_request(rhport, request);
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	68f9      	ldr	r1, [r7, #12]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fe5f 	bl	8000450 <tud_audio_clock_get_request>
 8000792:	4603      	mov	r3, r0
 8000794:	e00b      	b.n	80007ae <tud_audio_get_req_entity_cb+0x3e>
	if (request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	795b      	ldrb	r3, [r3, #5]
 800079a:	2b02      	cmp	r3, #2
 800079c:	d106      	bne.n	80007ac <tud_audio_get_req_entity_cb+0x3c>
		return tud_audio_feature_unit_get_request(rhport, request);
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	68f9      	ldr	r1, [r7, #12]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ff28 	bl	80005f8 <tud_audio_feature_unit_get_request>
 80007a8:	4603      	mov	r3, r0
 80007aa:	e000      	b.n	80007ae <tud_audio_get_req_entity_cb+0x3e>
	else
	{
		TU_LOG1("Get request not handled, entity = %d, selector = %d, request = %d\r\n",
				request->bEntityID, request->bControlSelector, request->bRequest);
	}
	return false;
 80007ac:	2300      	movs	r3, #0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <tud_audio_set_req_entity_cb>:

// Invoked when audio class specific set request received for an entity
bool tud_audio_set_req_entity_cb(uint8_t rhport, tusb_control_request_t const *p_request, uint8_t *buf)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b086      	sub	sp, #24
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	73fb      	strb	r3, [r7, #15]
	audio_control_request_t const *request = (audio_control_request_t const *)p_request;
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	617b      	str	r3, [r7, #20]

	if (request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT)
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	795b      	ldrb	r3, [r3, #5]
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d107      	bne.n	80007e0 <tud_audio_set_req_entity_cb+0x2a>
		return tud_audio_feature_unit_set_request(rhport, request, buf);
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	6979      	ldr	r1, [r7, #20]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff74 	bl	80006c4 <tud_audio_feature_unit_set_request>
 80007dc:	4603      	mov	r3, r0
 80007de:	e00c      	b.n	80007fa <tud_audio_set_req_entity_cb+0x44>
	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	795b      	ldrb	r3, [r3, #5]
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	d107      	bne.n	80007f8 <tud_audio_set_req_entity_cb+0x42>
		return tud_audio_clock_set_request(rhport, request, buf);
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	6979      	ldr	r1, [r7, #20]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fec8 	bl	8000584 <tud_audio_clock_set_request>
 80007f4:	4603      	mov	r3, r0
 80007f6:	e000      	b.n	80007fa <tud_audio_set_req_entity_cb+0x44>
	TU_LOG1("Set request not handled, entity = %d, selector = %d, request = %d\r\n",
			request->bEntityID, request->bControlSelector, request->bRequest);

	return false;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <tud_audio_set_itf_close_EP_cb>:

bool tud_audio_set_itf_close_EP_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
	(void)rhport;

	uint8_t const itf = tu_u16_low(tu_le16toh(p_request->wIndex));
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	889b      	ldrh	r3, [r3, #4]
 8000814:	b29b      	uxth	r3, r3
 8000816:	817b      	strh	r3, [r7, #10]

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_u32_high16(uint32_t ui32) { return (uint16_t) (ui32 >> 16); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_u32_low16 (uint32_t ui32) { return (uint16_t) (ui32 & 0x0000ffffu); }

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8000818:	897b      	ldrh	r3, [r7, #10]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	73fb      	strb	r3, [r7, #15]
	uint8_t const alt = tu_u16_low(tu_le16toh(p_request->wValue));
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	885b      	ldrh	r3, [r3, #2]
 8000822:	b29b      	uxth	r3, r3
 8000824:	81bb      	strh	r3, [r7, #12]
 8000826:	89bb      	ldrh	r3, [r7, #12]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	73bb      	strb	r3, [r7, #14]

	if (ITF_NUM_AUDIO_STREAMING_SPK == itf && alt == 0)
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d106      	bne.n	8000840 <tud_audio_set_itf_close_EP_cb+0x3c>
 8000832:	7bbb      	ldrb	r3, [r7, #14]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d103      	bne.n	8000840 <tud_audio_set_itf_close_EP_cb+0x3c>
		blink_interval_ms = BLINK_MOUNTED;
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <tud_audio_set_itf_close_EP_cb+0x4c>)
 800083a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800083e:	601a      	str	r2, [r3, #0]

	return true;
 8000840:	2301      	movs	r3, #1
}
 8000842:	4618      	mov	r0, r3
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	24000004 	.word	0x24000004

08000854 <tud_audio_set_itf_cb>:

bool tud_audio_set_itf_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	6039      	str	r1, [r7, #0]
 800085e:	71fb      	strb	r3, [r7, #7]
	(void)rhport;
	uint8_t const itf = tu_u16_low(tu_le16toh(p_request->wIndex));
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	889b      	ldrh	r3, [r3, #4]
 8000864:	b29b      	uxth	r3, r3
 8000866:	817b      	strh	r3, [r7, #10]
 8000868:	897b      	ldrh	r3, [r7, #10]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	73fb      	strb	r3, [r7, #15]
	uint8_t const alt = tu_u16_low(tu_le16toh(p_request->wValue));
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	885b      	ldrh	r3, [r3, #2]
 8000872:	b29b      	uxth	r3, r3
 8000874:	81bb      	strh	r3, [r7, #12]
 8000876:	89bb      	ldrh	r3, [r7, #12]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	73bb      	strb	r3, [r7, #14]

	TU_LOG2("Set interface %d alt %d\r\n", itf, alt);
	if (ITF_NUM_AUDIO_STREAMING_SPK == itf && alt != 0)
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d105      	bne.n	800088e <tud_audio_set_itf_cb+0x3a>
 8000882:	7bbb      	ldrb	r3, [r7, #14]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d002      	beq.n	800088e <tud_audio_set_itf_cb+0x3a>
		blink_interval_ms = BLINK_STREAMING;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <tud_audio_set_itf_cb+0x60>)
 800088a:	2219      	movs	r2, #25
 800088c:	601a      	str	r2, [r3, #0]

	// Clear buffer when streaming format is changed
	spk_data_size = 0;
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <tud_audio_set_itf_cb+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
	if(alt != 0)
 8000894:	7bbb      	ldrb	r3, [r7, #14]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d005      	beq.n	80008a6 <tud_audio_set_itf_cb+0x52>
	{
		current_resolution = resolutions_per_format[alt-1];
 800089a:	7bbb      	ldrb	r3, [r7, #14]
 800089c:	3b01      	subs	r3, #1
 800089e:	4a07      	ldr	r2, [pc, #28]	; (80008bc <tud_audio_set_itf_cb+0x68>)
 80008a0:	5cd2      	ldrb	r2, [r2, r3]
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <tud_audio_set_itf_cb+0x6c>)
 80008a4:	701a      	strb	r2, [r3, #0]
	}

	return true;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	24000004 	.word	0x24000004
 80008b8:	24000ee0 	.word	0x24000ee0
 80008bc:	0800ac70 	.word	0x0800ac70
 80008c0:	24000ee4 	.word	0x24000ee4

080008c4 <tud_audio_rx_done_pre_read_cb>:

bool tud_audio_rx_done_pre_read_cb(uint8_t rhport, uint16_t n_bytes_received, uint8_t func_id, uint8_t ep_out, uint8_t cur_alt_setting)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4604      	mov	r4, r0
 80008cc:	4608      	mov	r0, r1
 80008ce:	4611      	mov	r1, r2
 80008d0:	461a      	mov	r2, r3
 80008d2:	4623      	mov	r3, r4
 80008d4:	71fb      	strb	r3, [r7, #7]
 80008d6:	4603      	mov	r3, r0
 80008d8:	80bb      	strh	r3, [r7, #4]
 80008da:	460b      	mov	r3, r1
 80008dc:	71bb      	strb	r3, [r7, #6]
 80008de:	4613      	mov	r3, r2
 80008e0:	70fb      	strb	r3, [r7, #3]
	(void)rhport;
	(void)func_id;
	(void)ep_out;
	(void)cur_alt_setting;

	spk_data_size = tud_audio_read(spk_buf, n_bytes_received);
 80008e2:	88bb      	ldrh	r3, [r7, #4]
 80008e4:	4619      	mov	r1, r3
 80008e6:	4806      	ldr	r0, [pc, #24]	; (8000900 <tud_audio_rx_done_pre_read_cb+0x3c>)
 80008e8:	f7ff fd56 	bl	8000398 <tud_audio_read>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <tud_audio_rx_done_pre_read_cb+0x40>)
 80008f2:	601a      	str	r2, [r3, #0]
	return true;
 80008f4:	2301      	movs	r3, #1
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd90      	pop	{r4, r7, pc}
 80008fe:	bf00      	nop
 8000900:	240008d0 	.word	0x240008d0
 8000904:	24000ee0 	.word	0x24000ee0

08000908 <tud_audio_tx_done_pre_load_cb>:

bool tud_audio_tx_done_pre_load_cb(uint8_t rhport, uint8_t itf, uint8_t ep_in, uint8_t cur_alt_setting)
{
 8000908:	b490      	push	{r4, r7}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	4604      	mov	r4, r0
 8000910:	4608      	mov	r0, r1
 8000912:	4611      	mov	r1, r2
 8000914:	461a      	mov	r2, r3
 8000916:	4623      	mov	r3, r4
 8000918:	71fb      	strb	r3, [r7, #7]
 800091a:	4603      	mov	r3, r0
 800091c:	71bb      	strb	r3, [r7, #6]
 800091e:	460b      	mov	r3, r1
 8000920:	717b      	strb	r3, [r7, #5]
 8000922:	4613      	mov	r3, r2
 8000924:	713b      	strb	r3, [r7, #4]
	(void)rhport;
	(void)itf;
	(void)ep_in;
	(void)cur_alt_setting;
	int16_t *dst = (int16_t*)mic_buf;
 8000926:	4b04      	ldr	r3, [pc, #16]	; (8000938 <tud_audio_tx_done_pre_load_cb+0x30>)
 8000928:	60fb      	str	r3, [r7, #12]

#endif


	// This callback could be used to fill microphone data separately
	return true;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bc90      	pop	{r4, r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	240005c8 	.word	0x240005c8

0800093c <tud_cdc_line_state_cb>:
//--------------------------------------------------------------------+
// USB CDC
//--------------------------------------------------------------------+
// Invoked when cdc when line state changed e.g connected/disconnected
void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	460b      	mov	r3, r1
 8000948:	71bb      	strb	r3, [r7, #6]
 800094a:	4613      	mov	r3, r2
 800094c:	717b      	strb	r3, [r7, #5]
		// Terminal connected
	}else
	{
		// Terminal disconnected
	}
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf)
{
 800095a:	b480      	push	{r7}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	71fb      	strb	r3, [r7, #7]
	(void) itf;
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <cdc_task>:

void cdc_task(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b092      	sub	sp, #72	; 0x48
 8000974:	af00      	add	r7, sp, #0
	// connected() check for DTR bit
	// Most but not all terminal client set this when making connection
	if ( tud_cdc_connected() )
 8000976:	f7ff fcd1 	bl	800031c <tud_cdc_connected>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d023      	beq.n	80009c8 <cdc_task+0x58>
	{
		//TODO: terminal shows message only after a key is pressed. Why?
		if (SendGreetings && tud_cdc_write_available())
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <cdc_task+0x60>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d00d      	beq.n	80009a4 <cdc_task+0x34>
 8000988:	f7ff fcfe 	bl	8000388 <tud_cdc_write_available>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d008      	beq.n	80009a4 <cdc_task+0x34>
		{
			tud_cdc_write("\n\rHello!\n\r", 8);
 8000992:	2108      	movs	r1, #8
 8000994:	480f      	ldr	r0, [pc, #60]	; (80009d4 <cdc_task+0x64>)
 8000996:	f7ff fce0 	bl	800035a <tud_cdc_write>
			tud_cdc_write_flush();
 800099a:	f7ff fced 	bl	8000378 <tud_cdc_write_flush>
			SendGreetings = 0;
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <cdc_task+0x60>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	701a      	strb	r2, [r3, #0]
		}
		// connected and there are data available
		if ( tud_cdc_available() )
 80009a4:	f7ff fcc2 	bl	800032c <tud_cdc_available>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d00c      	beq.n	80009c8 <cdc_task+0x58>
		{
			// read data
			char buf[64];
			uint32_t count = tud_cdc_read(buf, sizeof(buf));
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2140      	movs	r1, #64	; 0x40
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fcc2 	bl	800033c <tud_cdc_read>
 80009b8:	6478      	str	r0, [r7, #68]	; 0x44

			// Echo back
			// Note: Skip echo by commenting out write() and write_flush()
			// for throughput test e.g
			//    $ dd if=/dev/zero of=/dev/ttyACM0 count=10000
			tud_cdc_write(buf, count);
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fccb 	bl	800035a <tud_cdc_write>
			tud_cdc_write_flush();
 80009c4:	f7ff fcd8 	bl	8000378 <tud_cdc_write_flush>
		}
	}
}
 80009c8:	bf00      	nop
 80009ca:	3748      	adds	r7, #72	; 0x48
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	24000008 	.word	0x24000008
 80009d4:	0800ac00 	.word	0x0800ac00

080009d8 <audio_task>:
//--------------------------------------------------------------------+
// AUDIO Task
//--------------------------------------------------------------------+

void audio_task(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
	mic_buf[3] = 20000;
	tud_audio_write((uint8_t *)mic_buf, (uint16_t) (48));
#endif


	if (spk_data_size)
 80009de:	4b40      	ldr	r3, [pc, #256]	; (8000ae0 <audio_task+0x108>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d078      	beq.n	8000ad8 <audio_task+0x100>
	{
		if (current_resolution == 16)
 80009e6:	4b3f      	ldr	r3, [pc, #252]	; (8000ae4 <audio_task+0x10c>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b10      	cmp	r3, #16
 80009ec:	d13a      	bne.n	8000a64 <audio_task+0x8c>
		{
			int16_t *src = (int16_t*)spk_buf;
 80009ee:	4b3e      	ldr	r3, [pc, #248]	; (8000ae8 <audio_task+0x110>)
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
			int16_t *limit = (int16_t*)spk_buf + spk_data_size / 2;
 80009f2:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <audio_task+0x108>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	da00      	bge.n	80009fc <audio_task+0x24>
 80009fa:	3301      	adds	r3, #1
 80009fc:	105b      	asrs	r3, r3, #1
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	4a39      	ldr	r2, [pc, #228]	; (8000ae8 <audio_task+0x110>)
 8000a02:	4413      	add	r3, r2
 8000a04:	60bb      	str	r3, [r7, #8]
			int16_t *dst = (int16_t*)mic_buf;
 8000a06:	4b39      	ldr	r3, [pc, #228]	; (8000aec <audio_task+0x114>)
 8000a08:	623b      	str	r3, [r7, #32]
			while (src < limit)
 8000a0a:	e018      	b.n	8000a3e <audio_task+0x66>
			{
				// Combine two channels into one
				int32_t left = *src++;
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0e:	1c9a      	adds	r2, r3, #2
 8000a10:	627a      	str	r2, [r7, #36]	; 0x24
 8000a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a16:	607b      	str	r3, [r7, #4]
				int32_t right = *src++;
 8000a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1a:	1c9a      	adds	r2, r3, #2
 8000a1c:	627a      	str	r2, [r7, #36]	; 0x24
 8000a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a22:	603b      	str	r3, [r7, #0]
				*dst++ = (int16_t) ((left >> 1) + (right >> 1));
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	105b      	asrs	r3, r3, #1
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	105b      	asrs	r3, r3, #1
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	4413      	add	r3, r2
 8000a32:	b299      	uxth	r1, r3
 8000a34:	6a3b      	ldr	r3, [r7, #32]
 8000a36:	1c9a      	adds	r2, r3, #2
 8000a38:	623a      	str	r2, [r7, #32]
 8000a3a:	b20a      	sxth	r2, r1
 8000a3c:	801a      	strh	r2, [r3, #0]
			while (src < limit)
 8000a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d3e2      	bcc.n	8000a0c <audio_task+0x34>
			}
			tud_audio_write((uint8_t *)mic_buf, (uint16_t) (spk_data_size / 2));
 8000a46:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <audio_task+0x108>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	da00      	bge.n	8000a50 <audio_task+0x78>
 8000a4e:	3301      	adds	r3, #1
 8000a50:	105b      	asrs	r3, r3, #1
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	4619      	mov	r1, r3
 8000a56:	4825      	ldr	r0, [pc, #148]	; (8000aec <audio_task+0x114>)
 8000a58:	f7ff fcaf 	bl	80003ba <tud_audio_write>
			spk_data_size = 0;
 8000a5c:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <audio_task+0x108>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
			tud_audio_write((uint8_t *)mic_buf, (uint16_t) (spk_data_size / 2));
			spk_data_size = 0;
		}
	}
#endif
}
 8000a62:	e039      	b.n	8000ad8 <audio_task+0x100>
		else if (current_resolution == 24)
 8000a64:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <audio_task+0x10c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b18      	cmp	r3, #24
 8000a6a:	d135      	bne.n	8000ad8 <audio_task+0x100>
			int32_t *src = spk_buf;
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <audio_task+0x110>)
 8000a6e:	61fb      	str	r3, [r7, #28]
			int32_t *limit = spk_buf + spk_data_size / 4;
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <audio_task+0x108>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	da00      	bge.n	8000a7a <audio_task+0xa2>
 8000a78:	3303      	adds	r3, #3
 8000a7a:	109b      	asrs	r3, r3, #2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	4a1a      	ldr	r2, [pc, #104]	; (8000ae8 <audio_task+0x110>)
 8000a80:	4413      	add	r3, r2
 8000a82:	617b      	str	r3, [r7, #20]
			int32_t *dst = mic_buf;
 8000a84:	4b19      	ldr	r3, [pc, #100]	; (8000aec <audio_task+0x114>)
 8000a86:	61bb      	str	r3, [r7, #24]
			while (src < limit)
 8000a88:	e014      	b.n	8000ab4 <audio_task+0xdc>
				int32_t left = *src++;
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	1d1a      	adds	r2, r3, #4
 8000a8e:	61fa      	str	r2, [r7, #28]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	613b      	str	r3, [r7, #16]
				int32_t right = *src++;
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	1d1a      	adds	r2, r3, #4
 8000a98:	61fa      	str	r2, [r7, #28]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	60fb      	str	r3, [r7, #12]
				*dst++ = (int32_t) ((uint32_t) ((left >> 1) + (right >> 1)) & 0xffffff00ul);
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	105a      	asrs	r2, r3, #1
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	105b      	asrs	r3, r3, #1
 8000aa6:	441a      	add	r2, r3
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	1d19      	adds	r1, r3, #4
 8000aac:	61b9      	str	r1, [r7, #24]
 8000aae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000ab2:	601a      	str	r2, [r3, #0]
			while (src < limit)
 8000ab4:	69fa      	ldr	r2, [r7, #28]
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d3e6      	bcc.n	8000a8a <audio_task+0xb2>
			tud_audio_write((uint8_t *)mic_buf, (uint16_t) (spk_data_size / 2));
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <audio_task+0x108>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	da00      	bge.n	8000ac6 <audio_task+0xee>
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	105b      	asrs	r3, r3, #1
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	4619      	mov	r1, r3
 8000acc:	4807      	ldr	r0, [pc, #28]	; (8000aec <audio_task+0x114>)
 8000ace:	f7ff fc74 	bl	80003ba <tud_audio_write>
			spk_data_size = 0;
 8000ad2:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <audio_task+0x108>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	24000ee0 	.word	0x24000ee0
 8000ae4:	24000ee4 	.word	0x24000ee4
 8000ae8:	240008d0 	.word	0x240008d0
 8000aec:	240005c8 	.word	0x240005c8

08000af0 <HAL_GPIO_EXTI_Callback>:

	//  board_led_write(led_state);
	led_state = 1 - led_state;
}

void  HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13) {
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b00:	d11a      	bne.n	8000b38 <HAL_GPIO_EXTI_Callback+0x48>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000b02:	2201      	movs	r2, #1
 8000b04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <HAL_GPIO_EXTI_Callback+0x50>)
 8000b0a:	f000 ff0d 	bl	8001928 <HAL_GPIO_WritePin>

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void)
{
  tud_task_ext(UINT32_MAX, false);
 8000b0e:	2100      	movs	r1, #0
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f006 fe18 	bl	8007748 <tud_task_ext>
}
 8000b18:	bf00      	nop
		tud_task();  //about 2.5 uSec
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b20:	4807      	ldr	r0, [pc, #28]	; (8000b40 <HAL_GPIO_EXTI_Callback+0x50>)
 8000b22:	f000 ff01 	bl	8001928 <HAL_GPIO_WritePin>
		audio_task();
 8000b26:	f7ff ff57 	bl	80009d8 <audio_task>
		cdc_task();
 8000b2a:	f7ff ff21 	bl	8000970 <cdc_task>
		TestGlobalVar++;
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_GPIO_EXTI_Callback+0x54>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	3301      	adds	r3, #1
 8000b34:	4a03      	ldr	r2, [pc, #12]	; (8000b44 <HAL_GPIO_EXTI_Callback+0x54>)
 8000b36:	6013      	str	r3, [r2, #0]
		//			AudioCounter = TestGlobalVar;
	}

}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	58020000 	.word	0x58020000
 8000b44:	24000ee8 	.word	0x24000ee8

08000b48 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b4e:	f000 fb7d 	bl	800124c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b52:	f000 f837 	bl	8000bc4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b56:	f000 f90d 	bl	8000d74 <MX_GPIO_Init>
	MX_USB_OTG_HS_PCD_Init();
 8000b5a:	f000 f8d9 	bl	8000d10 <MX_USB_OTG_HS_PCD_Init>
	MX_TIM6_Init();
 8000b5e:	f000 f8a1 	bl	8000ca4 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000b62:	2201      	movs	r2, #1
 8000b64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b68:	4814      	ldr	r0, [pc, #80]	; (8000bbc <main+0x74>)
 8000b6a:	f000 fedd 	bl	8001928 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000b6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b72:	f000 fbfd 	bl	8001370 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7c:	480f      	ldr	r0, [pc, #60]	; (8000bbc <main+0x74>)
 8000b7e:	f000 fed3 	bl	8001928 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000b82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b86:	f000 fbf3 	bl	8001370 <HAL_Delay>
	//  board_init();
	TU_ASSERT(tusb_init());
 8000b8a:	f009 feab 	bl	800a8e4 <tusb_init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	f083 0301 	eor.w	r3, r3, #1
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00a      	beq.n	8000bb0 <main+0x68>
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <main+0x78>)
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d000      	beq.n	8000bac <main+0x64>
 8000baa:	be00      	bkpt	0x0000
 8000bac:	2300      	movs	r3, #0
 8000bae:	e000      	b.n	8000bb2 <main+0x6a>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <main+0x68>
		TestGlobalVar++;
		AudioCounter = TestGlobalVar;
#endif
	}
	/* USER CODE END 3 */
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	58020000 	.word	0x58020000
 8000bc0:	e000edf0 	.word	0xe000edf0

08000bc4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b09c      	sub	sp, #112	; 0x70
 8000bc8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	224c      	movs	r2, #76	; 0x4c
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f009 fffc 	bl	800abd0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2220      	movs	r2, #32
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f009 fff6 	bl	800abd0 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000be4:	2002      	movs	r0, #2
 8000be6:	f001 f81b 	bl	8001c20 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bea:	2300      	movs	r3, #0
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	4b2c      	ldr	r3, [pc, #176]	; (8000ca0 <SystemClock_Config+0xdc>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	4a2b      	ldr	r2, [pc, #172]	; (8000ca0 <SystemClock_Config+0xdc>)
 8000bf4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bf8:	6193      	str	r3, [r2, #24]
 8000bfa:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <SystemClock_Config+0xdc>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c06:	bf00      	nop
 8000c08:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <SystemClock_Config+0xdc>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c14:	d1f8      	bne.n	8000c08 <SystemClock_Config+0x44>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000c16:	2321      	movs	r3, #33	; 0x21
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c1a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c20:	2301      	movs	r3, #1
 8000c22:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c24:	2302      	movs	r3, #2
 8000c26:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 8000c2c:	2305      	movs	r3, #5
 8000c2e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 100;
 8000c30:	2364      	movs	r3, #100	; 0x64
 8000c32:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8000c34:	2301      	movs	r3, #1
 8000c36:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c40:	2308      	movs	r3, #8
 8000c42:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c50:	4618      	mov	r0, r3
 8000c52:	f001 f82f 	bl	8001cb4 <HAL_RCC_OscConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8000c5c:	f000 f8f8 	bl	8000e50 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c60:	233f      	movs	r3, #63	; 0x3f
 8000c62:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c64:	2303      	movs	r3, #3
 8000c66:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c70:	2340      	movs	r3, #64	; 0x40
 8000c72:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c74:	2340      	movs	r3, #64	; 0x40
 8000c76:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c7c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c7e:	2340      	movs	r3, #64	; 0x40
 8000c80:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2103      	movs	r1, #3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 fbee 	bl	8002468 <HAL_RCC_ClockConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SystemClock_Config+0xd2>
	{
		Error_Handler();
 8000c92:	f000 f8dd 	bl	8000e50 <Error_Handler>
	}
}
 8000c96:	bf00      	nop
 8000c98:	3770      	adds	r7, #112	; 0x70
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	58024800 	.word	0x58024800

08000ca4 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MX_TIM6_Init+0x64>)
 8000cb6:	4a15      	ldr	r2, [pc, #84]	; (8000d0c <MX_TIM6_Init+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 250;
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <MX_TIM6_Init+0x64>)
 8000cbc:	22fa      	movs	r2, #250	; 0xfa
 8000cbe:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_TIM6_Init+0x64>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 50;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <MX_TIM6_Init+0x64>)
 8000cc8:	2232      	movs	r2, #50	; 0x32
 8000cca:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_TIM6_Init+0x64>)
 8000cce:	2280      	movs	r2, #128	; 0x80
 8000cd0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cd2:	480d      	ldr	r0, [pc, #52]	; (8000d08 <MX_TIM6_Init+0x64>)
 8000cd4:	f003 f9fc 	bl	80040d0 <HAL_TIM_Base_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM6_Init+0x3e>
	{
		Error_Handler();
 8000cde:	f000 f8b7 	bl	8000e50 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	4619      	mov	r1, r3
 8000cee:	4806      	ldr	r0, [pc, #24]	; (8000d08 <MX_TIM6_Init+0x64>)
 8000cf0:	f003 fc3c 	bl	800456c <HAL_TIMEx_MasterConfigSynchronization>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM6_Init+0x5a>
	{
		Error_Handler();
 8000cfa:	f000 f8a9 	bl	8000e50 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	24000064 	.word	0x24000064
 8000d0c:	40001000 	.word	0x40001000

08000d10 <MX_USB_OTG_HS_PCD_Init>:
 * @brief USB_OTG_HS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_HS_Init 0 */

	/* USER CODE BEGIN USB_OTG_HS_Init 1 */

	/* USER CODE END USB_OTG_HS_Init 1 */
	hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d16:	4a16      	ldr	r2, [pc, #88]	; (8000d70 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000d18:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d1c:	2209      	movs	r2, #9
 8000d1e:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d22:	2202      	movs	r2, #2
 8000d24:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d2e:	2202      	movs	r2, #2
 8000d30:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	631a      	str	r2, [r3, #48]	; 0x30
	hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d58:	f000 fe19 	bl	800198e <HAL_PCD_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USB_OTG_HS_PCD_Init+0x56>
	{
		Error_Handler();
 8000d62:	f000 f875 	bl	8000e50 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_HS_Init 2 */

	/* USER CODE END USB_OTG_HS_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	240000b0 	.word	0x240000b0
 8000d70:	40040000 	.word	0x40040000

08000d74 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 030c 	add.w	r3, r7, #12
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000d8a:	4b2e      	ldr	r3, [pc, #184]	; (8000e44 <MX_GPIO_Init+0xd0>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d90:	4a2c      	ldr	r2, [pc, #176]	; (8000e44 <MX_GPIO_Init+0xd0>)
 8000d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9a:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <MX_GPIO_Init+0xd0>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000da8:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <MX_GPIO_Init+0xd0>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dae:	4a25      	ldr	r2, [pc, #148]	; (8000e44 <MX_GPIO_Init+0xd0>)
 8000db0:	f043 0308 	orr.w	r3, r3, #8
 8000db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db8:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <MX_GPIO_Init+0xd0>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <MX_GPIO_Init+0xd0>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dcc:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <MX_GPIO_Init+0xd0>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <MX_GPIO_Init+0xd0>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dea:	4817      	ldr	r0, [pc, #92]	; (8000e48 <MX_GPIO_Init+0xd4>)
 8000dec:	f000 fd9c 	bl	8001928 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PD13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000df0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000df6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dfa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	4619      	mov	r1, r3
 8000e06:	4811      	ldr	r0, [pc, #68]	; (8000e4c <MX_GPIO_Init+0xd8>)
 8000e08:	f000 fbe6 	bl	80015d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e10:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	4619      	mov	r1, r3
 8000e24:	4808      	ldr	r0, [pc, #32]	; (8000e48 <MX_GPIO_Init+0xd4>)
 8000e26:	f000 fbd7 	bl	80015d8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2103      	movs	r1, #3
 8000e2e:	2028      	movs	r0, #40	; 0x28
 8000e30:	f000 fb9d 	bl	800156e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e34:	2028      	movs	r0, #40	; 0x28
 8000e36:	f000 fbb4 	bl	80015a2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000e3a:	bf00      	nop
 8000e3c:	3720      	adds	r7, #32
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	58024400 	.word	0x58024400
 8000e48:	58020000 	.word	0x58020000
 8000e4c:	58020c00 	.word	0x58020c00

08000e50 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e58:	e7fe      	b.n	8000e58 <Error_Handler+0x8>
	...

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_MspInit+0x30>)
 8000e64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e68:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <HAL_MspInit+0x30>)
 8000e6a:	f043 0302 	orr.w	r3, r3, #2
 8000e6e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_MspInit+0x30>)
 8000e74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	58024400 	.word	0x58024400

08000e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <HAL_TIM_Base_MspInit+0x48>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d116      	bne.n	8000ed0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_TIM_Base_MspInit+0x4c>)
 8000ea4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ea8:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <HAL_TIM_Base_MspInit+0x4c>)
 8000eaa:	f043 0310 	orr.w	r3, r3, #16
 8000eae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_TIM_Base_MspInit+0x4c>)
 8000eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eb8:	f003 0310 	and.w	r3, r3, #16
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 4, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	2036      	movs	r0, #54	; 0x36
 8000ec6:	f000 fb52 	bl	800156e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000eca:	2036      	movs	r0, #54	; 0x36
 8000ecc:	f000 fb69 	bl	80015a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40001000 	.word	0x40001000
 8000edc:	58024400 	.word	0x58024400

08000ee0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b0b2      	sub	sp, #200	; 0xc8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	22b8      	movs	r2, #184	; 0xb8
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f009 fe6d 	bl	800abd0 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a1a      	ldr	r2, [pc, #104]	; (8000f64 <HAL_PCD_MspInit+0x84>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d12c      	bne.n	8000f5a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f00:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f0c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000f10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f001 fdd5 	bl	8002ac8 <HAL_RCCEx_PeriphCLKConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8000f24:	f7ff ff94 	bl	8000e50 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f28:	f000 feb4 	bl	8001c94 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_PCD_MspInit+0x88>)
 8000f2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f32:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <HAL_PCD_MspInit+0x88>)
 8000f34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f38:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_PCD_MspInit+0x88>)
 8000f3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	204d      	movs	r0, #77	; 0x4d
 8000f50:	f000 fb0d 	bl	800156e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8000f54:	204d      	movs	r0, #77	; 0x4d
 8000f56:	f000 fb24 	bl	80015a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	37c8      	adds	r7, #200	; 0xc8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40040000 	.word	0x40040000
 8000f68:	58024400 	.word	0x58024400

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <NMI_Handler+0x4>

08000f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <MemManage_Handler+0x4>

08000f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb8:	f000 f9ba 	bl	8001330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000fc4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fc8:	f000 fcc7 	bl	800195a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

#if 1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fda:	480c      	ldr	r0, [pc, #48]	; (800100c <TIM6_DAC_IRQHandler+0x3c>)
 8000fdc:	f000 fca4 	bl	8001928 <HAL_GPIO_WritePin>
  tud_task_ext(UINT32_MAX, false);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe6:	f006 fbaf 	bl	8007748 <tud_task_ext>
}
 8000fea:	bf00      	nop
			tud_task();  //about 2.5 uSec when returns immediately, about 100 uSec every mSec, USB interrupt
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff2:	4806      	ldr	r0, [pc, #24]	; (800100c <TIM6_DAC_IRQHandler+0x3c>)
 8000ff4:	f000 fc98 	bl	8001928 <HAL_GPIO_WritePin>
			audio_task();
 8000ff8:	f7ff fcee 	bl	80009d8 <audio_task>
			cdc_task();
 8000ffc:	f7ff fcb8 	bl	8000970 <cdc_task>
//			TestGlobalVar++;
//			AudioCounter = TestGlobalVar;

#endif
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <TIM6_DAC_IRQHandler+0x40>)
 8001002:	f003 f8bc 	bl	800417e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	58020000 	.word	0x58020000
 8001010:	24000064 	.word	0x24000064

08001014 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
//			cdc_task();
//			TestGlobalVar++;
//			AudioCounter = TestGlobalVar;

#endif
			tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 8001018:	2000      	movs	r0, #0
 800101a:	f009 fb15 	bl	800a648 <dcd_int_handler>

			__HAL_GPIO_EXTI_GENERATE_SWIT(GPIO_PIN_13);
 800101e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001028:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800102c:	6093      	str	r3, [r2, #8]
	return;
 800102e:	bf00      	nop
  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
  /* USER CODE BEGIN OTG_HS_IRQn 1 */
  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001038:	4b32      	ldr	r3, [pc, #200]	; (8001104 <SystemInit+0xd0>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103e:	4a31      	ldr	r2, [pc, #196]	; (8001104 <SystemInit+0xd0>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001048:	4b2f      	ldr	r3, [pc, #188]	; (8001108 <SystemInit+0xd4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 030f 	and.w	r3, r3, #15
 8001050:	2b06      	cmp	r3, #6
 8001052:	d807      	bhi.n	8001064 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001054:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <SystemInit+0xd4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f023 030f 	bic.w	r3, r3, #15
 800105c:	4a2a      	ldr	r2, [pc, #168]	; (8001108 <SystemInit+0xd4>)
 800105e:	f043 0307 	orr.w	r3, r3, #7
 8001062:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001064:	4b29      	ldr	r3, [pc, #164]	; (800110c <SystemInit+0xd8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a28      	ldr	r2, [pc, #160]	; (800110c <SystemInit+0xd8>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001070:	4b26      	ldr	r3, [pc, #152]	; (800110c <SystemInit+0xd8>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <SystemInit+0xd8>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4924      	ldr	r1, [pc, #144]	; (800110c <SystemInit+0xd8>)
 800107c:	4b24      	ldr	r3, [pc, #144]	; (8001110 <SystemInit+0xdc>)
 800107e:	4013      	ands	r3, r2
 8001080:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <SystemInit+0xd4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <SystemInit+0xd4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f023 030f 	bic.w	r3, r3, #15
 8001096:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <SystemInit+0xd4>)
 8001098:	f043 0307 	orr.w	r3, r3, #7
 800109c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800109e:	4b1b      	ldr	r3, [pc, #108]	; (800110c <SystemInit+0xd8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010a4:	4b19      	ldr	r3, [pc, #100]	; (800110c <SystemInit+0xd8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <SystemInit+0xd8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <SystemInit+0xd8>)
 80010b2:	4a18      	ldr	r2, [pc, #96]	; (8001114 <SystemInit+0xe0>)
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <SystemInit+0xd8>)
 80010b8:	4a17      	ldr	r2, [pc, #92]	; (8001118 <SystemInit+0xe4>)
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <SystemInit+0xd8>)
 80010be:	4a17      	ldr	r2, [pc, #92]	; (800111c <SystemInit+0xe8>)
 80010c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <SystemInit+0xd8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010c8:	4b10      	ldr	r3, [pc, #64]	; (800110c <SystemInit+0xd8>)
 80010ca:	4a14      	ldr	r2, [pc, #80]	; (800111c <SystemInit+0xe8>)
 80010cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <SystemInit+0xd8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <SystemInit+0xd8>)
 80010d6:	4a11      	ldr	r2, [pc, #68]	; (800111c <SystemInit+0xe8>)
 80010d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <SystemInit+0xd8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <SystemInit+0xd8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a09      	ldr	r2, [pc, #36]	; (800110c <SystemInit+0xd8>)
 80010e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <SystemInit+0xd8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <SystemInit+0xec>)
 80010f4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80010f8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00
 8001108:	52002000 	.word	0x52002000
 800110c:	58024400 	.word	0x58024400
 8001110:	eaf6ed7f 	.word	0xeaf6ed7f
 8001114:	02020200 	.word	0x02020200
 8001118:	01ff0000 	.word	0x01ff0000
 800111c:	01010280 	.word	0x01010280
 8001120:	52004000 	.word	0x52004000

08001124 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
	return (uint8_t const *)&desc_device;
 8001128:	4b02      	ldr	r3, [pc, #8]	; (8001134 <tud_descriptor_device_cb+0x10>)
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	0800ac84 	.word	0x0800ac84

08001138 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
	(void)index; // for multiple configurations
	return desc_configuration;
 8001142:	4b03      	ldr	r3, [pc, #12]	; (8001150 <tud_descriptor_configuration_cb+0x18>)
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	0800ac98 	.word	0x0800ac98

08001154 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	460a      	mov	r2, r1
 800115e:	71fb      	strb	r3, [r7, #7]
 8001160:	4613      	mov	r3, r2
 8001162:	80bb      	strh	r3, [r7, #4]
	(void)langid;

	uint8_t chr_count;

	if (index == 0)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d108      	bne.n	800117c <tud_descriptor_string_cb+0x28>
	{
		memcpy(&_desc_str[1], string_desc_arr[0], 2);
 800116a:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <tud_descriptor_string_cb+0x9c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	b29a      	uxth	r2, r3
 8001172:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <tud_descriptor_string_cb+0xa0>)
 8001174:	805a      	strh	r2, [r3, #2]
		chr_count = 1;
 8001176:	2301      	movs	r3, #1
 8001178:	73fb      	strb	r3, [r7, #15]
 800117a:	e027      	b.n	80011cc <tud_descriptor_string_cb+0x78>
	}
	else
	{
		// Convert ASCII string into UTF-16

		if (!(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0]))) return NULL;
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	2b06      	cmp	r3, #6
 8001180:	d901      	bls.n	8001186 <tud_descriptor_string_cb+0x32>
 8001182:	2300      	movs	r3, #0
 8001184:	e030      	b.n	80011e8 <tud_descriptor_string_cb+0x94>

		const char* str = string_desc_arr[index];
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	4a19      	ldr	r2, [pc, #100]	; (80011f0 <tud_descriptor_string_cb+0x9c>)
 800118a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118e:	60bb      	str	r3, [r7, #8]

		// Cap at max char
		chr_count = (uint8_t) strlen(str);
 8001190:	68b8      	ldr	r0, [r7, #8]
 8001192:	f7ff f8bb 	bl	800030c <strlen>
 8001196:	4603      	mov	r3, r0
 8001198:	73fb      	strb	r3, [r7, #15]
		if (chr_count > 31) chr_count = 31;
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	2b1f      	cmp	r3, #31
 800119e:	d901      	bls.n	80011a4 <tud_descriptor_string_cb+0x50>
 80011a0:	231f      	movs	r3, #31
 80011a2:	73fb      	strb	r3, [r7, #15]

		for (uint8_t i = 0; i < chr_count; i++)
 80011a4:	2300      	movs	r3, #0
 80011a6:	73bb      	strb	r3, [r7, #14]
 80011a8:	e00c      	b.n	80011c4 <tud_descriptor_string_cb+0x70>
		{
			_desc_str[1 + i] = str[i];
 80011aa:	7bbb      	ldrb	r3, [r7, #14]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	4413      	add	r3, r2
 80011b0:	781a      	ldrb	r2, [r3, #0]
 80011b2:	7bbb      	ldrb	r3, [r7, #14]
 80011b4:	3301      	adds	r3, #1
 80011b6:	b291      	uxth	r1, r2
 80011b8:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <tud_descriptor_string_cb+0xa0>)
 80011ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < chr_count; i++)
 80011be:	7bbb      	ldrb	r3, [r7, #14]
 80011c0:	3301      	adds	r3, #1
 80011c2:	73bb      	strb	r3, [r7, #14]
 80011c4:	7bba      	ldrb	r2, [r7, #14]
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d3ee      	bcc.n	80011aa <tud_descriptor_string_cb+0x56>
		}
	}

	// first byte is length (including header), second byte is string type
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	3301      	adds	r3, #1
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	b21b      	sxth	r3, r3
 80011da:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80011de:	b21b      	sxth	r3, r3
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <tud_descriptor_string_cb+0xa0>)
 80011e4:	801a      	strh	r2, [r3, #0]

	return _desc_str;
 80011e6:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <tud_descriptor_string_cb+0xa0>)
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	24000014 	.word	0x24000014
 80011f4:	24000eec 	.word	0x24000eec

080011f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001230 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011fc:	f7ff ff1a 	bl	8001034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001202:	490d      	ldr	r1, [pc, #52]	; (8001238 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001218:	4c0a      	ldr	r4, [pc, #40]	; (8001244 <LoopFillZerobss+0x22>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001226:	f009 fca1 	bl	800ab6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122a:	f7ff fc8d 	bl	8000b48 <main>
  bx  lr
 800122e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001230:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001234:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001238:	24000048 	.word	0x24000048
  ldr r2, =_sidata
 800123c:	0800ae58 	.word	0x0800ae58
  ldr r2, =_sbss
 8001240:	24000048 	.word	0x24000048
  ldr r4, =_ebss
 8001244:	24001c74 	.word	0x24001c74

08001248 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC3_IRQHandler>
	...

0800124c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001252:	2003      	movs	r0, #3
 8001254:	f000 f980 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001258:	f001 fabc 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 800125c:	4602      	mov	r2, r0
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_Init+0x68>)
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	0a1b      	lsrs	r3, r3, #8
 8001264:	f003 030f 	and.w	r3, r3, #15
 8001268:	4913      	ldr	r1, [pc, #76]	; (80012b8 <HAL_Init+0x6c>)
 800126a:	5ccb      	ldrb	r3, [r1, r3]
 800126c:	f003 031f 	and.w	r3, r3, #31
 8001270:	fa22 f303 	lsr.w	r3, r2, r3
 8001274:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <HAL_Init+0x68>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <HAL_Init+0x6c>)
 8001280:	5cd3      	ldrb	r3, [r2, r3]
 8001282:	f003 031f 	and.w	r3, r3, #31
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	fa22 f303 	lsr.w	r3, r2, r3
 800128c:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <HAL_Init+0x70>)
 800128e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001290:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <HAL_Init+0x74>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001296:	200f      	movs	r0, #15
 8001298:	f000 f814 	bl	80012c4 <HAL_InitTick>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e002      	b.n	80012ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012a6:	f7ff fdd9 	bl	8000e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	58024400 	.word	0x58024400
 80012b8:	0800ac74 	.word	0x0800ac74
 80012bc:	24000010 	.word	0x24000010
 80012c0:	2400000c 	.word	0x2400000c

080012c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_InitTick+0x60>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d101      	bne.n	80012d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e021      	b.n	800131c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <HAL_InitTick+0x64>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_InitTick+0x60>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f965 	bl	80015be <HAL_SYSTICK_Config>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00e      	b.n	800131c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b0f      	cmp	r3, #15
 8001302:	d80a      	bhi.n	800131a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001304:	2200      	movs	r2, #0
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f000 f92f 	bl	800156e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001310:	4a06      	ldr	r2, [pc, #24]	; (800132c <HAL_InitTick+0x68>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e000      	b.n	800131c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	24000034 	.word	0x24000034
 8001328:	2400000c 	.word	0x2400000c
 800132c:	24000030 	.word	0x24000030

08001330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_IncTick+0x20>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_IncTick+0x24>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4413      	add	r3, r2
 8001340:	4a04      	ldr	r2, [pc, #16]	; (8001354 <HAL_IncTick+0x24>)
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	24000034 	.word	0x24000034
 8001354:	24000f2c 	.word	0x24000f2c

08001358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <HAL_GetTick+0x14>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	24000f2c 	.word	0x24000f2c

08001370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001378:	f7ff ffee 	bl	8001358 <HAL_GetTick>
 800137c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001388:	d005      	beq.n	8001396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_Delay+0x44>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4413      	add	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001396:	bf00      	nop
 8001398:	f7ff ffde 	bl	8001358 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d8f7      	bhi.n	8001398 <HAL_Delay+0x28>
  {
  }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	24000034 	.word	0x24000034

080013b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <__NVIC_SetPriorityGrouping+0x40>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d4:	4013      	ands	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <__NVIC_SetPriorityGrouping+0x40>)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	60d3      	str	r3, [r2, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00
 80013fc:	05fa0000 	.word	0x05fa0000

08001400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <__NVIC_GetPriorityGrouping+0x18>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	f003 0307 	and.w	r3, r3, #7
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142a:	2b00      	cmp	r3, #0
 800142c:	db0b      	blt.n	8001446 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	f003 021f 	and.w	r2, r3, #31
 8001434:	4907      	ldr	r1, [pc, #28]	; (8001454 <__NVIC_EnableIRQ+0x38>)
 8001436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143a:	095b      	lsrs	r3, r3, #5
 800143c:	2001      	movs	r0, #1
 800143e:	fa00 f202 	lsl.w	r2, r0, r2
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000e100 	.word	0xe000e100

08001458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001464:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001468:	2b00      	cmp	r3, #0
 800146a:	db0a      	blt.n	8001482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	490c      	ldr	r1, [pc, #48]	; (80014a4 <__NVIC_SetPriority+0x4c>)
 8001472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	440b      	add	r3, r1
 800147c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001480:	e00a      	b.n	8001498 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4908      	ldr	r1, [pc, #32]	; (80014a8 <__NVIC_SetPriority+0x50>)
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	3b04      	subs	r3, #4
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	440b      	add	r3, r1
 8001496:	761a      	strb	r2, [r3, #24]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000e100 	.word	0xe000e100
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	; 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f1c3 0307 	rsb	r3, r3, #7
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	bf28      	it	cs
 80014ca:	2304      	movcs	r3, #4
 80014cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3304      	adds	r3, #4
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d902      	bls.n	80014dc <NVIC_EncodePriority+0x30>
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3b03      	subs	r3, #3
 80014da:	e000      	b.n	80014de <NVIC_EncodePriority+0x32>
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	f04f 32ff 	mov.w	r2, #4294967295
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43da      	mvns	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	401a      	ands	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	43d9      	mvns	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	4313      	orrs	r3, r2
         );
}
 8001506:	4618      	mov	r0, r3
 8001508:	3724      	adds	r7, #36	; 0x24
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001524:	d301      	bcc.n	800152a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001526:	2301      	movs	r3, #1
 8001528:	e00f      	b.n	800154a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <SysTick_Config+0x40>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001532:	210f      	movs	r1, #15
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f7ff ff8e 	bl	8001458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <SysTick_Config+0x40>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <SysTick_Config+0x40>)
 8001544:	2207      	movs	r2, #7
 8001546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	e000e010 	.word	0xe000e010

08001558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ff29 	bl	80013b8 <__NVIC_SetPriorityGrouping>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800157c:	f7ff ff40 	bl	8001400 <__NVIC_GetPriorityGrouping>
 8001580:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	6978      	ldr	r0, [r7, #20]
 8001588:	f7ff ff90 	bl	80014ac <NVIC_EncodePriority>
 800158c:	4602      	mov	r2, r0
 800158e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001592:	4611      	mov	r1, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff5f 	bl	8001458 <__NVIC_SetPriority>
}
 800159a:	bf00      	nop
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff33 	bl	800141c <__NVIC_EnableIRQ>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ffa4 	bl	8001514 <SysTick_Config>
 80015cc:	4603      	mov	r3, r0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80015e6:	4b86      	ldr	r3, [pc, #536]	; (8001800 <HAL_GPIO_Init+0x228>)
 80015e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015ea:	e18c      	b.n	8001906 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 817e 	beq.w	8001900 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b01      	cmp	r3, #1
 800160e:	d005      	beq.n	800161c <HAL_GPIO_Init+0x44>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d130      	bne.n	800167e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2203      	movs	r2, #3
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001652:	2201      	movs	r2, #1
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	f003 0201 	and.w	r2, r3, #1
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	2b03      	cmp	r3, #3
 8001688:	d017      	beq.n	80016ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2203      	movs	r2, #3
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d123      	bne.n	800170e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	08da      	lsrs	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3208      	adds	r2, #8
 80016ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	220f      	movs	r2, #15
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	08da      	lsrs	r2, r3, #3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3208      	adds	r2, #8
 8001708:	69b9      	ldr	r1, [r7, #24]
 800170a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0203 	and.w	r2, r3, #3
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 80d8 	beq.w	8001900 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001750:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <HAL_GPIO_Init+0x22c>)
 8001752:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001756:	4a2b      	ldr	r2, [pc, #172]	; (8001804 <HAL_GPIO_Init+0x22c>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001760:	4b28      	ldr	r3, [pc, #160]	; (8001804 <HAL_GPIO_Init+0x22c>)
 8001762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800176e:	4a26      	ldr	r2, [pc, #152]	; (8001808 <HAL_GPIO_Init+0x230>)
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	3302      	adds	r3, #2
 8001776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	220f      	movs	r2, #15
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a1d      	ldr	r2, [pc, #116]	; (800180c <HAL_GPIO_Init+0x234>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d04a      	beq.n	8001830 <HAL_GPIO_Init+0x258>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a1c      	ldr	r2, [pc, #112]	; (8001810 <HAL_GPIO_Init+0x238>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d02b      	beq.n	80017fa <HAL_GPIO_Init+0x222>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a1b      	ldr	r2, [pc, #108]	; (8001814 <HAL_GPIO_Init+0x23c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d025      	beq.n	80017f6 <HAL_GPIO_Init+0x21e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a1a      	ldr	r2, [pc, #104]	; (8001818 <HAL_GPIO_Init+0x240>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d01f      	beq.n	80017f2 <HAL_GPIO_Init+0x21a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a19      	ldr	r2, [pc, #100]	; (800181c <HAL_GPIO_Init+0x244>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d019      	beq.n	80017ee <HAL_GPIO_Init+0x216>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a18      	ldr	r2, [pc, #96]	; (8001820 <HAL_GPIO_Init+0x248>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d013      	beq.n	80017ea <HAL_GPIO_Init+0x212>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a17      	ldr	r2, [pc, #92]	; (8001824 <HAL_GPIO_Init+0x24c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d00d      	beq.n	80017e6 <HAL_GPIO_Init+0x20e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a16      	ldr	r2, [pc, #88]	; (8001828 <HAL_GPIO_Init+0x250>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d007      	beq.n	80017e2 <HAL_GPIO_Init+0x20a>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a15      	ldr	r2, [pc, #84]	; (800182c <HAL_GPIO_Init+0x254>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d101      	bne.n	80017de <HAL_GPIO_Init+0x206>
 80017da:	2309      	movs	r3, #9
 80017dc:	e029      	b.n	8001832 <HAL_GPIO_Init+0x25a>
 80017de:	230a      	movs	r3, #10
 80017e0:	e027      	b.n	8001832 <HAL_GPIO_Init+0x25a>
 80017e2:	2307      	movs	r3, #7
 80017e4:	e025      	b.n	8001832 <HAL_GPIO_Init+0x25a>
 80017e6:	2306      	movs	r3, #6
 80017e8:	e023      	b.n	8001832 <HAL_GPIO_Init+0x25a>
 80017ea:	2305      	movs	r3, #5
 80017ec:	e021      	b.n	8001832 <HAL_GPIO_Init+0x25a>
 80017ee:	2304      	movs	r3, #4
 80017f0:	e01f      	b.n	8001832 <HAL_GPIO_Init+0x25a>
 80017f2:	2303      	movs	r3, #3
 80017f4:	e01d      	b.n	8001832 <HAL_GPIO_Init+0x25a>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e01b      	b.n	8001832 <HAL_GPIO_Init+0x25a>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e019      	b.n	8001832 <HAL_GPIO_Init+0x25a>
 80017fe:	bf00      	nop
 8001800:	58000080 	.word	0x58000080
 8001804:	58024400 	.word	0x58024400
 8001808:	58000400 	.word	0x58000400
 800180c:	58020000 	.word	0x58020000
 8001810:	58020400 	.word	0x58020400
 8001814:	58020800 	.word	0x58020800
 8001818:	58020c00 	.word	0x58020c00
 800181c:	58021000 	.word	0x58021000
 8001820:	58021400 	.word	0x58021400
 8001824:	58021800 	.word	0x58021800
 8001828:	58021c00 	.word	0x58021c00
 800182c:	58022400 	.word	0x58022400
 8001830:	2300      	movs	r3, #0
 8001832:	69fa      	ldr	r2, [r7, #28]
 8001834:	f002 0203 	and.w	r2, r2, #3
 8001838:	0092      	lsls	r2, r2, #2
 800183a:	4093      	lsls	r3, r2
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001842:	4938      	ldr	r1, [pc, #224]	; (8001924 <HAL_GPIO_Init+0x34c>)
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	3302      	adds	r3, #2
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001876:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800187e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80018a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	3301      	adds	r3, #1
 8001904:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	f47f ae6b 	bne.w	80015ec <HAL_GPIO_Init+0x14>
  }
}
 8001916:	bf00      	nop
 8001918:	bf00      	nop
 800191a:	3724      	adds	r7, #36	; 0x24
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	58000400 	.word	0x58000400

08001928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	807b      	strh	r3, [r7, #2]
 8001934:	4613      	mov	r3, r2
 8001936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001938:	787b      	ldrb	r3, [r7, #1]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800193e:	887a      	ldrh	r2, [r7, #2]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001944:	e003      	b.n	800194e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001946:	887b      	ldrh	r3, [r7, #2]
 8001948:	041a      	lsls	r2, r3, #16
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	619a      	str	r2, [r3, #24]
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001968:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800196c:	88fb      	ldrh	r3, [r7, #6]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d008      	beq.n	8001986 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001974:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff f8b5 	bl	8000af0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800198e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001990:	b08f      	sub	sp, #60	; 0x3c
 8001992:	af0a      	add	r7, sp, #40	; 0x28
 8001994:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e116      	b.n	8001bce <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d106      	bne.n	80019c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff fa90 	bl	8000ee0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2203      	movs	r2, #3
 80019c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 feec 	bl	80047bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	603b      	str	r3, [r7, #0]
 80019ea:	687e      	ldr	r6, [r7, #4]
 80019ec:	466d      	mov	r5, sp
 80019ee:	f106 0410 	add.w	r4, r6, #16
 80019f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a02:	1d33      	adds	r3, r6, #4
 8001a04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a06:	6838      	ldr	r0, [r7, #0]
 8001a08:	f002 fe6a 	bl	80046e0 <USB_CoreInit>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d005      	beq.n	8001a1e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2202      	movs	r2, #2
 8001a16:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e0d7      	b.n	8001bce <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2100      	movs	r1, #0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f002 feda 	bl	80047de <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73fb      	strb	r3, [r7, #15]
 8001a2e:	e04a      	b.n	8001ac6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a30:	7bfa      	ldrb	r2, [r7, #15]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4413      	add	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	333d      	adds	r3, #61	; 0x3d
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a44:	7bfa      	ldrb	r2, [r7, #15]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	333c      	adds	r3, #60	; 0x3c
 8001a54:	7bfa      	ldrb	r2, [r7, #15]
 8001a56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	b298      	uxth	r0, r3
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	3356      	adds	r3, #86	; 0x56
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a70:	7bfa      	ldrb	r2, [r7, #15]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	4413      	add	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	3340      	adds	r3, #64	; 0x40
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	3344      	adds	r3, #68	; 0x44
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3348      	adds	r3, #72	; 0x48
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001aac:	7bfa      	ldrb	r2, [r7, #15]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	334c      	adds	r3, #76	; 0x4c
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	73fb      	strb	r3, [r7, #15]
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d3af      	bcc.n	8001a30 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	73fb      	strb	r3, [r7, #15]
 8001ad4:	e044      	b.n	8001b60 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ad6:	7bfa      	ldrb	r2, [r7, #15]
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001afe:	7bfa      	ldrb	r2, [r7, #15]
 8001b00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b02:	7bfa      	ldrb	r2, [r7, #15]
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b18:	7bfa      	ldrb	r2, [r7, #15]
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b44:	7bfa      	ldrb	r2, [r7, #15]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	7bfa      	ldrb	r2, [r7, #15]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d3b5      	bcc.n	8001ad6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	687e      	ldr	r6, [r7, #4]
 8001b72:	466d      	mov	r5, sp
 8001b74:	f106 0410 	add.w	r4, r6, #16
 8001b78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b84:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b88:	1d33      	adds	r3, r6, #4
 8001b8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b8c:	6838      	ldr	r0, [r7, #0]
 8001b8e:	f002 fe73 	bl	8004878 <USB_DevInit>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e014      	b.n	8001bce <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d102      	bne.n	8001bc2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f80b 	bl	8001bd8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 f831 	bl	8004c2e <USB_DevDisconnect>

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001bd8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_PCDEx_ActivateLPM+0x44>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	10000003 	.word	0x10000003

08001c20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <HAL_PWREx_ConfigSupply+0x70>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d00a      	beq.n	8001c4a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c34:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <HAL_PWREx_ConfigSupply+0x70>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d001      	beq.n	8001c46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e01f      	b.n	8001c86 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e01d      	b.n	8001c86 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <HAL_PWREx_ConfigSupply+0x70>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f023 0207 	bic.w	r2, r3, #7
 8001c52:	490f      	ldr	r1, [pc, #60]	; (8001c90 <HAL_PWREx_ConfigSupply+0x70>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001c5a:	f7ff fb7d 	bl	8001358 <HAL_GetTick>
 8001c5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c60:	e009      	b.n	8001c76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c62:	f7ff fb79 	bl	8001358 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c70:	d901      	bls.n	8001c76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e007      	b.n	8001c86 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_PWREx_ConfigSupply+0x70>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c82:	d1ee      	bne.n	8001c62 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	58024800 	.word	0x58024800

08001c94 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ca2:	60d3      	str	r3, [r2, #12]
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	58024800 	.word	0x58024800

08001cb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08c      	sub	sp, #48	; 0x30
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e3c8      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 8087 	beq.w	8001de2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd4:	4b88      	ldr	r3, [pc, #544]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cde:	4b86      	ldr	r3, [pc, #536]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce6:	2b10      	cmp	r3, #16
 8001ce8:	d007      	beq.n	8001cfa <HAL_RCC_OscConfig+0x46>
 8001cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cec:	2b18      	cmp	r3, #24
 8001cee:	d110      	bne.n	8001d12 <HAL_RCC_OscConfig+0x5e>
 8001cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d10b      	bne.n	8001d12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfa:	4b7f      	ldr	r3, [pc, #508]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d06c      	beq.n	8001de0 <HAL_RCC_OscConfig+0x12c>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d168      	bne.n	8001de0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e3a2      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1a:	d106      	bne.n	8001d2a <HAL_RCC_OscConfig+0x76>
 8001d1c:	4b76      	ldr	r3, [pc, #472]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a75      	ldr	r2, [pc, #468]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	e02e      	b.n	8001d88 <HAL_RCC_OscConfig+0xd4>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x98>
 8001d32:	4b71      	ldr	r3, [pc, #452]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a70      	ldr	r2, [pc, #448]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	4b6e      	ldr	r3, [pc, #440]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a6d      	ldr	r2, [pc, #436]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e01d      	b.n	8001d88 <HAL_RCC_OscConfig+0xd4>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d54:	d10c      	bne.n	8001d70 <HAL_RCC_OscConfig+0xbc>
 8001d56:	4b68      	ldr	r3, [pc, #416]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a67      	ldr	r2, [pc, #412]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	4b65      	ldr	r3, [pc, #404]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a64      	ldr	r2, [pc, #400]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e00b      	b.n	8001d88 <HAL_RCC_OscConfig+0xd4>
 8001d70:	4b61      	ldr	r3, [pc, #388]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a60      	ldr	r2, [pc, #384]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	4b5e      	ldr	r3, [pc, #376]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a5d      	ldr	r2, [pc, #372]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d013      	beq.n	8001db8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d90:	f7ff fae2 	bl	8001358 <HAL_GetTick>
 8001d94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff fade 	bl	8001358 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	; 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e356      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001daa:	4b53      	ldr	r3, [pc, #332]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0xe4>
 8001db6:	e014      	b.n	8001de2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7ff face 	bl	8001358 <HAL_GetTick>
 8001dbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc0:	f7ff faca 	bl	8001358 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	; 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e342      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dd2:	4b49      	ldr	r3, [pc, #292]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x10c>
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 808c 	beq.w	8001f08 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df0:	4b41      	ldr	r3, [pc, #260]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001df8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dfa:	4b3f      	ldr	r3, [pc, #252]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d007      	beq.n	8001e16 <HAL_RCC_OscConfig+0x162>
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	2b18      	cmp	r3, #24
 8001e0a:	d137      	bne.n	8001e7c <HAL_RCC_OscConfig+0x1c8>
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d132      	bne.n	8001e7c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e16:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <HAL_RCC_OscConfig+0x17a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e314      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e2e:	4b32      	ldr	r3, [pc, #200]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 0219 	bic.w	r2, r3, #25
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	492f      	ldr	r1, [pc, #188]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7ff fa8a 	bl	8001358 <HAL_GetTick>
 8001e44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e48:	f7ff fa86 	bl	8001358 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e2fe      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e5a:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e66:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	061b      	lsls	r3, r3, #24
 8001e74:	4920      	ldr	r1, [pc, #128]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e7a:	e045      	b.n	8001f08 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d026      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e84:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f023 0219 	bic.w	r2, r3, #25
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4919      	ldr	r1, [pc, #100]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7ff fa5f 	bl	8001358 <HAL_GetTick>
 8001e9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9e:	f7ff fa5b 	bl	8001358 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e2d3      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f0      	beq.n	8001e9e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	061b      	lsls	r3, r3, #24
 8001eca:	490b      	ldr	r1, [pc, #44]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]
 8001ed0:	e01a      	b.n	8001f08 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ede:	f7ff fa3b 	bl	8001358 <HAL_GetTick>
 8001ee2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ee4:	e00a      	b.n	8001efc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee6:	f7ff fa37 	bl	8001358 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d903      	bls.n	8001efc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e2af      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
 8001ef8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001efc:	4b96      	ldr	r3, [pc, #600]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1ee      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d06a      	beq.n	8001fea <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f14:	4b90      	ldr	r3, [pc, #576]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f1c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f1e:	4b8e      	ldr	r3, [pc, #568]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 8001f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f22:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d007      	beq.n	8001f3a <HAL_RCC_OscConfig+0x286>
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	2b18      	cmp	r3, #24
 8001f2e:	d11b      	bne.n	8001f68 <HAL_RCC_OscConfig+0x2b4>
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d116      	bne.n	8001f68 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f3a:	4b87      	ldr	r3, [pc, #540]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <HAL_RCC_OscConfig+0x29e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	2b80      	cmp	r3, #128	; 0x80
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e282      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f52:	4b81      	ldr	r3, [pc, #516]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	061b      	lsls	r3, r3, #24
 8001f60:	497d      	ldr	r1, [pc, #500]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f66:	e040      	b.n	8001fea <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d023      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f70:	4b79      	ldr	r3, [pc, #484]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a78      	ldr	r2, [pc, #480]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 8001f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7ff f9ec 	bl	8001358 <HAL_GetTick>
 8001f80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f84:	f7ff f9e8 	bl	8001358 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e260      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f96:	4b70      	ldr	r3, [pc, #448]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fa2:	4b6d      	ldr	r3, [pc, #436]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	061b      	lsls	r3, r3, #24
 8001fb0:	4969      	ldr	r1, [pc, #420]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	60cb      	str	r3, [r1, #12]
 8001fb6:	e018      	b.n	8001fea <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001fb8:	4b67      	ldr	r3, [pc, #412]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a66      	ldr	r2, [pc, #408]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 8001fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7ff f9c8 	bl	8001358 <HAL_GetTick>
 8001fc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001fcc:	f7ff f9c4 	bl	8001358 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e23c      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fde:	4b5e      	ldr	r3, [pc, #376]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d036      	beq.n	8002064 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d019      	beq.n	8002032 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffe:	4b56      	ldr	r3, [pc, #344]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 8002000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002002:	4a55      	ldr	r2, [pc, #340]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200a:	f7ff f9a5 	bl	8001358 <HAL_GetTick>
 800200e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002012:	f7ff f9a1 	bl	8001358 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e219      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002024:	4b4c      	ldr	r3, [pc, #304]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 8002026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x35e>
 8002030:	e018      	b.n	8002064 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002032:	4b49      	ldr	r3, [pc, #292]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 8002034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002036:	4a48      	ldr	r2, [pc, #288]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203e:	f7ff f98b 	bl	8001358 <HAL_GetTick>
 8002042:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002046:	f7ff f987 	bl	8001358 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e1ff      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002058:	4b3f      	ldr	r3, [pc, #252]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 800205a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f0      	bne.n	8002046 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b00      	cmp	r3, #0
 800206e:	d036      	beq.n	80020de <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d019      	beq.n	80020ac <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002078:	4b37      	ldr	r3, [pc, #220]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a36      	ldr	r2, [pc, #216]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 800207e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002082:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002084:	f7ff f968 	bl	8001358 <HAL_GetTick>
 8002088:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800208c:	f7ff f964 	bl	8001358 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e1dc      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800209e:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x3d8>
 80020aa:	e018      	b.n	80020de <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020ac:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a29      	ldr	r2, [pc, #164]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 80020b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020b8:	f7ff f94e 	bl	8001358 <HAL_GetTick>
 80020bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020c0:	f7ff f94a 	bl	8001358 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e1c2      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020d2:	4b21      	ldr	r3, [pc, #132]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8086 	beq.w	80021f8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020ec:	4b1b      	ldr	r3, [pc, #108]	; (800215c <HAL_RCC_OscConfig+0x4a8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1a      	ldr	r2, [pc, #104]	; (800215c <HAL_RCC_OscConfig+0x4a8>)
 80020f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020f8:	f7ff f92e 	bl	8001358 <HAL_GetTick>
 80020fc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002100:	f7ff f92a 	bl	8001358 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b64      	cmp	r3, #100	; 0x64
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e1a2      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002112:	4b12      	ldr	r3, [pc, #72]	; (800215c <HAL_RCC_OscConfig+0x4a8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d106      	bne.n	8002134 <HAL_RCC_OscConfig+0x480>
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 8002128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212a:	4a0b      	ldr	r2, [pc, #44]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6713      	str	r3, [r2, #112]	; 0x70
 8002132:	e032      	b.n	800219a <HAL_RCC_OscConfig+0x4e6>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d111      	bne.n	8002160 <HAL_RCC_OscConfig+0x4ac>
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002140:	4a05      	ldr	r2, [pc, #20]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 8002142:	f023 0301 	bic.w	r3, r3, #1
 8002146:	6713      	str	r3, [r2, #112]	; 0x70
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 800214a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214c:	4a02      	ldr	r2, [pc, #8]	; (8002158 <HAL_RCC_OscConfig+0x4a4>)
 800214e:	f023 0304 	bic.w	r3, r3, #4
 8002152:	6713      	str	r3, [r2, #112]	; 0x70
 8002154:	e021      	b.n	800219a <HAL_RCC_OscConfig+0x4e6>
 8002156:	bf00      	nop
 8002158:	58024400 	.word	0x58024400
 800215c:	58024800 	.word	0x58024800
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b05      	cmp	r3, #5
 8002166:	d10c      	bne.n	8002182 <HAL_RCC_OscConfig+0x4ce>
 8002168:	4b83      	ldr	r3, [pc, #524]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216c:	4a82      	ldr	r2, [pc, #520]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	6713      	str	r3, [r2, #112]	; 0x70
 8002174:	4b80      	ldr	r3, [pc, #512]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	4a7f      	ldr	r2, [pc, #508]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6713      	str	r3, [r2, #112]	; 0x70
 8002180:	e00b      	b.n	800219a <HAL_RCC_OscConfig+0x4e6>
 8002182:	4b7d      	ldr	r3, [pc, #500]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002186:	4a7c      	ldr	r2, [pc, #496]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 8002188:	f023 0301 	bic.w	r3, r3, #1
 800218c:	6713      	str	r3, [r2, #112]	; 0x70
 800218e:	4b7a      	ldr	r3, [pc, #488]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	4a79      	ldr	r2, [pc, #484]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 8002194:	f023 0304 	bic.w	r3, r3, #4
 8002198:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d015      	beq.n	80021ce <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a2:	f7ff f8d9 	bl	8001358 <HAL_GetTick>
 80021a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021a8:	e00a      	b.n	80021c0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021aa:	f7ff f8d5 	bl	8001358 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e14b      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021c0:	4b6d      	ldr	r3, [pc, #436]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0ee      	beq.n	80021aa <HAL_RCC_OscConfig+0x4f6>
 80021cc:	e014      	b.n	80021f8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ce:	f7ff f8c3 	bl	8001358 <HAL_GetTick>
 80021d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7ff f8bf 	bl	8001358 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e135      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021ec:	4b62      	ldr	r3, [pc, #392]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1ee      	bne.n	80021d6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 812a 	beq.w	8002456 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002202:	4b5d      	ldr	r3, [pc, #372]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800220a:	2b18      	cmp	r3, #24
 800220c:	f000 80ba 	beq.w	8002384 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	2b02      	cmp	r3, #2
 8002216:	f040 8095 	bne.w	8002344 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221a:	4b57      	ldr	r3, [pc, #348]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a56      	ldr	r2, [pc, #344]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 8002220:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002226:	f7ff f897 	bl	8001358 <HAL_GetTick>
 800222a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222e:	f7ff f893 	bl	8001358 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e10b      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002240:	4b4d      	ldr	r3, [pc, #308]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f0      	bne.n	800222e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800224c:	4b4a      	ldr	r3, [pc, #296]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 800224e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002250:	4b4a      	ldr	r3, [pc, #296]	; (800237c <HAL_RCC_OscConfig+0x6c8>)
 8002252:	4013      	ands	r3, r2
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800225c:	0112      	lsls	r2, r2, #4
 800225e:	430a      	orrs	r2, r1
 8002260:	4945      	ldr	r1, [pc, #276]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 8002262:	4313      	orrs	r3, r2
 8002264:	628b      	str	r3, [r1, #40]	; 0x28
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	3b01      	subs	r3, #1
 800226c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002274:	3b01      	subs	r3, #1
 8002276:	025b      	lsls	r3, r3, #9
 8002278:	b29b      	uxth	r3, r3
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002280:	3b01      	subs	r3, #1
 8002282:	041b      	lsls	r3, r3, #16
 8002284:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228e:	3b01      	subs	r3, #1
 8002290:	061b      	lsls	r3, r3, #24
 8002292:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002296:	4938      	ldr	r1, [pc, #224]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 8002298:	4313      	orrs	r3, r2
 800229a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800229c:	4b36      	ldr	r3, [pc, #216]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	4a35      	ldr	r2, [pc, #212]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 80022a2:	f023 0301 	bic.w	r3, r3, #1
 80022a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022a8:	4b33      	ldr	r3, [pc, #204]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 80022aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ac:	4b34      	ldr	r3, [pc, #208]	; (8002380 <HAL_RCC_OscConfig+0x6cc>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022b4:	00d2      	lsls	r2, r2, #3
 80022b6:	4930      	ldr	r1, [pc, #192]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80022bc:	4b2e      	ldr	r3, [pc, #184]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	f023 020c 	bic.w	r2, r3, #12
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	492b      	ldr	r1, [pc, #172]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80022ce:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	f023 0202 	bic.w	r2, r3, #2
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	4927      	ldr	r1, [pc, #156]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80022e0:	4b25      	ldr	r3, [pc, #148]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	4a24      	ldr	r2, [pc, #144]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 80022e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022ec:	4b22      	ldr	r3, [pc, #136]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	4a21      	ldr	r2, [pc, #132]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 80022f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80022f8:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	4a1e      	ldr	r2, [pc, #120]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 80022fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002302:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002304:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	4a1b      	ldr	r2, [pc, #108]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a18      	ldr	r2, [pc, #96]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 8002316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800231a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7ff f81c 	bl	8001358 <HAL_GetTick>
 8002320:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002324:	f7ff f818 	bl	8001358 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e090      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x670>
 8002342:	e088      	b.n	8002456 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 800234a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800234e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7ff f802 	bl	8001358 <HAL_GetTick>
 8002354:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002358:	f7fe fffe 	bl	8001358 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e076      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800236a:	4b03      	ldr	r3, [pc, #12]	; (8002378 <HAL_RCC_OscConfig+0x6c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x6a4>
 8002376:	e06e      	b.n	8002456 <HAL_RCC_OscConfig+0x7a2>
 8002378:	58024400 	.word	0x58024400
 800237c:	fffffc0c 	.word	0xfffffc0c
 8002380:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002384:	4b36      	ldr	r3, [pc, #216]	; (8002460 <HAL_RCC_OscConfig+0x7ac>)
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800238a:	4b35      	ldr	r3, [pc, #212]	; (8002460 <HAL_RCC_OscConfig+0x7ac>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	2b01      	cmp	r3, #1
 8002396:	d031      	beq.n	80023fc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f003 0203 	and.w	r2, r3, #3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d12a      	bne.n	80023fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	091b      	lsrs	r3, r3, #4
 80023aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d122      	bne.n	80023fc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d11a      	bne.n	80023fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	0a5b      	lsrs	r3, r3, #9
 80023ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d111      	bne.n	80023fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	0c1b      	lsrs	r3, r3, #16
 80023dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d108      	bne.n	80023fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	0e1b      	lsrs	r3, r3, #24
 80023ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e02b      	b.n	8002458 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002400:	4b17      	ldr	r3, [pc, #92]	; (8002460 <HAL_RCC_OscConfig+0x7ac>)
 8002402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002404:	08db      	lsrs	r3, r3, #3
 8002406:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800240a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	429a      	cmp	r2, r3
 8002414:	d01f      	beq.n	8002456 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_RCC_OscConfig+0x7ac>)
 8002418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241a:	4a11      	ldr	r2, [pc, #68]	; (8002460 <HAL_RCC_OscConfig+0x7ac>)
 800241c:	f023 0301 	bic.w	r3, r3, #1
 8002420:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002422:	f7fe ff99 	bl	8001358 <HAL_GetTick>
 8002426:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002428:	bf00      	nop
 800242a:	f7fe ff95 	bl	8001358 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	4293      	cmp	r3, r2
 8002434:	d0f9      	beq.n	800242a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <HAL_RCC_OscConfig+0x7ac>)
 8002438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_RCC_OscConfig+0x7b0>)
 800243c:	4013      	ands	r3, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002442:	00d2      	lsls	r2, r2, #3
 8002444:	4906      	ldr	r1, [pc, #24]	; (8002460 <HAL_RCC_OscConfig+0x7ac>)
 8002446:	4313      	orrs	r3, r2
 8002448:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800244a:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_RCC_OscConfig+0x7ac>)
 800244c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244e:	4a04      	ldr	r2, [pc, #16]	; (8002460 <HAL_RCC_OscConfig+0x7ac>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3730      	adds	r7, #48	; 0x30
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	58024400 	.word	0x58024400
 8002464:	ffff0007 	.word	0xffff0007

08002468 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e19c      	b.n	80027b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800247c:	4b8a      	ldr	r3, [pc, #552]	; (80026a8 <HAL_RCC_ClockConfig+0x240>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 030f 	and.w	r3, r3, #15
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d910      	bls.n	80024ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b87      	ldr	r3, [pc, #540]	; (80026a8 <HAL_RCC_ClockConfig+0x240>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 020f 	bic.w	r2, r3, #15
 8002492:	4985      	ldr	r1, [pc, #532]	; (80026a8 <HAL_RCC_ClockConfig+0x240>)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b83      	ldr	r3, [pc, #524]	; (80026a8 <HAL_RCC_ClockConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e184      	b.n	80027b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d010      	beq.n	80024da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	4b7b      	ldr	r3, [pc, #492]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d908      	bls.n	80024da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024c8:	4b78      	ldr	r3, [pc, #480]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	4975      	ldr	r1, [pc, #468]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d010      	beq.n	8002508 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	4b70      	ldr	r3, [pc, #448]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d908      	bls.n	8002508 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024f6:	4b6d      	ldr	r3, [pc, #436]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	496a      	ldr	r1, [pc, #424]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002504:	4313      	orrs	r3, r2
 8002506:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	2b00      	cmp	r3, #0
 8002512:	d010      	beq.n	8002536 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699a      	ldr	r2, [r3, #24]
 8002518:	4b64      	ldr	r3, [pc, #400]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002520:	429a      	cmp	r2, r3
 8002522:	d908      	bls.n	8002536 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002524:	4b61      	ldr	r3, [pc, #388]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	495e      	ldr	r1, [pc, #376]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002532:	4313      	orrs	r3, r2
 8002534:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	2b00      	cmp	r3, #0
 8002540:	d010      	beq.n	8002564 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69da      	ldr	r2, [r3, #28]
 8002546:	4b59      	ldr	r3, [pc, #356]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800254e:	429a      	cmp	r2, r3
 8002550:	d908      	bls.n	8002564 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002552:	4b56      	ldr	r3, [pc, #344]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	4953      	ldr	r1, [pc, #332]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002560:	4313      	orrs	r3, r2
 8002562:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d010      	beq.n	8002592 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	4b4d      	ldr	r3, [pc, #308]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	429a      	cmp	r2, r3
 800257e:	d908      	bls.n	8002592 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002580:	4b4a      	ldr	r3, [pc, #296]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f023 020f 	bic.w	r2, r3, #15
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4947      	ldr	r1, [pc, #284]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 800258e:	4313      	orrs	r3, r2
 8002590:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d055      	beq.n	800264a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800259e:	4b43      	ldr	r3, [pc, #268]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	4940      	ldr	r1, [pc, #256]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d107      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025b8:	4b3c      	ldr	r3, [pc, #240]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d121      	bne.n	8002608 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0f6      	b.n	80027b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d107      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025d0:	4b36      	ldr	r3, [pc, #216]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d115      	bne.n	8002608 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0ea      	b.n	80027b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d107      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025e8:	4b30      	ldr	r3, [pc, #192]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d109      	bne.n	8002608 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0de      	b.n	80027b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025f8:	4b2c      	ldr	r3, [pc, #176]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0d6      	b.n	80027b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002608:	4b28      	ldr	r3, [pc, #160]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f023 0207 	bic.w	r2, r3, #7
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4925      	ldr	r1, [pc, #148]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002616:	4313      	orrs	r3, r2
 8002618:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800261a:	f7fe fe9d 	bl	8001358 <HAL_GetTick>
 800261e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002620:	e00a      	b.n	8002638 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002622:	f7fe fe99 	bl	8001358 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e0be      	b.n	80027b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002638:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	429a      	cmp	r2, r3
 8002648:	d1eb      	bne.n	8002622 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d010      	beq.n	8002678 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	4b14      	ldr	r3, [pc, #80]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	429a      	cmp	r2, r3
 8002664:	d208      	bcs.n	8002678 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002666:	4b11      	ldr	r3, [pc, #68]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f023 020f 	bic.w	r2, r3, #15
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	490e      	ldr	r1, [pc, #56]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002674:	4313      	orrs	r3, r2
 8002676:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_RCC_ClockConfig+0x240>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 030f 	and.w	r3, r3, #15
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d214      	bcs.n	80026b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <HAL_RCC_ClockConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 020f 	bic.w	r2, r3, #15
 800268e:	4906      	ldr	r1, [pc, #24]	; (80026a8 <HAL_RCC_ClockConfig+0x240>)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <HAL_RCC_ClockConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e086      	b.n	80027b6 <HAL_RCC_ClockConfig+0x34e>
 80026a8:	52002000 	.word	0x52002000
 80026ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d010      	beq.n	80026de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	4b3f      	ldr	r3, [pc, #252]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d208      	bcs.n	80026de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026cc:	4b3c      	ldr	r3, [pc, #240]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	4939      	ldr	r1, [pc, #228]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d010      	beq.n	800270c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	4b34      	ldr	r3, [pc, #208]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d208      	bcs.n	800270c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026fa:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	492e      	ldr	r1, [pc, #184]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 8002708:	4313      	orrs	r3, r2
 800270a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	2b00      	cmp	r3, #0
 8002716:	d010      	beq.n	800273a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699a      	ldr	r2, [r3, #24]
 800271c:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002724:	429a      	cmp	r2, r3
 8002726:	d208      	bcs.n	800273a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002728:	4b25      	ldr	r3, [pc, #148]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	4922      	ldr	r1, [pc, #136]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 8002736:	4313      	orrs	r3, r2
 8002738:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b00      	cmp	r3, #0
 8002744:	d010      	beq.n	8002768 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69da      	ldr	r2, [r3, #28]
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002752:	429a      	cmp	r2, r3
 8002754:	d208      	bcs.n	8002768 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002756:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	4917      	ldr	r1, [pc, #92]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 8002764:	4313      	orrs	r3, r2
 8002766:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002768:	f000 f834 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 800276c:	4602      	mov	r2, r0
 800276e:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	0a1b      	lsrs	r3, r3, #8
 8002774:	f003 030f 	and.w	r3, r3, #15
 8002778:	4912      	ldr	r1, [pc, #72]	; (80027c4 <HAL_RCC_ClockConfig+0x35c>)
 800277a:	5ccb      	ldrb	r3, [r1, r3]
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	fa22 f303 	lsr.w	r3, r2, r3
 8002784:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002786:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	4a0d      	ldr	r2, [pc, #52]	; (80027c4 <HAL_RCC_ClockConfig+0x35c>)
 8002790:	5cd3      	ldrb	r3, [r2, r3]
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
 800279c:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <HAL_RCC_ClockConfig+0x360>)
 800279e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027a0:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <HAL_RCC_ClockConfig+0x364>)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_RCC_ClockConfig+0x368>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe fd8a 	bl	80012c4 <HAL_InitTick>
 80027b0:	4603      	mov	r3, r0
 80027b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	58024400 	.word	0x58024400
 80027c4:	0800ac74 	.word	0x0800ac74
 80027c8:	24000010 	.word	0x24000010
 80027cc:	2400000c 	.word	0x2400000c
 80027d0:	24000030 	.word	0x24000030

080027d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	; 0x24
 80027d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027da:	4bb3      	ldr	r3, [pc, #716]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027e2:	2b18      	cmp	r3, #24
 80027e4:	f200 8155 	bhi.w	8002a92 <HAL_RCC_GetSysClockFreq+0x2be>
 80027e8:	a201      	add	r2, pc, #4	; (adr r2, 80027f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80027ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ee:	bf00      	nop
 80027f0:	08002855 	.word	0x08002855
 80027f4:	08002a93 	.word	0x08002a93
 80027f8:	08002a93 	.word	0x08002a93
 80027fc:	08002a93 	.word	0x08002a93
 8002800:	08002a93 	.word	0x08002a93
 8002804:	08002a93 	.word	0x08002a93
 8002808:	08002a93 	.word	0x08002a93
 800280c:	08002a93 	.word	0x08002a93
 8002810:	0800287b 	.word	0x0800287b
 8002814:	08002a93 	.word	0x08002a93
 8002818:	08002a93 	.word	0x08002a93
 800281c:	08002a93 	.word	0x08002a93
 8002820:	08002a93 	.word	0x08002a93
 8002824:	08002a93 	.word	0x08002a93
 8002828:	08002a93 	.word	0x08002a93
 800282c:	08002a93 	.word	0x08002a93
 8002830:	08002881 	.word	0x08002881
 8002834:	08002a93 	.word	0x08002a93
 8002838:	08002a93 	.word	0x08002a93
 800283c:	08002a93 	.word	0x08002a93
 8002840:	08002a93 	.word	0x08002a93
 8002844:	08002a93 	.word	0x08002a93
 8002848:	08002a93 	.word	0x08002a93
 800284c:	08002a93 	.word	0x08002a93
 8002850:	08002887 	.word	0x08002887
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002854:	4b94      	ldr	r3, [pc, #592]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b00      	cmp	r3, #0
 800285e:	d009      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002860:	4b91      	ldr	r3, [pc, #580]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	08db      	lsrs	r3, r3, #3
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	4a90      	ldr	r2, [pc, #576]	; (8002aac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800286c:	fa22 f303 	lsr.w	r3, r2, r3
 8002870:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002872:	e111      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002874:	4b8d      	ldr	r3, [pc, #564]	; (8002aac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002876:	61bb      	str	r3, [r7, #24]
      break;
 8002878:	e10e      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800287a:	4b8d      	ldr	r3, [pc, #564]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800287c:	61bb      	str	r3, [r7, #24]
      break;
 800287e:	e10b      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002880:	4b8c      	ldr	r3, [pc, #560]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002882:	61bb      	str	r3, [r7, #24]
      break;
 8002884:	e108      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002886:	4b88      	ldr	r3, [pc, #544]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002890:	4b85      	ldr	r3, [pc, #532]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800289a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800289c:	4b82      	ldr	r3, [pc, #520]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80028a6:	4b80      	ldr	r3, [pc, #512]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028aa:	08db      	lsrs	r3, r3, #3
 80028ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	ee07 3a90 	vmov	s15, r3
 80028ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80e1 	beq.w	8002a8c <HAL_RCC_GetSysClockFreq+0x2b8>
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	f000 8083 	beq.w	80029d8 <HAL_RCC_GetSysClockFreq+0x204>
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	f200 80a1 	bhi.w	8002a1c <HAL_RCC_GetSysClockFreq+0x248>
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x114>
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d056      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x1c0>
 80028e6:	e099      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028e8:	4b6f      	ldr	r3, [pc, #444]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d02d      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80028f4:	4b6c      	ldr	r3, [pc, #432]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	08db      	lsrs	r3, r3, #3
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	4a6b      	ldr	r2, [pc, #428]	; (8002aac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002900:	fa22 f303 	lsr.w	r3, r2, r3
 8002904:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	ee07 3a90 	vmov	s15, r3
 800290c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	ee07 3a90 	vmov	s15, r3
 8002916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800291a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800291e:	4b62      	ldr	r3, [pc, #392]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002926:	ee07 3a90 	vmov	s15, r3
 800292a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800292e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002932:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800293a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800293e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800294e:	e087      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	ee07 3a90 	vmov	s15, r3
 8002956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800295a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002abc <HAL_RCC_GetSysClockFreq+0x2e8>
 800295e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002962:	4b51      	ldr	r3, [pc, #324]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800296a:	ee07 3a90 	vmov	s15, r3
 800296e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002972:	ed97 6a02 	vldr	s12, [r7, #8]
 8002976:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800297a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800297e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800298a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800298e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002992:	e065      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	ee07 3a90 	vmov	s15, r3
 800299a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800299e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002ac0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029a6:	4b40      	ldr	r3, [pc, #256]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80029ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029d6:	e043      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	ee07 3a90 	vmov	s15, r3
 80029de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002ac4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80029e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ea:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f2:	ee07 3a90 	vmov	s15, r3
 80029f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80029fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a1a:	e021      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a26:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002ac0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a42:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a5e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002a60:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	0a5b      	lsrs	r3, r3, #9
 8002a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	ee07 3a90 	vmov	s15, r3
 8002a74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a78:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a84:	ee17 3a90 	vmov	r3, s15
 8002a88:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002a8a:	e005      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61bb      	str	r3, [r7, #24]
      break;
 8002a90:	e002      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002a92:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a94:	61bb      	str	r3, [r7, #24]
      break;
 8002a96:	bf00      	nop
  }

  return sysclockfreq;
 8002a98:	69bb      	ldr	r3, [r7, #24]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3724      	adds	r7, #36	; 0x24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	58024400 	.word	0x58024400
 8002aac:	03d09000 	.word	0x03d09000
 8002ab0:	003d0900 	.word	0x003d0900
 8002ab4:	017d7840 	.word	0x017d7840
 8002ab8:	46000000 	.word	0x46000000
 8002abc:	4c742400 	.word	0x4c742400
 8002ac0:	4a742400 	.word	0x4a742400
 8002ac4:	4bbebc20 	.word	0x4bbebc20

08002ac8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002acc:	b0c6      	sub	sp, #280	; 0x118
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ada:	2300      	movs	r3, #0
 8002adc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002aec:	2500      	movs	r5, #0
 8002aee:	ea54 0305 	orrs.w	r3, r4, r5
 8002af2:	d049      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002afa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002afe:	d02f      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002b00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b04:	d828      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b0a:	d01a      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b10:	d822      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b1a:	d007      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b1c:	e01c      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b1e:	4bab      	ldr	r3, [pc, #684]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	4aaa      	ldr	r2, [pc, #680]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b2a:	e01a      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b30:	3308      	adds	r3, #8
 8002b32:	2102      	movs	r1, #2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f001 f967 	bl	8003e08 <RCCEx_PLL2_Config>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b40:	e00f      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b46:	3328      	adds	r3, #40	; 0x28
 8002b48:	2102      	movs	r1, #2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f001 fa0e 	bl	8003f6c <RCCEx_PLL3_Config>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b56:	e004      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002b5e:	e000      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10a      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b6a:	4b98      	ldr	r3, [pc, #608]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b78:	4a94      	ldr	r2, [pc, #592]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b7a:	430b      	orrs	r3, r1
 8002b7c:	6513      	str	r3, [r2, #80]	; 0x50
 8002b7e:	e003      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002b84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b90:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002b94:	f04f 0900 	mov.w	r9, #0
 8002b98:	ea58 0309 	orrs.w	r3, r8, r9
 8002b9c:	d047      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d82a      	bhi.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002ba8:	a201      	add	r2, pc, #4	; (adr r2, 8002bb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bae:	bf00      	nop
 8002bb0:	08002bc5 	.word	0x08002bc5
 8002bb4:	08002bd3 	.word	0x08002bd3
 8002bb8:	08002be9 	.word	0x08002be9
 8002bbc:	08002c07 	.word	0x08002c07
 8002bc0:	08002c07 	.word	0x08002c07
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bc4:	4b81      	ldr	r3, [pc, #516]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	4a80      	ldr	r2, [pc, #512]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bd0:	e01a      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	2100      	movs	r1, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f001 f914 	bl	8003e08 <RCCEx_PLL2_Config>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002be6:	e00f      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002bec:	3328      	adds	r3, #40	; 0x28
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f001 f9bb 	bl	8003f6c <RCCEx_PLL3_Config>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bfc:	e004      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002c04:	e000      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10a      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c10:	4b6e      	ldr	r3, [pc, #440]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c14:	f023 0107 	bic.w	r1, r3, #7
 8002c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	4a6b      	ldr	r2, [pc, #428]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c20:	430b      	orrs	r3, r1
 8002c22:	6513      	str	r3, [r2, #80]	; 0x50
 8002c24:	e003      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002c2a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c36:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8002c3a:	f04f 0b00 	mov.w	fp, #0
 8002c3e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002c42:	d05b      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002c4c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002c50:	d03b      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002c52:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002c56:	d834      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002c58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c5c:	d037      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002c5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c62:	d82e      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002c64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002c68:	d033      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002c6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002c6e:	d828      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002c70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c74:	d01a      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c7a:	d822      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002c80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c84:	d007      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002c86:	e01c      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c88:	4b50      	ldr	r3, [pc, #320]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	4a4f      	ldr	r2, [pc, #316]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c94:	e01e      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c9a:	3308      	adds	r3, #8
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f001 f8b2 	bl	8003e08 <RCCEx_PLL2_Config>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002caa:	e013      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cb0:	3328      	adds	r3, #40	; 0x28
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 f959 	bl	8003f6c <RCCEx_PLL3_Config>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002cc8:	e004      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002cca:	bf00      	nop
 8002ccc:	e002      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002cce:	bf00      	nop
 8002cd0:	e000      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10b      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002cdc:	4b3b      	ldr	r3, [pc, #236]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce0:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ce8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002cec:	4a37      	ldr	r2, [pc, #220]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cee:	430b      	orrs	r3, r1
 8002cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf2:	e003      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002cf8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d04:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002d08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002d12:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002d16:	460b      	mov	r3, r1
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	d05d      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002d24:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002d28:	d03b      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002d2a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002d2e:	d834      	bhi.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002d30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d34:	d037      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002d36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d3a:	d82e      	bhi.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002d3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d40:	d033      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8002d42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d46:	d828      	bhi.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002d48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d4c:	d01a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002d4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d52:	d822      	bhi.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d5c:	d007      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002d5e:	e01c      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d60:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	4a19      	ldr	r2, [pc, #100]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d6c:	e01e      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d72:	3308      	adds	r3, #8
 8002d74:	2100      	movs	r1, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f001 f846 	bl	8003e08 <RCCEx_PLL2_Config>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d82:	e013      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d88:	3328      	adds	r3, #40	; 0x28
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f001 f8ed 	bl	8003f6c <RCCEx_PLL3_Config>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d98:	e008      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002da0:	e004      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002da2:	bf00      	nop
 8002da4:	e002      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002da6:	bf00      	nop
 8002da8:	e000      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10d      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002dc0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002dc4:	4a01      	ldr	r2, [pc, #4]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002dc6:	430b      	orrs	r3, r1
 8002dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8002dca:	e005      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002dcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002dd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002de4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002de8:	2300      	movs	r3, #0
 8002dea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002dee:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4313      	orrs	r3, r2
 8002df6:	d03a      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfe:	2b30      	cmp	r3, #48	; 0x30
 8002e00:	d01f      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8002e02:	2b30      	cmp	r3, #48	; 0x30
 8002e04:	d819      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	d00c      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	d815      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d019      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002e12:	2b10      	cmp	r3, #16
 8002e14:	d111      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e16:	4baa      	ldr	r3, [pc, #680]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	4aa9      	ldr	r2, [pc, #676]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002e22:	e011      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e28:	3308      	adds	r3, #8
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 ffeb 	bl	8003e08 <RCCEx_PLL2_Config>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002e38:	e006      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002e40:	e002      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002e42:	bf00      	nop
 8002e44:	e000      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002e46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002e50:	4b9b      	ldr	r3, [pc, #620]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e54:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5e:	4a98      	ldr	r2, [pc, #608]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e60:	430b      	orrs	r3, r1
 8002e62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e64:	e003      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e6a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e76:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002e7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002e84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	d051      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e98:	d035      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8002e9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e9e:	d82e      	bhi.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002ea0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ea4:	d031      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8002ea6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002eaa:	d828      	bhi.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb0:	d01a      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb6:	d822      	bhi.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec0:	d007      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8002ec2:	e01c      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec4:	4b7e      	ldr	r3, [pc, #504]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	4a7d      	ldr	r2, [pc, #500]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ece:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ed0:	e01c      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ed6:	3308      	adds	r3, #8
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 ff94 	bl	8003e08 <RCCEx_PLL2_Config>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ee6:	e011      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002eec:	3328      	adds	r3, #40	; 0x28
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f001 f83b 	bl	8003f6c <RCCEx_PLL3_Config>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002efc:	e006      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002f04:	e002      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002f06:	bf00      	nop
 8002f08:	e000      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10a      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002f14:	4b6a      	ldr	r3, [pc, #424]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f18:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f22:	4a67      	ldr	r2, [pc, #412]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f24:	430b      	orrs	r3, r1
 8002f26:	6513      	str	r3, [r2, #80]	; 0x50
 8002f28:	e003      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f2e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002f3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f42:	2300      	movs	r3, #0
 8002f44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f48:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	d053      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f5c:	d033      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8002f5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f62:	d82c      	bhi.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002f64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f68:	d02f      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x502>
 8002f6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f6e:	d826      	bhi.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002f70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f74:	d02b      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002f76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f7a:	d820      	bhi.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002f7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f80:	d012      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8002f82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f86:	d81a      	bhi.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d022      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f90:	d115      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f96:	3308      	adds	r3, #8
 8002f98:	2101      	movs	r1, #1
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 ff34 	bl	8003e08 <RCCEx_PLL2_Config>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002fa6:	e015      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fac:	3328      	adds	r3, #40	; 0x28
 8002fae:	2101      	movs	r1, #1
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 ffdb 	bl	8003f6c <RCCEx_PLL3_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002fbc:	e00a      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002fc4:	e006      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002fc6:	bf00      	nop
 8002fc8:	e004      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002fca:	bf00      	nop
 8002fcc:	e002      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002fce:	bf00      	nop
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10a      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002fdc:	4b38      	ldr	r3, [pc, #224]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fea:	4a35      	ldr	r2, [pc, #212]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fec:	430b      	orrs	r3, r1
 8002fee:	6513      	str	r3, [r2, #80]	; 0x50
 8002ff0:	e003      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002ff6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003002:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800300a:	2300      	movs	r3, #0
 800300c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003010:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003014:	460b      	mov	r3, r1
 8003016:	4313      	orrs	r3, r2
 8003018:	d058      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800301a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800301e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003022:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003026:	d033      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003028:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800302c:	d82c      	bhi.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800302e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003032:	d02f      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003038:	d826      	bhi.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800303a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800303e:	d02b      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003040:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003044:	d820      	bhi.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800304a:	d012      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800304c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003050:	d81a      	bhi.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003052:	2b00      	cmp	r3, #0
 8003054:	d022      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800305a:	d115      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800305c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003060:	3308      	adds	r3, #8
 8003062:	2101      	movs	r1, #1
 8003064:	4618      	mov	r0, r3
 8003066:	f000 fecf 	bl	8003e08 <RCCEx_PLL2_Config>
 800306a:	4603      	mov	r3, r0
 800306c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003070:	e015      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003076:	3328      	adds	r3, #40	; 0x28
 8003078:	2101      	movs	r1, #1
 800307a:	4618      	mov	r0, r3
 800307c:	f000 ff76 	bl	8003f6c <RCCEx_PLL3_Config>
 8003080:	4603      	mov	r3, r0
 8003082:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003086:	e00a      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800308e:	e006      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003090:	bf00      	nop
 8003092:	e004      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003094:	bf00      	nop
 8003096:	e002      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003098:	bf00      	nop
 800309a:	e000      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800309c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800309e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10e      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030aa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80030ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80030b6:	4a02      	ldr	r2, [pc, #8]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030b8:	430b      	orrs	r3, r1
 80030ba:	6593      	str	r3, [r2, #88]	; 0x58
 80030bc:	e006      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80030be:	bf00      	nop
 80030c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80030cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80030d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030dc:	2300      	movs	r3, #0
 80030de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80030e2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4313      	orrs	r3, r2
 80030ea:	d037      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80030ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030f6:	d00e      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80030f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030fc:	d816      	bhi.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d018      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003102:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003106:	d111      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003108:	4bc4      	ldr	r3, [pc, #784]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	4ac3      	ldr	r2, [pc, #780]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800310e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003112:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003114:	e00f      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800311a:	3308      	adds	r3, #8
 800311c:	2101      	movs	r1, #1
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fe72 	bl	8003e08 <RCCEx_PLL2_Config>
 8003124:	4603      	mov	r3, r0
 8003126:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800312a:	e004      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003132:	e000      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003136:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10a      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800313e:	4bb7      	ldr	r3, [pc, #732]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003142:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800314a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800314c:	4ab3      	ldr	r2, [pc, #716]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800314e:	430b      	orrs	r3, r1
 8003150:	6513      	str	r3, [r2, #80]	; 0x50
 8003152:	e003      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003154:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003158:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800315c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003164:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003168:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800316c:	2300      	movs	r3, #0
 800316e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003172:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003176:	460b      	mov	r3, r1
 8003178:	4313      	orrs	r3, r2
 800317a:	d039      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800317c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003182:	2b03      	cmp	r3, #3
 8003184:	d81c      	bhi.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003186:	a201      	add	r2, pc, #4	; (adr r2, 800318c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318c:	080031c9 	.word	0x080031c9
 8003190:	0800319d 	.word	0x0800319d
 8003194:	080031ab 	.word	0x080031ab
 8003198:	080031c9 	.word	0x080031c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800319c:	4b9f      	ldr	r3, [pc, #636]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	4a9e      	ldr	r2, [pc, #632]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80031a8:	e00f      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031ae:	3308      	adds	r3, #8
 80031b0:	2102      	movs	r1, #2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fe28 	bl	8003e08 <RCCEx_PLL2_Config>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80031be:	e004      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80031c6:	e000      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80031c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10a      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80031d2:	4b92      	ldr	r3, [pc, #584]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d6:	f023 0103 	bic.w	r1, r3, #3
 80031da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e0:	4a8e      	ldr	r2, [pc, #568]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031e2:	430b      	orrs	r3, r1
 80031e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031e6:	e003      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80031fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003200:	2300      	movs	r3, #0
 8003202:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003206:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800320a:	460b      	mov	r3, r1
 800320c:	4313      	orrs	r3, r2
 800320e:	f000 8099 	beq.w	8003344 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003212:	4b83      	ldr	r3, [pc, #524]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a82      	ldr	r2, [pc, #520]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800321e:	f7fe f89b 	bl	8001358 <HAL_GetTick>
 8003222:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003226:	e00b      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003228:	f7fe f896 	bl	8001358 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b64      	cmp	r3, #100	; 0x64
 8003236:	d903      	bls.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800323e:	e005      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003240:	4b77      	ldr	r3, [pc, #476]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0ed      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800324c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003250:	2b00      	cmp	r3, #0
 8003252:	d173      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003254:	4b71      	ldr	r3, [pc, #452]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003256:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800325c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003260:	4053      	eors	r3, r2
 8003262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003266:	2b00      	cmp	r3, #0
 8003268:	d015      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800326a:	4b6c      	ldr	r3, [pc, #432]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003272:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003276:	4b69      	ldr	r3, [pc, #420]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	4a68      	ldr	r2, [pc, #416]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800327c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003280:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003282:	4b66      	ldr	r3, [pc, #408]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	4a65      	ldr	r2, [pc, #404]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800328e:	4a63      	ldr	r2, [pc, #396]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003294:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800329a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800329e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032a2:	d118      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fe f858 	bl	8001358 <HAL_GetTick>
 80032a8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032ac:	e00d      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ae:	f7fe f853 	bl	8001358 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80032b8:	1ad2      	subs	r2, r2, r3
 80032ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80032be:	429a      	cmp	r2, r3
 80032c0:	d903      	bls.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80032c8:	e005      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032ca:	4b54      	ldr	r3, [pc, #336]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0eb      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80032d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d129      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032ee:	d10e      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x846>
 80032f0:	4b4a      	ldr	r3, [pc, #296]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80032f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003300:	091a      	lsrs	r2, r3, #4
 8003302:	4b48      	ldr	r3, [pc, #288]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003304:	4013      	ands	r3, r2
 8003306:	4a45      	ldr	r2, [pc, #276]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003308:	430b      	orrs	r3, r1
 800330a:	6113      	str	r3, [r2, #16]
 800330c:	e005      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800330e:	4b43      	ldr	r3, [pc, #268]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	4a42      	ldr	r2, [pc, #264]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003314:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003318:	6113      	str	r3, [r2, #16]
 800331a:	4b40      	ldr	r3, [pc, #256]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800331c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800331e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003322:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332a:	4a3c      	ldr	r2, [pc, #240]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800332c:	430b      	orrs	r3, r1
 800332e:	6713      	str	r3, [r2, #112]	; 0x70
 8003330:	e008      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003332:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003336:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800333a:	e003      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003340:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334c:	f002 0301 	and.w	r3, r2, #1
 8003350:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800335a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800335e:	460b      	mov	r3, r1
 8003360:	4313      	orrs	r3, r2
 8003362:	f000 808f 	beq.w	8003484 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800336a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800336c:	2b28      	cmp	r3, #40	; 0x28
 800336e:	d871      	bhi.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003370:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003376:	bf00      	nop
 8003378:	0800345d 	.word	0x0800345d
 800337c:	08003455 	.word	0x08003455
 8003380:	08003455 	.word	0x08003455
 8003384:	08003455 	.word	0x08003455
 8003388:	08003455 	.word	0x08003455
 800338c:	08003455 	.word	0x08003455
 8003390:	08003455 	.word	0x08003455
 8003394:	08003455 	.word	0x08003455
 8003398:	08003429 	.word	0x08003429
 800339c:	08003455 	.word	0x08003455
 80033a0:	08003455 	.word	0x08003455
 80033a4:	08003455 	.word	0x08003455
 80033a8:	08003455 	.word	0x08003455
 80033ac:	08003455 	.word	0x08003455
 80033b0:	08003455 	.word	0x08003455
 80033b4:	08003455 	.word	0x08003455
 80033b8:	0800343f 	.word	0x0800343f
 80033bc:	08003455 	.word	0x08003455
 80033c0:	08003455 	.word	0x08003455
 80033c4:	08003455 	.word	0x08003455
 80033c8:	08003455 	.word	0x08003455
 80033cc:	08003455 	.word	0x08003455
 80033d0:	08003455 	.word	0x08003455
 80033d4:	08003455 	.word	0x08003455
 80033d8:	0800345d 	.word	0x0800345d
 80033dc:	08003455 	.word	0x08003455
 80033e0:	08003455 	.word	0x08003455
 80033e4:	08003455 	.word	0x08003455
 80033e8:	08003455 	.word	0x08003455
 80033ec:	08003455 	.word	0x08003455
 80033f0:	08003455 	.word	0x08003455
 80033f4:	08003455 	.word	0x08003455
 80033f8:	0800345d 	.word	0x0800345d
 80033fc:	08003455 	.word	0x08003455
 8003400:	08003455 	.word	0x08003455
 8003404:	08003455 	.word	0x08003455
 8003408:	08003455 	.word	0x08003455
 800340c:	08003455 	.word	0x08003455
 8003410:	08003455 	.word	0x08003455
 8003414:	08003455 	.word	0x08003455
 8003418:	0800345d 	.word	0x0800345d
 800341c:	58024400 	.word	0x58024400
 8003420:	58024800 	.word	0x58024800
 8003424:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800342c:	3308      	adds	r3, #8
 800342e:	2101      	movs	r1, #1
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fce9 	bl	8003e08 <RCCEx_PLL2_Config>
 8003436:	4603      	mov	r3, r0
 8003438:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800343c:	e00f      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800343e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003442:	3328      	adds	r3, #40	; 0x28
 8003444:	2101      	movs	r1, #1
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fd90 	bl	8003f6c <RCCEx_PLL3_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003452:	e004      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800345a:	e000      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800345c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800345e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10a      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003466:	4bbf      	ldr	r3, [pc, #764]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800346e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003474:	4abb      	ldr	r2, [pc, #748]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003476:	430b      	orrs	r3, r1
 8003478:	6553      	str	r3, [r2, #84]	; 0x54
 800347a:	e003      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800347c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003480:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348c:	f002 0302 	and.w	r3, r2, #2
 8003490:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003494:	2300      	movs	r3, #0
 8003496:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800349a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800349e:	460b      	mov	r3, r1
 80034a0:	4313      	orrs	r3, r2
 80034a2:	d041      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80034a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	d824      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80034ae:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80034b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b4:	08003501 	.word	0x08003501
 80034b8:	080034cd 	.word	0x080034cd
 80034bc:	080034e3 	.word	0x080034e3
 80034c0:	08003501 	.word	0x08003501
 80034c4:	08003501 	.word	0x08003501
 80034c8:	08003501 	.word	0x08003501
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034d0:	3308      	adds	r3, #8
 80034d2:	2101      	movs	r1, #1
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fc97 	bl	8003e08 <RCCEx_PLL2_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80034e0:	e00f      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034e6:	3328      	adds	r3, #40	; 0x28
 80034e8:	2101      	movs	r1, #1
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fd3e 	bl	8003f6c <RCCEx_PLL3_Config>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80034f6:	e004      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80034fe:	e000      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003502:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10a      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800350a:	4b96      	ldr	r3, [pc, #600]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f023 0107 	bic.w	r1, r3, #7
 8003512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003518:	4a92      	ldr	r2, [pc, #584]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800351a:	430b      	orrs	r3, r1
 800351c:	6553      	str	r3, [r2, #84]	; 0x54
 800351e:	e003      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003520:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003524:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800352c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003530:	f002 0304 	and.w	r3, r2, #4
 8003534:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003538:	2300      	movs	r3, #0
 800353a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800353e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003542:	460b      	mov	r3, r1
 8003544:	4313      	orrs	r3, r2
 8003546:	d044      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003550:	2b05      	cmp	r3, #5
 8003552:	d825      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003554:	a201      	add	r2, pc, #4	; (adr r2, 800355c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355a:	bf00      	nop
 800355c:	080035a9 	.word	0x080035a9
 8003560:	08003575 	.word	0x08003575
 8003564:	0800358b 	.word	0x0800358b
 8003568:	080035a9 	.word	0x080035a9
 800356c:	080035a9 	.word	0x080035a9
 8003570:	080035a9 	.word	0x080035a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003578:	3308      	adds	r3, #8
 800357a:	2101      	movs	r1, #1
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fc43 	bl	8003e08 <RCCEx_PLL2_Config>
 8003582:	4603      	mov	r3, r0
 8003584:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003588:	e00f      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800358a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800358e:	3328      	adds	r3, #40	; 0x28
 8003590:	2101      	movs	r1, #1
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fcea 	bl	8003f6c <RCCEx_PLL3_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800359e:	e004      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80035a6:	e000      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80035a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10b      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035b2:	4b6c      	ldr	r3, [pc, #432]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80035b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b6:	f023 0107 	bic.w	r1, r3, #7
 80035ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c2:	4a68      	ldr	r2, [pc, #416]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80035c4:	430b      	orrs	r3, r1
 80035c6:	6593      	str	r3, [r2, #88]	; 0x58
 80035c8:	e003      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80035ce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035da:	f002 0320 	and.w	r3, r2, #32
 80035de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035e2:	2300      	movs	r3, #0
 80035e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80035e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80035ec:	460b      	mov	r3, r1
 80035ee:	4313      	orrs	r3, r2
 80035f0:	d055      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80035f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035fe:	d033      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003600:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003604:	d82c      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360a:	d02f      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800360c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003610:	d826      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003612:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003616:	d02b      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003618:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800361c:	d820      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800361e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003622:	d012      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003628:	d81a      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d022      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800362e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003632:	d115      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003638:	3308      	adds	r3, #8
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fbe3 	bl	8003e08 <RCCEx_PLL2_Config>
 8003642:	4603      	mov	r3, r0
 8003644:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003648:	e015      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800364a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800364e:	3328      	adds	r3, #40	; 0x28
 8003650:	2102      	movs	r1, #2
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fc8a 	bl	8003f6c <RCCEx_PLL3_Config>
 8003658:	4603      	mov	r3, r0
 800365a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800365e:	e00a      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003666:	e006      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003668:	bf00      	nop
 800366a:	e004      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800366c:	bf00      	nop
 800366e:	e002      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003670:	bf00      	nop
 8003672:	e000      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003676:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10b      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800367e:	4b39      	ldr	r3, [pc, #228]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003682:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800368a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800368e:	4a35      	ldr	r2, [pc, #212]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003690:	430b      	orrs	r3, r1
 8003692:	6553      	str	r3, [r2, #84]	; 0x54
 8003694:	e003      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003696:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800369a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800369e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80036aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036ae:	2300      	movs	r3, #0
 80036b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036b4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80036b8:	460b      	mov	r3, r1
 80036ba:	4313      	orrs	r3, r2
 80036bc:	d058      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80036be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80036ca:	d033      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80036cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80036d0:	d82c      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80036d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d6:	d02f      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80036d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036dc:	d826      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80036de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036e2:	d02b      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80036e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036e8:	d820      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80036ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ee:	d012      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80036f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036f4:	d81a      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d022      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80036fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036fe:	d115      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003704:	3308      	adds	r3, #8
 8003706:	2100      	movs	r1, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f000 fb7d 	bl	8003e08 <RCCEx_PLL2_Config>
 800370e:	4603      	mov	r3, r0
 8003710:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003714:	e015      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800371a:	3328      	adds	r3, #40	; 0x28
 800371c:	2102      	movs	r1, #2
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fc24 	bl	8003f6c <RCCEx_PLL3_Config>
 8003724:	4603      	mov	r3, r0
 8003726:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800372a:	e00a      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003732:	e006      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003734:	bf00      	nop
 8003736:	e004      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003738:	bf00      	nop
 800373a:	e002      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800373c:	bf00      	nop
 800373e:	e000      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003742:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10e      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800374a:	4b06      	ldr	r3, [pc, #24]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800374c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003756:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800375a:	4a02      	ldr	r2, [pc, #8]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800375c:	430b      	orrs	r3, r1
 800375e:	6593      	str	r3, [r2, #88]	; 0x58
 8003760:	e006      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003762:	bf00      	nop
 8003764:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003768:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800376c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800377c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003780:	2300      	movs	r3, #0
 8003782:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003786:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800378a:	460b      	mov	r3, r1
 800378c:	4313      	orrs	r3, r2
 800378e:	d055      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003794:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003798:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800379c:	d033      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800379e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80037a2:	d82c      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80037a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037a8:	d02f      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80037aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ae:	d826      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80037b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80037b4:	d02b      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80037b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80037ba:	d820      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80037bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037c0:	d012      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80037c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037c6:	d81a      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d022      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80037cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d0:	d115      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037d6:	3308      	adds	r3, #8
 80037d8:	2100      	movs	r1, #0
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 fb14 	bl	8003e08 <RCCEx_PLL2_Config>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80037e6:	e015      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037ec:	3328      	adds	r3, #40	; 0x28
 80037ee:	2102      	movs	r1, #2
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fbbb 	bl	8003f6c <RCCEx_PLL3_Config>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80037fc:	e00a      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003804:	e006      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003806:	bf00      	nop
 8003808:	e004      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800380a:	bf00      	nop
 800380c:	e002      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800380e:	bf00      	nop
 8003810:	e000      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003814:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10b      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800381c:	4ba0      	ldr	r3, [pc, #640]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003828:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800382c:	4a9c      	ldr	r2, [pc, #624]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800382e:	430b      	orrs	r3, r1
 8003830:	6593      	str	r3, [r2, #88]	; 0x58
 8003832:	e003      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003834:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003838:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800383c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	f002 0308 	and.w	r3, r2, #8
 8003848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800384c:	2300      	movs	r3, #0
 800384e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003852:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003856:	460b      	mov	r3, r1
 8003858:	4313      	orrs	r3, r2
 800385a:	d01e      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800385c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003868:	d10c      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800386a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800386e:	3328      	adds	r3, #40	; 0x28
 8003870:	2102      	movs	r1, #2
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fb7a 	bl	8003f6c <RCCEx_PLL3_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003884:	4b86      	ldr	r3, [pc, #536]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003888:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800388c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003894:	4a82      	ldr	r2, [pc, #520]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003896:	430b      	orrs	r3, r1
 8003898:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800389a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	f002 0310 	and.w	r3, r2, #16
 80038a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038aa:	2300      	movs	r3, #0
 80038ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038b0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80038b4:	460b      	mov	r3, r1
 80038b6:	4313      	orrs	r3, r2
 80038b8:	d01e      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80038ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c6:	d10c      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80038c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038cc:	3328      	adds	r3, #40	; 0x28
 80038ce:	2102      	movs	r1, #2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 fb4b 	bl	8003f6c <RCCEx_PLL3_Config>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038e2:	4b6f      	ldr	r3, [pc, #444]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80038e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038f2:	4a6b      	ldr	r2, [pc, #428]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80038f4:	430b      	orrs	r3, r1
 80038f6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003900:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003904:	67bb      	str	r3, [r7, #120]	; 0x78
 8003906:	2300      	movs	r3, #0
 8003908:	67fb      	str	r3, [r7, #124]	; 0x7c
 800390a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800390e:	460b      	mov	r3, r1
 8003910:	4313      	orrs	r3, r2
 8003912:	d03e      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003918:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800391c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003920:	d022      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003926:	d81b      	bhi.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800392c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003930:	d00b      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003932:	e015      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003938:	3308      	adds	r3, #8
 800393a:	2100      	movs	r1, #0
 800393c:	4618      	mov	r0, r3
 800393e:	f000 fa63 	bl	8003e08 <RCCEx_PLL2_Config>
 8003942:	4603      	mov	r3, r0
 8003944:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003948:	e00f      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800394a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800394e:	3328      	adds	r3, #40	; 0x28
 8003950:	2102      	movs	r1, #2
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fb0a 	bl	8003f6c <RCCEx_PLL3_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800395e:	e004      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003966:	e000      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800396a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10b      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003972:	4b4b      	ldr	r3, [pc, #300]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003976:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800397a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800397e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003982:	4a47      	ldr	r2, [pc, #284]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003984:	430b      	orrs	r3, r1
 8003986:	6593      	str	r3, [r2, #88]	; 0x58
 8003988:	e003      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800398e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800399e:	673b      	str	r3, [r7, #112]	; 0x70
 80039a0:	2300      	movs	r3, #0
 80039a2:	677b      	str	r3, [r7, #116]	; 0x74
 80039a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80039a8:	460b      	mov	r3, r1
 80039aa:	4313      	orrs	r3, r2
 80039ac:	d03b      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80039ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039ba:	d01f      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80039bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039c0:	d818      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80039c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039c6:	d003      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80039c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039cc:	d007      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80039ce:	e011      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d0:	4b33      	ldr	r3, [pc, #204]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	4a32      	ldr	r2, [pc, #200]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80039d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80039dc:	e00f      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039e2:	3328      	adds	r3, #40	; 0x28
 80039e4:	2101      	movs	r1, #1
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fac0 	bl	8003f6c <RCCEx_PLL3_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80039f2:	e004      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80039fa:	e000      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80039fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10b      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a06:	4b26      	ldr	r3, [pc, #152]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a16:	4a22      	ldr	r2, [pc, #136]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	6553      	str	r3, [r2, #84]	; 0x54
 8003a1c:	e003      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a22:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003a32:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a34:	2300      	movs	r3, #0
 8003a36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a38:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	d034      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a50:	d007      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003a52:	e011      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a54:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	4a11      	ldr	r2, [pc, #68]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003a60:	e00e      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a66:	3308      	adds	r3, #8
 8003a68:	2102      	movs	r1, #2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 f9cc 	bl	8003e08 <RCCEx_PLL2_Config>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003a76:	e003      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10d      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a96:	4a02      	ldr	r2, [pc, #8]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a9c:	e006      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003a9e:	bf00      	nop
 8003aa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003aa8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003ab8:	663b      	str	r3, [r7, #96]	; 0x60
 8003aba:	2300      	movs	r3, #0
 8003abc:	667b      	str	r3, [r7, #100]	; 0x64
 8003abe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	d00c      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003acc:	3328      	adds	r3, #40	; 0x28
 8003ace:	2102      	movs	r1, #2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fa4b 	bl	8003f6c <RCCEx_PLL3_Config>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aea:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003aee:	65bb      	str	r3, [r7, #88]	; 0x58
 8003af0:	2300      	movs	r3, #0
 8003af2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003af4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003af8:	460b      	mov	r3, r1
 8003afa:	4313      	orrs	r3, r2
 8003afc:	d036      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b08:	d018      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003b0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b0e:	d811      	bhi.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b14:	d014      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003b16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b1a:	d80b      	bhi.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d011      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b24:	d106      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b26:	4bb7      	ldr	r3, [pc, #732]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	4ab6      	ldr	r2, [pc, #728]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003b32:	e008      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003b3a:	e004      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003b3c:	bf00      	nop
 8003b3e:	e002      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003b40:	bf00      	nop
 8003b42:	e000      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b4e:	4bad      	ldr	r3, [pc, #692]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b5c:	4aa9      	ldr	r2, [pc, #676]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	6553      	str	r3, [r2, #84]	; 0x54
 8003b62:	e003      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003b78:	653b      	str	r3, [r7, #80]	; 0x50
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	657b      	str	r3, [r7, #84]	; 0x54
 8003b7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003b82:	460b      	mov	r3, r1
 8003b84:	4313      	orrs	r3, r2
 8003b86:	d009      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b88:	4b9e      	ldr	r3, [pc, #632]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	4a9b      	ldr	r2, [pc, #620]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003ba8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003baa:	2300      	movs	r3, #0
 8003bac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bae:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	d009      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bb8:	4b92      	ldr	r3, [pc, #584]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bbc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bc6:	4a8f      	ldr	r2, [pc, #572]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003bd8:	643b      	str	r3, [r7, #64]	; 0x40
 8003bda:	2300      	movs	r3, #0
 8003bdc:	647b      	str	r3, [r7, #68]	; 0x44
 8003bde:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003be2:	460b      	mov	r3, r1
 8003be4:	4313      	orrs	r3, r2
 8003be6:	d00e      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003be8:	4b86      	ldr	r3, [pc, #536]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	4a85      	ldr	r2, [pc, #532]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003bee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003bf2:	6113      	str	r3, [r2, #16]
 8003bf4:	4b83      	ldr	r3, [pc, #524]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003bf6:	6919      	ldr	r1, [r3, #16]
 8003bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bfc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c00:	4a80      	ldr	r2, [pc, #512]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003c02:	430b      	orrs	r3, r1
 8003c04:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003c12:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c14:	2300      	movs	r3, #0
 8003c16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c18:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	d009      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003c22:	4b78      	ldr	r3, [pc, #480]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c26:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c30:	4a74      	ldr	r2, [pc, #464]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003c32:	430b      	orrs	r3, r1
 8003c34:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003c42:	633b      	str	r3, [r7, #48]	; 0x30
 8003c44:	2300      	movs	r3, #0
 8003c46:	637b      	str	r3, [r7, #52]	; 0x34
 8003c48:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	d00a      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c52:	4b6c      	ldr	r3, [pc, #432]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c56:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	4a68      	ldr	r2, [pc, #416]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003c64:	430b      	orrs	r3, r1
 8003c66:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c70:	2100      	movs	r1, #0
 8003c72:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c7a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4313      	orrs	r3, r2
 8003c82:	d011      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c88:	3308      	adds	r3, #8
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 f8bb 	bl	8003e08 <RCCEx_PLL2_Config>
 8003c92:	4603      	mov	r3, r0
 8003c94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003c98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ca4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	6239      	str	r1, [r7, #32]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	d011      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cc8:	3308      	adds	r3, #8
 8003cca:	2101      	movs	r1, #1
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 f89b 	bl	8003e08 <RCCEx_PLL2_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003cd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ce4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	61b9      	str	r1, [r7, #24]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4313      	orrs	r3, r2
 8003d02:	d011      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d08:	3308      	adds	r3, #8
 8003d0a:	2102      	movs	r1, #2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 f87b 	bl	8003e08 <RCCEx_PLL2_Config>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003d18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d30:	2100      	movs	r1, #0
 8003d32:	6139      	str	r1, [r7, #16]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4313      	orrs	r3, r2
 8003d42:	d011      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d48:	3328      	adds	r3, #40	; 0x28
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 f90d 	bl	8003f6c <RCCEx_PLL3_Config>
 8003d52:	4603      	mov	r3, r0
 8003d54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8003d58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d70:	2100      	movs	r1, #0
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4313      	orrs	r3, r2
 8003d82:	d011      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d88:	3328      	adds	r3, #40	; 0x28
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 f8ed 	bl	8003f6c <RCCEx_PLL3_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003d98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003da4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db0:	2100      	movs	r1, #0
 8003db2:	6039      	str	r1, [r7, #0]
 8003db4:	f003 0320 	and.w	r3, r3, #32
 8003db8:	607b      	str	r3, [r7, #4]
 8003dba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	d011      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dc8:	3328      	adds	r3, #40	; 0x28
 8003dca:	2102      	movs	r1, #2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 f8cd 	bl	8003f6c <RCCEx_PLL3_Config>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003dd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003de4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8003de8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	e000      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e02:	bf00      	nop
 8003e04:	58024400 	.word	0x58024400

08003e08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e16:	4b53      	ldr	r3, [pc, #332]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d101      	bne.n	8003e26 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e099      	b.n	8003f5a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003e26:	4b4f      	ldr	r3, [pc, #316]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a4e      	ldr	r2, [pc, #312]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003e2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e32:	f7fd fa91 	bl	8001358 <HAL_GetTick>
 8003e36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e38:	e008      	b.n	8003e4c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e3a:	f7fd fa8d 	bl	8001358 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e086      	b.n	8003f5a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e4c:	4b45      	ldr	r3, [pc, #276]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1f0      	bne.n	8003e3a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003e58:	4b42      	ldr	r3, [pc, #264]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	031b      	lsls	r3, r3, #12
 8003e66:	493f      	ldr	r1, [pc, #252]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	628b      	str	r3, [r1, #40]	; 0x28
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	025b      	lsls	r3, r3, #9
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	041b      	lsls	r3, r3, #16
 8003e8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	3b01      	subs	r3, #1
 8003e96:	061b      	lsls	r3, r3, #24
 8003e98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e9c:	4931      	ldr	r1, [pc, #196]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003ea2:	4b30      	ldr	r3, [pc, #192]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	492d      	ldr	r1, [pc, #180]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003eb4:	4b2b      	ldr	r3, [pc, #172]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	f023 0220 	bic.w	r2, r3, #32
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	4928      	ldr	r1, [pc, #160]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003ec6:	4b27      	ldr	r3, [pc, #156]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	4a26      	ldr	r2, [pc, #152]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003ecc:	f023 0310 	bic.w	r3, r3, #16
 8003ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003ed2:	4b24      	ldr	r3, [pc, #144]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003ed4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ed6:	4b24      	ldr	r3, [pc, #144]	; (8003f68 <RCCEx_PLL2_Config+0x160>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	69d2      	ldr	r2, [r2, #28]
 8003ede:	00d2      	lsls	r2, r2, #3
 8003ee0:	4920      	ldr	r1, [pc, #128]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003ee6:	4b1f      	ldr	r3, [pc, #124]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eea:	4a1e      	ldr	r2, [pc, #120]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003eec:	f043 0310 	orr.w	r3, r3, #16
 8003ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d106      	bne.n	8003f06 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003ef8:	4b1a      	ldr	r3, [pc, #104]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	4a19      	ldr	r2, [pc, #100]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003efe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f04:	e00f      	b.n	8003f26 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d106      	bne.n	8003f1a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003f0c:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	4a14      	ldr	r2, [pc, #80]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f18:	e005      	b.n	8003f26 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003f1a:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1e:	4a11      	ldr	r2, [pc, #68]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003f20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003f26:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a0e      	ldr	r2, [pc, #56]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003f2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f32:	f7fd fa11 	bl	8001358 <HAL_GetTick>
 8003f36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f38:	e008      	b.n	8003f4c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f3a:	f7fd fa0d 	bl	8001358 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e006      	b.n	8003f5a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f4c:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	58024400 	.word	0x58024400
 8003f68:	ffff0007 	.word	0xffff0007

08003f6c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f7a:	4b53      	ldr	r3, [pc, #332]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b03      	cmp	r3, #3
 8003f84:	d101      	bne.n	8003f8a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e099      	b.n	80040be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003f8a:	4b4f      	ldr	r3, [pc, #316]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a4e      	ldr	r2, [pc, #312]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8003f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f96:	f7fd f9df 	bl	8001358 <HAL_GetTick>
 8003f9a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f9c:	e008      	b.n	8003fb0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f9e:	f7fd f9db 	bl	8001358 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e086      	b.n	80040be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fb0:	4b45      	ldr	r3, [pc, #276]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1f0      	bne.n	8003f9e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003fbc:	4b42      	ldr	r3, [pc, #264]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	051b      	lsls	r3, r3, #20
 8003fca:	493f      	ldr	r1, [pc, #252]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	628b      	str	r3, [r1, #40]	; 0x28
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	025b      	lsls	r3, r3, #9
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	061b      	lsls	r3, r3, #24
 8003ffc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004000:	4931      	ldr	r1, [pc, #196]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004002:	4313      	orrs	r3, r2
 8004004:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004006:	4b30      	ldr	r3, [pc, #192]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	492d      	ldr	r1, [pc, #180]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004014:	4313      	orrs	r3, r2
 8004016:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004018:	4b2b      	ldr	r3, [pc, #172]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	4928      	ldr	r1, [pc, #160]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004026:	4313      	orrs	r3, r2
 8004028:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800402a:	4b27      	ldr	r3, [pc, #156]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 800402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402e:	4a26      	ldr	r2, [pc, #152]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004034:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004036:	4b24      	ldr	r3, [pc, #144]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800403a:	4b24      	ldr	r3, [pc, #144]	; (80040cc <RCCEx_PLL3_Config+0x160>)
 800403c:	4013      	ands	r3, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	69d2      	ldr	r2, [r2, #28]
 8004042:	00d2      	lsls	r2, r2, #3
 8004044:	4920      	ldr	r1, [pc, #128]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004046:	4313      	orrs	r3, r2
 8004048:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800404a:	4b1f      	ldr	r3, [pc, #124]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	4a1e      	ldr	r2, [pc, #120]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004054:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d106      	bne.n	800406a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800405c:	4b1a      	ldr	r3, [pc, #104]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	4a19      	ldr	r2, [pc, #100]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004062:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004066:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004068:	e00f      	b.n	800408a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d106      	bne.n	800407e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004070:	4b15      	ldr	r3, [pc, #84]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	4a14      	ldr	r2, [pc, #80]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004076:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800407a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800407c:	e005      	b.n	800408a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800407e:	4b12      	ldr	r3, [pc, #72]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	4a11      	ldr	r2, [pc, #68]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004084:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004088:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800408a:	4b0f      	ldr	r3, [pc, #60]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a0e      	ldr	r2, [pc, #56]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004094:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004096:	f7fd f95f 	bl	8001358 <HAL_GetTick>
 800409a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800409c:	e008      	b.n	80040b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800409e:	f7fd f95b 	bl	8001358 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e006      	b.n	80040be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <RCCEx_PLL3_Config+0x15c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0f0      	beq.n	800409e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	58024400 	.word	0x58024400
 80040cc:	ffff0007 	.word	0xffff0007

080040d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e049      	b.n	8004176 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fc feca 	bl	8000e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3304      	adds	r3, #4
 800410c:	4619      	mov	r1, r3
 800410e:	4610      	mov	r0, r2
 8004110:	f000 f986 	bl	8004420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b082      	sub	sp, #8
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b02      	cmp	r3, #2
 8004192:	d122      	bne.n	80041da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d11b      	bne.n	80041da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f06f 0202 	mvn.w	r2, #2
 80041aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f003 0303 	and.w	r3, r3, #3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f90f 	bl	80043e4 <HAL_TIM_IC_CaptureCallback>
 80041c6:	e005      	b.n	80041d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f901 	bl	80043d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f912 	bl	80043f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d122      	bne.n	800422e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d11b      	bne.n	800422e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f06f 0204 	mvn.w	r2, #4
 80041fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f8e5 	bl	80043e4 <HAL_TIM_IC_CaptureCallback>
 800421a:	e005      	b.n	8004228 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f8d7 	bl	80043d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f8e8 	bl	80043f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b08      	cmp	r3, #8
 800423a:	d122      	bne.n	8004282 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b08      	cmp	r3, #8
 8004248:	d11b      	bne.n	8004282 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f06f 0208 	mvn.w	r2, #8
 8004252:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2204      	movs	r2, #4
 8004258:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	f003 0303 	and.w	r3, r3, #3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f8bb 	bl	80043e4 <HAL_TIM_IC_CaptureCallback>
 800426e:	e005      	b.n	800427c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f8ad 	bl	80043d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f8be 	bl	80043f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	f003 0310 	and.w	r3, r3, #16
 800428c:	2b10      	cmp	r3, #16
 800428e:	d122      	bne.n	80042d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f003 0310 	and.w	r3, r3, #16
 800429a:	2b10      	cmp	r3, #16
 800429c:	d11b      	bne.n	80042d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f06f 0210 	mvn.w	r2, #16
 80042a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2208      	movs	r2, #8
 80042ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f891 	bl	80043e4 <HAL_TIM_IC_CaptureCallback>
 80042c2:	e005      	b.n	80042d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 f883 	bl	80043d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f894 	bl	80043f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d10e      	bne.n	8004302 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d107      	bne.n	8004302 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f06f 0201 	mvn.w	r2, #1
 80042fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f85d 	bl	80043bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430c:	2b80      	cmp	r3, #128	; 0x80
 800430e:	d10e      	bne.n	800432e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431a:	2b80      	cmp	r3, #128	; 0x80
 800431c:	d107      	bne.n	800432e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f9c5 	bl	80046b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800433c:	d10e      	bne.n	800435c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004348:	2b80      	cmp	r3, #128	; 0x80
 800434a:	d107      	bne.n	800435c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f9b8 	bl	80046cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004366:	2b40      	cmp	r3, #64	; 0x40
 8004368:	d10e      	bne.n	8004388 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004374:	2b40      	cmp	r3, #64	; 0x40
 8004376:	d107      	bne.n	8004388 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f842 	bl	800440c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0320 	and.w	r3, r3, #32
 8004392:	2b20      	cmp	r3, #32
 8004394:	d10e      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	d107      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0220 	mvn.w	r2, #32
 80043ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f978 	bl	80046a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043b4:	bf00      	nop
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a44      	ldr	r2, [pc, #272]	; (8004544 <TIM_Base_SetConfig+0x124>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d013      	beq.n	8004460 <TIM_Base_SetConfig+0x40>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443e:	d00f      	beq.n	8004460 <TIM_Base_SetConfig+0x40>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a41      	ldr	r2, [pc, #260]	; (8004548 <TIM_Base_SetConfig+0x128>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d00b      	beq.n	8004460 <TIM_Base_SetConfig+0x40>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a40      	ldr	r2, [pc, #256]	; (800454c <TIM_Base_SetConfig+0x12c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d007      	beq.n	8004460 <TIM_Base_SetConfig+0x40>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a3f      	ldr	r2, [pc, #252]	; (8004550 <TIM_Base_SetConfig+0x130>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d003      	beq.n	8004460 <TIM_Base_SetConfig+0x40>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a3e      	ldr	r2, [pc, #248]	; (8004554 <TIM_Base_SetConfig+0x134>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d108      	bne.n	8004472 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a33      	ldr	r2, [pc, #204]	; (8004544 <TIM_Base_SetConfig+0x124>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d027      	beq.n	80044ca <TIM_Base_SetConfig+0xaa>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004480:	d023      	beq.n	80044ca <TIM_Base_SetConfig+0xaa>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a30      	ldr	r2, [pc, #192]	; (8004548 <TIM_Base_SetConfig+0x128>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d01f      	beq.n	80044ca <TIM_Base_SetConfig+0xaa>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a2f      	ldr	r2, [pc, #188]	; (800454c <TIM_Base_SetConfig+0x12c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d01b      	beq.n	80044ca <TIM_Base_SetConfig+0xaa>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a2e      	ldr	r2, [pc, #184]	; (8004550 <TIM_Base_SetConfig+0x130>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d017      	beq.n	80044ca <TIM_Base_SetConfig+0xaa>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a2d      	ldr	r2, [pc, #180]	; (8004554 <TIM_Base_SetConfig+0x134>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d013      	beq.n	80044ca <TIM_Base_SetConfig+0xaa>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a2c      	ldr	r2, [pc, #176]	; (8004558 <TIM_Base_SetConfig+0x138>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00f      	beq.n	80044ca <TIM_Base_SetConfig+0xaa>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a2b      	ldr	r2, [pc, #172]	; (800455c <TIM_Base_SetConfig+0x13c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00b      	beq.n	80044ca <TIM_Base_SetConfig+0xaa>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a2a      	ldr	r2, [pc, #168]	; (8004560 <TIM_Base_SetConfig+0x140>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d007      	beq.n	80044ca <TIM_Base_SetConfig+0xaa>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a29      	ldr	r2, [pc, #164]	; (8004564 <TIM_Base_SetConfig+0x144>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d003      	beq.n	80044ca <TIM_Base_SetConfig+0xaa>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a28      	ldr	r2, [pc, #160]	; (8004568 <TIM_Base_SetConfig+0x148>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d108      	bne.n	80044dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a10      	ldr	r2, [pc, #64]	; (8004544 <TIM_Base_SetConfig+0x124>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d00f      	beq.n	8004528 <TIM_Base_SetConfig+0x108>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a12      	ldr	r2, [pc, #72]	; (8004554 <TIM_Base_SetConfig+0x134>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00b      	beq.n	8004528 <TIM_Base_SetConfig+0x108>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a11      	ldr	r2, [pc, #68]	; (8004558 <TIM_Base_SetConfig+0x138>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d007      	beq.n	8004528 <TIM_Base_SetConfig+0x108>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a10      	ldr	r2, [pc, #64]	; (800455c <TIM_Base_SetConfig+0x13c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d003      	beq.n	8004528 <TIM_Base_SetConfig+0x108>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a0f      	ldr	r2, [pc, #60]	; (8004560 <TIM_Base_SetConfig+0x140>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d103      	bne.n	8004530 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	615a      	str	r2, [r3, #20]
}
 8004536:	bf00      	nop
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40010000 	.word	0x40010000
 8004548:	40000400 	.word	0x40000400
 800454c:	40000800 	.word	0x40000800
 8004550:	40000c00 	.word	0x40000c00
 8004554:	40010400 	.word	0x40010400
 8004558:	40014000 	.word	0x40014000
 800455c:	40014400 	.word	0x40014400
 8004560:	40014800 	.word	0x40014800
 8004564:	4000e000 	.word	0x4000e000
 8004568:	4000e400 	.word	0x4000e400

0800456c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004580:	2302      	movs	r3, #2
 8004582:	e077      	b.n	8004674 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a35      	ldr	r2, [pc, #212]	; (8004680 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d004      	beq.n	80045b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a34      	ldr	r2, [pc, #208]	; (8004684 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d108      	bne.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80045be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a25      	ldr	r2, [pc, #148]	; (8004680 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d02c      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f6:	d027      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a22      	ldr	r2, [pc, #136]	; (8004688 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d022      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a21      	ldr	r2, [pc, #132]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d01d      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a1f      	ldr	r2, [pc, #124]	; (8004690 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d018      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a1a      	ldr	r2, [pc, #104]	; (8004684 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d013      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a1b      	ldr	r2, [pc, #108]	; (8004694 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00e      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a1a      	ldr	r2, [pc, #104]	; (8004698 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d009      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a18      	ldr	r2, [pc, #96]	; (800469c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d004      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a17      	ldr	r2, [pc, #92]	; (80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d10c      	bne.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800464e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	4313      	orrs	r3, r2
 8004658:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40010000 	.word	0x40010000
 8004684:	40010400 	.word	0x40010400
 8004688:	40000400 	.word	0x40000400
 800468c:	40000800 	.word	0x40000800
 8004690:	40000c00 	.word	0x40000c00
 8004694:	40001800 	.word	0x40001800
 8004698:	40014000 	.word	0x40014000
 800469c:	4000e000 	.word	0x4000e000
 80046a0:	4000e400 	.word	0x4000e400

080046a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046e0:	b084      	sub	sp, #16
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	f107 001c 	add.w	r0, r7, #28
 80046ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d120      	bne.n	800473a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	4b2a      	ldr	r3, [pc, #168]	; (80047b4 <USB_CoreInit+0xd4>)
 800470a:	4013      	ands	r3, r2
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800471c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800471e:	2b01      	cmp	r3, #1
 8004720:	d105      	bne.n	800472e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 faac 	bl	8004c8c <USB_CoreReset>
 8004734:	4603      	mov	r3, r0
 8004736:	73fb      	strb	r3, [r7, #15]
 8004738:	e01a      	b.n	8004770 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 faa0 	bl	8004c8c <USB_CoreReset>
 800474c:	4603      	mov	r3, r0
 800474e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	639a      	str	r2, [r3, #56]	; 0x38
 8004762:	e005      	b.n	8004770 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	2b01      	cmp	r3, #1
 8004774:	d116      	bne.n	80047a4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477a:	b29a      	uxth	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004784:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <USB_CoreInit+0xd8>)
 8004786:	4313      	orrs	r3, r2
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f043 0206 	orr.w	r2, r3, #6
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f043 0220 	orr.w	r2, r3, #32
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047b0:	b004      	add	sp, #16
 80047b2:	4770      	bx	lr
 80047b4:	ffbdffbf 	.word	0xffbdffbf
 80047b8:	03ee0000 	.word	0x03ee0000

080047bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f023 0201 	bic.w	r2, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b084      	sub	sp, #16
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	460b      	mov	r3, r1
 80047e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d115      	bne.n	800482c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800480c:	2001      	movs	r0, #1
 800480e:	f7fc fdaf 	bl	8001370 <HAL_Delay>
      ms++;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	3301      	adds	r3, #1
 8004816:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fa29 	bl	8004c70 <USB_GetMode>
 800481e:	4603      	mov	r3, r0
 8004820:	2b01      	cmp	r3, #1
 8004822:	d01e      	beq.n	8004862 <USB_SetCurrentMode+0x84>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b31      	cmp	r3, #49	; 0x31
 8004828:	d9f0      	bls.n	800480c <USB_SetCurrentMode+0x2e>
 800482a:	e01a      	b.n	8004862 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800482c:	78fb      	ldrb	r3, [r7, #3]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d115      	bne.n	800485e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800483e:	2001      	movs	r0, #1
 8004840:	f7fc fd96 	bl	8001370 <HAL_Delay>
      ms++;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	3301      	adds	r3, #1
 8004848:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fa10 	bl	8004c70 <USB_GetMode>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d005      	beq.n	8004862 <USB_SetCurrentMode+0x84>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b31      	cmp	r3, #49	; 0x31
 800485a:	d9f0      	bls.n	800483e <USB_SetCurrentMode+0x60>
 800485c:	e001      	b.n	8004862 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e005      	b.n	800486e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b32      	cmp	r3, #50	; 0x32
 8004866:	d101      	bne.n	800486c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e000      	b.n	800486e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004878:	b084      	sub	sp, #16
 800487a:	b580      	push	{r7, lr}
 800487c:	b086      	sub	sp, #24
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004892:	2300      	movs	r3, #0
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	e009      	b.n	80048ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	3340      	adds	r3, #64	; 0x40
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	2200      	movs	r2, #0
 80048a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	3301      	adds	r3, #1
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	2b0e      	cmp	r3, #14
 80048b0:	d9f2      	bls.n	8004898 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d11c      	bne.n	80048f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048c6:	f043 0302 	orr.w	r3, r3, #2
 80048ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	e005      	b.n	80048fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004904:	461a      	mov	r2, r3
 8004906:	2300      	movs	r3, #0
 8004908:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004910:	4619      	mov	r1, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004918:	461a      	mov	r2, r3
 800491a:	680b      	ldr	r3, [r1, #0]
 800491c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800491e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004920:	2b01      	cmp	r3, #1
 8004922:	d10c      	bne.n	800493e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	2b00      	cmp	r3, #0
 8004928:	d104      	bne.n	8004934 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800492a:	2100      	movs	r1, #0
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f965 	bl	8004bfc <USB_SetDevSpeed>
 8004932:	e008      	b.n	8004946 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004934:	2101      	movs	r1, #1
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f960 	bl	8004bfc <USB_SetDevSpeed>
 800493c:	e003      	b.n	8004946 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800493e:	2103      	movs	r1, #3
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f95b 	bl	8004bfc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004946:	2110      	movs	r1, #16
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f8f3 	bl	8004b34 <USB_FlushTxFifo>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f91f 	bl	8004b9c <USB_FlushRxFifo>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496e:	461a      	mov	r2, r3
 8004970:	2300      	movs	r3, #0
 8004972:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497a:	461a      	mov	r2, r3
 800497c:	2300      	movs	r3, #0
 800497e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004986:	461a      	mov	r2, r3
 8004988:	2300      	movs	r3, #0
 800498a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800498c:	2300      	movs	r3, #0
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	e043      	b.n	8004a1a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049a8:	d118      	bne.n	80049dc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049bc:	461a      	mov	r2, r3
 80049be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	e013      	b.n	80049ee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	015a      	lsls	r2, r3, #5
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d2:	461a      	mov	r2, r3
 80049d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	e008      	b.n	80049ee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e8:	461a      	mov	r2, r3
 80049ea:	2300      	movs	r3, #0
 80049ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fa:	461a      	mov	r2, r3
 80049fc:	2300      	movs	r3, #0
 80049fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	3301      	adds	r3, #1
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d3b7      	bcc.n	8004992 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a22:	2300      	movs	r3, #0
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	e043      	b.n	8004ab0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a3e:	d118      	bne.n	8004a72 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10a      	bne.n	8004a5c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a52:	461a      	mov	r2, r3
 8004a54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e013      	b.n	8004a84 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a68:	461a      	mov	r2, r3
 8004a6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	e008      	b.n	8004a84 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2300      	movs	r3, #0
 8004a82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a90:	461a      	mov	r2, r3
 8004a92:	2300      	movs	r3, #0
 8004a94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004aa8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	3301      	adds	r3, #1
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d3b7      	bcc.n	8004a28 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ac6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ad8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d105      	bne.n	8004aec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	f043 0210 	orr.w	r2, r3, #16
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699a      	ldr	r2, [r3, #24]
 8004af0:	4b0e      	ldr	r3, [pc, #56]	; (8004b2c <USB_DevInit+0x2b4>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f043 0208 	orr.w	r2, r3, #8
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d105      	bne.n	8004b1c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	699a      	ldr	r2, [r3, #24]
 8004b14:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <USB_DevInit+0x2b8>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b28:	b004      	add	sp, #16
 8004b2a:	4770      	bx	lr
 8004b2c:	803c3800 	.word	0x803c3800
 8004b30:	40000004 	.word	0x40000004

08004b34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3301      	adds	r3, #1
 8004b46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <USB_FlushTxFifo+0x64>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d901      	bls.n	8004b54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e01b      	b.n	8004b8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	daf2      	bge.n	8004b42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	019b      	lsls	r3, r3, #6
 8004b64:	f043 0220 	orr.w	r2, r3, #32
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4a08      	ldr	r2, [pc, #32]	; (8004b98 <USB_FlushTxFifo+0x64>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d901      	bls.n	8004b7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e006      	b.n	8004b8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0320 	and.w	r3, r3, #32
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	d0f0      	beq.n	8004b6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	00030d40 	.word	0x00030d40

08004b9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3301      	adds	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4a11      	ldr	r2, [pc, #68]	; (8004bf8 <USB_FlushRxFifo+0x5c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d901      	bls.n	8004bba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e018      	b.n	8004bec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	daf2      	bge.n	8004ba8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2210      	movs	r2, #16
 8004bca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4a08      	ldr	r2, [pc, #32]	; (8004bf8 <USB_FlushRxFifo+0x5c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d901      	bls.n	8004bde <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e006      	b.n	8004bec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b10      	cmp	r3, #16
 8004be8:	d0f0      	beq.n	8004bcc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	00030d40 	.word	0x00030d40

08004bfc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	68f9      	ldr	r1, [r7, #12]
 8004c18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b085      	sub	sp, #20
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c48:	f023 0303 	bic.w	r3, r3, #3
 8004c4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c5c:	f043 0302 	orr.w	r3, r3, #2
 8004c60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4a13      	ldr	r2, [pc, #76]	; (8004cf0 <USB_CoreReset+0x64>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d901      	bls.n	8004caa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e01b      	b.n	8004ce2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	daf2      	bge.n	8004c98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f043 0201 	orr.w	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4a09      	ldr	r2, [pc, #36]	; (8004cf0 <USB_CoreReset+0x64>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d901      	bls.n	8004cd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e006      	b.n	8004ce2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d0f0      	beq.n	8004cc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	00030d40 	.word	0x00030d40

08004cf4 <tud_audio_n_read>:
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
  return tu_fifo_count(&_audiod_fct[func_id].ep_out_ff);
}

uint16_t tud_audio_n_read(uint8_t func_id, void* buffer, uint16_t bufsize)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	6039      	str	r1, [r7, #0]
 8004cfe:	71fb      	strb	r3, [r7, #7]
 8004d00:	4613      	mov	r3, r2
 8004d02:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
 8004d04:	79fb      	ldrb	r3, [r7, #7]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10a      	bne.n	8004d20 <tud_audio_n_read+0x2c>
 8004d0a:	79fa      	ldrb	r2, [r7, #7]
 8004d0c:	490e      	ldr	r1, [pc, #56]	; (8004d48 <tud_audio_n_read+0x54>)
 8004d0e:	4613      	mov	r3, r2
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	1a9b      	subs	r3, r3, r2
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	440b      	add	r3, r1
 8004d18:	3304      	adds	r3, #4
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <tud_audio_n_read+0x30>
 8004d20:	2300      	movs	r3, #0
 8004d22:	e00d      	b.n	8004d40 <tud_audio_n_read+0x4c>
  return tu_fifo_read_n(&_audiod_fct[func_id].ep_out_ff, buffer, bufsize);
 8004d24:	79fa      	ldrb	r2, [r7, #7]
 8004d26:	4613      	mov	r3, r2
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	1a9b      	subs	r3, r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	3320      	adds	r3, #32
 8004d30:	4a05      	ldr	r2, [pc, #20]	; (8004d48 <tud_audio_n_read+0x54>)
 8004d32:	4413      	add	r3, r2
 8004d34:	88ba      	ldrh	r2, [r7, #4]
 8004d36:	6839      	ldr	r1, [r7, #0]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f002 fb1e 	bl	800737a <tu_fifo_read_n>
 8004d3e:	4603      	mov	r3, r0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	2400188c 	.word	0x2400188c

08004d4c <audiod_rx_done_cb>:
// If you prefer your own (more efficient) implementation suiting your purpose set CFG_TUD_AUDIO_ENABLE_DECODING = 0.

#if CFG_TUD_AUDIO_ENABLE_EP_OUT

static bool audiod_rx_done_cb(uint8_t rhport, audiod_function_t* audio, uint16_t n_bytes_received)
{
 8004d4c:	b590      	push	{r4, r7, lr}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	4603      	mov	r3, r0
 8004d54:	6039      	str	r1, [r7, #0]
 8004d56:	71fb      	strb	r3, [r7, #7]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	80bb      	strh	r3, [r7, #4]
  uint8_t idxItf = 0;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	73bb      	strb	r3, [r7, #14]
  uint8_t const *dummy2;
  uint8_t idx_audio_fct = 0;
 8004d60:	2300      	movs	r3, #0
 8004d62:	73fb      	strb	r3, [r7, #15]

  if (tud_audio_rx_done_pre_read_cb || tud_audio_rx_done_post_read_cb)
 8004d64:	4b32      	ldr	r3, [pc, #200]	; (8004e30 <audiod_rx_done_cb+0xe4>)
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d102      	bne.n	8004d70 <audiod_rx_done_cb+0x24>
 8004d6a:	4b32      	ldr	r3, [pc, #200]	; (8004e34 <audiod_rx_done_cb+0xe8>)
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d015      	beq.n	8004d9c <audiod_rx_done_cb+0x50>
  {
    idx_audio_fct = audiod_get_audio_fct_idx(audio);
 8004d70:	6838      	ldr	r0, [r7, #0]
 8004d72:	f001 f8d3 	bl	8005f1c <audiod_get_audio_fct_idx>
 8004d76:	4603      	mov	r3, r0
 8004d78:	73fb      	strb	r3, [r7, #15]
    TU_VERIFY(audiod_get_AS_interface_index(audio->ep_out_as_intf_num, audio, &idxItf, &dummy2));
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	7c18      	ldrb	r0, [r3, #16]
 8004d7e:	f107 0308 	add.w	r3, r7, #8
 8004d82:	f107 020e 	add.w	r2, r7, #14
 8004d86:	6839      	ldr	r1, [r7, #0]
 8004d88:	f000 fee4 	bl	8005b54 <audiod_get_AS_interface_index>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	f083 0301 	eor.w	r3, r3, #1
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <audiod_rx_done_cb+0x50>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e044      	b.n	8004e26 <audiod_rx_done_cb+0xda>
  }

  // Call a weak callback here - a possibility for user to get informed an audio packet was received and data gets now loaded into EP FIFO (or decoded into support RX software FIFO)
  if (tud_audio_rx_done_pre_read_cb)
 8004d9c:	4b24      	ldr	r3, [pc, #144]	; (8004e30 <audiod_rx_done_cb+0xe4>)
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d015      	beq.n	8004dce <audiod_rx_done_cb+0x82>
  {
    TU_VERIFY(tud_audio_rx_done_pre_read_cb(rhport, n_bytes_received, idx_audio_fct, audio->ep_out, audio->alt_setting[idxItf]));
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	7b5c      	ldrb	r4, [r3, #13]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	7bba      	ldrb	r2, [r7, #14]
 8004dac:	4413      	add	r3, r2
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	7bfa      	ldrb	r2, [r7, #15]
 8004db2:	88b9      	ldrh	r1, [r7, #4]
 8004db4:	79f8      	ldrb	r0, [r7, #7]
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	4623      	mov	r3, r4
 8004dba:	f7fb fd83 	bl	80008c4 <tud_audio_rx_done_pre_read_cb>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	f083 0301 	eor.w	r3, r3, #1
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <audiod_rx_done_cb+0x82>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e02b      	b.n	8004e26 <audiod_rx_done_cb+0xda>

  // Schedule for next receive
  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_out, audio->lin_buf_out, audio->ep_out_sz), false);
#else
  // Data is already placed in EP FIFO, schedule for next receive
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	7b59      	ldrb	r1, [r3, #13]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	f103 0220 	add.w	r2, r3, #32
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	89db      	ldrh	r3, [r3, #14]
 8004ddc:	79f8      	ldrb	r0, [r7, #7]
 8004dde:	f003 fe13 	bl	8008a08 <usbd_edpt_xfer_fifo>
 8004de2:	4603      	mov	r3, r0
 8004de4:	f083 0301 	eor.w	r3, r3, #1
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <audiod_rx_done_cb+0xa6>
 8004dee:	2300      	movs	r3, #0
 8004df0:	e019      	b.n	8004e26 <audiod_rx_done_cb+0xda>
#endif

#endif

  // Call a weak callback here - a possibility for user to get informed decoding was completed
  if (tud_audio_rx_done_post_read_cb)
 8004df2:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <audiod_rx_done_cb+0xe8>)
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d015      	beq.n	8004e24 <audiod_rx_done_cb+0xd8>
  {
    TU_VERIFY(tud_audio_rx_done_post_read_cb(rhport, n_bytes_received, idx_audio_fct, audio->ep_out, audio->alt_setting[idxItf]));
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	7b5c      	ldrb	r4, [r3, #13]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	7bba      	ldrb	r2, [r7, #14]
 8004e02:	4413      	add	r3, r2
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	7bfa      	ldrb	r2, [r7, #15]
 8004e08:	88b9      	ldrh	r1, [r7, #4]
 8004e0a:	79f8      	ldrb	r0, [r7, #7]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	4623      	mov	r3, r4
 8004e10:	f3af 8000 	nop.w
 8004e14:	4603      	mov	r3, r0
 8004e16:	f083 0301 	eor.w	r3, r3, #1
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <audiod_rx_done_cb+0xd8>
 8004e20:	2300      	movs	r3, #0
 8004e22:	e000      	b.n	8004e26 <audiod_rx_done_cb+0xda>
  }

  return true;
 8004e24:	2301      	movs	r3, #1
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd90      	pop	{r4, r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	080008c5 	.word	0x080008c5
 8004e34:	00000000 	.word	0x00000000

08004e38 <tud_audio_n_write>:
 * \param[in]       data: Pointer to data array to be copied from
 * \param[in]       len: # of array elements to copy
 * \return          Number of bytes actually written
 */
uint16_t tud_audio_n_write(uint8_t func_id, const void * data, uint16_t len)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	6039      	str	r1, [r7, #0]
 8004e42:	71fb      	strb	r3, [r7, #7]
 8004e44:	4613      	mov	r3, r2
 8004e46:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
 8004e48:	79fb      	ldrb	r3, [r7, #7]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10a      	bne.n	8004e64 <tud_audio_n_write+0x2c>
 8004e4e:	79fa      	ldrb	r2, [r7, #7]
 8004e50:	490f      	ldr	r1, [pc, #60]	; (8004e90 <tud_audio_n_write+0x58>)
 8004e52:	4613      	mov	r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	1a9b      	subs	r3, r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	440b      	add	r3, r1
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <tud_audio_n_write+0x30>
 8004e64:	2300      	movs	r3, #0
 8004e66:	e00e      	b.n	8004e86 <tud_audio_n_write+0x4e>
  return tu_fifo_write_n(&_audiod_fct[func_id].ep_in_ff, data, len);
 8004e68:	79fa      	ldrb	r2, [r7, #7]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	1a9b      	subs	r3, r3, r2
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	3328      	adds	r3, #40	; 0x28
 8004e74:	4a06      	ldr	r2, [pc, #24]	; (8004e90 <tud_audio_n_write+0x58>)
 8004e76:	4413      	add	r3, r2
 8004e78:	3304      	adds	r3, #4
 8004e7a:	88ba      	ldrh	r2, [r7, #4]
 8004e7c:	6839      	ldr	r1, [r7, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f002 fae2 	bl	8007448 <tu_fifo_write_n>
 8004e84:	4603      	mov	r3, r0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	2400188c 	.word	0x2400188c

08004e94 <audiod_tx_done_cb>:
// If you prefer your own (more efficient) implementation suiting your purpose set CFG_TUD_AUDIO_ENABLE_ENCODING = 0 and use tud_audio_n_write.

// n_bytes_copied - Informs caller how many bytes were loaded. In case n_bytes_copied = 0, a ZLP is scheduled to inform host no data is available for current frame.
#if CFG_TUD_AUDIO_ENABLE_EP_IN
static bool audiod_tx_done_cb(uint8_t rhport, audiod_function_t * audio)
{
 8004e94:	b590      	push	{r4, r7, lr}
 8004e96:	b089      	sub	sp, #36	; 0x24
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	6039      	str	r1, [r7, #0]
 8004e9e:	71fb      	strb	r3, [r7, #7]
  uint8_t idxItf;
  uint8_t const *dummy2;

  uint8_t idx_audio_fct = audiod_get_audio_fct_idx(audio);
 8004ea0:	6838      	ldr	r0, [r7, #0]
 8004ea2:	f001 f83b 	bl	8005f1c <audiod_get_audio_fct_idx>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	75fb      	strb	r3, [r7, #23]
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	7b18      	ldrb	r0, [r3, #12]
 8004eae:	f107 0308 	add.w	r3, r7, #8
 8004eb2:	f107 020f 	add.w	r2, r7, #15
 8004eb6:	6839      	ldr	r1, [r7, #0]
 8004eb8:	f000 fe4c 	bl	8005b54 <audiod_get_AS_interface_index>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f083 0301 	eor.w	r3, r3, #1
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <audiod_tx_done_cb+0x38>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	e05b      	b.n	8004f84 <audiod_tx_done_cb+0xf0>

  // Only send something if current alternate interface is not 0 as in this case nothing is to be sent due to UAC2 specifications
  if (audio->alt_setting[idxItf] == 0) return false;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	7bfa      	ldrb	r2, [r7, #15]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <audiod_tx_done_cb+0x4a>
 8004eda:	2300      	movs	r3, #0
 8004edc:	e052      	b.n	8004f84 <audiod_tx_done_cb+0xf0>

  // Call a weak callback here - a possibility for user to get informed former TX was completed and data gets now loaded into EP in buffer (in case FIFOs are used) or
  // if no FIFOs are used the user may use this call back to load its data into the EP IN buffer by use of tud_audio_n_write_ep_in_buffer().
  if (tud_audio_tx_done_pre_load_cb) TU_VERIFY(tud_audio_tx_done_pre_load_cb(rhport, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 8004ede:	4b2b      	ldr	r3, [pc, #172]	; (8004f8c <audiod_tx_done_cb+0xf8>)
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d012      	beq.n	8004f0a <audiod_tx_done_cb+0x76>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	7a1a      	ldrb	r2, [r3, #8]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	7bf9      	ldrb	r1, [r7, #15]
 8004eee:	440b      	add	r3, r1
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	7df9      	ldrb	r1, [r7, #23]
 8004ef4:	79f8      	ldrb	r0, [r7, #7]
 8004ef6:	f7fb fd07 	bl	8000908 <tud_audio_tx_done_pre_load_cb>
 8004efa:	4603      	mov	r3, r0
 8004efc:	f083 0301 	eor.w	r3, r3, #1
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <audiod_tx_done_cb+0x76>
 8004f06:	2300      	movs	r3, #0
 8004f08:	e03c      	b.n	8004f84 <audiod_tx_done_cb+0xf0>
  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_in, audio->lin_buf_in, n_bytes_tx));

#else
  // No support FIFOs, if no linear buffer required schedule transmit, else put data into linear buffer and schedule

  n_bytes_tx = tu_min16(tu_fifo_count(&audio->ep_in_ff), audio->ep_in_sz);      // Limit up to max packet size, more can not be done for ISO
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	332c      	adds	r3, #44	; 0x2c
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f002 f962 	bl	80071d8 <tu_fifo_count>
 8004f14:	4603      	mov	r3, r0
 8004f16:	461a      	mov	r2, r3
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	895b      	ldrh	r3, [r3, #10]
 8004f1c:	827a      	strh	r2, [r7, #18]
 8004f1e:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8004f20:	8a7a      	ldrh	r2, [r7, #18]
 8004f22:	8a3b      	ldrh	r3, [r7, #16]
 8004f24:	4293      	cmp	r3, r2
 8004f26:	bf28      	it	cs
 8004f28:	4613      	movcs	r3, r2
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	82bb      	strh	r3, [r7, #20]
#if USE_LINEAR_BUFFER_TX
  tu_fifo_read_n(&audio->ep_in_ff, audio->lin_buf_in, n_bytes_tx);
  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_in, audio->lin_buf_in, n_bytes_tx));
#else
  // Send everything in ISO EP FIFO
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_in, &audio->ep_in_ff, n_bytes_tx));
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	7a19      	ldrb	r1, [r3, #8]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004f38:	8abb      	ldrh	r3, [r7, #20]
 8004f3a:	79f8      	ldrb	r0, [r7, #7]
 8004f3c:	f003 fd64 	bl	8008a08 <usbd_edpt_xfer_fifo>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f083 0301 	eor.w	r3, r3, #1
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <audiod_tx_done_cb+0xbc>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	e019      	b.n	8004f84 <audiod_tx_done_cb+0xf0>
#endif

#endif

  // Call a weak callback here - a possibility for user to get informed former TX was completed and how many bytes were loaded for the next frame
  if (tud_audio_tx_done_post_load_cb) TU_VERIFY(tud_audio_tx_done_post_load_cb(rhport, n_bytes_tx, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 8004f50:	4b0f      	ldr	r3, [pc, #60]	; (8004f90 <audiod_tx_done_cb+0xfc>)
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d015      	beq.n	8004f82 <audiod_tx_done_cb+0xee>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	7a1c      	ldrb	r4, [r3, #8]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	7bfa      	ldrb	r2, [r7, #15]
 8004f60:	4413      	add	r3, r2
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	7dfa      	ldrb	r2, [r7, #23]
 8004f66:	8ab9      	ldrh	r1, [r7, #20]
 8004f68:	79f8      	ldrb	r0, [r7, #7]
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	4623      	mov	r3, r4
 8004f6e:	f3af 8000 	nop.w
 8004f72:	4603      	mov	r3, r0
 8004f74:	f083 0301 	eor.w	r3, r3, #1
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <audiod_tx_done_cb+0xee>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e000      	b.n	8004f84 <audiod_tx_done_cb+0xf0>

  return true;
 8004f82:	2301      	movs	r3, #1
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	371c      	adds	r7, #28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd90      	pop	{r4, r7, pc}
 8004f8c:	08000909 	.word	0x08000909
 8004f90:	00000000 	.word	0x00000000

08004f94 <audiod_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void audiod_init(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af02      	add	r7, sp, #8
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 8004f9a:	2238      	movs	r2, #56	; 0x38
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	4824      	ldr	r0, [pc, #144]	; (8005030 <audiod_init+0x9c>)
 8004fa0:	f005 fe16 	bl	800abd0 <memset>

  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	71fb      	strb	r3, [r7, #7]
 8004fa8:	e039      	b.n	800501e <audiod_init+0x8a>
  {
    audiod_function_t* audio = &_audiod_fct[i];
 8004faa:	79fa      	ldrb	r2, [r7, #7]
 8004fac:	4613      	mov	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	1a9b      	subs	r3, r3, r2
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	4a1e      	ldr	r2, [pc, #120]	; (8005030 <audiod_init+0x9c>)
 8004fb6:	4413      	add	r3, r2
 8004fb8:	603b      	str	r3, [r7, #0]

    // Initialize control buffers
    switch (i)
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d106      	bne.n	8004fce <audiod_init+0x3a>
    {
      case 0:
        audio->ctrl_buf = ctrl_buf_1;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	4a1c      	ldr	r2, [pc, #112]	; (8005034 <audiod_init+0xa0>)
 8004fc4:	615a      	str	r2, [r3, #20]
        audio->ctrl_buf_sz = CFG_TUD_AUDIO_FUNC_1_CTRL_BUF_SZ;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2240      	movs	r2, #64	; 0x40
 8004fca:	761a      	strb	r2, [r3, #24]
        break;
 8004fcc:	bf00      	nop
        break;
#endif
    }

    // Initialize active alternate interface buffers
    switch (i)
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d103      	bne.n	8004fdc <audiod_init+0x48>
    {
#if CFG_TUD_AUDIO_FUNC_1_N_AS_INT > 0
      case 0:
        audio->alt_setting = alt_setting_1;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	4a18      	ldr	r2, [pc, #96]	; (8005038 <audiod_init+0xa4>)
 8004fd8:	61da      	str	r2, [r3, #28]
        break;
 8004fda:	bf00      	nop
    }

    // Initialize IN EP FIFO if required
#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING

    switch (i)
 8004fdc:	79fb      	ldrb	r3, [r7, #7]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10b      	bne.n	8004ffa <audiod_init+0x66>
    {
#if CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ > 0
      case 0:
        tu_fifo_config(&audio->ep_in_ff, audio_ep_in_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ, 1, true);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8004fe8:	2301      	movs	r3, #1
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	2301      	movs	r3, #1
 8004fee:	f44f 7242 	mov.w	r2, #776	; 0x308
 8004ff2:	4912      	ldr	r1, [pc, #72]	; (800503c <audiod_init+0xa8>)
 8004ff4:	f001 fc5e 	bl	80068b4 <tu_fifo_config>
#if CFG_FIFO_MUTEX
        tu_fifo_config_mutex(&audio->ep_in_ff, osal_mutex_create(&ep_in_ff_mutex_wr_1), NULL);
#endif
        break;
 8004ff8:	bf00      	nop
#endif // USE_LINEAR_BUFFER_TX

    // Initialize OUT EP FIFO if required
#if CFG_TUD_AUDIO_ENABLE_EP_OUT && !CFG_TUD_AUDIO_ENABLE_DECODING

    switch (i)
 8004ffa:	79fb      	ldrb	r3, [r7, #7]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10b      	bne.n	8005018 <audiod_init+0x84>
    {
#if CFG_TUD_AUDIO_FUNC_1_EP_OUT_SW_BUF_SZ > 0
      case 0:
        tu_fifo_config(&audio->ep_out_ff, audio_ep_out_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_OUT_SW_BUF_SZ, 1, true);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	f103 0020 	add.w	r0, r3, #32
 8005006:	2301      	movs	r3, #1
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	2301      	movs	r3, #1
 800500c:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8005010:	490b      	ldr	r1, [pc, #44]	; (8005040 <audiod_init+0xac>)
 8005012:	f001 fc4f 	bl	80068b4 <tu_fifo_config>
#if CFG_FIFO_MUTEX
        tu_fifo_config_mutex(&audio->ep_out_ff, NULL, osal_mutex_create(&ep_out_ff_mutex_rd_1));
#endif
        break;
 8005016:	bf00      	nop
  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8005018:	79fb      	ldrb	r3, [r7, #7]
 800501a:	3301      	adds	r3, #1
 800501c:	71fb      	strb	r3, [r7, #7]
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0c2      	beq.n	8004faa <audiod_init+0x16>
        break;
#endif
    }
#endif // CFG_TUD_AUDIO_ENABLE_TYPE_I_DECODING
  }
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	2400188c 	.word	0x2400188c
 8005034:	24001848 	.word	0x24001848
 8005038:	24001888 	.word	0x24001888
 800503c:	24000f30 	.word	0x24000f30
 8005040:	24001238 	.word	0x24001238

08005044 <audiod_reset>:

void audiod_reset(uint8_t rhport)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	4603      	mov	r3, r0
 800504c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 800504e:	2300      	movs	r3, #0
 8005050:	73fb      	strb	r3, [r7, #15]
 8005052:	e019      	b.n	8005088 <audiod_reset+0x44>
  {
    audiod_function_t* audio = &_audiod_fct[i];
 8005054:	7bfa      	ldrb	r2, [r7, #15]
 8005056:	4613      	mov	r3, r2
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	4a0e      	ldr	r2, [pc, #56]	; (8005098 <audiod_reset+0x54>)
 8005060:	4413      	add	r3, r2
 8005062:	60bb      	str	r3, [r7, #8]
    tu_memclr(audio, ITF_MEM_RESET_SIZE);
 8005064:	2214      	movs	r2, #20
 8005066:	2100      	movs	r1, #0
 8005068:	68b8      	ldr	r0, [r7, #8]
 800506a:	f005 fdb1 	bl	800abd0 <memset>

#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING
    tu_fifo_clear(&audio->ep_in_ff);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	332c      	adds	r3, #44	; 0x2c
 8005072:	4618      	mov	r0, r3
 8005074:	f002 fa0c 	bl	8007490 <tu_fifo_clear>
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_OUT && !CFG_TUD_AUDIO_ENABLE_DECODING
    tu_fifo_clear(&audio->ep_out_ff);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	3320      	adds	r3, #32
 800507c:	4618      	mov	r0, r3
 800507e:	f002 fa07 	bl	8007490 <tu_fifo_clear>
  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8005082:	7bfb      	ldrb	r3, [r7, #15]
 8005084:	3301      	adds	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0e2      	beq.n	8005054 <audiod_reset+0x10>
    {
      tu_fifo_clear(&audio->rx_supp_ff[cnt]);
    }
#endif
  }
}
 800508e:	bf00      	nop
 8005090:	bf00      	nop
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	2400188c 	.word	0x2400188c

0800509c <audiod_open>:

uint16_t audiod_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	4603      	mov	r3, r0
 80050a4:	6039      	str	r1, [r7, #0]
 80050a6:	71fb      	strb	r3, [r7, #7]
 80050a8:	4613      	mov	r3, r2
 80050aa:	80bb      	strh	r3, [r7, #4]
  (void) max_len;

  TU_VERIFY ( TUSB_CLASS_AUDIO  == itf_desc->bInterfaceClass &&
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	795b      	ldrb	r3, [r3, #5]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d103      	bne.n	80050bc <audiod_open+0x20>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	799b      	ldrb	r3, [r3, #6]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d001      	beq.n	80050c0 <audiod_open+0x24>
 80050bc:	2300      	movs	r3, #0
 80050be:	e064      	b.n	800518a <audiod_open+0xee>
              AUDIO_SUBCLASS_CONTROL    == itf_desc->bInterfaceSubClass);

  // Verify version is correct - this check can be omitted
  TU_VERIFY(itf_desc->bInterfaceProtocol == AUDIO_INT_PROTOCOL_CODE_V2);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	79db      	ldrb	r3, [r3, #7]
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d001      	beq.n	80050cc <audiod_open+0x30>
 80050c8:	2300      	movs	r3, #0
 80050ca:	e05e      	b.n	800518a <audiod_open+0xee>

  // Verify interrupt control EP is enabled if demanded by descriptor - this should be best some static check however - this check can be omitted
  if (itf_desc->bNumEndpoints == 1) // 0 or 1 EPs are allowed
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	791b      	ldrb	r3, [r3, #4]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d101      	bne.n	80050d8 <audiod_open+0x3c>
  {
    TU_VERIFY(CFG_TUD_AUDIO_INT_CTR_EPSIZE_IN > 0);
 80050d4:	2300      	movs	r3, #0
 80050d6:	e058      	b.n	800518a <audiod_open+0xee>
  }

  // Alternate setting MUST be zero - this check can be omitted
  TU_VERIFY(itf_desc->bAlternateSetting == 0);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	78db      	ldrb	r3, [r3, #3]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <audiod_open+0x48>
 80050e0:	2300      	movs	r3, #0
 80050e2:	e052      	b.n	800518a <audiod_open+0xee>

  // Find available audio driver interface
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80050e4:	2300      	movs	r3, #0
 80050e6:	73fb      	strb	r3, [r7, #15]
 80050e8:	e030      	b.n	800514c <audiod_open+0xb0>
  {
    if (!_audiod_fct[i].p_desc)
 80050ea:	7bfa      	ldrb	r2, [r7, #15]
 80050ec:	492a      	ldr	r1, [pc, #168]	; (8005198 <audiod_open+0xfc>)
 80050ee:	4613      	mov	r3, r2
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	1a9b      	subs	r3, r3, r2
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	440b      	add	r3, r1
 80050f8:	3304      	adds	r3, #4
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d122      	bne.n	8005146 <audiod_open+0xaa>
    {
      _audiod_fct[i].p_desc = (uint8_t const *)itf_desc;    // Save pointer to AC descriptor which is by specification always the first one
 8005100:	7bfa      	ldrb	r2, [r7, #15]
 8005102:	4925      	ldr	r1, [pc, #148]	; (8005198 <audiod_open+0xfc>)
 8005104:	4613      	mov	r3, r2
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	1a9b      	subs	r3, r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	440b      	add	r3, r1
 800510e:	3304      	adds	r3, #4
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	601a      	str	r2, [r3, #0]
      _audiod_fct[i].rhport = rhport;
 8005114:	7bfa      	ldrb	r2, [r7, #15]
 8005116:	4920      	ldr	r1, [pc, #128]	; (8005198 <audiod_open+0xfc>)
 8005118:	4613      	mov	r3, r2
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	1a9b      	subs	r3, r3, r2
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	440b      	add	r3, r1
 8005122:	79fa      	ldrb	r2, [r7, #7]
 8005124:	701a      	strb	r2, [r3, #0]

      // Setup descriptor lengths
      switch (i)
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d113      	bne.n	8005154 <audiod_open+0xb8>
      {
        case 0:
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_1_DESC_LEN;
 800512c:	7bfa      	ldrb	r2, [r7, #15]
 800512e:	491a      	ldr	r1, [pc, #104]	; (8005198 <audiod_open+0xfc>)
 8005130:	4613      	mov	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	1a9b      	subs	r3, r3, r2
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	440b      	add	r3, r1
 800513a:	3312      	adds	r3, #18
 800513c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8005140:	801a      	strh	r2, [r3, #0]
          break;
 8005142:	bf00      	nop
      }
  #endif

#endif // USE_ISO_EP_ALLOCATION

      break;
 8005144:	e006      	b.n	8005154 <audiod_open+0xb8>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	3301      	adds	r3, #1
 800514a:	73fb      	strb	r3, [r7, #15]
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0cb      	beq.n	80050ea <audiod_open+0x4e>
 8005152:	e000      	b.n	8005156 <audiod_open+0xba>
      break;
 8005154:	bf00      	nop
    }
  }

  // Verify we found a free one
  TU_ASSERT( i < CFG_TUD_AUDIO );
 8005156:	7bfb      	ldrb	r3, [r7, #15]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <audiod_open+0xd6>
 800515c:	4b0f      	ldr	r3, [pc, #60]	; (800519c <audiod_open+0x100>)
 800515e:	60bb      	str	r3, [r7, #8]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d000      	beq.n	800516e <audiod_open+0xd2>
 800516c:	be00      	bkpt	0x0000
 800516e:	2300      	movs	r3, #0
 8005170:	e00b      	b.n	800518a <audiod_open+0xee>

  // This is all we need so far - the EPs are setup by a later set_interface request (as per UAC2 specification)
  uint16_t drv_len = _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;    // - TUD_AUDIO_DESC_IAD_LEN since tinyUSB already handles the IAD descriptor
 8005172:	7bfa      	ldrb	r2, [r7, #15]
 8005174:	4908      	ldr	r1, [pc, #32]	; (8005198 <audiod_open+0xfc>)
 8005176:	4613      	mov	r3, r2
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	1a9b      	subs	r3, r3, r2
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	440b      	add	r3, r1
 8005180:	3312      	adds	r3, #18
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	3b08      	subs	r3, #8
 8005186:	81bb      	strh	r3, [r7, #12]

  return drv_len;
 8005188:	89bb      	ldrh	r3, [r7, #12]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	2400188c 	.word	0x2400188c
 800519c:	e000edf0 	.word	0xe000edf0

080051a0 <audiod_get_interface>:

static bool audiod_get_interface(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	4603      	mov	r3, r0
 80051a8:	6039      	str	r1, [r7, #0]
 80051aa:	71fb      	strb	r3, [r7, #7]
  uint8_t const itf = tu_u16_low(p_request->wIndex);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	889b      	ldrh	r3, [r3, #4]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	82bb      	strh	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80051b4:	8abb      	ldrh	r3, [r7, #20]
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	75fb      	strb	r3, [r7, #23]

  // Find index of audio streaming interface
  uint8_t func_id, idxItf;
  uint8_t const *dummy;

  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &dummy));
 80051ba:	f107 030c 	add.w	r3, r7, #12
 80051be:	f107 0212 	add.w	r2, r7, #18
 80051c2:	f107 0113 	add.w	r1, r7, #19
 80051c6:	7df8      	ldrb	r0, [r7, #23]
 80051c8:	f000 fd20 	bl	8005c0c <audiod_get_AS_interface_index_global>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f083 0301 	eor.w	r3, r3, #1
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <audiod_get_interface+0x3c>
 80051d8:	2300      	movs	r3, #0
 80051da:	e019      	b.n	8005210 <audiod_get_interface+0x70>
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 80051dc:	7cfb      	ldrb	r3, [r7, #19]
 80051de:	4619      	mov	r1, r3
 80051e0:	4a0d      	ldr	r2, [pc, #52]	; (8005218 <audiod_get_interface+0x78>)
 80051e2:	460b      	mov	r3, r1
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	1a5b      	subs	r3, r3, r1
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	4413      	add	r3, r2
 80051ec:	331c      	adds	r3, #28
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	7cba      	ldrb	r2, [r7, #18]
 80051f2:	441a      	add	r2, r3
 80051f4:	79f8      	ldrb	r0, [r7, #7]
 80051f6:	2301      	movs	r3, #1
 80051f8:	6839      	ldr	r1, [r7, #0]
 80051fa:	f003 fe2b 	bl	8008e54 <tud_control_xfer>
 80051fe:	4603      	mov	r3, r0
 8005200:	f083 0301 	eor.w	r3, r3, #1
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <audiod_get_interface+0x6e>
 800520a:	2300      	movs	r3, #0
 800520c:	e000      	b.n	8005210 <audiod_get_interface+0x70>

  TU_LOG2("  Get itf: %u - current alt: %u\r\n", itf, _audiod_fct[func_id].alt_setting[idxItf]);

  return true;
 800520e:	2301      	movs	r3, #1
}
 8005210:	4618      	mov	r0, r3
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	2400188c 	.word	0x2400188c

0800521c <audiod_set_interface>:

static bool audiod_set_interface(uint8_t rhport, tusb_control_request_t const * p_request)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b096      	sub	sp, #88	; 0x58
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	6039      	str	r1, [r7, #0]
 8005226:	71fb      	strb	r3, [r7, #7]
  // 2. Close EPs which are currently open
  // To do so it is not necessary to know the current active alternate interface since we already save the current EP addresses - we simply close them

  // 3. Open new EP

  uint8_t const itf = tu_u16_low(p_request->wIndex);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	889b      	ldrh	r3, [r3, #4]
 800522c:	b29b      	uxth	r3, r3
 800522e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005230:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  uint8_t const alt = tu_u16_low(p_request->wValue);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	885b      	ldrh	r3, [r3, #2]
 800523c:	b29b      	uxth	r3, r3
 800523e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005240:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005242:	b2db      	uxtb	r3, r3
 8005244:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  TU_LOG2("  Set itf: %u - alt: %u\r\n", itf, alt);

  // Find index of audio streaming interface and index of interface
  uint8_t func_id, idxItf;
  uint8_t const *p_desc;
  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &p_desc));
 8005248:	f107 0308 	add.w	r3, r7, #8
 800524c:	f107 020e 	add.w	r2, r7, #14
 8005250:	f107 010f 	add.w	r1, r7, #15
 8005254:	f897 0056 	ldrb.w	r0, [r7, #86]	; 0x56
 8005258:	f000 fcd8 	bl	8005c0c <audiod_get_AS_interface_index_global>
 800525c:	4603      	mov	r3, r0
 800525e:	f083 0301 	eor.w	r3, r3, #1
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <audiod_set_interface+0x50>
 8005268:	2300      	movs	r3, #0
 800526a:	e168      	b.n	800553e <audiod_set_interface+0x322>

  audiod_function_t* audio = &_audiod_fct[func_id];
 800526c:	7bfb      	ldrb	r3, [r7, #15]
 800526e:	461a      	mov	r2, r3
 8005270:	4613      	mov	r3, r2
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	1a9b      	subs	r3, r3, r2
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	4aa9      	ldr	r2, [pc, #676]	; (8005520 <audiod_set_interface+0x304>)
 800527a:	4413      	add	r3, r2
 800527c:	653b      	str	r3, [r7, #80]	; 0x50

  // Look if there is an EP to be closed - for this driver, there are only 3 possible EPs which may be closed (only AS related EPs can be closed, AC EP (if present) is always open)
#if CFG_TUD_AUDIO_ENABLE_EP_IN
  if (audio->ep_in_as_intf_num == itf)
 800527e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005280:	7b1b      	ldrb	r3, [r3, #12]
 8005282:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8005286:	429a      	cmp	r2, r3
 8005288:	d121      	bne.n	80052ce <audiod_set_interface+0xb2>
  {
    audio->ep_in_as_intf_num = 0;
 800528a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800528c:	2200      	movs	r2, #0
 800528e:	731a      	strb	r2, [r3, #12]
  #if !USE_ISO_EP_ALLOCATION
    usbd_edpt_close(rhport, audio->ep_in);
 8005290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005292:	7a1a      	ldrb	r2, [r3, #8]
 8005294:	79fb      	ldrb	r3, [r7, #7]
 8005296:	4611      	mov	r1, r2
 8005298:	4618      	mov	r0, r3
 800529a:	f003 fcf1 	bl	8008c80 <usbd_edpt_close>
  #endif

    // Clear FIFOs, since data is no longer valid
  #if !CFG_TUD_AUDIO_ENABLE_ENCODING
    tu_fifo_clear(&audio->ep_in_ff);
 800529e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052a0:	332c      	adds	r3, #44	; 0x2c
 80052a2:	4618      	mov	r0, r3
 80052a4:	f002 f8f4 	bl	8007490 <tu_fifo_clear>
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
    }
  #endif

    // Invoke callback - can be used to stop data sampling
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 80052a8:	4b9e      	ldr	r3, [pc, #632]	; (8005524 <audiod_set_interface+0x308>)
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00c      	beq.n	80052c8 <audiod_set_interface+0xac>
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fb faa6 	bl	8000804 <tud_audio_set_itf_close_EP_cb>
 80052b8:	4603      	mov	r3, r0
 80052ba:	f083 0301 	eor.w	r3, r3, #1
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <audiod_set_interface+0xac>
 80052c4:	2300      	movs	r3, #0
 80052c6:	e13a      	b.n	800553e <audiod_set_interface+0x322>

    audio->ep_in = 0;                           // Necessary?
 80052c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ca:	2200      	movs	r2, #0
 80052cc:	721a      	strb	r2, [r3, #8]

  }
#endif // CFG_TUD_AUDIO_ENABLE_EP_IN

#if CFG_TUD_AUDIO_ENABLE_EP_OUT
  if (audio->ep_out_as_intf_num == itf)
 80052ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d0:	7c1b      	ldrb	r3, [r3, #16]
 80052d2:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d121      	bne.n	800531e <audiod_set_interface+0x102>
  {
    audio->ep_out_as_intf_num = 0;
 80052da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052dc:	2200      	movs	r2, #0
 80052de:	741a      	strb	r2, [r3, #16]
  #if !USE_ISO_EP_ALLOCATION
    usbd_edpt_close(rhport, audio->ep_out);
 80052e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052e2:	7b5a      	ldrb	r2, [r3, #13]
 80052e4:	79fb      	ldrb	r3, [r7, #7]
 80052e6:	4611      	mov	r1, r2
 80052e8:	4618      	mov	r0, r3
 80052ea:	f003 fcc9 	bl	8008c80 <usbd_edpt_close>
  #endif

    // Clear FIFOs, since data is no longer valid
  #if !CFG_TUD_AUDIO_ENABLE_DECODING
    tu_fifo_clear(&audio->ep_out_ff);
 80052ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052f0:	3320      	adds	r3, #32
 80052f2:	4618      	mov	r0, r3
 80052f4:	f002 f8cc 	bl	8007490 <tu_fifo_clear>
      tu_fifo_clear(&audio->rx_supp_ff[cnt]);
    }
  #endif

    // Invoke callback - can be used to stop data sampling
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 80052f8:	4b8a      	ldr	r3, [pc, #552]	; (8005524 <audiod_set_interface+0x308>)
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00c      	beq.n	8005318 <audiod_set_interface+0xfc>
 80052fe:	79fb      	ldrb	r3, [r7, #7]
 8005300:	6839      	ldr	r1, [r7, #0]
 8005302:	4618      	mov	r0, r3
 8005304:	f7fb fa7e 	bl	8000804 <tud_audio_set_itf_close_EP_cb>
 8005308:	4603      	mov	r3, r0
 800530a:	f083 0301 	eor.w	r3, r3, #1
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <audiod_set_interface+0xfc>
 8005314:	2300      	movs	r3, #0
 8005316:	e112      	b.n	800553e <audiod_set_interface+0x322>

    audio->ep_out = 0;                          // Necessary?
 8005318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800531a:	2200      	movs	r2, #0
 800531c:	735a      	strb	r2, [r3, #13]
  #endif
  }
#endif // CFG_TUD_AUDIO_ENABLE_EP_OUT

  // Save current alternative interface setting
  audio->alt_setting[idxItf] = alt;
 800531e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	7bba      	ldrb	r2, [r7, #14]
 8005324:	4413      	add	r3, r2
 8005326:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800532a:	701a      	strb	r2, [r3, #0]

  // Open new EP if necessary - EPs are only to be closed or opened for AS interfaces - Look for AS interface with correct alternate interface
  // Get pointer at end
  uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800532c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005332:	8a5b      	ldrh	r3, [r3, #18]
 8005334:	3b08      	subs	r3, #8
 8005336:	4413      	add	r3, r2
 8005338:	64fb      	str	r3, [r7, #76]	; 0x4c

  // p_desc starts at required interface with alternate setting zero
  while (p_desc < p_desc_end)
 800533a:	e0ea      	b.n	8005512 <audiod_set_interface+0x2f6>
  {
    // Find correct interface
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == alt)
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	637b      	str	r3, [r7, #52]	; 0x34
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005342:	3301      	adds	r3, #1
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b04      	cmp	r3, #4
 8005348:	f040 80d9 	bne.w	80054fe <audiod_set_interface+0x2e2>
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	789b      	ldrb	r3, [r3, #2]
 8005350:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8005354:	429a      	cmp	r2, r3
 8005356:	f040 80d2 	bne.w	80054fe <audiod_set_interface+0x2e2>
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	78db      	ldrb	r3, [r3, #3]
 800535e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8005362:	429a      	cmp	r2, r3
 8005364:	f040 80cb 	bne.w	80054fe <audiod_set_interface+0x2e2>
    {
#if CFG_TUD_AUDIO_ENABLE_ENCODING || CFG_TUD_AUDIO_ENABLE_DECODING
      uint8_t const * p_desc_parse_for_params = p_desc;
#endif
      // From this point forward follow the EP descriptors associated to the current alternate setting interface - Open EPs if necessary
      uint8_t foundEPs = 0, nEps = ((tusb_desc_interface_t const * )p_desc)->bNumEndpoints;
 8005368:	2300      	movs	r3, #0
 800536a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	791b      	ldrb	r3, [r3, #4]
 8005372:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
      while (foundEPs < nEps && p_desc < p_desc_end)
 8005376:	e09f      	b.n	80054b8 <audiod_set_interface+0x29c>
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT)
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	633b      	str	r3, [r7, #48]	; 0x30
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	3301      	adds	r3, #1
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b05      	cmp	r3, #5
 8005384:	f040 808e 	bne.w	80054a4 <audiod_set_interface+0x288>
        {
          tusb_desc_endpoint_t const* desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	647b      	str	r3, [r7, #68]	; 0x44
#if USE_ISO_EP_ALLOCATION
          TU_ASSERT(usbd_edpt_iso_activate(rhport, desc_ep));
#else
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800538c:	79fb      	ldrb	r3, [r7, #7]
 800538e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005390:	4618      	mov	r0, r3
 8005392:	f003 fa2b 	bl	80087ec <usbd_edpt_open>
 8005396:	4603      	mov	r3, r0
 8005398:	f083 0301 	eor.w	r3, r3, #1
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <audiod_set_interface+0x19c>
 80053a2:	4b61      	ldr	r3, [pc, #388]	; (8005528 <audiod_set_interface+0x30c>)
 80053a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d000      	beq.n	80053b4 <audiod_set_interface+0x198>
 80053b2:	be00      	bkpt	0x0000
 80053b4:	2300      	movs	r3, #0
 80053b6:	e0c2      	b.n	800553e <audiod_set_interface+0x322>
#endif
          uint8_t const ep_addr = desc_ep->bEndpointAddress;
 80053b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ba:	789b      	ldrb	r3, [r3, #2]
 80053bc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

          //TODO: We need to set EP non busy since this is not taken care of right now in ep_close() - THIS IS A WORKAROUND!
          usbd_edpt_clear_stall(rhport, ep_addr);
 80053c0:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80053c4:	79fb      	ldrb	r3, [r7, #7]
 80053c6:	4611      	mov	r1, r2
 80053c8:	4618      	mov	r0, r3
 80053ca:	f003 fbdf 	bl	8008b8c <usbd_edpt_clear_stall>
 80053ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80053d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80053d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053da:	09db      	lsrs	r3, r3, #7
 80053dc:	b2db      	uxtb	r3, r3

#if CFG_TUD_AUDIO_ENABLE_EP_IN
          if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN && desc_ep->bmAttributes.usage == 0x00)   // Check if usage is data EP
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d12d      	bne.n	800543e <audiod_set_interface+0x222>
 80053e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e4:	78db      	ldrb	r3, [r3, #3]
 80053e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d126      	bne.n	800543e <audiod_set_interface+0x222>
          {
            // Save address
            audio->ep_in = ep_addr;
 80053f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053f2:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80053f6:	721a      	strb	r2, [r3, #8]
            audio->ep_in_as_intf_num = itf;
 80053f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053fa:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80053fe:	731a      	strb	r2, [r3, #12]
 8005400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	889b      	ldrh	r3, [r3, #4]
 8005408:	b29b      	uxth	r3, r3
 800540a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800540e:	b29a      	uxth	r2, r3
            audio->ep_in_sz = tu_edpt_packet_size(desc_ep);
 8005410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005412:	815a      	strh	r2, [r3, #10]
    #endif
  #endif

            // Schedule first transmit if alternate interface is not zero i.e. streaming is disabled - in case no sample data is available a ZLP is loaded
            // It is necessary to trigger this here since the refill is done with an RX FIFO empty interrupt which can only trigger if something was in there
            TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 8005414:	7bfb      	ldrb	r3, [r7, #15]
 8005416:	461a      	mov	r2, r3
 8005418:	4613      	mov	r3, r2
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	1a9b      	subs	r3, r3, r2
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	4a3f      	ldr	r2, [pc, #252]	; (8005520 <audiod_set_interface+0x304>)
 8005422:	441a      	add	r2, r3
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	4611      	mov	r1, r2
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff fd33 	bl	8004e94 <audiod_tx_done_cb>
 800542e:	4603      	mov	r3, r0
 8005430:	f083 0301 	eor.w	r3, r3, #1
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <audiod_set_interface+0x222>
 800543a:	2300      	movs	r3, #0
 800543c:	e07f      	b.n	800553e <audiod_set_interface+0x322>
 800543e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800544a:	09db      	lsrs	r3, r3, #7
 800544c:	b2db      	uxtb	r3, r3
          }
#endif // CFG_TUD_AUDIO_ENABLE_EP_IN

#if CFG_TUD_AUDIO_ENABLE_EP_OUT

          if (tu_edpt_dir(ep_addr) == TUSB_DIR_OUT)     // Checking usage not necessary
 800544e:	2b00      	cmp	r3, #0
 8005450:	d123      	bne.n	800549a <audiod_set_interface+0x27e>
          {
            // Save address
            audio->ep_out = ep_addr;
 8005452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005454:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8005458:	735a      	strb	r2, [r3, #13]
            audio->ep_out_as_intf_num = itf;
 800545a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800545c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8005460:	741a      	strb	r2, [r3, #16]
 8005462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005464:	623b      	str	r3, [r7, #32]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	889b      	ldrh	r3, [r3, #4]
 800546a:	b29b      	uxth	r3, r3
 800546c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005470:	b29a      	uxth	r2, r3
            audio->ep_out_sz = tu_edpt_packet_size(desc_ep);
 8005472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005474:	81da      	strh	r2, [r3, #14]

            // Prepare for incoming data
  #if USE_LINEAR_BUFFER_RX
            TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_out, audio->lin_buf_out, audio->ep_out_sz), false);
  #else
            TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 8005476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005478:	7b59      	ldrb	r1, [r3, #13]
 800547a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800547c:	f103 0220 	add.w	r2, r3, #32
 8005480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005482:	89db      	ldrh	r3, [r3, #14]
 8005484:	79f8      	ldrb	r0, [r7, #7]
 8005486:	f003 fabf 	bl	8008a08 <usbd_edpt_xfer_fifo>
 800548a:	4603      	mov	r3, r0
 800548c:	f083 0301 	eor.w	r3, r3, #1
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <audiod_set_interface+0x27e>
 8005496:	2300      	movs	r3, #0
 8005498:	e051      	b.n	800553e <audiod_set_interface+0x322>
            if (tud_audio_feedback_interval_isr) usbd_sof_enable(rhport, true);
          }
  #endif
#endif // CFG_TUD_AUDIO_ENABLE_EP_OUT

          foundEPs += 1;
 800549a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800549e:	3301      	adds	r3, #1
 80054a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        }
        p_desc = tu_desc_next(p_desc);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	461a      	mov	r2, r3
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	4413      	add	r3, r2
 80054b6:	60bb      	str	r3, [r7, #8]
      while (foundEPs < nEps && p_desc < p_desc_end)
 80054b8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80054bc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d204      	bcs.n	80054ce <audiod_set_interface+0x2b2>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054c8:	429a      	cmp	r2, r3
 80054ca:	f63f af55 	bhi.w	8005378 <audiod_set_interface+0x15c>
      }

      TU_VERIFY(foundEPs == nEps);
 80054ce:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80054d2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d001      	beq.n	80054de <audiod_set_interface+0x2c2>
 80054da:	2300      	movs	r3, #0
 80054dc:	e02f      	b.n	800553e <audiod_set_interface+0x322>

      // Invoke one callback for a final set interface
      if (tud_audio_set_itf_cb) TU_VERIFY(tud_audio_set_itf_cb(rhport, p_request));
 80054de:	4b13      	ldr	r3, [pc, #76]	; (800552c <audiod_set_interface+0x310>)
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d025      	beq.n	8005530 <audiod_set_interface+0x314>
 80054e4:	79fb      	ldrb	r3, [r7, #7]
 80054e6:	6839      	ldr	r1, [r7, #0]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fb f9b3 	bl	8000854 <tud_audio_set_itf_cb>
 80054ee:	4603      	mov	r3, r0
 80054f0:	f083 0301 	eor.w	r3, r3, #1
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d01a      	beq.n	8005530 <audiod_set_interface+0x314>
 80054fa:	2300      	movs	r3, #0
 80054fc:	e01f      	b.n	800553e <audiod_set_interface+0x322>
      // We are done - abort loop
      break;
    }

    // Moving forward
    p_desc = tu_desc_next(p_desc);
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	4413      	add	r3, r2
 8005510:	60bb      	str	r3, [r7, #8]
  while (p_desc < p_desc_end)
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005516:	429a      	cmp	r2, r3
 8005518:	f63f af10 	bhi.w	800533c <audiod_set_interface+0x120>
 800551c:	e009      	b.n	8005532 <audiod_set_interface+0x316>
 800551e:	bf00      	nop
 8005520:	2400188c 	.word	0x2400188c
 8005524:	08000805 	.word	0x08000805
 8005528:	e000edf0 	.word	0xe000edf0
 800552c:	08000855 	.word	0x08000855
      break;
 8005530:	bf00      	nop
    }
  }
  if (disable) usbd_sof_enable(rhport, false);
#endif

  tud_control_status(rhport, p_request);
 8005532:	79fb      	ldrb	r3, [r7, #7]
 8005534:	6839      	ldr	r1, [r7, #0]
 8005536:	4618      	mov	r0, r3
 8005538:	f003 fc1a 	bl	8008d70 <tud_control_status>

  return true;
 800553c:	2301      	movs	r3, #1
}
 800553e:	4618      	mov	r0, r3
 8005540:	3758      	adds	r7, #88	; 0x58
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop

08005548 <audiod_control_complete>:

// Invoked when class request DATA stage is finished.
// return false to stall control EP (e.g Host send non-sense DATA)
static bool audiod_control_complete(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	4603      	mov	r3, r0
 8005550:	6039      	str	r1, [r7, #0]
 8005552:	71fb      	strb	r3, [r7, #7]
  // Handle audio class specific set requests
  if(p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS && p_request->bmRequestType_bit.direction == TUSB_DIR_OUT)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b20      	cmp	r3, #32
 8005560:	f040 809d 	bne.w	800569e <audiod_control_complete+0x156>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	f040 8095 	bne.w	800569e <audiod_control_complete+0x156>
  {
    uint8_t func_id;

    switch (p_request->bmRequestType_bit.recipient)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b01      	cmp	r3, #1
 8005580:	d002      	beq.n	8005588 <audiod_control_complete+0x40>
 8005582:	2b02      	cmp	r3, #2
 8005584:	d057      	beq.n	8005636 <audiod_control_complete+0xee>
 8005586:	e07f      	b.n	8005688 <audiod_control_complete+0x140>
    {
      case TUSB_REQ_RCPT_INTERFACE:
      {
        uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	889b      	ldrh	r3, [r3, #4]
 800558c:	b29b      	uxth	r3, r3
 800558e:	75bb      	strb	r3, [r7, #22]
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	889b      	ldrh	r3, [r3, #4]
 8005594:	b29b      	uxth	r3, r3
 8005596:	0a1b      	lsrs	r3, r3, #8
 8005598:	b29b      	uxth	r3, r3
 800559a:	757b      	strb	r3, [r7, #21]

        if (entityID != 0)
 800559c:	7d7b      	ldrb	r3, [r7, #21]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d024      	beq.n	80055ec <audiod_control_complete+0xa4>
        {
          if (tud_audio_set_req_entity_cb)
 80055a2:	4b41      	ldr	r3, [pc, #260]	; (80056a8 <audiod_control_complete+0x160>)
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d01f      	beq.n	80055e8 <audiod_control_complete+0xa0>
          {
            // Check if entity is present and get corresponding driver index
            TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 80055a8:	f107 020f 	add.w	r2, r7, #15
 80055ac:	7d79      	ldrb	r1, [r7, #21]
 80055ae:	7dbb      	ldrb	r3, [r7, #22]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 fb57 	bl	8005c64 <audiod_verify_entity_exists>
 80055b6:	4603      	mov	r3, r0
 80055b8:	f083 0301 	eor.w	r3, r3, #1
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <audiod_control_complete+0x7e>
 80055c2:	2300      	movs	r3, #0
 80055c4:	e06c      	b.n	80056a0 <audiod_control_complete+0x158>

            // Invoke callback
            return tud_audio_set_req_entity_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
 80055c8:	4619      	mov	r1, r3
 80055ca:	4a38      	ldr	r2, [pc, #224]	; (80056ac <audiod_control_complete+0x164>)
 80055cc:	460b      	mov	r3, r1
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	1a5b      	subs	r3, r3, r1
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	4413      	add	r3, r2
 80055d6:	3314      	adds	r3, #20
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	79fb      	ldrb	r3, [r7, #7]
 80055dc:	6839      	ldr	r1, [r7, #0]
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fb f8e9 	bl	80007b6 <tud_audio_set_req_entity_cb>
 80055e4:	4603      	mov	r3, r0
 80055e6:	e05b      	b.n	80056a0 <audiod_control_complete+0x158>
          }
          else
          {
            TU_LOG2("  No entity set request callback available!\r\n");
            return false;     // In case no callback function is present or request can not be conducted we stall it
 80055e8:	2300      	movs	r3, #0
 80055ea:	e059      	b.n	80056a0 <audiod_control_complete+0x158>
          }
        }
        else
        {
          if (tud_audio_set_req_itf_cb)
 80055ec:	4b30      	ldr	r3, [pc, #192]	; (80056b0 <audiod_control_complete+0x168>)
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d01f      	beq.n	8005632 <audiod_control_complete+0xea>
          {
            // Find index of audio driver structure and verify interface really exists
            TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 80055f2:	f107 020f 	add.w	r2, r7, #15
 80055f6:	7dbb      	ldrb	r3, [r7, #22]
 80055f8:	4611      	mov	r1, r2
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fbaa 	bl	8005d54 <audiod_verify_itf_exists>
 8005600:	4603      	mov	r3, r0
 8005602:	f083 0301 	eor.w	r3, r3, #1
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <audiod_control_complete+0xc8>
 800560c:	2300      	movs	r3, #0
 800560e:	e047      	b.n	80056a0 <audiod_control_complete+0x158>

            // Invoke callback
            return tud_audio_set_req_itf_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8005610:	7bfb      	ldrb	r3, [r7, #15]
 8005612:	4619      	mov	r1, r3
 8005614:	4a25      	ldr	r2, [pc, #148]	; (80056ac <audiod_control_complete+0x164>)
 8005616:	460b      	mov	r3, r1
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	1a5b      	subs	r3, r3, r1
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	4413      	add	r3, r2
 8005620:	3314      	adds	r3, #20
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	6839      	ldr	r1, [r7, #0]
 8005628:	4618      	mov	r0, r3
 800562a:	f3af 8000 	nop.w
 800562e:	4603      	mov	r3, r0
 8005630:	e036      	b.n	80056a0 <audiod_control_complete+0x158>
          }
          else
          {
            TU_LOG2("  No interface set request callback available!\r\n");
            return false;     // In case no callback function is present or request can not be conducted we stall it
 8005632:	2300      	movs	r3, #0
 8005634:	e034      	b.n	80056a0 <audiod_control_complete+0x158>
      }
      break;

      case TUSB_REQ_RCPT_ENDPOINT:
      {
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	889b      	ldrh	r3, [r3, #4]
 800563a:	b29b      	uxth	r3, r3
 800563c:	75fb      	strb	r3, [r7, #23]

        if (tud_audio_set_req_ep_cb)
 800563e:	4b1d      	ldr	r3, [pc, #116]	; (80056b4 <audiod_control_complete+0x16c>)
 8005640:	2b00      	cmp	r3, #0
 8005642:	d01f      	beq.n	8005684 <audiod_control_complete+0x13c>
        {
          // Check if entity is present and get corresponding driver index
          TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8005644:	f107 020f 	add.w	r2, r7, #15
 8005648:	7dfb      	ldrb	r3, [r7, #23]
 800564a:	4611      	mov	r1, r2
 800564c:	4618      	mov	r0, r3
 800564e:	f000 fbeb 	bl	8005e28 <audiod_verify_ep_exists>
 8005652:	4603      	mov	r3, r0
 8005654:	f083 0301 	eor.w	r3, r3, #1
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <audiod_control_complete+0x11a>
 800565e:	2300      	movs	r3, #0
 8005660:	e01e      	b.n	80056a0 <audiod_control_complete+0x158>

          // Invoke callback
          return tud_audio_set_req_ep_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8005662:	7bfb      	ldrb	r3, [r7, #15]
 8005664:	4619      	mov	r1, r3
 8005666:	4a11      	ldr	r2, [pc, #68]	; (80056ac <audiod_control_complete+0x164>)
 8005668:	460b      	mov	r3, r1
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	1a5b      	subs	r3, r3, r1
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	4413      	add	r3, r2
 8005672:	3314      	adds	r3, #20
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	6839      	ldr	r1, [r7, #0]
 800567a:	4618      	mov	r0, r3
 800567c:	f3af 8000 	nop.w
 8005680:	4603      	mov	r3, r0
 8005682:	e00d      	b.n	80056a0 <audiod_control_complete+0x158>
        }
        else
        {
          TU_LOG2("  No EP set request callback available!\r\n");
          return false;   // In case no callback function is present or request can not be conducted we stall it
 8005684:	2300      	movs	r3, #0
 8005686:	e00b      	b.n	80056a0 <audiod_control_complete+0x158>
        }
      }
      break;
      // Unknown/Unsupported recipient
      default: TU_BREAKPOINT(); return false;
 8005688:	4b0b      	ldr	r3, [pc, #44]	; (80056b8 <audiod_control_complete+0x170>)
 800568a:	613b      	str	r3, [r7, #16]
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	d000      	beq.n	800569a <audiod_control_complete+0x152>
 8005698:	be00      	bkpt	0x0000
 800569a:	2300      	movs	r3, #0
 800569c:	e000      	b.n	80056a0 <audiod_control_complete+0x158>
    }
  }
  return true;
 800569e:	2301      	movs	r3, #1
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	080007b7 	.word	0x080007b7
 80056ac:	2400188c 	.word	0x2400188c
	...
 80056b8:	e000edf0 	.word	0xe000edf0

080056bc <audiod_control_request>:

// Handle class control request
// return false to stall control endpoint (e.g unsupported request)
static bool audiod_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	4603      	mov	r3, r0
 80056c4:	6039      	str	r1, [r7, #0]
 80056c6:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  // Handle standard requests - standard set requests usually have no data stage so we also handle set requests here
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d11f      	bne.n	8005716 <audiod_control_request+0x5a>
  {
    switch (p_request->bRequest)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	785b      	ldrb	r3, [r3, #1]
 80056da:	2b0a      	cmp	r3, #10
 80056dc:	d002      	beq.n	80056e4 <audiod_control_request+0x28>
 80056de:	2b0b      	cmp	r3, #11
 80056e0:	d007      	beq.n	80056f2 <audiod_control_request+0x36>
 80056e2:	e00d      	b.n	8005700 <audiod_control_request+0x44>
    {
      case TUSB_REQ_GET_INTERFACE:
        return audiod_get_interface(rhport, p_request);
 80056e4:	79fb      	ldrb	r3, [r7, #7]
 80056e6:	6839      	ldr	r1, [r7, #0]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7ff fd59 	bl	80051a0 <audiod_get_interface>
 80056ee:	4603      	mov	r3, r0
 80056f0:	e0d5      	b.n	800589e <audiod_control_request+0x1e2>

      case TUSB_REQ_SET_INTERFACE:
        return audiod_set_interface(rhport, p_request);
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	6839      	ldr	r1, [r7, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff fd90 	bl	800521c <audiod_set_interface>
 80056fc:	4603      	mov	r3, r0
 80056fe:	e0ce      	b.n	800589e <audiod_control_request+0x1e2>

        // Unknown/Unsupported request
      default: TU_BREAKPOINT(); return false;
 8005700:	4b69      	ldr	r3, [pc, #420]	; (80058a8 <audiod_control_request+0x1ec>)
 8005702:	613b      	str	r3, [r7, #16]
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d000      	beq.n	8005712 <audiod_control_request+0x56>
 8005710:	be00      	bkpt	0x0000
 8005712:	2300      	movs	r3, #0
 8005714:	e0c3      	b.n	800589e <audiod_control_request+0x1e2>
    }
  }

  // Handle class requests
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b20      	cmp	r3, #32
 8005722:	f040 80b2 	bne.w	800588a <audiod_control_request+0x1ce>
  {
    uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	889b      	ldrh	r3, [r3, #4]
 800572a:	b29b      	uxth	r3, r3
 800572c:	76fb      	strb	r3, [r7, #27]
    uint8_t func_id;

    // Conduct checks which depend on the recipient
    switch (p_request->bmRequestType_bit.recipient)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	d002      	beq.n	8005742 <audiod_control_request+0x86>
 800573c:	2b02      	cmp	r3, #2
 800573e:	d04d      	beq.n	80057dc <audiod_control_request+0x120>
 8005740:	e072      	b.n	8005828 <audiod_control_request+0x16c>
    {
      case TUSB_REQ_RCPT_INTERFACE:
      {
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	889b      	ldrh	r3, [r3, #4]
 8005746:	b29b      	uxth	r3, r3
 8005748:	0a1b      	lsrs	r3, r3, #8
 800574a:	b29b      	uxth	r3, r3
 800574c:	767b      	strb	r3, [r7, #25]

        // Verify if entity is present
        if (entityID != 0)
 800574e:	7e7b      	ldrb	r3, [r7, #25]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d021      	beq.n	8005798 <audiod_control_request+0xdc>
        {
          // Find index of audio driver structure and verify entity really exists
          TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8005754:	f107 020f 	add.w	r2, r7, #15
 8005758:	7e79      	ldrb	r1, [r7, #25]
 800575a:	7efb      	ldrb	r3, [r7, #27]
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fa81 	bl	8005c64 <audiod_verify_entity_exists>
 8005762:	4603      	mov	r3, r0
 8005764:	f083 0301 	eor.w	r3, r3, #1
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <audiod_control_request+0xb6>
 800576e:	2300      	movs	r3, #0
 8005770:	e095      	b.n	800589e <audiod_control_request+0x1e2>

          // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d05e      	beq.n	800583e <audiod_control_request+0x182>
          {
            if (tud_audio_get_req_entity_cb)
 8005780:	4b4a      	ldr	r3, [pc, #296]	; (80058ac <audiod_control_request+0x1f0>)
 8005782:	2b00      	cmp	r3, #0
 8005784:	d006      	beq.n	8005794 <audiod_control_request+0xd8>
            {
              return tud_audio_get_req_entity_cb(rhport, p_request);
 8005786:	79fb      	ldrb	r3, [r7, #7]
 8005788:	6839      	ldr	r1, [r7, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f7fa fff0 	bl	8000770 <tud_audio_get_req_entity_cb>
 8005790:	4603      	mov	r3, r0
 8005792:	e084      	b.n	800589e <audiod_control_request+0x1e2>
            }
            else
            {
              TU_LOG2("  No entity get request callback available!\r\n");
              return false;   // Stall
 8005794:	2300      	movs	r3, #0
 8005796:	e082      	b.n	800589e <audiod_control_request+0x1e2>
          }
        }
        else
        {
          // Find index of audio driver structure and verify interface really exists
          TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 8005798:	f107 020f 	add.w	r2, r7, #15
 800579c:	7efb      	ldrb	r3, [r7, #27]
 800579e:	4611      	mov	r1, r2
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 fad7 	bl	8005d54 <audiod_verify_itf_exists>
 80057a6:	4603      	mov	r3, r0
 80057a8:	f083 0301 	eor.w	r3, r3, #1
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <audiod_control_request+0xfa>
 80057b2:	2300      	movs	r3, #0
 80057b4:	e073      	b.n	800589e <audiod_control_request+0x1e2>

          // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d03c      	beq.n	800583e <audiod_control_request+0x182>
          {
            if (tud_audio_get_req_itf_cb)
 80057c4:	4b3a      	ldr	r3, [pc, #232]	; (80058b0 <audiod_control_request+0x1f4>)
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d006      	beq.n	80057d8 <audiod_control_request+0x11c>
            {
              return tud_audio_get_req_itf_cb(rhport, p_request);
 80057ca:	79fb      	ldrb	r3, [r7, #7]
 80057cc:	6839      	ldr	r1, [r7, #0]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f3af 8000 	nop.w
 80057d4:	4603      	mov	r3, r0
 80057d6:	e062      	b.n	800589e <audiod_control_request+0x1e2>
            }
            else
            {
              TU_LOG2("  No interface get request callback available!\r\n");
              return false;   // Stall
 80057d8:	2300      	movs	r3, #0
 80057da:	e060      	b.n	800589e <audiod_control_request+0x1e2>
      }
      break;

      case TUSB_REQ_RCPT_ENDPOINT:
      {
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	889b      	ldrh	r3, [r3, #4]
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	76bb      	strb	r3, [r7, #26]

        // Find index of audio driver structure and verify EP really exists
        TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 80057e4:	f107 020f 	add.w	r2, r7, #15
 80057e8:	7ebb      	ldrb	r3, [r7, #26]
 80057ea:	4611      	mov	r1, r2
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fb1b 	bl	8005e28 <audiod_verify_ep_exists>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f083 0301 	eor.w	r3, r3, #1
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <audiod_control_request+0x146>
 80057fe:	2300      	movs	r3, #0
 8005800:	e04d      	b.n	800589e <audiod_control_request+0x1e2>

        // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
        if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d018      	beq.n	8005842 <audiod_control_request+0x186>
        {
          if (tud_audio_get_req_ep_cb)
 8005810:	4b28      	ldr	r3, [pc, #160]	; (80058b4 <audiod_control_request+0x1f8>)
 8005812:	2b00      	cmp	r3, #0
 8005814:	d006      	beq.n	8005824 <audiod_control_request+0x168>
          {
            return tud_audio_get_req_ep_cb(rhport, p_request);
 8005816:	79fb      	ldrb	r3, [r7, #7]
 8005818:	6839      	ldr	r1, [r7, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f3af 8000 	nop.w
 8005820:	4603      	mov	r3, r0
 8005822:	e03c      	b.n	800589e <audiod_control_request+0x1e2>
          }
          else
          {
            TU_LOG2("  No EP get request callback available!\r\n");
            return false;     // Stall
 8005824:	2300      	movs	r3, #0
 8005826:	e03a      	b.n	800589e <audiod_control_request+0x1e2>
        }
      }
      break;

      // Unknown/Unsupported recipient
      default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 8005828:	4b1f      	ldr	r3, [pc, #124]	; (80058a8 <audiod_control_request+0x1ec>)
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d000      	beq.n	800583a <audiod_control_request+0x17e>
 8005838:	be00      	bkpt	0x0000
 800583a:	2300      	movs	r3, #0
 800583c:	e02f      	b.n	800589e <audiod_control_request+0x1e2>
      break;
 800583e:	bf00      	nop
 8005840:	e000      	b.n	8005844 <audiod_control_request+0x188>
      break;
 8005842:	bf00      	nop
    }

    // If we end here, the received request is a set request - we schedule a receive for the data stage and return true here. We handle the rest later in audiod_control_complete() once the data stage was finished
    TU_VERIFY(tud_control_xfer(rhport, p_request, _audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz));
 8005844:	7bfb      	ldrb	r3, [r7, #15]
 8005846:	4619      	mov	r1, r3
 8005848:	4a1b      	ldr	r2, [pc, #108]	; (80058b8 <audiod_control_request+0x1fc>)
 800584a:	460b      	mov	r3, r1
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	1a5b      	subs	r3, r3, r1
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	4413      	add	r3, r2
 8005854:	3314      	adds	r3, #20
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	4618      	mov	r0, r3
 800585c:	4916      	ldr	r1, [pc, #88]	; (80058b8 <audiod_control_request+0x1fc>)
 800585e:	4603      	mov	r3, r0
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	1a1b      	subs	r3, r3, r0
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	440b      	add	r3, r1
 8005868:	3318      	adds	r3, #24
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	79f8      	ldrb	r0, [r7, #7]
 8005870:	6839      	ldr	r1, [r7, #0]
 8005872:	f003 faef 	bl	8008e54 <tud_control_xfer>
 8005876:	4603      	mov	r3, r0
 8005878:	f083 0301 	eor.w	r3, r3, #1
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <audiod_control_request+0x1ca>
 8005882:	2300      	movs	r3, #0
 8005884:	e00b      	b.n	800589e <audiod_control_request+0x1e2>
    return true;
 8005886:	2301      	movs	r3, #1
 8005888:	e009      	b.n	800589e <audiod_control_request+0x1e2>
  }

  // There went something wrong - unsupported control request type
  TU_BREAKPOINT();
 800588a:	4b07      	ldr	r3, [pc, #28]	; (80058a8 <audiod_control_request+0x1ec>)
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d000      	beq.n	800589c <audiod_control_request+0x1e0>
 800589a:	be00      	bkpt	0x0000
  return false;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3720      	adds	r7, #32
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	e000edf0 	.word	0xe000edf0
 80058ac:	08000771 	.word	0x08000771
	...
 80058b8:	2400188c 	.word	0x2400188c

080058bc <audiod_control_xfer_cb>:

bool audiod_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	4603      	mov	r3, r0
 80058c4:	603a      	str	r2, [r7, #0]
 80058c6:	71fb      	strb	r3, [r7, #7]
 80058c8:	460b      	mov	r3, r1
 80058ca:	71bb      	strb	r3, [r7, #6]
  if ( stage == CONTROL_STAGE_SETUP )
 80058cc:	79bb      	ldrb	r3, [r7, #6]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d106      	bne.n	80058e0 <audiod_control_xfer_cb+0x24>
  {
    return audiod_control_request(rhport, request);
 80058d2:	79fb      	ldrb	r3, [r7, #7]
 80058d4:	6839      	ldr	r1, [r7, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff fef0 	bl	80056bc <audiod_control_request>
 80058dc:	4603      	mov	r3, r0
 80058de:	e00a      	b.n	80058f6 <audiod_control_xfer_cb+0x3a>
  }
  else if ( stage == CONTROL_STAGE_DATA )
 80058e0:	79bb      	ldrb	r3, [r7, #6]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d106      	bne.n	80058f4 <audiod_control_xfer_cb+0x38>
  {
    return audiod_control_complete(rhport, request);
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	6839      	ldr	r1, [r7, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7ff fe2c 	bl	8005548 <audiod_control_complete>
 80058f0:	4603      	mov	r3, r0
 80058f2:	e000      	b.n	80058f6 <audiod_control_xfer_cb+0x3a>
  }

  return true;
 80058f4:	2301      	movs	r3, #1
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <audiod_xfer_cb>:

bool audiod_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	603b      	str	r3, [r7, #0]
 8005908:	4603      	mov	r3, r0
 800590a:	71fb      	strb	r3, [r7, #7]
 800590c:	460b      	mov	r3, r1
 800590e:	71bb      	strb	r3, [r7, #6]
 8005910:	4613      	mov	r3, r2
 8005912:	717b      	strb	r3, [r7, #5]
  (void) result;
  (void) xferred_bytes;

  // Search for interface belonging to given end point address and proceed as required
  for (uint8_t func_id = 0; func_id < CFG_TUD_AUDIO; func_id++)
 8005914:	2300      	movs	r3, #0
 8005916:	73fb      	strb	r3, [r7, #15]
 8005918:	e038      	b.n	800598c <audiod_xfer_cb+0x8c>
  {
    audiod_function_t* audio = &_audiod_fct[func_id];
 800591a:	7bfa      	ldrb	r2, [r7, #15]
 800591c:	4613      	mov	r3, r2
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	1a9b      	subs	r3, r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	4a1d      	ldr	r2, [pc, #116]	; (800599c <audiod_xfer_cb+0x9c>)
 8005926:	4413      	add	r3, r2
 8005928:	60bb      	str	r3, [r7, #8]
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_IN

    // Data transmission of audio packet finished
    if (audio->ep_in == ep_addr && audio->alt_setting != 0)
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	7a1b      	ldrb	r3, [r3, #8]
 800592e:	79ba      	ldrb	r2, [r7, #6]
 8005930:	429a      	cmp	r2, r3
 8005932:	d112      	bne.n	800595a <audiod_xfer_cb+0x5a>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00e      	beq.n	800595a <audiod_xfer_cb+0x5a>
      // Check if there is data to load into EPs buffer - if not load it with ZLP
      // Be aware - we as a device are not able to know if the host polls for data with a faster rate as we stated this in the descriptors. Therefore we always have to put something into the EPs buffer. However, once we did that, there is no way of aborting this or replacing what we put into the buffer before!
      // This is the only place where we can fill something into the EPs buffer!

      // Load new data
      TU_VERIFY(audiod_tx_done_cb(rhport, audio));
 800593c:	79fb      	ldrb	r3, [r7, #7]
 800593e:	68b9      	ldr	r1, [r7, #8]
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff faa7 	bl	8004e94 <audiod_tx_done_cb>
 8005946:	4603      	mov	r3, r0
 8005948:	f083 0301 	eor.w	r3, r3, #1
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <audiod_xfer_cb+0x56>
 8005952:	2300      	movs	r3, #0
 8005954:	e01e      	b.n	8005994 <audiod_xfer_cb+0x94>

      // Transmission of ZLP is done by audiod_tx_done_cb()
      return true;
 8005956:	2301      	movs	r3, #1
 8005958:	e01c      	b.n	8005994 <audiod_xfer_cb+0x94>
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_OUT

    // New audio packet received
    if (audio->ep_out == ep_addr)
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	7b5b      	ldrb	r3, [r3, #13]
 800595e:	79ba      	ldrb	r2, [r7, #6]
 8005960:	429a      	cmp	r2, r3
 8005962:	d110      	bne.n	8005986 <audiod_xfer_cb+0x86>
    {
      TU_VERIFY(audiod_rx_done_cb(rhport, audio, (uint16_t) xferred_bytes));
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	b29a      	uxth	r2, r3
 8005968:	79fb      	ldrb	r3, [r7, #7]
 800596a:	68b9      	ldr	r1, [r7, #8]
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff f9ed 	bl	8004d4c <audiod_rx_done_cb>
 8005972:	4603      	mov	r3, r0
 8005974:	f083 0301 	eor.w	r3, r3, #1
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <audiod_xfer_cb+0x82>
 800597e:	2300      	movs	r3, #0
 8005980:	e008      	b.n	8005994 <audiod_xfer_cb+0x94>
      return true;
 8005982:	2301      	movs	r3, #1
 8005984:	e006      	b.n	8005994 <audiod_xfer_cb+0x94>
  for (uint8_t func_id = 0; func_id < CFG_TUD_AUDIO; func_id++)
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	3301      	adds	r3, #1
 800598a:	73fb      	strb	r3, [r7, #15]
 800598c:	7bfb      	ldrb	r3, [r7, #15]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0c3      	beq.n	800591a <audiod_xfer_cb+0x1a>
    }
#endif
#endif
  }

  return false;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	2400188c 	.word	0x2400188c

080059a0 <audiod_sof_isr>:
  return feedback;
}
#endif

TU_ATTR_FAST_FUNC void audiod_sof_isr (uint8_t rhport, uint32_t frame_count)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	4603      	mov	r3, r0
 80059a8:	6039      	str	r1, [r7, #0]
 80059aa:	71fb      	strb	r3, [r7, #7]
        if(tud_audio_feedback_interval_isr) tud_audio_feedback_interval_isr(i, frame_count, audio->feedback.frame_shift);
      }
    }
  }
#endif // CFG_TUD_AUDIO_ENABLE_EP_OUT && CFG_TUD_AUDIO_ENABLE_FEEDBACK_EP
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <tud_audio_buffer_and_schedule_control_xfer>:

bool tud_audio_buffer_and_schedule_control_xfer(uint8_t rhport, tusb_control_request_t const * p_request, void* data, uint16_t len)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08c      	sub	sp, #48	; 0x30
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60b9      	str	r1, [r7, #8]
 80059c0:	607a      	str	r2, [r7, #4]
 80059c2:	461a      	mov	r2, r3
 80059c4:	4603      	mov	r3, r0
 80059c6:	73fb      	strb	r3, [r7, #15]
 80059c8:	4613      	mov	r3, r2
 80059ca:	81bb      	strh	r3, [r7, #12]
  // Handles only sending of data not receiving
  if (p_request->bmRequestType_bit.direction == TUSB_DIR_OUT) return false;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <tud_audio_buffer_and_schedule_control_xfer+0x26>
 80059da:	2300      	movs	r3, #0
 80059dc:	e0b2      	b.n	8005b44 <tud_audio_buffer_and_schedule_control_xfer+0x18c>

  // Get corresponding driver index
  uint8_t func_id;
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	889b      	ldrh	r3, [r3, #4]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  // Conduct checks which depend on the recipient
  switch (p_request->bmRequestType_bit.recipient)
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d002      	beq.n	80059fc <tud_audio_buffer_and_schedule_control_xfer+0x44>
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d02c      	beq.n	8005a54 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 80059fa:	e040      	b.n	8005a7e <tud_audio_buffer_and_schedule_control_xfer+0xc6>
  {
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	889b      	ldrh	r3, [r3, #4]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	0a1b      	lsrs	r3, r3, #8
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

      // Verify if entity is present
      if (entityID != 0)
 8005a0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d010      	beq.n	8005a34 <tud_audio_buffer_and_schedule_control_xfer+0x7c>
      {
        // Find index of audio driver structure and verify entity really exists
        TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8005a12:	f107 0217 	add.w	r2, r7, #23
 8005a16:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8005a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 f920 	bl	8005c64 <audiod_verify_entity_exists>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f083 0301 	eor.w	r3, r3, #1
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d031      	beq.n	8005a94 <tud_audio_buffer_and_schedule_control_xfer+0xdc>
 8005a30:	2300      	movs	r3, #0
 8005a32:	e087      	b.n	8005b44 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
      }
      else
      {
        // Find index of audio driver structure and verify interface really exists
        TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 8005a34:	f107 0217 	add.w	r2, r7, #23
 8005a38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a3c:	4611      	mov	r1, r2
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 f988 	bl	8005d54 <audiod_verify_itf_exists>
 8005a44:	4603      	mov	r3, r0
 8005a46:	f083 0301 	eor.w	r3, r3, #1
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d021      	beq.n	8005a94 <tud_audio_buffer_and_schedule_control_xfer+0xdc>
 8005a50:	2300      	movs	r3, #0
 8005a52:	e077      	b.n	8005b44 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
    }
    break;

    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	889b      	ldrh	r3, [r3, #4]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

      // Find index of audio driver structure and verify EP really exists
      TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8005a5e:	f107 0217 	add.w	r2, r7, #23
 8005a62:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005a66:	4611      	mov	r1, r2
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 f9dd 	bl	8005e28 <audiod_verify_ep_exists>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	f083 0301 	eor.w	r3, r3, #1
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00e      	beq.n	8005a98 <tud_audio_buffer_and_schedule_control_xfer+0xe0>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e062      	b.n	8005b44 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
    }
    break;

    // Unknown/Unsupported recipient
    default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 8005a7e:	4b33      	ldr	r3, [pc, #204]	; (8005b4c <tud_audio_buffer_and_schedule_control_xfer+0x194>)
 8005a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d000      	beq.n	8005a90 <tud_audio_buffer_and_schedule_control_xfer+0xd8>
 8005a8e:	be00      	bkpt	0x0000
 8005a90:	2300      	movs	r3, #0
 8005a92:	e057      	b.n	8005b44 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
    break;
 8005a94:	bf00      	nop
 8005a96:	e000      	b.n	8005a9a <tud_audio_buffer_and_schedule_control_xfer+0xe2>
    break;
 8005a98:	bf00      	nop
  }

  // Crop length
  if (len > _audiod_fct[func_id].ctrl_buf_sz) len = _audiod_fct[func_id].ctrl_buf_sz;
 8005a9a:	7dfb      	ldrb	r3, [r7, #23]
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4a2c      	ldr	r2, [pc, #176]	; (8005b50 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	1a5b      	subs	r3, r3, r1
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	4413      	add	r3, r2
 8005aaa:	3318      	adds	r3, #24
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	89ba      	ldrh	r2, [r7, #12]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d90a      	bls.n	8005acc <tud_audio_buffer_and_schedule_control_xfer+0x114>
 8005ab6:	7dfb      	ldrb	r3, [r7, #23]
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4a25      	ldr	r2, [pc, #148]	; (8005b50 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 8005abc:	460b      	mov	r3, r1
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	1a5b      	subs	r3, r3, r1
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	4413      	add	r3, r2
 8005ac6:	3318      	adds	r3, #24
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	81bb      	strh	r3, [r7, #12]

  // Copy into buffer
  TU_VERIFY(0 == tu_memcpy_s(_audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz, data, (size_t)len));
 8005acc:	7dfb      	ldrb	r3, [r7, #23]
 8005ace:	4619      	mov	r1, r3
 8005ad0:	4a1f      	ldr	r2, [pc, #124]	; (8005b50 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	1a5b      	subs	r3, r3, r1
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	4413      	add	r3, r2
 8005adc:	3314      	adds	r3, #20
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	491a      	ldr	r1, [pc, #104]	; (8005b50 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	00db      	lsls	r3, r3, #3
 8005aea:	1a1b      	subs	r3, r3, r0
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	440b      	add	r3, r1
 8005af0:	3318      	adds	r3, #24
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	4619      	mov	r1, r3
 8005af6:	89bb      	ldrh	r3, [r7, #12]
 8005af8:	627a      	str	r2, [r7, #36]	; 0x24
 8005afa:	6239      	str	r1, [r7, #32]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	61fa      	str	r2, [r7, #28]
 8005b00:	61bb      	str	r3, [r7, #24]
  if (count > destsz) {
 8005b02:	6a3a      	ldr	r2, [r7, #32]
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d202      	bcs.n	8005b10 <tud_audio_buffer_and_schedule_control_xfer+0x158>
    return -1;
 8005b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b0e:	e005      	b.n	8005b1c <tud_audio_buffer_and_schedule_control_xfer+0x164>
  memcpy(dest, src, count);
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	69f9      	ldr	r1, [r7, #28]
 8005b14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b16:	f005 f84d 	bl	800abb4 <memcpy>
  return 0;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <tud_audio_buffer_and_schedule_control_xfer+0x16c>
 8005b20:	2300      	movs	r3, #0
 8005b22:	e00f      	b.n	8005b44 <tud_audio_buffer_and_schedule_control_xfer+0x18c>

  // Schedule transmit
  return tud_control_xfer(rhport, p_request, (void*)_audiod_fct[func_id].ctrl_buf, len);
 8005b24:	7dfb      	ldrb	r3, [r7, #23]
 8005b26:	4619      	mov	r1, r3
 8005b28:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	1a5b      	subs	r3, r3, r1
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	4413      	add	r3, r2
 8005b34:	3314      	adds	r3, #20
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	89bb      	ldrh	r3, [r7, #12]
 8005b3a:	7bf8      	ldrb	r0, [r7, #15]
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	f003 f989 	bl	8008e54 <tud_control_xfer>
 8005b42:	4603      	mov	r3, r0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3730      	adds	r7, #48	; 0x30
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	e000edf0 	.word	0xe000edf0
 8005b50:	2400188c 	.word	0x2400188c

08005b54 <audiod_get_AS_interface_index>:

// This helper function finds for a given audio function and AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index(uint8_t itf, audiod_function_t * audio, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b08d      	sub	sp, #52	; 0x34
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	607a      	str	r2, [r7, #4]
 8005b5e:	603b      	str	r3, [r7, #0]
 8005b60:	4603      	mov	r3, r0
 8005b62:	73fb      	strb	r3, [r7, #15]
  if (audio->p_desc)
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d048      	beq.n	8005bfe <audiod_get_AS_interface_index+0xaa>
  {
    // Get pointer at end
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	8a5b      	ldrh	r3, [r3, #18]
 8005b74:	3b08      	subs	r3, #8
 8005b76:	4413      	add	r3, r2
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24

    // Advance past AC descriptors
    uint8_t const *p_desc = tu_desc_next(audio->p_desc);
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	623b      	str	r3, [r7, #32]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	61fb      	str	r3, [r7, #28]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8005b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b92:	88db      	ldrh	r3, [r3, #6]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	461a      	mov	r2, r3
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9a:	4413      	add	r3, r2
 8005b9c:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint8_t tmp = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    while (p_desc < p_desc_end)
 8005ba4:	e027      	b.n	8005bf6 <audiod_get_AS_interface_index+0xa2>
 8005ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba8:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	3301      	adds	r3, #1
 8005bae:	781b      	ldrb	r3, [r3, #0]
    {
      // We assume the number of alternate settings is increasing thus we return the index of alternate setting zero!
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d116      	bne.n	8005be2 <audiod_get_AS_interface_index+0x8e>
 8005bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb6:	78db      	ldrb	r3, [r3, #3]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d112      	bne.n	8005be2 <audiod_get_AS_interface_index+0x8e>
      {
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 8005bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbe:	789b      	ldrb	r3, [r3, #2]
 8005bc0:	7bfa      	ldrb	r2, [r7, #15]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d108      	bne.n	8005bd8 <audiod_get_AS_interface_index+0x84>
        {
          *idxItf = tmp;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005bcc:	701a      	strb	r2, [r3, #0]
          *pp_desc_int = p_desc;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bd2:	601a      	str	r2, [r3, #0]
          return true;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e013      	b.n	8005c00 <audiod_get_AS_interface_index+0xac>
        }
        // Increase index, bytes read, and pointer
        tmp++;
 8005bd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bdc:	3301      	adds	r3, #1
 8005bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be4:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	4413      	add	r3, r2
      }
      p_desc = tu_desc_next(p_desc);
 8005bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p_desc < p_desc_end)
 8005bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d3d3      	bcc.n	8005ba6 <audiod_get_AS_interface_index+0x52>
    }
  }
  return false;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3734      	adds	r7, #52	; 0x34
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <audiod_get_AS_interface_index_global>:

// This helper function finds for a given AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index_global(uint8_t itf, uint8_t *func_id, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60b9      	str	r1, [r7, #8]
 8005c14:	607a      	str	r2, [r7, #4]
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	4603      	mov	r3, r0
 8005c1a:	73fb      	strb	r3, [r7, #15]
  // Loop over audio driver interfaces
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	75fb      	strb	r3, [r7, #23]
 8005c20:	e016      	b.n	8005c50 <audiod_get_AS_interface_index_global+0x44>
  {
    if (audiod_get_AS_interface_index(itf, &_audiod_fct[i], idxItf, pp_desc_int))
 8005c22:	7dfa      	ldrb	r2, [r7, #23]
 8005c24:	4613      	mov	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	1a9b      	subs	r3, r3, r2
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	4a0c      	ldr	r2, [pc, #48]	; (8005c60 <audiod_get_AS_interface_index_global+0x54>)
 8005c2e:	1899      	adds	r1, r3, r2
 8005c30:	7bf8      	ldrb	r0, [r7, #15]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	f7ff ff8d 	bl	8005b54 <audiod_get_AS_interface_index>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d004      	beq.n	8005c4a <audiod_get_AS_interface_index_global+0x3e>
    {
      *func_id = i;
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	7dfa      	ldrb	r2, [r7, #23]
 8005c44:	701a      	strb	r2, [r3, #0]
      return true;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e006      	b.n	8005c58 <audiod_get_AS_interface_index_global+0x4c>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8005c4a:	7dfb      	ldrb	r3, [r7, #23]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	75fb      	strb	r3, [r7, #23]
 8005c50:	7dfb      	ldrb	r3, [r7, #23]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0e5      	beq.n	8005c22 <audiod_get_AS_interface_index_global+0x16>
    }
  }

  return false;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	2400188c 	.word	0x2400188c

08005c64 <audiod_verify_entity_exists>:

// Verify an entity with the given ID exists and returns also the corresponding driver index
static bool audiod_verify_entity_exists(uint8_t itf, uint8_t entityID, uint8_t *func_id)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b08d      	sub	sp, #52	; 0x34
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	603a      	str	r2, [r7, #0]
 8005c6e:	71fb      	strb	r3, [r7, #7]
 8005c70:	460b      	mov	r3, r1
 8005c72:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8005c74:	2300      	movs	r3, #0
 8005c76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005c7a:	e05d      	b.n	8005d38 <audiod_verify_entity_exists+0xd4>
  {
    // Look for the correct driver by checking if the unique standard AC interface number fits
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8005c7c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005c80:	4933      	ldr	r1, [pc, #204]	; (8005d50 <audiod_verify_entity_exists+0xec>)
 8005c82:	4613      	mov	r3, r2
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	1a9b      	subs	r3, r3, r2
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	440b      	add	r3, r1
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d04c      	beq.n	8005d2e <audiod_verify_entity_exists+0xca>
 8005c94:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005c98:	492d      	ldr	r1, [pc, #180]	; (8005d50 <audiod_verify_entity_exists+0xec>)
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	1a9b      	subs	r3, r3, r2
 8005ca0:	00db      	lsls	r3, r3, #3
 8005ca2:	440b      	add	r3, r1
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	789b      	ldrb	r3, [r3, #2]
 8005caa:	79fa      	ldrb	r2, [r7, #7]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d13e      	bne.n	8005d2e <audiod_verify_entity_exists+0xca>
    {
      // Get pointers after class specific AC descriptors and end of AC descriptors - entities are defined in between
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);                                          // Points to CS AC descriptor
 8005cb0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005cb4:	4926      	ldr	r1, [pc, #152]	; (8005d50 <audiod_verify_entity_exists+0xec>)
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	1a9b      	subs	r3, r3, r2
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	440b      	add	r3, r1
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	62bb      	str	r3, [r7, #40]	; 0x28
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 8005cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd8:	88db      	ldrh	r3, [r3, #6]
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	461a      	mov	r2, r3
 8005cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce0:	4413      	add	r3, r2
 8005ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	623b      	str	r3, [r7, #32]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	61fb      	str	r3, [r7, #28]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	4413      	add	r3, r2
      p_desc = tu_desc_next(p_desc);                                                                            // Get past CS AC descriptor
 8005cf6:	62bb      	str	r3, [r7, #40]	; 0x28

      while (p_desc < p_desc_end)
 8005cf8:	e015      	b.n	8005d26 <audiod_verify_entity_exists+0xc2>
      {
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 8005cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfc:	3303      	adds	r3, #3
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	79ba      	ldrb	r2, [r7, #6]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d105      	bne.n	8005d12 <audiod_verify_entity_exists+0xae>
        {
          *func_id = i;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005d0c:	701a      	strb	r2, [r3, #0]
          return true;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e017      	b.n	8005d42 <audiod_verify_entity_exists+0xde>
 8005d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d14:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4413      	add	r3, r2
        }
        p_desc = tu_desc_next(p_desc);
 8005d24:	62bb      	str	r3, [r7, #40]	; 0x28
      while (p_desc < p_desc_end)
 8005d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d3e5      	bcc.n	8005cfa <audiod_verify_entity_exists+0x96>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8005d2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d32:	3301      	adds	r3, #1
 8005d34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005d38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d09d      	beq.n	8005c7c <audiod_verify_entity_exists+0x18>
      }
    }
  }
  return false;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3734      	adds	r7, #52	; 0x34
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	2400188c 	.word	0x2400188c

08005d54 <audiod_verify_itf_exists>:

static bool audiod_verify_itf_exists(uint8_t itf, uint8_t *func_id)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b089      	sub	sp, #36	; 0x24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	6039      	str	r1, [r7, #0]
 8005d5e:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8005d60:	2300      	movs	r3, #0
 8005d62:	77fb      	strb	r3, [r7, #31]
 8005d64:	e054      	b.n	8005e10 <audiod_verify_itf_exists+0xbc>
  {
    if (_audiod_fct[i].p_desc)
 8005d66:	7ffa      	ldrb	r2, [r7, #31]
 8005d68:	492e      	ldr	r1, [pc, #184]	; (8005e24 <audiod_verify_itf_exists+0xd0>)
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	1a9b      	subs	r3, r3, r2
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	440b      	add	r3, r1
 8005d74:	3304      	adds	r3, #4
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d046      	beq.n	8005e0a <audiod_verify_itf_exists+0xb6>
    {
      // Get pointer at beginning and end
      uint8_t const *p_desc = _audiod_fct[i].p_desc;
 8005d7c:	7ffa      	ldrb	r2, [r7, #31]
 8005d7e:	4929      	ldr	r1, [pc, #164]	; (8005e24 <audiod_verify_itf_exists+0xd0>)
 8005d80:	4613      	mov	r3, r2
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	1a9b      	subs	r3, r3, r2
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	440b      	add	r3, r1
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	61bb      	str	r3, [r7, #24]
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8005d90:	7ffa      	ldrb	r2, [r7, #31]
 8005d92:	4924      	ldr	r1, [pc, #144]	; (8005e24 <audiod_verify_itf_exists+0xd0>)
 8005d94:	4613      	mov	r3, r2
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	1a9b      	subs	r3, r3, r2
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	440b      	add	r3, r1
 8005d9e:	3304      	adds	r3, #4
 8005da0:	6819      	ldr	r1, [r3, #0]
 8005da2:	7ffa      	ldrb	r2, [r7, #31]
 8005da4:	481f      	ldr	r0, [pc, #124]	; (8005e24 <audiod_verify_itf_exists+0xd0>)
 8005da6:	4613      	mov	r3, r2
 8005da8:	00db      	lsls	r3, r3, #3
 8005daa:	1a9b      	subs	r3, r3, r2
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	4403      	add	r3, r0
 8005db0:	3312      	adds	r3, #18
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	3b08      	subs	r3, #8
 8005db6:	440b      	add	r3, r1
 8005db8:	617b      	str	r3, [r7, #20]

      while (p_desc < p_desc_end)
 8005dba:	e022      	b.n	8005e02 <audiod_verify_itf_exists+0xae>
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	781b      	ldrb	r3, [r3, #0]
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d111      	bne.n	8005dee <audiod_verify_itf_exists+0x9a>
 8005dca:	7ffa      	ldrb	r2, [r7, #31]
 8005dcc:	4915      	ldr	r1, [pc, #84]	; (8005e24 <audiod_verify_itf_exists+0xd0>)
 8005dce:	4613      	mov	r3, r2
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	1a9b      	subs	r3, r3, r2
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	440b      	add	r3, r1
 8005dd8:	3304      	adds	r3, #4
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	789b      	ldrb	r3, [r3, #2]
 8005dde:	79fa      	ldrb	r2, [r7, #7]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d104      	bne.n	8005dee <audiod_verify_itf_exists+0x9a>
        {
          *func_id = i;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	7ffa      	ldrb	r2, [r7, #31]
 8005de8:	701a      	strb	r2, [r3, #0]
          return true;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e014      	b.n	8005e18 <audiod_verify_itf_exists+0xc4>
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	60fb      	str	r3, [r7, #12]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	60bb      	str	r3, [r7, #8]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	4413      	add	r3, r2
        }
        p_desc = tu_desc_next(p_desc);
 8005e00:	61bb      	str	r3, [r7, #24]
      while (p_desc < p_desc_end)
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d3d8      	bcc.n	8005dbc <audiod_verify_itf_exists+0x68>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8005e0a:	7ffb      	ldrb	r3, [r7, #31]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	77fb      	strb	r3, [r7, #31]
 8005e10:	7ffb      	ldrb	r3, [r7, #31]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0a7      	beq.n	8005d66 <audiod_verify_itf_exists+0x12>
      }
    }
  }
  return false;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3724      	adds	r7, #36	; 0x24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	2400188c 	.word	0x2400188c

08005e28 <audiod_verify_ep_exists>:

static bool audiod_verify_ep_exists(uint8_t ep, uint8_t *func_id)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b08b      	sub	sp, #44	; 0x2c
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	4603      	mov	r3, r0
 8005e30:	6039      	str	r1, [r7, #0]
 8005e32:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8005e34:	2300      	movs	r3, #0
 8005e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e3a:	e061      	b.n	8005f00 <audiod_verify_ep_exists+0xd8>
  {
    if (_audiod_fct[i].p_desc)
 8005e3c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005e40:	4935      	ldr	r1, [pc, #212]	; (8005f18 <audiod_verify_ep_exists+0xf0>)
 8005e42:	4613      	mov	r3, r2
 8005e44:	00db      	lsls	r3, r3, #3
 8005e46:	1a9b      	subs	r3, r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	440b      	add	r3, r1
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d050      	beq.n	8005ef6 <audiod_verify_ep_exists+0xce>
    {
      // Get pointer at end
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 8005e54:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005e58:	492f      	ldr	r1, [pc, #188]	; (8005f18 <audiod_verify_ep_exists+0xf0>)
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	1a9b      	subs	r3, r3, r2
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	440b      	add	r3, r1
 8005e64:	3304      	adds	r3, #4
 8005e66:	6819      	ldr	r1, [r3, #0]
 8005e68:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005e6c:	482a      	ldr	r0, [pc, #168]	; (8005f18 <audiod_verify_ep_exists+0xf0>)
 8005e6e:	4613      	mov	r3, r2
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	1a9b      	subs	r3, r3, r2
 8005e74:	00db      	lsls	r3, r3, #3
 8005e76:	4403      	add	r3, r0
 8005e78:	3312      	adds	r3, #18
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	440b      	add	r3, r1
 8005e7e:	61fb      	str	r3, [r7, #28]

      // Advance past AC descriptors - EP we look for are streaming EPs
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);
 8005e80:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005e84:	4924      	ldr	r1, [pc, #144]	; (8005f18 <audiod_verify_ep_exists+0xf0>)
 8005e86:	4613      	mov	r3, r2
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	1a9b      	subs	r3, r3, r2
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	440b      	add	r3, r1
 8005e90:	3304      	adds	r3, #4
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	623b      	str	r3, [r7, #32]
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	88db      	ldrh	r3, [r3, #6]
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	623b      	str	r3, [r7, #32]

      while (p_desc < p_desc_end)
 8005eb4:	e01b      	b.n	8005eee <audiod_verify_ep_exists+0xc6>
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	781b      	ldrb	r3, [r3, #0]
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 8005ec0:	2b05      	cmp	r3, #5
 8005ec2:	d10a      	bne.n	8005eda <audiod_verify_ep_exists+0xb2>
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	789b      	ldrb	r3, [r3, #2]
 8005ec8:	79fa      	ldrb	r2, [r7, #7]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d105      	bne.n	8005eda <audiod_verify_ep_exists+0xb2>
        {
          *func_id = i;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005ed4:	701a      	strb	r2, [r3, #0]
          return true;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e017      	b.n	8005f0a <audiod_verify_ep_exists+0xe2>
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	60fb      	str	r3, [r7, #12]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	60bb      	str	r3, [r7, #8]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4413      	add	r3, r2
        }
        p_desc = tu_desc_next(p_desc);
 8005eec:	623b      	str	r3, [r7, #32]
      while (p_desc < p_desc_end)
 8005eee:	6a3a      	ldr	r2, [r7, #32]
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d3df      	bcc.n	8005eb6 <audiod_verify_ep_exists+0x8e>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8005ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005efa:	3301      	adds	r3, #1
 8005efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d099      	beq.n	8005e3c <audiod_verify_ep_exists+0x14>
      }
    }
  }
  return false;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	372c      	adds	r7, #44	; 0x2c
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	2400188c 	.word	0x2400188c

08005f1c <audiod_get_audio_fct_idx>:
}
#endif

// No security checks here - internal function only which should always succeed
uint8_t audiod_get_audio_fct_idx(audiod_function_t * audio)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  for (uint8_t cnt=0; cnt < CFG_TUD_AUDIO; cnt++)
 8005f24:	2300      	movs	r3, #0
 8005f26:	73fb      	strb	r3, [r7, #15]
 8005f28:	e00e      	b.n	8005f48 <audiod_get_audio_fct_idx+0x2c>
  {
    if (&_audiod_fct[cnt] == audio) return cnt;
 8005f2a:	7bfa      	ldrb	r2, [r7, #15]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	1a9b      	subs	r3, r3, r2
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	4a09      	ldr	r2, [pc, #36]	; (8005f5c <audiod_get_audio_fct_idx+0x40>)
 8005f36:	4413      	add	r3, r2
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d101      	bne.n	8005f42 <audiod_get_audio_fct_idx+0x26>
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	e006      	b.n	8005f50 <audiod_get_audio_fct_idx+0x34>
  for (uint8_t cnt=0; cnt < CFG_TUD_AUDIO; cnt++)
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	3301      	adds	r3, #1
 8005f46:	73fb      	strb	r3, [r7, #15]
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0ed      	beq.n	8005f2a <audiod_get_audio_fct_idx+0xe>
  }
  return 0;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	2400188c 	.word	0x2400188c

08005f60 <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUSB_MEM_SECTION tu_static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static bool _prep_out_transaction (cdcd_interface_t* p_cdc)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = 0;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	73fb      	strb	r3, [r7, #15]
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3310      	adds	r3, #16
 8005f70:	4618      	mov	r0, r3
 8005f72:	f001 f9a6 	bl	80072c2 <tu_fifo_remaining>
 8005f76:	4603      	mov	r3, r0
 8005f78:	81bb      	strh	r3, [r7, #12]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 8005f7a:	89bb      	ldrh	r3, [r7, #12]
 8005f7c:	2b3f      	cmp	r3, #63	; 0x3f
 8005f7e:	d801      	bhi.n	8005f84 <_prep_out_transaction+0x24>
 8005f80:	2300      	movs	r3, #0
 8005f82:	e02b      	b.n	8005fdc <_prep_out_transaction+0x7c>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	78da      	ldrb	r2, [r3, #3]
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f002 fc71 	bl	8008874 <usbd_edpt_claim>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f083 0301 	eor.w	r3, r3, #1
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <_prep_out_transaction+0x42>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	e01c      	b.n	8005fdc <_prep_out_transaction+0x7c>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3310      	adds	r3, #16
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f001 f98b 	bl	80072c2 <tu_fifo_remaining>
 8005fac:	4603      	mov	r3, r0
 8005fae:	81bb      	strh	r3, [r7, #12]

  if ( available >= sizeof(p_cdc->epout_buf) )
 8005fb0:	89bb      	ldrh	r3, [r7, #12]
 8005fb2:	2b3f      	cmp	r3, #63	; 0x3f
 8005fb4:	d90a      	bls.n	8005fcc <_prep_out_transaction+0x6c>
  {
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	78d9      	ldrb	r1, [r3, #3]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8005fc0:	7bf8      	ldrb	r0, [r7, #15]
 8005fc2:	2340      	movs	r3, #64	; 0x40
 8005fc4:	f002 fcaa 	bl	800891c <usbd_edpt_xfer>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	e007      	b.n	8005fdc <_prep_out_transaction+0x7c>
  }else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	78da      	ldrb	r2, [r3, #3]
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f002 fc77 	bl	80088c8 <usbd_edpt_release>

    return false;
 8005fda:	2300      	movs	r3, #0
  }
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <tud_cdc_n_connected>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_cdc_n_connected(uint8_t itf)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	4603      	mov	r3, r0
 8005fec:	71fb      	strb	r3, [r7, #7]

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
 8005fee:	f001 faa9 	bl	8007544 <tud_mounted>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d009      	beq.n	800600c <tud_cdc_n_connected+0x28>
 8005ff8:	f001 fab6 	bl	8007568 <tud_suspended>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	f083 0301 	eor.w	r3, r3, #1
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <tud_cdc_n_connected+0x28>
 8006008:	2301      	movs	r3, #1
 800600a:	e000      	b.n	800600e <tud_cdc_n_connected+0x2a>
 800600c:	2300      	movs	r3, #0
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	b2db      	uxtb	r3, r3
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01a      	beq.n	800604e <tud_cdc_n_connected+0x6a>
 8006018:	79fb      	ldrb	r3, [r7, #7]
 800601a:	4a11      	ldr	r2, [pc, #68]	; (8006060 <tud_cdc_n_connected+0x7c>)
 800601c:	f44f 7194 	mov.w	r1, #296	; 0x128
 8006020:	fb01 f303 	mul.w	r3, r1, r3
 8006024:	4413      	add	r3, r2
 8006026:	3304      	adds	r3, #4
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	2300      	movs	r3, #0
 800602e:	72fb      	strb	r3, [r7, #11]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8006030:	7afb      	ldrb	r3, [r7, #11]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	fa22 f303 	lsr.w	r3, r2, r3
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	bf14      	ite	ne
 8006040:	2301      	movne	r3, #1
 8006042:	2300      	moveq	r3, #0
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <tud_cdc_n_connected+0x6a>
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <tud_cdc_n_connected+0x6c>
 800604e:	2300      	movs	r3, #0
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	b2db      	uxtb	r3, r3
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	240018c4 	.word	0x240018c4

08006064 <tud_cdc_n_available>:

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	4603      	mov	r3, r0
 800606c:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006074:	fb02 f303 	mul.w	r3, r2, r3
 8006078:	3310      	adds	r3, #16
 800607a:	4a05      	ldr	r2, [pc, #20]	; (8006090 <tud_cdc_n_available+0x2c>)
 800607c:	4413      	add	r3, r2
 800607e:	4618      	mov	r0, r3
 8006080:	f001 f8aa 	bl	80071d8 <tu_fifo_count>
 8006084:	4603      	mov	r3, r0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	240018c4 	.word	0x240018c4

08006094 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	4603      	mov	r3, r0
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	f44f 7294 	mov.w	r2, #296	; 0x128
 80060a8:	fb02 f303 	mul.w	r3, r2, r3
 80060ac:	4a0a      	ldr	r2, [pc, #40]	; (80060d8 <tud_cdc_n_read+0x44>)
 80060ae:	4413      	add	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) bufsize);
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	3310      	adds	r3, #16
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	b292      	uxth	r2, r2
 80060ba:	68b9      	ldr	r1, [r7, #8]
 80060bc:	4618      	mov	r0, r3
 80060be:	f001 f95c 	bl	800737a <tu_fifo_read_n>
 80060c2:	4603      	mov	r3, r0
 80060c4:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(p_cdc);
 80060c6:	6978      	ldr	r0, [r7, #20]
 80060c8:	f7ff ff4a 	bl	8005f60 <_prep_out_transaction>
  return num_read;
 80060cc:	693b      	ldr	r3, [r7, #16]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3718      	adds	r7, #24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	240018c4 	.word	0x240018c4

080060dc <tud_cdc_n_write>:

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	4603      	mov	r3, r0
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
 80060ec:	f44f 7294 	mov.w	r2, #296	; 0x128
 80060f0:	fb02 f303 	mul.w	r3, r2, r3
 80060f4:	4a0e      	ldr	r2, [pc, #56]	; (8006130 <tud_cdc_n_write+0x54>)
 80060f6:	4413      	add	r3, r2
 80060f8:	617b      	str	r3, [r7, #20]
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	331c      	adds	r3, #28
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	b292      	uxth	r2, r2
 8006102:	68b9      	ldr	r1, [r7, #8]
 8006104:	4618      	mov	r0, r3
 8006106:	f001 f99f 	bl	8007448 <tu_fifo_write_n>
 800610a:	4603      	mov	r3, r0
 800610c:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  // may need to suppress -Wunreachable-code since most of the time CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
  if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	331c      	adds	r3, #28
 8006112:	4618      	mov	r0, r3
 8006114:	f001 f860 	bl	80071d8 <tu_fifo_count>
 8006118:	4603      	mov	r3, r0
 800611a:	2b3f      	cmp	r3, #63	; 0x3f
 800611c:	d903      	bls.n	8006126 <tud_cdc_n_write+0x4a>
  {
    tud_cdc_n_write_flush(itf);
 800611e:	7bfb      	ldrb	r3, [r7, #15]
 8006120:	4618      	mov	r0, r3
 8006122:	f000 f807 	bl	8006134 <tud_cdc_n_write_flush>
  }

  return ret;
 8006126:	8a7b      	ldrh	r3, [r7, #18]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	240018c4 	.word	0x240018c4

08006134 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	4603      	mov	r3, r0
 800613c:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006144:	fb02 f303 	mul.w	r3, r2, r3
 8006148:	4a36      	ldr	r2, [pc, #216]	; (8006224 <tud_cdc_n_write_flush+0xf0>)
 800614a:	4413      	add	r3, r2
 800614c:	617b      	str	r3, [r7, #20]
 800614e:	f001 f9f9 	bl	8007544 <tud_mounted>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d009      	beq.n	800616c <tud_cdc_n_write_flush+0x38>
 8006158:	f001 fa06 	bl	8007568 <tud_suspended>
 800615c:	4603      	mov	r3, r0
 800615e:	f083 0301 	eor.w	r3, r3, #1
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <tud_cdc_n_write_flush+0x38>
 8006168:	2301      	movs	r3, #1
 800616a:	e000      	b.n	800616e <tud_cdc_n_write_flush+0x3a>
 800616c:	2300      	movs	r3, #0
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 8006174:	f083 0301 	eor.w	r3, r3, #1
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <tud_cdc_n_write_flush+0x4e>
 800617e:	2300      	movs	r3, #0
 8006180:	e04c      	b.n	800621c <tud_cdc_n_write_flush+0xe8>

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	331c      	adds	r3, #28
 8006186:	4618      	mov	r0, r3
 8006188:	f001 f826 	bl	80071d8 <tu_fifo_count>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <tud_cdc_n_write_flush+0x62>
 8006192:	2300      	movs	r3, #0
 8006194:	e042      	b.n	800621c <tud_cdc_n_write_flush+0xe8>

  uint8_t const rhport = 0;
 8006196:	2300      	movs	r3, #0
 8006198:	74fb      	strb	r3, [r7, #19]

  // Claim the endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	789a      	ldrb	r2, [r3, #2]
 800619e:	7cfb      	ldrb	r3, [r7, #19]
 80061a0:	4611      	mov	r1, r2
 80061a2:	4618      	mov	r0, r3
 80061a4:	f002 fb66 	bl	8008874 <usbd_edpt_claim>
 80061a8:	4603      	mov	r3, r0
 80061aa:	f083 0301 	eor.w	r3, r3, #1
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <tud_cdc_n_write_flush+0x84>
 80061b4:	2300      	movs	r3, #0
 80061b6:	e031      	b.n	800621c <tud_cdc_n_write_flush+0xe8>

  // Pull data from FIFO
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f103 001c 	add.w	r0, r3, #28
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	33e8      	adds	r3, #232	; 0xe8
 80061c2:	2240      	movs	r2, #64	; 0x40
 80061c4:	4619      	mov	r1, r3
 80061c6:	f001 f8d8 	bl	800737a <tu_fifo_read_n>
 80061ca:	4603      	mov	r3, r0
 80061cc:	823b      	strh	r3, [r7, #16]

  if ( count )
 80061ce:	8a3b      	ldrh	r3, [r7, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d01b      	beq.n	800620c <tud_cdc_n_write_flush+0xd8>
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	7899      	ldrb	r1, [r3, #2]
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 80061de:	8a3b      	ldrh	r3, [r7, #16]
 80061e0:	7cf8      	ldrb	r0, [r7, #19]
 80061e2:	f002 fb9b 	bl	800891c <usbd_edpt_xfer>
 80061e6:	4603      	mov	r3, r0
 80061e8:	f083 0301 	eor.w	r3, r3, #1
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <tud_cdc_n_write_flush+0xd4>
 80061f2:	4b0d      	ldr	r3, [pc, #52]	; (8006228 <tud_cdc_n_write_flush+0xf4>)
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d000      	beq.n	8006204 <tud_cdc_n_write_flush+0xd0>
 8006202:	be00      	bkpt	0x0000
 8006204:	2300      	movs	r3, #0
 8006206:	e009      	b.n	800621c <tud_cdc_n_write_flush+0xe8>
    return count;
 8006208:	8a3b      	ldrh	r3, [r7, #16]
 800620a:	e007      	b.n	800621c <tud_cdc_n_write_flush+0xe8>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	789a      	ldrb	r2, [r3, #2]
 8006210:	7cfb      	ldrb	r3, [r7, #19]
 8006212:	4611      	mov	r1, r2
 8006214:	4618      	mov	r0, r3
 8006216:	f002 fb57 	bl	80088c8 <usbd_edpt_release>
    return 0;
 800621a:	2300      	movs	r3, #0
  }
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	240018c4 	.word	0x240018c4
 8006228:	e000edf0 	.word	0xe000edf0

0800622c <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available (uint8_t itf)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	4603      	mov	r3, r0
 8006234:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
 8006236:	79fb      	ldrb	r3, [r7, #7]
 8006238:	f44f 7294 	mov.w	r2, #296	; 0x128
 800623c:	fb02 f303 	mul.w	r3, r2, r3
 8006240:	3318      	adds	r3, #24
 8006242:	4a05      	ldr	r2, [pc, #20]	; (8006258 <tud_cdc_n_write_available+0x2c>)
 8006244:	4413      	add	r3, r2
 8006246:	3304      	adds	r3, #4
 8006248:	4618      	mov	r0, r3
 800624a:	f001 f83a 	bl	80072c2 <tu_fifo_remaining>
 800624e:	4603      	mov	r3, r0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	240018c4 	.word	0x240018c4

0800625c <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8006262:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006266:	2100      	movs	r1, #0
 8006268:	4820      	ldr	r0, [pc, #128]	; (80062ec <cdcd_init+0x90>)
 800626a:	f004 fcb1 	bl	800abd0 <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 800626e:	2300      	movs	r3, #0
 8006270:	71fb      	strb	r3, [r7, #7]
 8006272:	e032      	b.n	80062da <cdcd_init+0x7e>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8006274:	79fb      	ldrb	r3, [r7, #7]
 8006276:	f44f 7294 	mov.w	r2, #296	; 0x128
 800627a:	fb02 f303 	mul.w	r3, r2, r3
 800627e:	4a1b      	ldr	r2, [pc, #108]	; (80062ec <cdcd_init+0x90>)
 8006280:	4413      	add	r3, r2
 8006282:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	22ff      	movs	r2, #255	; 0xff
 8006288:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006290:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2200      	movs	r2, #0
 8006296:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity    = 0;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2200      	movs	r2, #0
 800629c:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2208      	movs	r2, #8
 80062a2:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	f103 0010 	add.w	r0, r3, #16
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80062b0:	2300      	movs	r3, #0
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	2301      	movs	r3, #1
 80062b6:	2240      	movs	r2, #64	; 0x40
 80062b8:	f000 fafc 	bl	80068b4 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	f103 001c 	add.w	r0, r3, #28
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	f103 0168 	add.w	r1, r3, #104	; 0x68
 80062c8:	2301      	movs	r3, #1
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	2301      	movs	r3, #1
 80062ce:	2240      	movs	r2, #64	; 0x40
 80062d0:	f000 faf0 	bl	80068b4 <tu_fifo_config>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 80062d4:	79fb      	ldrb	r3, [r7, #7]
 80062d6:	3301      	adds	r3, #1
 80062d8:	71fb      	strb	r3, [r7, #7]
 80062da:	79fb      	ldrb	r3, [r7, #7]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d0c9      	beq.n	8006274 <cdcd_init+0x18>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
  }
}
 80062e0:	bf00      	nop
 80062e2:	bf00      	nop
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	240018c4 	.word	0x240018c4

080062f0 <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	4603      	mov	r3, r0
 80062f8:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 80062fa:	2300      	movs	r3, #0
 80062fc:	73fb      	strb	r3, [r7, #15]
 80062fe:	e01f      	b.n	8006340 <cdcd_reset+0x50>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006306:	fb02 f303 	mul.w	r3, r2, r3
 800630a:	4a11      	ldr	r2, [pc, #68]	; (8006350 <cdcd_reset+0x60>)
 800630c:	4413      	add	r3, r2
 800630e:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8006310:	2205      	movs	r2, #5
 8006312:	2100      	movs	r1, #0
 8006314:	68b8      	ldr	r0, [r7, #8]
 8006316:	f004 fc5b 	bl	800abd0 <memset>
    tu_fifo_clear(&p_cdc->rx_ff);
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	3310      	adds	r3, #16
 800631e:	4618      	mov	r0, r3
 8006320:	f001 f8b6 	bl	8007490 <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	331c      	adds	r3, #28
 8006328:	4618      	mov	r0, r3
 800632a:	f001 f8b1 	bl	8007490 <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	331c      	adds	r3, #28
 8006332:	2101      	movs	r1, #1
 8006334:	4618      	mov	r0, r3
 8006336:	f001 f8bc 	bl	80074b2 <tu_fifo_set_overwritable>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	3301      	adds	r3, #1
 800633e:	73fb      	strb	r3, [r7, #15]
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0dc      	beq.n	8006300 <cdcd_reset+0x10>
  }
}
 8006346:	bf00      	nop
 8006348:	bf00      	nop
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	240018c4 	.word	0x240018c4

08006354 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b09a      	sub	sp, #104	; 0x68
 8006358:	af02      	add	r7, sp, #8
 800635a:	4603      	mov	r3, r0
 800635c:	6039      	str	r1, [r7, #0]
 800635e:	71fb      	strb	r3, [r7, #7]
 8006360:	4613      	mov	r3, r2
 8006362:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	795b      	ldrb	r3, [r3, #5]
 8006368:	2b02      	cmp	r3, #2
 800636a:	d103      	bne.n	8006374 <cdcd_open+0x20>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	799b      	ldrb	r3, [r3, #6]
 8006370:	2b02      	cmp	r3, #2
 8006372:	d001      	beq.n	8006378 <cdcd_open+0x24>
 8006374:	2300      	movs	r3, #0
 8006376:	e0e1      	b.n	800653c <cdcd_open+0x1e8>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t * p_cdc = NULL;
 8006378:	2300      	movs	r3, #0
 800637a:	65fb      	str	r3, [r7, #92]	; 0x5c
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 800637c:	2300      	movs	r3, #0
 800637e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8006382:	e01a      	b.n	80063ba <cdcd_open+0x66>
  {
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 8006384:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006388:	4a6e      	ldr	r2, [pc, #440]	; (8006544 <cdcd_open+0x1f0>)
 800638a:	f44f 7194 	mov.w	r1, #296	; 0x128
 800638e:	fb01 f303 	mul.w	r3, r1, r3
 8006392:	4413      	add	r3, r2
 8006394:	3302      	adds	r3, #2
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d109      	bne.n	80063b0 <cdcd_open+0x5c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
 800639c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80063a0:	f44f 7294 	mov.w	r2, #296	; 0x128
 80063a4:	fb02 f303 	mul.w	r3, r2, r3
 80063a8:	4a66      	ldr	r2, [pc, #408]	; (8006544 <cdcd_open+0x1f0>)
 80063aa:	4413      	add	r3, r2
 80063ac:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 80063ae:	e008      	b.n	80063c2 <cdcd_open+0x6e>
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 80063b0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80063b4:	3301      	adds	r3, #1
 80063b6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80063ba:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d0e0      	beq.n	8006384 <cdcd_open+0x30>
    }
  }
  TU_ASSERT(p_cdc, 0);
 80063c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10a      	bne.n	80063de <cdcd_open+0x8a>
 80063c8:	4b5f      	ldr	r3, [pc, #380]	; (8006548 <cdcd_open+0x1f4>)
 80063ca:	647b      	str	r3, [r7, #68]	; 0x44
 80063cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d000      	beq.n	80063da <cdcd_open+0x86>
 80063d8:	be00      	bkpt	0x0000
 80063da:	2300      	movs	r3, #0
 80063dc:	e0ae      	b.n	800653c <cdcd_open+0x1e8>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	789a      	ldrb	r2, [r3, #2]
 80063e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063e4:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 80063e6:	2309      	movs	r3, #9
 80063e8:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t const* desc8 = (uint8_t const*) desc;
 80063f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 80063f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	461a      	mov	r2, r3
 80063fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063fc:	4413      	add	r3, r2
  uint8_t const * p_desc = tu_desc_next( itf_desc );
 80063fe:	657b      	str	r3, [r7, #84]	; 0x54

  // Communication Functional Descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8006400:	e013      	b.n	800642a <cdcd_open+0xd6>
 8006402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006404:	633b      	str	r3, [r7, #48]	; 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	781b      	ldrb	r3, [r3, #0]
  {
    drv_len += tu_desc_len(p_desc);
 800640a:	b29a      	uxth	r2, r3
 800640c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8006410:	4413      	add	r3, r2
 8006412:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8006416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006418:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 800641a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641c:	637b      	str	r3, [r7, #52]	; 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 800641e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	461a      	mov	r2, r3
 8006424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006426:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8006428:	657b      	str	r3, [r7, #84]	; 0x54
 800642a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800642c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800642e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006430:	3301      	adds	r3, #1
 8006432:	781b      	ldrb	r3, [r3, #0]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8006434:	2b24      	cmp	r3, #36	; 0x24
 8006436:	d104      	bne.n	8006442 <cdcd_open+0xee>
 8006438:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 800643c:	88bb      	ldrh	r3, [r7, #4]
 800643e:	429a      	cmp	r2, r3
 8006440:	d9df      	bls.n	8006402 <cdcd_open+0xae>
 8006442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006444:	62bb      	str	r3, [r7, #40]	; 0x28
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	3301      	adds	r3, #1
 800644a:	781b      	ldrb	r3, [r3, #0]
  }

  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 800644c:	2b05      	cmp	r3, #5
 800644e:	d12f      	bne.n	80064b0 <cdcd_open+0x15c>
  {
    // notification endpoint
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8006450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006452:	653b      	str	r3, [r7, #80]	; 0x50

    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 8006454:	79fb      	ldrb	r3, [r7, #7]
 8006456:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006458:	4618      	mov	r0, r3
 800645a:	f002 f9c7 	bl	80087ec <usbd_edpt_open>
 800645e:	4603      	mov	r3, r0
 8006460:	f083 0301 	eor.w	r3, r3, #1
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00a      	beq.n	8006480 <cdcd_open+0x12c>
 800646a:	4b37      	ldr	r3, [pc, #220]	; (8006548 <cdcd_open+0x1f4>)
 800646c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800646e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d000      	beq.n	800647c <cdcd_open+0x128>
 800647a:	be00      	bkpt	0x0000
 800647c:	2300      	movs	r3, #0
 800647e:	e05d      	b.n	800653c <cdcd_open+0x1e8>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8006480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006482:	789a      	ldrb	r2, [r3, #2]
 8006484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006486:	705a      	strb	r2, [r3, #1]
 8006488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800648a:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8006490:	b29a      	uxth	r2, r3
 8006492:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8006496:	4413      	add	r3, r2
 8006498:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800649c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	461a      	mov	r2, r3
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 80064ae:	657b      	str	r3, [r7, #84]	; 0x54
 80064b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064b2:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	3301      	adds	r3, #1
 80064b8:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d139      	bne.n	8006532 <cdcd_open+0x1de>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
 80064be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064c0:	795b      	ldrb	r3, [r3, #5]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 80064c2:	2b0a      	cmp	r3, #10
 80064c4:	d135      	bne.n	8006532 <cdcd_open+0x1de>
 80064c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064c8:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	781b      	ldrb	r3, [r3, #0]
  {
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80064d4:	4413      	add	r3, r2
 80064d6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80064da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064dc:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 80064ec:	657b      	str	r3, [r7, #84]	; 0x54

    // Open endpoint pair
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 80064ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064f0:	3303      	adds	r3, #3
 80064f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80064f4:	3202      	adds	r2, #2
 80064f6:	79f8      	ldrb	r0, [r7, #7]
 80064f8:	9201      	str	r2, [sp, #4]
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	2302      	movs	r3, #2
 80064fe:	2202      	movs	r2, #2
 8006500:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006502:	f002 f90b 	bl	800871c <usbd_open_edpt_pair>
 8006506:	4603      	mov	r3, r0
 8006508:	f083 0301 	eor.w	r3, r3, #1
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00a      	beq.n	8006528 <cdcd_open+0x1d4>
 8006512:	4b0d      	ldr	r3, [pc, #52]	; (8006548 <cdcd_open+0x1f4>)
 8006514:	64bb      	str	r3, [r7, #72]	; 0x48
 8006516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d000      	beq.n	8006524 <cdcd_open+0x1d0>
 8006522:	be00      	bkpt	0x0000
 8006524:	2300      	movs	r3, #0
 8006526:	e009      	b.n	800653c <cdcd_open+0x1e8>

    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 8006528:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800652c:	330e      	adds	r3, #14
 800652e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);
 8006532:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006534:	f7ff fd14 	bl	8005f60 <_prep_out_transaction>

  return drv_len;
 8006538:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
}
 800653c:	4618      	mov	r0, r3
 800653e:	3760      	adds	r7, #96	; 0x60
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	240018c4 	.word	0x240018c4
 8006548:	e000edf0 	.word	0xe000edf0

0800654c <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b08a      	sub	sp, #40	; 0x28
 8006550:	af00      	add	r7, sp, #0
 8006552:	4603      	mov	r3, r0
 8006554:	603a      	str	r2, [r7, #0]
 8006556:	71fb      	strb	r3, [r7, #7]
 8006558:	460b      	mov	r3, r1
 800655a:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b20      	cmp	r3, #32
 8006568:	d001      	beq.n	800656e <cdcd_control_xfer_cb+0x22>
 800656a:	2300      	movs	r3, #0
 800656c:	e0cf      	b.n	800670e <cdcd_control_xfer_cb+0x1c2>

  uint8_t itf = 0;
 800656e:	2300      	movs	r3, #0
 8006570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  cdcd_interface_t* p_cdc = _cdcd_itf;
 8006574:	4b68      	ldr	r3, [pc, #416]	; (8006718 <cdcd_control_xfer_cb+0x1cc>)
 8006576:	623b      	str	r3, [r7, #32]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8006578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <cdcd_control_xfer_cb+0x38>
 8006580:	2300      	movs	r3, #0
 8006582:	e0c4      	b.n	800670e <cdcd_control_xfer_cb+0x1c2>

    if ( p_cdc->itf_num == request->wIndex ) break;
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	b29a      	uxth	r2, r3
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	889b      	ldrh	r3, [r3, #4]
 800658e:	b29b      	uxth	r3, r3
 8006590:	429a      	cmp	r2, r3
 8006592:	d009      	beq.n	80065a8 <cdcd_control_xfer_cb+0x5c>
  for ( ; ; itf++, p_cdc++)
 8006594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006598:	3301      	adds	r3, #1
 800659a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80065a4:	623b      	str	r3, [r7, #32]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 80065a6:	e7e7      	b.n	8006578 <cdcd_control_xfer_cb+0x2c>
    if ( p_cdc->itf_num == request->wIndex ) break;
 80065a8:	bf00      	nop
  }

  switch ( request->bRequest )
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	785b      	ldrb	r3, [r3, #1]
 80065ae:	3b20      	subs	r3, #32
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	f200 80a2 	bhi.w	80066fa <cdcd_control_xfer_cb+0x1ae>
 80065b6:	a201      	add	r2, pc, #4	; (adr r2, 80065bc <cdcd_control_xfer_cb+0x70>)
 80065b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065bc:	080065cd 	.word	0x080065cd
 80065c0:	08006609 	.word	0x08006609
 80065c4:	08006621 	.word	0x08006621
 80065c8:	080066c9 	.word	0x080066c9
  {
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 80065cc:	79bb      	ldrb	r3, [r7, #6]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d108      	bne.n	80065e4 <cdcd_control_xfer_cb+0x98>
      {
        TU_LOG2("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	f103 0208 	add.w	r2, r3, #8
 80065d8:	79f8      	ldrb	r0, [r7, #7]
 80065da:	2307      	movs	r3, #7
 80065dc:	6839      	ldr	r1, [r7, #0]
 80065de:	f002 fc39 	bl	8008e54 <tud_control_xfer>
      }
      else if ( stage == CONTROL_STAGE_ACK)
      {
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
      }
    break;
 80065e2:	e08c      	b.n	80066fe <cdcd_control_xfer_cb+0x1b2>
      else if ( stage == CONTROL_STAGE_ACK)
 80065e4:	79bb      	ldrb	r3, [r7, #6]
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	f040 8089 	bne.w	80066fe <cdcd_control_xfer_cb+0x1b2>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 80065ec:	4b4b      	ldr	r3, [pc, #300]	; (800671c <cdcd_control_xfer_cb+0x1d0>)
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 8085 	beq.w	80066fe <cdcd_control_xfer_cb+0x1b2>
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	f103 0208 	add.w	r2, r3, #8
 80065fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065fe:	4611      	mov	r1, r2
 8006600:	4618      	mov	r0, r3
 8006602:	f3af 8000 	nop.w
    break;
 8006606:	e07a      	b.n	80066fe <cdcd_control_xfer_cb+0x1b2>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8006608:	79bb      	ldrb	r3, [r7, #6]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d179      	bne.n	8006702 <cdcd_control_xfer_cb+0x1b6>
      {
        TU_LOG2("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	f103 0208 	add.w	r2, r3, #8
 8006614:	79f8      	ldrb	r0, [r7, #7]
 8006616:	2307      	movs	r3, #7
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	f002 fc1b 	bl	8008e54 <tud_control_xfer>
      }
    break;
 800661e:	e070      	b.n	8006702 <cdcd_control_xfer_cb+0x1b6>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP)
 8006620:	79bb      	ldrb	r3, [r7, #6]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d105      	bne.n	8006632 <cdcd_control_xfer_cb+0xe6>
      {
        tud_control_status(rhport, request);
 8006626:	79fb      	ldrb	r3, [r7, #7]
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	4618      	mov	r0, r3
 800662c:	f002 fba0 	bl	8008d70 <tud_control_status>
        TU_LOG2("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);

        // Invoke callback
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
      }
    break;
 8006630:	e069      	b.n	8006706 <cdcd_control_xfer_cb+0x1ba>
      else if (stage == CONTROL_STAGE_ACK)
 8006632:	79bb      	ldrb	r3, [r7, #6]
 8006634:	2b03      	cmp	r3, #3
 8006636:	d166      	bne.n	8006706 <cdcd_control_xfer_cb+0x1ba>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	885b      	ldrh	r3, [r3, #2]
 800663c:	b29b      	uxth	r3, r3
 800663e:	613b      	str	r3, [r7, #16]
 8006640:	2300      	movs	r3, #0
 8006642:	73fb      	strb	r3, [r7, #15]
 8006644:	7bfb      	ldrb	r3, [r7, #15]
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	fa22 f303 	lsr.w	r3, r2, r3
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b00      	cmp	r3, #0
 8006652:	bf14      	ite	ne
 8006654:	2301      	movne	r3, #1
 8006656:	2300      	moveq	r3, #0
 8006658:	b2db      	uxtb	r3, r3
 800665a:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	885b      	ldrh	r3, [r3, #2]
 8006660:	b29b      	uxth	r3, r3
 8006662:	61bb      	str	r3, [r7, #24]
 8006664:	2301      	movs	r3, #1
 8006666:	75fb      	strb	r3, [r7, #23]
 8006668:	7dfb      	ldrb	r3, [r7, #23]
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	fa22 f303 	lsr.w	r3, r2, r3
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	bf14      	ite	ne
 8006678:	2301      	movne	r3, #1
 800667a:	2300      	moveq	r3, #0
 800667c:	b2db      	uxtb	r3, r3
 800667e:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	885b      	ldrh	r3, [r3, #2]
 8006684:	b29b      	uxth	r3, r3
 8006686:	b2da      	uxtb	r2, r3
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	f103 021c 	add.w	r2, r3, #28
 8006692:	7ffb      	ldrb	r3, [r7, #31]
 8006694:	2b00      	cmp	r3, #0
 8006696:	bf14      	ite	ne
 8006698:	2301      	movne	r3, #1
 800669a:	2300      	moveq	r3, #0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	f083 0301 	eor.w	r3, r3, #1
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	4619      	mov	r1, r3
 80066ac:	4610      	mov	r0, r2
 80066ae:	f000 ff00 	bl	80074b2 <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 80066b2:	4b1b      	ldr	r3, [pc, #108]	; (8006720 <cdcd_control_xfer_cb+0x1d4>)
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d026      	beq.n	8006706 <cdcd_control_xfer_cb+0x1ba>
 80066b8:	7fba      	ldrb	r2, [r7, #30]
 80066ba:	7ff9      	ldrb	r1, [r7, #31]
 80066bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fa f93b 	bl	800093c <tud_cdc_line_state_cb>
    break;
 80066c6:	e01e      	b.n	8006706 <cdcd_control_xfer_cb+0x1ba>
    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP)
 80066c8:	79bb      	ldrb	r3, [r7, #6]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d105      	bne.n	80066da <cdcd_control_xfer_cb+0x18e>
      {
        tud_control_status(rhport, request);
 80066ce:	79fb      	ldrb	r3, [r7, #7]
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f002 fb4c 	bl	8008d70 <tud_control_status>
      else if (stage == CONTROL_STAGE_ACK)
      {
        TU_LOG2("  Send Break\r\n");
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
      }
    break;
 80066d8:	e017      	b.n	800670a <cdcd_control_xfer_cb+0x1be>
      else if (stage == CONTROL_STAGE_ACK)
 80066da:	79bb      	ldrb	r3, [r7, #6]
 80066dc:	2b03      	cmp	r3, #3
 80066de:	d114      	bne.n	800670a <cdcd_control_xfer_cb+0x1be>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 80066e0:	4b10      	ldr	r3, [pc, #64]	; (8006724 <cdcd_control_xfer_cb+0x1d8>)
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d011      	beq.n	800670a <cdcd_control_xfer_cb+0x1be>
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	885b      	ldrh	r3, [r3, #2]
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066f0:	4611      	mov	r1, r2
 80066f2:	4618      	mov	r0, r3
 80066f4:	f3af 8000 	nop.w
    break;
 80066f8:	e007      	b.n	800670a <cdcd_control_xfer_cb+0x1be>

    default: return false; // stall unsupported request
 80066fa:	2300      	movs	r3, #0
 80066fc:	e007      	b.n	800670e <cdcd_control_xfer_cb+0x1c2>
    break;
 80066fe:	bf00      	nop
 8006700:	e004      	b.n	800670c <cdcd_control_xfer_cb+0x1c0>
    break;
 8006702:	bf00      	nop
 8006704:	e002      	b.n	800670c <cdcd_control_xfer_cb+0x1c0>
    break;
 8006706:	bf00      	nop
 8006708:	e000      	b.n	800670c <cdcd_control_xfer_cb+0x1c0>
    break;
 800670a:	bf00      	nop
  }

  return true;
 800670c:	2301      	movs	r3, #1
}
 800670e:	4618      	mov	r0, r3
 8006710:	3728      	adds	r7, #40	; 0x28
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	240018c4 	.word	0x240018c4
 800671c:	00000000 	.word	0x00000000
 8006720:	0800093d 	.word	0x0800093d
 8006724:	00000000 	.word	0x00000000

08006728 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	4603      	mov	r3, r0
 8006732:	71fb      	strb	r3, [r7, #7]
 8006734:	460b      	mov	r3, r1
 8006736:	71bb      	strb	r3, [r7, #6]
 8006738:	4613      	mov	r3, r2
 800673a:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 800673c:	2300      	movs	r3, #0
 800673e:	75fb      	strb	r3, [r7, #23]
 8006740:	e014      	b.n	800676c <cdcd_xfer_cb+0x44>
  {
    p_cdc = &_cdcd_itf[itf];
 8006742:	7dfb      	ldrb	r3, [r7, #23]
 8006744:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006748:	fb02 f303 	mul.w	r3, r2, r3
 800674c:	4a54      	ldr	r2, [pc, #336]	; (80068a0 <cdcd_xfer_cb+0x178>)
 800674e:	4413      	add	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	78db      	ldrb	r3, [r3, #3]
 8006756:	79ba      	ldrb	r2, [r7, #6]
 8006758:	429a      	cmp	r2, r3
 800675a:	d00a      	beq.n	8006772 <cdcd_xfer_cb+0x4a>
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	789b      	ldrb	r3, [r3, #2]
 8006760:	79ba      	ldrb	r2, [r7, #6]
 8006762:	429a      	cmp	r2, r3
 8006764:	d005      	beq.n	8006772 <cdcd_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8006766:	7dfb      	ldrb	r3, [r7, #23]
 8006768:	3301      	adds	r3, #1
 800676a:	75fb      	strb	r3, [r7, #23]
 800676c:	7dfb      	ldrb	r3, [r7, #23]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0e7      	beq.n	8006742 <cdcd_xfer_cb+0x1a>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8006772:	7dfb      	ldrb	r3, [r7, #23]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00a      	beq.n	800678e <cdcd_xfer_cb+0x66>
 8006778:	4b4a      	ldr	r3, [pc, #296]	; (80068a4 <cdcd_xfer_cb+0x17c>)
 800677a:	60bb      	str	r3, [r7, #8]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d000      	beq.n	800678a <cdcd_xfer_cb+0x62>
 8006788:	be00      	bkpt	0x0000
 800678a:	2300      	movs	r3, #0
 800678c:	e084      	b.n	8006898 <cdcd_xfer_cb+0x170>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	78db      	ldrb	r3, [r3, #3]
 8006792:	79ba      	ldrb	r2, [r7, #6]
 8006794:	429a      	cmp	r2, r3
 8006796:	d14a      	bne.n	800682e <cdcd_xfer_cb+0x106>
  {
    tu_fifo_write_n(&p_cdc->rx_ff, p_cdc->epout_buf, (uint16_t) xferred_bytes);
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f103 0010 	add.w	r0, r3, #16
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	33a8      	adds	r3, #168	; 0xa8
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	b292      	uxth	r2, r2
 80067a6:	4619      	mov	r1, r3
 80067a8:	f000 fe4e 	bl	8007448 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 80067ac:	4b3e      	ldr	r3, [pc, #248]	; (80068a8 <cdcd_xfer_cb+0x180>)
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d028      	beq.n	8006804 <cdcd_xfer_cb+0xdc>
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	795b      	ldrb	r3, [r3, #5]
 80067b6:	2bff      	cmp	r3, #255	; 0xff
 80067b8:	d024      	beq.n	8006804 <cdcd_xfer_cb+0xdc>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 80067ba:	2300      	movs	r3, #0
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	e01d      	b.n	80067fc <cdcd_xfer_cb+0xd4>
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	795a      	ldrb	r2, [r3, #5]
 80067c4:	6939      	ldr	r1, [r7, #16]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	440b      	add	r3, r1
 80067ca:	33a8      	adds	r3, #168	; 0xa8
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d111      	bne.n	80067f6 <cdcd_xfer_cb+0xce>
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	3310      	adds	r3, #16
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 fd30 	bl	800723c <tu_fifo_empty>
 80067dc:	4603      	mov	r3, r0
 80067de:	f083 0301 	eor.w	r3, r3, #1
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d006      	beq.n	80067f6 <cdcd_xfer_cb+0xce>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	795a      	ldrb	r2, [r3, #5]
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
 80067ee:	4611      	mov	r1, r2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f3af 8000 	nop.w
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3301      	adds	r3, #1
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	d3dd      	bcc.n	80067c0 <cdcd_xfer_cb+0x98>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 8006804:	4b29      	ldr	r3, [pc, #164]	; (80068ac <cdcd_xfer_cb+0x184>)
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00e      	beq.n	8006828 <cdcd_xfer_cb+0x100>
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	3310      	adds	r3, #16
 800680e:	4618      	mov	r0, r3
 8006810:	f000 fd14 	bl	800723c <tu_fifo_empty>
 8006814:	4603      	mov	r3, r0
 8006816:	f083 0301 	eor.w	r3, r3, #1
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <cdcd_xfer_cb+0x100>
 8006820:	7dfb      	ldrb	r3, [r7, #23]
 8006822:	4618      	mov	r0, r3
 8006824:	f7fa f899 	bl	800095a <tud_cdc_rx_cb>

    // prepare for OUT transaction
    _prep_out_transaction(p_cdc);
 8006828:	6938      	ldr	r0, [r7, #16]
 800682a:	f7ff fb99 	bl	8005f60 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	789b      	ldrb	r3, [r3, #2]
 8006832:	79ba      	ldrb	r2, [r7, #6]
 8006834:	429a      	cmp	r2, r3
 8006836:	d12e      	bne.n	8006896 <cdcd_xfer_cb+0x16e>
  {
    // invoke transmit callback to possibly refill tx fifo
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 8006838:	4b1d      	ldr	r3, [pc, #116]	; (80068b0 <cdcd_xfer_cb+0x188>)
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <cdcd_xfer_cb+0x11e>
 800683e:	7dfb      	ldrb	r3, [r7, #23]
 8006840:	4618      	mov	r0, r3
 8006842:	f3af 8000 	nop.w

    if ( 0 == tud_cdc_n_write_flush(itf) )
 8006846:	7dfb      	ldrb	r3, [r7, #23]
 8006848:	4618      	mov	r0, r3
 800684a:	f7ff fc73 	bl	8006134 <tud_cdc_n_write_flush>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d120      	bne.n	8006896 <cdcd_xfer_cb+0x16e>
    {
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	331c      	adds	r3, #28
 8006858:	4618      	mov	r0, r3
 800685a:	f000 fcbd 	bl	80071d8 <tu_fifo_count>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d118      	bne.n	8006896 <cdcd_xfer_cb+0x16e>
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d015      	beq.n	8006896 <cdcd_xfer_cb+0x16e>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006870:	2b00      	cmp	r3, #0
 8006872:	d110      	bne.n	8006896 <cdcd_xfer_cb+0x16e>
      {
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	789a      	ldrb	r2, [r3, #2]
 8006878:	79fb      	ldrb	r3, [r7, #7]
 800687a:	4611      	mov	r1, r2
 800687c:	4618      	mov	r0, r3
 800687e:	f001 fff9 	bl	8008874 <usbd_edpt_claim>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d006      	beq.n	8006896 <cdcd_xfer_cb+0x16e>
        {
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	7899      	ldrb	r1, [r3, #2]
 800688c:	79f8      	ldrb	r0, [r7, #7]
 800688e:	2300      	movs	r3, #0
 8006890:	2200      	movs	r2, #0
 8006892:	f002 f843 	bl	800891c <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 8006896:	2301      	movs	r3, #1
}
 8006898:	4618      	mov	r0, r3
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	240018c4 	.word	0x240018c4
 80068a4:	e000edf0 	.word	0xe000edf0
 80068a8:	00000000 	.word	0x00000000
 80068ac:	0800095b 	.word	0x0800095b
 80068b0:	00000000 	.word	0x00000000

080068b4 <tu_fifo_config>:
  TU_FIFO_COPY_INC,            ///< Copy from/to an increasing source/destination address - default mode
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	4611      	mov	r1, r2
 80068c0:	461a      	mov	r2, r3
 80068c2:	460b      	mov	r3, r1
 80068c4:	80fb      	strh	r3, [r7, #6]
 80068c6:	4613      	mov	r3, r2
 80068c8:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 80068ca:	88fb      	ldrh	r3, [r7, #6]
 80068cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068d0:	d901      	bls.n	80068d6 <tu_fifo_config+0x22>
 80068d2:	2300      	movs	r3, #0
 80068d4:	e01b      	b.n	800690e <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	88fa      	ldrh	r2, [r7, #6]
 80068e0:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 80068e2:	88bb      	ldrh	r3, [r7, #4]
 80068e4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80068e8:	b299      	uxth	r1, r3
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	88d3      	ldrh	r3, [r2, #6]
 80068ee:	f361 030e 	bfi	r3, r1, #0, #15
 80068f2:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	79d3      	ldrb	r3, [r2, #7]
 80068f8:	7e39      	ldrb	r1, [r7, #24]
 80068fa:	f361 13c7 	bfi	r3, r1, #7, #1
 80068fe:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 800690c:	2301      	movs	r3, #1
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b08a      	sub	sp, #40	; 0x28
 800691e:	af00      	add	r7, sp, #0
 8006920:	60f8      	str	r0, [r7, #12]
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	4613      	mov	r3, r2
 8006926:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 800692c:	88fb      	ldrh	r3, [r7, #6]
 800692e:	089b      	lsrs	r3, r3, #2
 8006930:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 8006932:	e00b      	b.n	800694c <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	61ba      	str	r2, [r7, #24]
 800693c:	617b      	str	r3, [r7, #20]

// MCU that could access unaligned memory natively
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }

TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	697a      	ldr	r2, [r7, #20]
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	bf00      	nop
    ff_buf += 4;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3304      	adds	r3, #4
 800694a:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 800694c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800694e:	1e5a      	subs	r2, r3, #1
 8006950:	84fa      	strh	r2, [r7, #38]	; 0x26
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1ee      	bne.n	8006934 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8006956:	88fb      	ldrh	r3, [r7, #6]
 8006958:	b2db      	uxtb	r3, r3
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8006960:	7ffb      	ldrb	r3, [r7, #31]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d009      	beq.n	800697a <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 800696c:	7ffa      	ldrb	r2, [r7, #31]
 800696e:	f107 0310 	add.w	r3, r7, #16
 8006972:	4619      	mov	r1, r3
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f004 f91d 	bl	800abb4 <memcpy>
  }
}
 800697a:	bf00      	nop
 800697c:	3728      	adds	r7, #40	; 0x28
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b08a      	sub	sp, #40	; 0x28
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	60b9      	str	r1, [r7, #8]
 800698c:	4613      	mov	r3, r2
 800698e:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8006994:	88fb      	ldrh	r3, [r7, #6]
 8006996:	089b      	lsrs	r3, r3, #2
 8006998:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 800699a:	e008      	b.n	80069ae <_ff_pull_const_addr+0x2c>
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	61bb      	str	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	3304      	adds	r3, #4
 80069ac:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 80069ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80069b0:	1e5a      	subs	r2, r3, #1
 80069b2:	84fa      	strh	r2, [r7, #38]	; 0x26
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1f1      	bne.n	800699c <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 80069b8:	88fb      	ldrh	r3, [r7, #6]
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	f003 0303 	and.w	r3, r3, #3
 80069c0:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80069c2:	7ffb      	ldrb	r3, [r7, #31]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00b      	beq.n	80069e0 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 80069cc:	7ffa      	ldrb	r2, [r7, #31]
 80069ce:	f107 0314 	add.w	r3, r7, #20
 80069d2:	68b9      	ldr	r1, [r7, #8]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f004 f8ed 	bl	800abb4 <memcpy>

    *reg_tx = tmp32;
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	601a      	str	r2, [r3, #0]
  }
}
 80069e0:	bf00      	nop
 80069e2:	3728      	adds	r7, #40	; 0x28
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <_ff_push>:

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	4613      	mov	r3, r2
 80069f4:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	88fa      	ldrh	r2, [r7, #6]
 80069fc:	68f9      	ldr	r1, [r7, #12]
 80069fe:	88c9      	ldrh	r1, [r1, #6]
 8006a00:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006a04:	b289      	uxth	r1, r1
 8006a06:	fb01 f202 	mul.w	r2, r1, r2
 8006a0a:	1898      	adds	r0, r3, r2
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	88db      	ldrh	r3, [r3, #6]
 8006a10:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	461a      	mov	r2, r3
 8006a18:	68b9      	ldr	r1, [r7, #8]
 8006a1a:	f004 f8cb 	bl	800abb4 <memcpy>
}
 8006a1e:	bf00      	nop
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b08e      	sub	sp, #56	; 0x38
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	60f8      	str	r0, [r7, #12]
 8006a2e:	60b9      	str	r1, [r7, #8]
 8006a30:	4611      	mov	r1, r2
 8006a32:	461a      	mov	r2, r3
 8006a34:	460b      	mov	r3, r1
 8006a36:	80fb      	strh	r3, [r7, #6]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	889a      	ldrh	r2, [r3, #4]
 8006a40:	88bb      	ldrh	r3, [r7, #4]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count;
 8006a46:	88fa      	ldrh	r2, [r7, #6]
 8006a48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	88db      	ldrh	r3, [r3, #6]
 8006a52:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	461a      	mov	r2, r3
 8006a5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a5c:	fb13 f302 	smulbb	r3, r3, r2
 8006a60:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	88db      	ldrh	r3, [r3, #6]
 8006a66:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a70:	fb13 f302 	smulbb	r3, r3, r2
 8006a74:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	88ba      	ldrh	r2, [r7, #4]
 8006a7c:	68f9      	ldr	r1, [r7, #12]
 8006a7e:	88c9      	ldrh	r1, [r1, #6]
 8006a80:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006a84:	b289      	uxth	r1, r1
 8006a86:	fb01 f202 	mul.w	r2, r1, r2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8006a8e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d002      	beq.n	8006a9c <_ff_push_n+0x76>
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d022      	beq.n	8006ae0 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
  }
}
 8006a9a:	e09e      	b.n	8006bda <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8006a9c:	88fa      	ldrh	r2, [r7, #6]
 8006a9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d80d      	bhi.n	8006ac0 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8006aa4:	88fb      	ldrh	r3, [r7, #6]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	88d2      	ldrh	r2, [r2, #6]
 8006aaa:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006aae:	b292      	uxth	r2, r2
 8006ab0:	fb02 f303 	mul.w	r3, r2, r3
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	68b9      	ldr	r1, [r7, #8]
 8006ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aba:	f004 f87b 	bl	800abb4 <memcpy>
      break;
 8006abe:	e08c      	b.n	8006bda <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8006ac0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	68b9      	ldr	r1, [r7, #8]
 8006ac6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ac8:	f004 f874 	bl	800abb4 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6818      	ldr	r0, [r3, #0]
 8006ad0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006ad8:	4619      	mov	r1, r3
 8006ada:	f004 f86b 	bl	800abb4 <memcpy>
      break;
 8006ade:	e07c      	b.n	8006bda <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8006ae0:	88fa      	ldrh	r2, [r7, #6]
 8006ae2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d80f      	bhi.n	8006b08 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	88db      	ldrh	r3, [r3, #6]
 8006aec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	461a      	mov	r2, r3
 8006af4:	88fb      	ldrh	r3, [r7, #6]
 8006af6:	fb13 f302 	smulbb	r3, r3, r2
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	461a      	mov	r2, r3
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b02:	f7ff ff0a 	bl	800691a <_ff_push_const_addr>
      break;
 8006b06:	e067      	b.n	8006bd8 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8006b08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b0a:	f023 0303 	bic.w	r3, r3, #3
 8006b0e:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8006b10:	8c3b      	ldrh	r3, [r7, #32]
 8006b12:	461a      	mov	r2, r3
 8006b14:	68b9      	ldr	r1, [r7, #8]
 8006b16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b18:	f7ff feff 	bl	800691a <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8006b1c:	8c3b      	ldrh	r3, [r7, #32]
 8006b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b20:	4413      	add	r3, r2
 8006b22:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 8006b24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 8006b30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d043      	beq.n	8006bc0 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8006b3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	f1c3 0304 	rsb	r3, r3, #4
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b4a:	837b      	strh	r3, [r7, #26]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8006b50:	8b7a      	ldrh	r2, [r7, #26]
 8006b52:	8b3b      	ldrh	r3, [r7, #24]
 8006b54:	4293      	cmp	r3, r2
 8006b56:	bf28      	it	cs
 8006b58:	4613      	movcs	r3, r2
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 8006b60:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32 = *rx_fifo;
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8006b72:	f107 0314 	add.w	r3, r7, #20
 8006b76:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8006b78:	e007      	b.n	8006b8a <_ff_push_n+0x164>
 8006b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b7c:	1c53      	adds	r3, r2, #1
 8006b7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b82:	1c59      	adds	r1, r3, #1
 8006b84:	6339      	str	r1, [r7, #48]	; 0x30
 8006b86:	7812      	ldrb	r2, [r2, #0]
 8006b88:	701a      	strb	r2, [r3, #0]
 8006b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b8e:	1e5a      	subs	r2, r3, #1
 8006b90:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1f0      	bne.n	8006b7a <_ff_push_n+0x154>
          ff_buf = f->buffer;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8006b9e:	e007      	b.n	8006bb0 <_ff_push_n+0x18a>
 8006ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ba2:	1c53      	adds	r3, r2, #1
 8006ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	1c59      	adds	r1, r3, #1
 8006baa:	6339      	str	r1, [r7, #48]	; 0x30
 8006bac:	7812      	ldrb	r2, [r2, #0]
 8006bae:	701a      	strb	r2, [r3, #0]
 8006bb0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006bb4:	1e5a      	subs	r2, r3, #1
 8006bb6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1f0      	bne.n	8006ba0 <_ff_push_n+0x17a>
 8006bbe:	e002      	b.n	8006bc6 <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8006bc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d005      	beq.n	8006bd8 <_ff_push_n+0x1b2>
 8006bcc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006bce:	461a      	mov	r2, r3
 8006bd0:	68b9      	ldr	r1, [r7, #8]
 8006bd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bd4:	f7ff fea1 	bl	800691a <_ff_push_const_addr>
      break;
 8006bd8:	bf00      	nop
}
 8006bda:	bf00      	nop
 8006bdc:	3738      	adds	r7, #56	; 0x38
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	60b9      	str	r1, [r7, #8]
 8006bec:	4613      	mov	r3, r2
 8006bee:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	88fa      	ldrh	r2, [r7, #6]
 8006bf6:	68f9      	ldr	r1, [r7, #12]
 8006bf8:	88c9      	ldrh	r1, [r1, #6]
 8006bfa:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006bfe:	b289      	uxth	r1, r1
 8006c00:	fb01 f202 	mul.w	r2, r1, r2
 8006c04:	1899      	adds	r1, r3, r2
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	88db      	ldrh	r3, [r3, #6]
 8006c0a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	461a      	mov	r2, r3
 8006c12:	68b8      	ldr	r0, [r7, #8]
 8006c14:	f003 ffce 	bl	800abb4 <memcpy>
}
 8006c18:	bf00      	nop
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08e      	sub	sp, #56	; 0x38
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	460b      	mov	r3, r1
 8006c30:	80fb      	strh	r3, [r7, #6]
 8006c32:	4613      	mov	r3, r2
 8006c34:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	889a      	ldrh	r2, [r3, #4]
 8006c3a:	88bb      	ldrh	r3, [r7, #4]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8006c40:	88fa      	ldrh	r2, [r7, #6]
 8006c42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	88db      	ldrh	r3, [r3, #6]
 8006c4c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	461a      	mov	r2, r3
 8006c54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c56:	fb13 f302 	smulbb	r3, r3, r2
 8006c5a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	88db      	ldrh	r3, [r3, #6]
 8006c60:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	461a      	mov	r2, r3
 8006c68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c6a:	fb13 f302 	smulbb	r3, r3, r2
 8006c6e:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	88ba      	ldrh	r2, [r7, #4]
 8006c76:	68f9      	ldr	r1, [r7, #12]
 8006c78:	88c9      	ldrh	r1, [r1, #6]
 8006c7a:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006c7e:	b289      	uxth	r1, r1
 8006c80:	fb01 f202 	mul.w	r2, r1, r2
 8006c84:	4413      	add	r3, r2
 8006c86:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8006c88:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <_ff_pull_n+0x76>
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d022      	beq.n	8006cda <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;

    default: break;
 8006c94:	e0a0      	b.n	8006dd8 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8006c96:	88fa      	ldrh	r2, [r7, #6]
 8006c98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d80d      	bhi.n	8006cba <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 8006c9e:	88fb      	ldrh	r3, [r7, #6]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	88d2      	ldrh	r2, [r2, #6]
 8006ca4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006ca8:	b292      	uxth	r2, r2
 8006caa:	fb02 f303 	mul.w	r3, r2, r3
 8006cae:	461a      	mov	r2, r3
 8006cb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cb2:	68b8      	ldr	r0, [r7, #8]
 8006cb4:	f003 ff7e 	bl	800abb4 <memcpy>
    break;
 8006cb8:	e08e      	b.n	8006dd8 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 8006cba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cc0:	68b8      	ldr	r0, [r7, #8]
 8006cc2:	f003 ff77 	bl	800abb4 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8006cc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	18d0      	adds	r0, r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	f003 ff6e 	bl	800abb4 <memcpy>
    break;
 8006cd8:	e07e      	b.n	8006dd8 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8006cda:	88fa      	ldrh	r2, [r7, #6]
 8006cdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d80f      	bhi.n	8006d02 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	88db      	ldrh	r3, [r3, #6]
 8006ce6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	461a      	mov	r2, r3
 8006cee:	88fb      	ldrh	r3, [r7, #6]
 8006cf0:	fb13 f302 	smulbb	r3, r3, r2
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cfa:	68b8      	ldr	r0, [r7, #8]
 8006cfc:	f7ff fe41 	bl	8006982 <_ff_pull_const_addr>
    break;
 8006d00:	e069      	b.n	8006dd6 <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8006d02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d04:	f023 0303 	bic.w	r3, r3, #3
 8006d08:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 8006d0a:	8c3b      	ldrh	r3, [r7, #32]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d10:	68b8      	ldr	r0, [r7, #8]
 8006d12:	f7ff fe36 	bl	8006982 <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 8006d16:	8c3b      	ldrh	r3, [r7, #32]
 8006d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d1a:	4413      	add	r3, r2
 8006d1c:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 8006d1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	f003 0303 	and.w	r3, r3, #3
 8006d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 8006d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d045      	beq.n	8006dbe <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8006d36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	f1c3 0304 	rsb	r3, r3, #4
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d44:	837b      	strh	r3, [r7, #26]
 8006d46:	4613      	mov	r3, r2
 8006d48:	833b      	strh	r3, [r7, #24]
 8006d4a:	8b7a      	ldrh	r2, [r7, #26]
 8006d4c:	8b3b      	ldrh	r3, [r7, #24]
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	bf28      	it	cs
 8006d52:	4613      	movcs	r3, r2
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 8006d5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32=0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8006d6a:	f107 0314 	add.w	r3, r7, #20
 8006d6e:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8006d70:	e007      	b.n	8006d82 <_ff_pull_n+0x162>
 8006d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d74:	1c53      	adds	r3, r2, #1
 8006d76:	633b      	str	r3, [r7, #48]	; 0x30
 8006d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7a:	1c59      	adds	r1, r3, #1
 8006d7c:	62b9      	str	r1, [r7, #40]	; 0x28
 8006d7e:	7812      	ldrb	r2, [r2, #0]
 8006d80:	701a      	strb	r2, [r3, #0]
 8006d82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d86:	1e5a      	subs	r2, r3, #1
 8006d88:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1f0      	bne.n	8006d72 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 8006d96:	e007      	b.n	8006da8 <_ff_pull_n+0x188>
 8006d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d9a:	1c53      	adds	r3, r2, #1
 8006d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8006d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da0:	1c59      	adds	r1, r3, #1
 8006da2:	62b9      	str	r1, [r7, #40]	; 0x28
 8006da4:	7812      	ldrb	r2, [r2, #0]
 8006da6:	701a      	strb	r2, [r3, #0]
 8006da8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006dac:	1e5a      	subs	r2, r3, #1
 8006dae:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1f0      	bne.n	8006d98 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	e002      	b.n	8006dc4 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8006dc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d005      	beq.n	8006dd6 <_ff_pull_n+0x1b6>
 8006dca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006dcc:	461a      	mov	r2, r3
 8006dce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dd0:	68b8      	ldr	r0, [r7, #8]
 8006dd2:	f7ff fdd6 	bl	8006982 <_ff_pull_const_addr>
    break;
 8006dd6:	bf00      	nop
  }
}
 8006dd8:	bf00      	nop
 8006dda:	3738      	adds	r7, #56	; 0x38
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	4603      	mov	r3, r0
 8006de8:	80fb      	strh	r3, [r7, #6]
 8006dea:	460b      	mov	r3, r1
 8006dec:	80bb      	strh	r3, [r7, #4]
 8006dee:	4613      	mov	r3, r2
 8006df0:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8006df2:	88ba      	ldrh	r2, [r7, #4]
 8006df4:	887b      	ldrh	r3, [r7, #2]
 8006df6:	4413      	add	r3, r2
 8006df8:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8006dfa:	88ba      	ldrh	r2, [r7, #4]
 8006dfc:	89fb      	ldrh	r3, [r7, #14]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d804      	bhi.n	8006e0c <advance_index+0x2c>
 8006e02:	89fa      	ldrh	r2, [r7, #14]
 8006e04:	88fb      	ldrh	r3, [r7, #6]
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	db08      	blt.n	8006e1e <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8006e0c:	88fb      	ldrh	r3, [r7, #6]
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	425b      	negs	r3, r3
 8006e14:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8006e16:	89fa      	ldrh	r2, [r7, #14]
 8006e18:	89bb      	ldrh	r3, [r7, #12]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8006e1e:	89fb      	ldrh	r3, [r7, #14]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b08a      	sub	sp, #40	; 0x28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	4611      	mov	r1, r2
 8006e38:	461a      	mov	r2, r3
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	80fb      	strh	r3, [r7, #6]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	889b      	ldrh	r3, [r3, #4]
 8006e46:	847b      	strh	r3, [r7, #34]	; 0x22
 8006e48:	88fb      	ldrh	r3, [r7, #6]
 8006e4a:	843b      	strh	r3, [r7, #32]
 8006e4c:	88bb      	ldrh	r3, [r7, #4]
 8006e4e:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8006e50:	8c3a      	ldrh	r2, [r7, #32]
 8006e52:	8bfb      	ldrh	r3, [r7, #30]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d304      	bcc.n	8006e62 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8006e58:	8c3a      	ldrh	r2, [r7, #32]
 8006e5a:	8bfb      	ldrh	r3, [r7, #30]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	e008      	b.n	8006e74 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006e62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	8c39      	ldrh	r1, [r7, #32]
 8006e6a:	8bfb      	ldrh	r3, [r7, #30]
 8006e6c:	1acb      	subs	r3, r1, r3
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	4413      	add	r3, r2
 8006e72:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006e74:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 8006e76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <_tu_fifo_peek+0x54>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	e037      	b.n	8006ef0 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	889b      	ldrh	r3, [r3, #4]
 8006e84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d91b      	bls.n	8006ec2 <_tu_fifo_peek+0x96>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	61bb      	str	r3, [r7, #24]
 8006e8e:	88fb      	ldrh	r3, [r7, #6]
 8006e90:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	889b      	ldrh	r3, [r3, #4]
 8006e96:	8afa      	ldrh	r2, [r7, #22]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d305      	bcc.n	8006ea8 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	889b      	ldrh	r3, [r3, #4]
 8006ea0:	8afa      	ldrh	r2, [r7, #22]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	82bb      	strh	r3, [r7, #20]
 8006ea6:	e004      	b.n	8006eb2 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	889a      	ldrh	r2, [r3, #4]
 8006eac:	8afb      	ldrh	r3, [r7, #22]
 8006eae:	4413      	add	r3, r2
 8006eb0:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	8aba      	ldrh	r2, [r7, #20]
 8006eb6:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8006eb8:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8006eba:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	889b      	ldrh	r3, [r3, #4]
 8006ec0:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	889b      	ldrh	r3, [r3, #4]
 8006ec6:	827b      	strh	r3, [r7, #18]
 8006ec8:	88bb      	ldrh	r3, [r7, #4]
 8006eca:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8006ecc:	e003      	b.n	8006ed6 <_tu_fifo_peek+0xaa>
 8006ece:	8a3a      	ldrh	r2, [r7, #16]
 8006ed0:	8a7b      	ldrh	r3, [r7, #18]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	823b      	strh	r3, [r7, #16]
 8006ed6:	8a7a      	ldrh	r2, [r7, #18]
 8006ed8:	8a3b      	ldrh	r3, [r7, #16]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d9f7      	bls.n	8006ece <_tu_fifo_peek+0xa2>
  return idx;
 8006ede:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006ee0:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 8006ee2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	68b9      	ldr	r1, [r7, #8]
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f7ff fe7a 	bl	8006be2 <_ff_pull>

  return true;
 8006eee:	2301      	movs	r3, #1
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3728      	adds	r7, #40	; 0x28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08c      	sub	sp, #48	; 0x30
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	4611      	mov	r1, r2
 8006f04:	461a      	mov	r2, r3
 8006f06:	460b      	mov	r3, r1
 8006f08:	80fb      	strh	r3, [r7, #6]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	889b      	ldrh	r3, [r3, #4]
 8006f12:	847b      	strh	r3, [r7, #34]	; 0x22
 8006f14:	88bb      	ldrh	r3, [r7, #4]
 8006f16:	843b      	strh	r3, [r7, #32]
 8006f18:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006f1a:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8006f1c:	8c3a      	ldrh	r2, [r7, #32]
 8006f1e:	8bfb      	ldrh	r3, [r7, #30]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d304      	bcc.n	8006f2e <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8006f24:	8c3a      	ldrh	r2, [r7, #32]
 8006f26:	8bfb      	ldrh	r3, [r7, #30]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	e008      	b.n	8006f40 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006f2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f30:	005b      	lsls	r3, r3, #1
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	8c39      	ldrh	r1, [r7, #32]
 8006f36:	8bfb      	ldrh	r3, [r7, #30]
 8006f38:	1acb      	subs	r3, r1, r3
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	4413      	add	r3, r2
 8006f3e:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006f40:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 8006f42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <_tu_fifo_peek_n+0x54>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	e041      	b.n	8006fd0 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	889b      	ldrh	r3, [r3, #4]
 8006f50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d91b      	bls.n	8006f8e <_tu_fifo_peek_n+0x96>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	61bb      	str	r3, [r7, #24]
 8006f5a:	88bb      	ldrh	r3, [r7, #4]
 8006f5c:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	889b      	ldrh	r3, [r3, #4]
 8006f62:	8afa      	ldrh	r2, [r7, #22]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d305      	bcc.n	8006f74 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	889b      	ldrh	r3, [r3, #4]
 8006f6c:	8afa      	ldrh	r2, [r7, #22]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	82bb      	strh	r3, [r7, #20]
 8006f72:	e004      	b.n	8006f7e <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	889a      	ldrh	r2, [r3, #4]
 8006f78:	8afb      	ldrh	r3, [r7, #22]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	8aba      	ldrh	r2, [r7, #20]
 8006f82:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8006f84:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8006f86:	863b      	strh	r3, [r7, #48]	; 0x30
    cnt = f->depth;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	889b      	ldrh	r3, [r3, #4]
 8006f8c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8006f8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006f90:	88fb      	ldrh	r3, [r7, #6]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d201      	bcs.n	8006f9a <_tu_fifo_peek_n+0xa2>
 8006f96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f98:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	889b      	ldrh	r3, [r3, #4]
 8006f9e:	827b      	strh	r3, [r7, #18]
 8006fa0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006fa2:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8006fa4:	e003      	b.n	8006fae <_tu_fifo_peek_n+0xb6>
 8006fa6:	8a3a      	ldrh	r2, [r7, #16]
 8006fa8:	8a7b      	ldrh	r3, [r7, #18]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	823b      	strh	r3, [r7, #16]
 8006fae:	8a7a      	ldrh	r2, [r7, #18]
 8006fb0:	8a3b      	ldrh	r3, [r7, #16]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d9f7      	bls.n	8006fa6 <_tu_fifo_peek_n+0xae>
  return idx;
 8006fb6:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006fb8:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8006fba:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8006fbc:	88fa      	ldrh	r2, [r7, #6]
 8006fbe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	68b9      	ldr	r1, [r7, #8]
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f7ff fe29 	bl	8006c20 <_ff_pull_n>

  return n;
 8006fce:	88fb      	ldrh	r3, [r7, #6]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3728      	adds	r7, #40	; 0x28
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b092      	sub	sp, #72	; 0x48
 8006fdc:	af02      	add	r7, sp, #8
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	80fb      	strh	r3, [r7, #6]
 8006fea:	4613      	mov	r3, r2
 8006fec:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8006fee:	88fb      	ldrh	r3, [r7, #6]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <_tu_fifo_write_n+0x20>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	e0bc      	b.n	8007172 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	891b      	ldrh	r3, [r3, #8]
 8006ffc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t rd_idx = f->rd_idx;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	895b      	ldrh	r3, [r3, #10]
 8007002:	86fb      	strh	r3, [r7, #54]	; 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	63bb      	str	r3, [r7, #56]	; 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	79db      	ldrb	r3, [r3, #7]
 800700c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007010:	b2db      	uxtb	r3, r3
 8007012:	f083 0301 	eor.w	r3, r3, #1
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d036      	beq.n	800708a <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	889b      	ldrh	r3, [r3, #4]
 8007020:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007022:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007024:	853b      	strh	r3, [r7, #40]	; 0x28
 8007026:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007028:	84fb      	strh	r3, [r7, #38]	; 0x26
 800702a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800702c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800702e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007030:	847b      	strh	r3, [r7, #34]	; 0x22
 8007032:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007034:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 8007036:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007038:	8c3b      	ldrh	r3, [r7, #32]
 800703a:	429a      	cmp	r2, r3
 800703c:	d304      	bcc.n	8007048 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 800703e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007040:	8c3b      	ldrh	r3, [r7, #32]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	b29b      	uxth	r3, r3
 8007046:	e008      	b.n	800705a <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8007048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800704a:	005b      	lsls	r3, r3, #1
 800704c:	b29a      	uxth	r2, r3
 800704e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8007050:	8c3b      	ldrh	r3, [r7, #32]
 8007052:	1acb      	subs	r3, r1, r3
 8007054:	b29b      	uxth	r3, r3
 8007056:	4413      	add	r3, r2
 8007058:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 800705a:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 800705c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800705e:	8bfb      	ldrh	r3, [r7, #30]
 8007060:	429a      	cmp	r2, r3
 8007062:	d904      	bls.n	800706e <_tu_fifo_write_n+0x96>
 8007064:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8007066:	8bfb      	ldrh	r3, [r7, #30]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	b29b      	uxth	r3, r3
 800706c:	e000      	b.n	8007070 <_tu_fifo_write_n+0x98>
 800706e:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8007070:	867b      	strh	r3, [r7, #50]	; 0x32
 8007072:	88fb      	ldrh	r3, [r7, #6]
 8007074:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007076:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007078:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800707a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800707c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800707e:	4293      	cmp	r3, r2
 8007080:	bf28      	it	cs
 8007082:	4613      	movcs	r3, r2
 8007084:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 8007086:	80fb      	strh	r3, [r7, #6]
 8007088:	e04b      	b.n	8007122 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	889b      	ldrh	r3, [r3, #4]
 800708e:	88fa      	ldrh	r2, [r7, #6]
 8007090:	429a      	cmp	r2, r3
 8007092:	d317      	bcc.n	80070c4 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8007094:	797b      	ldrb	r3, [r7, #5]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10e      	bne.n	80070b8 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 800709a:	88fb      	ldrh	r3, [r7, #6]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	8892      	ldrh	r2, [r2, #4]
 80070a0:	1a9b      	subs	r3, r3, r2
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	88d2      	ldrh	r2, [r2, #6]
 80070a6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80070aa:	b292      	uxth	r2, r2
 80070ac:	fb02 f303 	mul.w	r3, r2, r3
 80070b0:	461a      	mov	r2, r3
 80070b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b4:	4413      	add	r3, r2
 80070b6:	63bb      	str	r3, [r7, #56]	; 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	889b      	ldrh	r3, [r3, #4]
 80070bc:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 80070be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80070c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80070c2:	e02e      	b.n	8007122 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	889b      	ldrh	r3, [r3, #4]
 80070c8:	83bb      	strh	r3, [r7, #28]
 80070ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80070cc:	837b      	strh	r3, [r7, #26]
 80070ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80070d0:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 80070d2:	8b7a      	ldrh	r2, [r7, #26]
 80070d4:	8b3b      	ldrh	r3, [r7, #24]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d304      	bcc.n	80070e4 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 80070da:	8b7a      	ldrh	r2, [r7, #26]
 80070dc:	8b3b      	ldrh	r3, [r7, #24]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	e008      	b.n	80070f6 <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80070e4:	8bbb      	ldrh	r3, [r7, #28]
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	8b79      	ldrh	r1, [r7, #26]
 80070ec:	8b3b      	ldrh	r3, [r7, #24]
 80070ee:	1acb      	subs	r3, r1, r3
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	4413      	add	r3, r2
 80070f4:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 80070f6:	86bb      	strh	r3, [r7, #52]	; 0x34
      if (overflowable_count + n >= 2*f->depth)
 80070f8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80070fa:	88fb      	ldrh	r3, [r7, #6]
 80070fc:	441a      	add	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	889b      	ldrh	r3, [r3, #4]
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	429a      	cmp	r2, r3
 8007106:	db0c      	blt.n	8007122 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8898      	ldrh	r0, [r3, #4]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	889a      	ldrh	r2, [r3, #4]
 8007110:	88fb      	ldrh	r3, [r7, #6]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	b29a      	uxth	r2, r3
 8007116:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007118:	4619      	mov	r1, r3
 800711a:	f7ff fe61 	bl	8006de0 <advance_index>
 800711e:	4603      	mov	r3, r0
 8007120:	87fb      	strh	r3, [r7, #62]	; 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 8007122:	88fb      	ldrh	r3, [r7, #6]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d023      	beq.n	8007170 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	889b      	ldrh	r3, [r3, #4]
 800712c:	82fb      	strh	r3, [r7, #22]
 800712e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007130:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8007132:	e003      	b.n	800713c <_tu_fifo_write_n+0x164>
 8007134:	8aba      	ldrh	r2, [r7, #20]
 8007136:	8afb      	ldrh	r3, [r7, #22]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	82bb      	strh	r3, [r7, #20]
 800713c:	8afa      	ldrh	r2, [r7, #22]
 800713e:	8abb      	ldrh	r3, [r7, #20]
 8007140:	429a      	cmp	r2, r3
 8007142:	d9f7      	bls.n	8007134 <_tu_fifo_write_n+0x15c>
  return idx;
 8007144:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8007146:	863b      	strh	r3, [r7, #48]	; 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8007148:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800714a:	88fa      	ldrh	r2, [r7, #6]
 800714c:	797b      	ldrb	r3, [r7, #5]
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	460b      	mov	r3, r1
 8007152:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f7ff fc66 	bl	8006a26 <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	889b      	ldrh	r3, [r3, #4]
 800715e:	88fa      	ldrh	r2, [r7, #6]
 8007160:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8007162:	4618      	mov	r0, r3
 8007164:	f7ff fe3c 	bl	8006de0 <advance_index>
 8007168:	4603      	mov	r3, r0
 800716a:	461a      	mov	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8007170:	88fb      	ldrh	r3, [r7, #6]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3740      	adds	r7, #64	; 0x40
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b086      	sub	sp, #24
 800717e:	af02      	add	r7, sp, #8
 8007180:	60f8      	str	r0, [r7, #12]
 8007182:	60b9      	str	r1, [r7, #8]
 8007184:	4611      	mov	r1, r2
 8007186:	461a      	mov	r2, r3
 8007188:	460b      	mov	r3, r1
 800718a:	80fb      	strh	r3, [r7, #6]
 800718c:	4613      	mov	r3, r2
 800718e:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	891b      	ldrh	r3, [r3, #8]
 8007194:	b298      	uxth	r0, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	895b      	ldrh	r3, [r3, #10]
 800719a:	b29b      	uxth	r3, r3
 800719c:	88f9      	ldrh	r1, [r7, #6]
 800719e:	797a      	ldrb	r2, [r7, #5]
 80071a0:	9201      	str	r2, [sp, #4]
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	4603      	mov	r3, r0
 80071a6:	460a      	mov	r2, r1
 80071a8:	68b9      	ldr	r1, [r7, #8]
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f7ff fea4 	bl	8006ef8 <_tu_fifo_peek_n>
 80071b0:	4603      	mov	r3, r0
 80071b2:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	8898      	ldrh	r0, [r3, #4]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	895b      	ldrh	r3, [r3, #10]
 80071bc:	b29b      	uxth	r3, r3
 80071be:	88fa      	ldrh	r2, [r7, #6]
 80071c0:	4619      	mov	r1, r3
 80071c2:	f7ff fe0d 	bl	8006de0 <advance_index>
 80071c6:	4603      	mov	r3, r0
 80071c8:	461a      	mov	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 80071ce:	88fb      	ldrh	r3, [r7, #6]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	8899      	ldrh	r1, [r3, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	891b      	ldrh	r3, [r3, #8]
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	895b      	ldrh	r3, [r3, #10]
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	8279      	strh	r1, [r7, #18]
 80071f2:	823a      	strh	r2, [r7, #16]
 80071f4:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 80071f6:	8a3a      	ldrh	r2, [r7, #16]
 80071f8:	89fb      	ldrh	r3, [r7, #14]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d304      	bcc.n	8007208 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 80071fe:	8a3a      	ldrh	r2, [r7, #16]
 8007200:	89fb      	ldrh	r3, [r7, #14]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	b29b      	uxth	r3, r3
 8007206:	e008      	b.n	800721a <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8007208:	8a7b      	ldrh	r3, [r7, #18]
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	b29a      	uxth	r2, r3
 800720e:	8a39      	ldrh	r1, [r7, #16]
 8007210:	89fb      	ldrh	r3, [r7, #14]
 8007212:	1acb      	subs	r3, r1, r3
 8007214:	b29b      	uxth	r3, r3
 8007216:	4413      	add	r3, r2
 8007218:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	8892      	ldrh	r2, [r2, #4]
 800721e:	82fb      	strh	r3, [r7, #22]
 8007220:	4613      	mov	r3, r2
 8007222:	82bb      	strh	r3, [r7, #20]
 8007224:	8afa      	ldrh	r2, [r7, #22]
 8007226:	8abb      	ldrh	r3, [r7, #20]
 8007228:	4293      	cmp	r3, r2
 800722a:	bf28      	it	cs
 800722c:	4613      	movcs	r3, r2
 800722e:	b29b      	uxth	r3, r3
}
 8007230:	4618      	mov	r0, r3
 8007232:	371c      	adds	r7, #28
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	891b      	ldrh	r3, [r3, #8]
 8007248:	b29a      	uxth	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	895b      	ldrh	r3, [r3, #10]
 800724e:	b29b      	uxth	r3, r3
 8007250:	429a      	cmp	r2, r3
 8007252:	bf0c      	ite	eq
 8007254:	2301      	moveq	r3, #1
 8007256:	2300      	movne	r3, #0
 8007258:	b2db      	uxtb	r3, r3
}
 800725a:	4618      	mov	r0, r3
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8007266:	b480      	push	{r7}
 8007268:	b085      	sub	sp, #20
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	8899      	ldrh	r1, [r3, #4]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	891b      	ldrh	r3, [r3, #8]
 8007276:	b29a      	uxth	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	895b      	ldrh	r3, [r3, #10]
 800727c:	b29b      	uxth	r3, r3
 800727e:	81f9      	strh	r1, [r7, #14]
 8007280:	81ba      	strh	r2, [r7, #12]
 8007282:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8007284:	89ba      	ldrh	r2, [r7, #12]
 8007286:	897b      	ldrh	r3, [r7, #10]
 8007288:	429a      	cmp	r2, r3
 800728a:	d304      	bcc.n	8007296 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 800728c:	89ba      	ldrh	r2, [r7, #12]
 800728e:	897b      	ldrh	r3, [r7, #10]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	b29b      	uxth	r3, r3
 8007294:	e008      	b.n	80072a8 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8007296:	89fb      	ldrh	r3, [r7, #14]
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	b29a      	uxth	r2, r3
 800729c:	89b9      	ldrh	r1, [r7, #12]
 800729e:	897b      	ldrh	r3, [r7, #10]
 80072a0:	1acb      	subs	r3, r1, r3
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	4413      	add	r3, r2
 80072a6:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	8892      	ldrh	r2, [r2, #4]
 80072ac:	4293      	cmp	r3, r2
 80072ae:	bf2c      	ite	cs
 80072b0:	2301      	movcs	r3, #1
 80072b2:	2300      	movcc	r3, #0
 80072b4:	b2db      	uxtb	r3, r3
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b087      	sub	sp, #28
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	8899      	ldrh	r1, [r3, #4]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	891b      	ldrh	r3, [r3, #8]
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	895b      	ldrh	r3, [r3, #10]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	82f9      	strh	r1, [r7, #22]
 80072dc:	82ba      	strh	r2, [r7, #20]
 80072de:	827b      	strh	r3, [r7, #18]
 80072e0:	8afb      	ldrh	r3, [r7, #22]
 80072e2:	823b      	strh	r3, [r7, #16]
 80072e4:	8abb      	ldrh	r3, [r7, #20]
 80072e6:	81fb      	strh	r3, [r7, #14]
 80072e8:	8a7b      	ldrh	r3, [r7, #18]
 80072ea:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 80072ec:	89fa      	ldrh	r2, [r7, #14]
 80072ee:	89bb      	ldrh	r3, [r7, #12]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d304      	bcc.n	80072fe <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 80072f4:	89fa      	ldrh	r2, [r7, #14]
 80072f6:	89bb      	ldrh	r3, [r7, #12]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	e008      	b.n	8007310 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80072fe:	8a3b      	ldrh	r3, [r7, #16]
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	b29a      	uxth	r2, r3
 8007304:	89f9      	ldrh	r1, [r7, #14]
 8007306:	89bb      	ldrh	r3, [r7, #12]
 8007308:	1acb      	subs	r3, r1, r3
 800730a:	b29b      	uxth	r3, r3
 800730c:	4413      	add	r3, r2
 800730e:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8007310:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8007312:	8afa      	ldrh	r2, [r7, #22]
 8007314:	897b      	ldrh	r3, [r7, #10]
 8007316:	429a      	cmp	r2, r3
 8007318:	d904      	bls.n	8007324 <tu_fifo_remaining+0x62>
 800731a:	8afa      	ldrh	r2, [r7, #22]
 800731c:	897b      	ldrh	r3, [r7, #10]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	b29b      	uxth	r3, r3
 8007322:	e000      	b.n	8007326 <tu_fifo_remaining+0x64>
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	371c      	adds	r7, #28
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b084      	sub	sp, #16
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	891b      	ldrh	r3, [r3, #8]
 8007340:	b29a      	uxth	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	895b      	ldrh	r3, [r3, #10]
 8007346:	b29b      	uxth	r3, r3
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7ff fd6e 	bl	8006e2c <_tu_fifo_peek>
 8007350:	4603      	mov	r3, r0
 8007352:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	8898      	ldrh	r0, [r3, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	895b      	ldrh	r3, [r3, #10]
 800735c:	b29b      	uxth	r3, r3
 800735e:	7bfa      	ldrb	r2, [r7, #15]
 8007360:	b292      	uxth	r2, r2
 8007362:	4619      	mov	r1, r3
 8007364:	f7ff fd3c 	bl	8006de0 <advance_index>
 8007368:	4603      	mov	r3, r0
 800736a:	461a      	mov	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8007370:	7bfb      	ldrb	r3, [r7, #15]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	4613      	mov	r3, r2
 8007386:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8007388:	88fa      	ldrh	r2, [r7, #6]
 800738a:	2300      	movs	r3, #0
 800738c:	68b9      	ldr	r1, [r7, #8]
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f7ff fef3 	bl	800717a <_tu_fifo_read_n>
 8007394:	4603      	mov	r3, r0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	4613      	mov	r3, r2
 80073aa:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 80073ac:	88fa      	ldrh	r2, [r7, #6]
 80073ae:	2301      	movs	r3, #1
 80073b0:	68b9      	ldr	r1, [r7, #8]
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f7ff fee1 	bl	800717a <_tu_fifo_read_n>
 80073b8:	4603      	mov	r3, r0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b086      	sub	sp, #24
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	891b      	ldrh	r3, [r3, #8]
 80073d0:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7ff ff47 	bl	8007266 <tu_fifo_full>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00c      	beq.n	80073f8 <tu_fifo_write+0x36>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	79db      	ldrb	r3, [r3, #7]
 80073e2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	f083 0301 	eor.w	r3, r3, #1
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <tu_fifo_write+0x36>
  {
    ret = false;
 80073f2:	2300      	movs	r3, #0
 80073f4:	75fb      	strb	r3, [r7, #23]
 80073f6:	e022      	b.n	800743e <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	889b      	ldrh	r3, [r3, #4]
 80073fc:	823b      	strh	r3, [r7, #16]
 80073fe:	8abb      	ldrh	r3, [r7, #20]
 8007400:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8007402:	e003      	b.n	800740c <tu_fifo_write+0x4a>
 8007404:	89fa      	ldrh	r2, [r7, #14]
 8007406:	8a3b      	ldrh	r3, [r7, #16]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	81fb      	strh	r3, [r7, #14]
 800740c:	8a3a      	ldrh	r2, [r7, #16]
 800740e:	89fb      	ldrh	r3, [r7, #14]
 8007410:	429a      	cmp	r2, r3
 8007412:	d9f7      	bls.n	8007404 <tu_fifo_write+0x42>
  return idx;
 8007414:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8007416:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8007418:	8a7b      	ldrh	r3, [r7, #18]
 800741a:	461a      	mov	r2, r3
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7ff fae2 	bl	80069e8 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	889b      	ldrh	r3, [r3, #4]
 8007428:	8ab9      	ldrh	r1, [r7, #20]
 800742a:	2201      	movs	r2, #1
 800742c:	4618      	mov	r0, r3
 800742e:	f7ff fcd7 	bl	8006de0 <advance_index>
 8007432:	4603      	mov	r3, r0
 8007434:	461a      	mov	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	811a      	strh	r2, [r3, #8]

    ret = true;
 800743a:	2301      	movs	r3, #1
 800743c:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 800743e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	4613      	mov	r3, r2
 8007454:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8007456:	88fa      	ldrh	r2, [r7, #6]
 8007458:	2300      	movs	r3, #0
 800745a:	68b9      	ldr	r1, [r7, #8]
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f7ff fdbb 	bl	8006fd8 <_tu_fifo_write_n>
 8007462:	4603      	mov	r3, r0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 800747a:	88fa      	ldrh	r2, [r7, #6]
 800747c:	2301      	movs	r3, #1
 800747e:	68b9      	ldr	r1, [r7, #8]
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f7ff fda9 	bl	8006fd8 <_tu_fifo_write_n>
 8007486:	4603      	mov	r3, r0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 80074a4:	2301      	movs	r3, #1
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b083      	sub	sp, #12
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	460b      	mov	r3, r1
 80074bc:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	79d3      	ldrb	r3, [r2, #7]
 80074c2:	78f9      	ldrb	r1, [r7, #3]
 80074c4:	f361 13c7 	bfi	r3, r1, #7, #1
 80074c8:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 80074ca:	2301      	movs	r3, #1
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <get_driver>:
tu_static uint8_t _app_driver_count = 0;

// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	4603      	mov	r3, r0
 80074e0:	71fb      	strb	r3, [r7, #7]
  // Application drivers
  if ( usbd_app_driver_get_cb )
 80074e2:	4b14      	ldr	r3, [pc, #80]	; (8007534 <get_driver+0x5c>)
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d012      	beq.n	800750e <get_driver+0x36>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80074e8:	4b13      	ldr	r3, [pc, #76]	; (8007538 <get_driver+0x60>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	79fa      	ldrb	r2, [r7, #7]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d208      	bcs.n	8007504 <get_driver+0x2c>
 80074f2:	4b12      	ldr	r3, [pc, #72]	; (800753c <get_driver+0x64>)
 80074f4:	6819      	ldr	r1, [r3, #0]
 80074f6:	79fa      	ldrb	r2, [r7, #7]
 80074f8:	4613      	mov	r3, r2
 80074fa:	005b      	lsls	r3, r3, #1
 80074fc:	4413      	add	r3, r2
 80074fe:	00db      	lsls	r3, r3, #3
 8007500:	440b      	add	r3, r1
 8007502:	e010      	b.n	8007526 <get_driver+0x4e>
    drvid -= _app_driver_count;
 8007504:	4b0c      	ldr	r3, [pc, #48]	; (8007538 <get_driver+0x60>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	79fa      	ldrb	r2, [r7, #7]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	71fb      	strb	r3, [r7, #7]
  }

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d807      	bhi.n	8007524 <get_driver+0x4c>
 8007514:	79fa      	ldrb	r2, [r7, #7]
 8007516:	4613      	mov	r3, r2
 8007518:	005b      	lsls	r3, r3, #1
 800751a:	4413      	add	r3, r2
 800751c:	00db      	lsls	r3, r3, #3
 800751e:	4a08      	ldr	r2, [pc, #32]	; (8007540 <get_driver+0x68>)
 8007520:	4413      	add	r3, r2
 8007522:	e000      	b.n	8007526 <get_driver+0x4e>

  return NULL;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	00000000 	.word	0x00000000
 8007538:	24001a28 	.word	0x24001a28
 800753c:	24001a24 	.word	0x24001a24
 8007540:	0800ae20 	.word	0x0800ae20

08007544 <tud_mounted>:
{
  return _usbd_dev.connected;
}

bool tud_mounted(void)
{
 8007544:	b480      	push	{r7}
 8007546:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8007548:	4b06      	ldr	r3, [pc, #24]	; (8007564 <tud_mounted+0x20>)
 800754a:	785b      	ldrb	r3, [r3, #1]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	bf14      	ite	ne
 8007552:	2301      	movne	r3, #1
 8007554:	2300      	moveq	r3, #0
 8007556:	b2db      	uxtb	r3, r3
}
 8007558:	4618      	mov	r0, r3
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	240019ec 	.word	0x240019ec

08007568 <tud_suspended>:

bool tud_suspended(void)
{
 8007568:	b480      	push	{r7}
 800756a:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 800756c:	4b07      	ldr	r3, [pc, #28]	; (800758c <tud_suspended+0x24>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	bf14      	ite	ne
 800757a:	2301      	movne	r3, #1
 800757c:	2300      	moveq	r3, #0
 800757e:	b2db      	uxtb	r3, r3
}
 8007580:	4618      	mov	r0, r3
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	240019ec 	.word	0x240019ec

08007590 <tud_inited>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void)
{
 8007590:	b480      	push	{r7}
 8007592:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8007594:	4b05      	ldr	r3, [pc, #20]	; (80075ac <tud_inited+0x1c>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	2bff      	cmp	r3, #255	; 0xff
 800759a:	bf14      	ite	ne
 800759c:	2301      	movne	r3, #1
 800759e:	2300      	moveq	r3, #0
 80075a0:	b2db      	uxtb	r3, r3
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	24000035 	.word	0x24000035

080075b0 <tud_init>:

bool tud_init (uint8_t rhport)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b088      	sub	sp, #32
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	4603      	mov	r3, r0
 80075b8:	71fb      	strb	r3, [r7, #7]
  // skip if already initialized
  if ( tud_inited() ) return true;
 80075ba:	f7ff ffe9 	bl	8007590 <tud_inited>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <tud_init+0x18>
 80075c4:	2301      	movs	r3, #1
 80075c6:	e054      	b.n	8007672 <tud_init+0xc2>
  TU_LOG(USBD_DBG, "USBD init on controller %u\r\n", rhport);
  TU_LOG_INT(USBD_DBG, sizeof(usbd_device_t));
  TU_LOG_INT(USBD_DBG, sizeof(tu_fifo_t));
  TU_LOG_INT(USBD_DBG, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 80075c8:	2237      	movs	r2, #55	; 0x37
 80075ca:	2100      	movs	r1, #0
 80075cc:	482b      	ldr	r0, [pc, #172]	; (800767c <tud_init+0xcc>)
 80075ce:	f003 faff 	bl	800abd0 <memset>
 80075d2:	4b2b      	ldr	r3, [pc, #172]	; (8007680 <tud_init+0xd0>)
 80075d4:	60fb      	str	r3, [r7, #12]
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  tu_fifo_clear(&qdef->ff);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	3304      	adds	r3, #4
 80075da:	4618      	mov	r0, r3
 80075dc:	f7ff ff58 	bl	8007490 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 80075e0:	68fb      	ldr	r3, [r7, #12]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 80075e2:	4a28      	ldr	r2, [pc, #160]	; (8007684 <tud_init+0xd4>)
 80075e4:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 80075e6:	4b27      	ldr	r3, [pc, #156]	; (8007684 <tud_init+0xd4>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10a      	bne.n	8007604 <tud_init+0x54>
 80075ee:	4b26      	ldr	r3, [pc, #152]	; (8007688 <tud_init+0xd8>)
 80075f0:	613b      	str	r3, [r7, #16]
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d000      	beq.n	8007600 <tud_init+0x50>
 80075fe:	be00      	bkpt	0x0000
 8007600:	2300      	movs	r3, #0
 8007602:	e036      	b.n	8007672 <tud_init+0xc2>

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
 8007604:	4b21      	ldr	r3, [pc, #132]	; (800768c <tud_init+0xdc>)
 8007606:	2b00      	cmp	r3, #0
 8007608:	d005      	beq.n	8007616 <tud_init+0x66>
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 800760a:	4821      	ldr	r0, [pc, #132]	; (8007690 <tud_init+0xe0>)
 800760c:	f3af 8000 	nop.w
 8007610:	4603      	mov	r3, r0
 8007612:	4a20      	ldr	r2, [pc, #128]	; (8007694 <tud_init+0xe4>)
 8007614:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8007616:	2300      	movs	r3, #0
 8007618:	77fb      	strb	r3, [r7, #31]
 800761a:	e018      	b.n	800764e <tud_init+0x9e>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 800761c:	7ffb      	ldrb	r3, [r7, #31]
 800761e:	4618      	mov	r0, r3
 8007620:	f7ff ff5a 	bl	80074d8 <get_driver>
 8007624:	61b8      	str	r0, [r7, #24]
    TU_ASSERT(driver);
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10a      	bne.n	8007642 <tud_init+0x92>
 800762c:	4b16      	ldr	r3, [pc, #88]	; (8007688 <tud_init+0xd8>)
 800762e:	617b      	str	r3, [r7, #20]
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	2b00      	cmp	r3, #0
 800763a:	d000      	beq.n	800763e <tud_init+0x8e>
 800763c:	be00      	bkpt	0x0000
 800763e:	2300      	movs	r3, #0
 8007640:	e017      	b.n	8007672 <tud_init+0xc2>
    TU_LOG(USBD_DBG, "%s init\r\n", driver->name);
    driver->init();
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8007648:	7ffb      	ldrb	r3, [r7, #31]
 800764a:	3301      	adds	r3, #1
 800764c:	77fb      	strb	r3, [r7, #31]
 800764e:	4b10      	ldr	r3, [pc, #64]	; (8007690 <tud_init+0xe0>)
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	1c5a      	adds	r2, r3, #1
 8007654:	7ffb      	ldrb	r3, [r7, #31]
 8007656:	429a      	cmp	r2, r3
 8007658:	dae0      	bge.n	800761c <tud_init+0x6c>
  }

  _usbd_rhport = rhport;
 800765a:	4a0f      	ldr	r2, [pc, #60]	; (8007698 <tud_init+0xe8>)
 800765c:	79fb      	ldrb	r3, [r7, #7]
 800765e:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  dcd_init(rhport);
 8007660:	79fb      	ldrb	r3, [r7, #7]
 8007662:	4618      	mov	r0, r3
 8007664:	f002 f812 	bl	800968c <dcd_init>
  dcd_int_enable(rhport);
 8007668:	79fb      	ldrb	r3, [r7, #7]
 800766a:	4618      	mov	r0, r3
 800766c:	f002 f876 	bl	800975c <dcd_int_enable>

  return true;
 8007670:	2301      	movs	r3, #1
}
 8007672:	4618      	mov	r0, r3
 8007674:	3720      	adds	r7, #32
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	240019ec 	.word	0x240019ec
 8007680:	24000038 	.word	0x24000038
 8007684:	24001aec 	.word	0x24001aec
 8007688:	e000edf0 	.word	0xe000edf0
 800768c:	00000000 	.word	0x00000000
 8007690:	24001a28 	.word	0x24001a28
 8007694:	24001a24 	.word	0x24001a24
 8007698:	24000035 	.word	0x24000035

0800769c <configuration_reset>:

static void configuration_reset(uint8_t rhport)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	4603      	mov	r3, r0
 80076a4:	71fb      	strb	r3, [r7, #7]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 80076a6:	2300      	movs	r3, #0
 80076a8:	75fb      	strb	r3, [r7, #23]
 80076aa:	e019      	b.n	80076e0 <configuration_reset+0x44>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 80076ac:	7dfb      	ldrb	r3, [r7, #23]
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7ff ff12 	bl	80074d8 <get_driver>
 80076b4:	6138      	str	r0, [r7, #16]
    TU_ASSERT(driver, );
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d109      	bne.n	80076d0 <configuration_reset+0x34>
 80076bc:	4b15      	ldr	r3, [pc, #84]	; (8007714 <configuration_reset+0x78>)
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d01f      	beq.n	800770c <configuration_reset+0x70>
 80076cc:	be00      	bkpt	0x0000
 80076ce:	e01d      	b.n	800770c <configuration_reset+0x70>
    driver->reset(rhport);
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	79fa      	ldrb	r2, [r7, #7]
 80076d6:	4610      	mov	r0, r2
 80076d8:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 80076da:	7dfb      	ldrb	r3, [r7, #23]
 80076dc:	3301      	adds	r3, #1
 80076de:	75fb      	strb	r3, [r7, #23]
 80076e0:	4b0d      	ldr	r3, [pc, #52]	; (8007718 <configuration_reset+0x7c>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	1c5a      	adds	r2, r3, #1
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	dadf      	bge.n	80076ac <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 80076ec:	2237      	movs	r2, #55	; 0x37
 80076ee:	2100      	movs	r1, #0
 80076f0:	480a      	ldr	r0, [pc, #40]	; (800771c <configuration_reset+0x80>)
 80076f2:	f003 fa6d 	bl	800abd0 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 80076f6:	2210      	movs	r2, #16
 80076f8:	21ff      	movs	r1, #255	; 0xff
 80076fa:	4809      	ldr	r0, [pc, #36]	; (8007720 <configuration_reset+0x84>)
 80076fc:	f003 fa68 	bl	800abd0 <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 8007700:	2212      	movs	r2, #18
 8007702:	21ff      	movs	r1, #255	; 0xff
 8007704:	4807      	ldr	r0, [pc, #28]	; (8007724 <configuration_reset+0x88>)
 8007706:	f003 fa63 	bl	800abd0 <memset>
 800770a:	e000      	b.n	800770e <configuration_reset+0x72>
    TU_ASSERT(driver, );
 800770c:	bf00      	nop
}
 800770e:	3718      	adds	r7, #24
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	e000edf0 	.word	0xe000edf0
 8007718:	24001a28 	.word	0x24001a28
 800771c:	240019ec 	.word	0x240019ec
 8007720:	240019ef 	.word	0x240019ef
 8007724:	240019ff 	.word	0x240019ff

08007728 <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	4603      	mov	r3, r0
 8007730:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8007732:	79fb      	ldrb	r3, [r7, #7]
 8007734:	4618      	mov	r0, r3
 8007736:	f7ff ffb1 	bl	800769c <configuration_reset>
  usbd_control_reset();
 800773a:	f001 fbfb 	bl	8008f34 <usbd_control_reset>
}
 800773e:	bf00      	nop
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
	...

08007748 <tud_task_ext>:
      }
    }
    @endcode
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr)
{
 8007748:	b590      	push	{r4, r7, lr}
 800774a:	b091      	sub	sp, #68	; 0x44
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	460b      	mov	r3, r1
 8007752:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if ( !tud_inited() ) return;
 8007754:	f7ff ff1c 	bl	8007590 <tud_inited>
 8007758:	4603      	mov	r3, r0
 800775a:	f083 0301 	eor.w	r3, r3, #1
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b00      	cmp	r3, #0
 8007762:	f040 812e 	bne.w	80079c2 <tud_task_ext+0x27a>

  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8007766:	4b9b      	ldr	r3, [pc, #620]	; (80079d4 <tud_task_ext+0x28c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800776c:	f107 0308 	add.w	r3, r7, #8
 8007770:	62bb      	str	r3, [r7, #40]	; 0x28
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	627b      	str	r3, [r7, #36]	; 0x24
 8007776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007778:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2000      	movs	r0, #0
 8007780:	4798      	blx	r3
}
 8007782:	bf00      	nop
TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec)
{
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 8007784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007786:	3304      	adds	r3, #4
 8007788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800778a:	4618      	mov	r0, r3
 800778c:	f7ff fdd1 	bl	8007332 <tu_fifo_read>
 8007790:	4603      	mov	r3, r0
 8007792:	77fb      	strb	r3, [r7, #31]
 8007794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007796:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2001      	movs	r0, #1
 800779e:	4798      	blx	r3
}
 80077a0:	bf00      	nop
  _osal_q_unlock(qhdl);

  return success;
 80077a2:	7ffb      	ldrb	r3, [r7, #31]
 80077a4:	f083 0301 	eor.w	r3, r3, #1
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f040 810b 	bne.w	80079c6 <tud_task_ext+0x27e>
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG(USBD_DBG, "\r\n"); // extra line for setup
    TU_LOG(USBD_DBG, "USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
 80077b0:	7a7b      	ldrb	r3, [r7, #9]
 80077b2:	3b01      	subs	r3, #1
 80077b4:	2b07      	cmp	r3, #7
 80077b6:	f200 80ee 	bhi.w	8007996 <tud_task_ext+0x24e>
 80077ba:	a201      	add	r2, pc, #4	; (adr r2, 80077c0 <tud_task_ext+0x78>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	080077e1 	.word	0x080077e1
 80077c4:	080077f1 	.word	0x080077f1
 80077c8:	08007997 	.word	0x08007997
 80077cc:	0800793d 	.word	0x0800793d
 80077d0:	0800796d 	.word	0x0800796d
 80077d4:	08007807 	.word	0x08007807
 80077d8:	0800787d 	.word	0x0800787d
 80077dc:	08007987 	.word	0x08007987
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG(USBD_DBG, ": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 80077e0:	7a3b      	ldrb	r3, [r7, #8]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7ff ffa0 	bl	8007728 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 80077e8:	7b3a      	ldrb	r2, [r7, #12]
 80077ea:	4b7b      	ldr	r3, [pc, #492]	; (80079d8 <tud_task_ext+0x290>)
 80077ec:	709a      	strb	r2, [r3, #2]
      break;
 80077ee:	e0e7      	b.n	80079c0 <tud_task_ext+0x278>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG(USBD_DBG, "\r\n");
        usbd_reset(event.rhport);
 80077f0:	7a3b      	ldrb	r3, [r7, #8]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7ff ff98 	bl	8007728 <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 80077f8:	4b78      	ldr	r3, [pc, #480]	; (80079dc <tud_task_ext+0x294>)
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 80d5 	beq.w	80079aa <tud_task_ext+0x262>
 8007800:	f7f8 fdfa 	bl	80003f8 <tud_umount_cb>
      break;
 8007804:	e0d1      	b.n	80079aa <tud_task_ext+0x262>
        TU_LOG_PTR(USBD_DBG, &event.setup_received);
        TU_LOG(USBD_DBG, "\r\n");

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8007806:	4a74      	ldr	r2, [pc, #464]	; (80079d8 <tud_task_ext+0x290>)
 8007808:	7813      	ldrb	r3, [r2, #0]
 800780a:	f043 0301 	orr.w	r3, r3, #1
 800780e:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8007810:	4a71      	ldr	r2, [pc, #452]	; (80079d8 <tud_task_ext+0x290>)
 8007812:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8007816:	f36f 0300 	bfc	r3, #0, #1
 800781a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 800781e:	4a6e      	ldr	r2, [pc, #440]	; (80079d8 <tud_task_ext+0x290>)
 8007820:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8007824:	f36f 0382 	bfc	r3, #2, #1
 8007828:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = 0;
 800782c:	4a6a      	ldr	r2, [pc, #424]	; (80079d8 <tud_task_ext+0x290>)
 800782e:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8007832:	f36f 0300 	bfc	r3, #0, #1
 8007836:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 800783a:	4a67      	ldr	r2, [pc, #412]	; (80079d8 <tud_task_ext+0x290>)
 800783c:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8007840:	f36f 0382 	bfc	r3, #2, #1
 8007844:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8007848:	7a3a      	ldrb	r2, [r7, #8]
 800784a:	f107 0308 	add.w	r3, r7, #8
 800784e:	3304      	adds	r3, #4
 8007850:	4619      	mov	r1, r3
 8007852:	4610      	mov	r0, r2
 8007854:	f000 f8e2 	bl	8007a1c <process_control_request>
 8007858:	4603      	mov	r3, r0
 800785a:	f083 0301 	eor.w	r3, r3, #1
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 80a4 	beq.w	80079ae <tud_task_ext+0x266>
        {
          TU_LOG(USBD_DBG, "  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8007866:	7a3b      	ldrb	r3, [r7, #8]
 8007868:	2100      	movs	r1, #0
 800786a:	4618      	mov	r0, r3
 800786c:	f002 fb54 	bl	8009f18 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8007870:	7a3b      	ldrb	r3, [r7, #8]
 8007872:	2180      	movs	r1, #128	; 0x80
 8007874:	4618      	mov	r0, r3
 8007876:	f002 fb4f 	bl	8009f18 <dcd_edpt_stall>
        }
      break;
 800787a:	e098      	b.n	80079ae <tud_task_ext+0x266>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 800787c:	7b3b      	ldrb	r3, [r7, #12]
 800787e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007882:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007886:	75bb      	strb	r3, [r7, #22]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007888:	7dbb      	ldrb	r3, [r7, #22]
 800788a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800788e:	b2db      	uxtb	r3, r3
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 8007890:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8007894:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007898:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800789a:	7dfb      	ldrb	r3, [r7, #23]
 800789c:	09db      	lsrs	r3, r3, #7
 800789e:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80078a0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

        TU_LOG(USBD_DBG, "on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 80078a4:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80078a8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80078ac:	494a      	ldr	r1, [pc, #296]	; (80079d8 <tud_task_ext+0x290>)
 80078ae:	0052      	lsls	r2, r2, #1
 80078b0:	440a      	add	r2, r1
 80078b2:	4413      	add	r3, r2
 80078b4:	f103 0220 	add.w	r2, r3, #32
 80078b8:	7953      	ldrb	r3, [r2, #5]
 80078ba:	f36f 0300 	bfc	r3, #0, #1
 80078be:	7153      	strb	r3, [r2, #5]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80078c0:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80078c4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80078c8:	4943      	ldr	r1, [pc, #268]	; (80079d8 <tud_task_ext+0x290>)
 80078ca:	0052      	lsls	r2, r2, #1
 80078cc:	440a      	add	r2, r1
 80078ce:	4413      	add	r3, r2
 80078d0:	f103 0220 	add.w	r2, r3, #32
 80078d4:	7953      	ldrb	r3, [r2, #5]
 80078d6:	f36f 0382 	bfc	r3, #2, #1
 80078da:	7153      	strb	r3, [r2, #5]

        if ( 0 == epnum )
 80078dc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d107      	bne.n	80078f4 <tud_task_ext+0x1ac>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete
 80078e4:	7a38      	ldrb	r0, [r7, #8]
 80078e6:	7b7a      	ldrb	r2, [r7, #13]
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80078ee:	f001 fb57 	bl	8008fa0 <usbd_control_xfer_cb>

          TU_LOG(USBD_DBG, "  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 80078f2:	e065      	b.n	80079c0 <tud_task_ext+0x278>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 80078f4:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80078f8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80078fc:	4936      	ldr	r1, [pc, #216]	; (80079d8 <tud_task_ext+0x290>)
 80078fe:	0052      	lsls	r2, r2, #1
 8007900:	440a      	add	r2, r1
 8007902:	4413      	add	r3, r2
 8007904:	3313      	adds	r3, #19
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	4618      	mov	r0, r3
 800790a:	f7ff fde5 	bl	80074d8 <get_driver>
 800790e:	63b8      	str	r0, [r7, #56]	; 0x38
          TU_ASSERT(driver, );
 8007910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007912:	2b00      	cmp	r3, #0
 8007914:	d109      	bne.n	800792a <tud_task_ext+0x1e2>
 8007916:	4b32      	ldr	r3, [pc, #200]	; (80079e0 <tud_task_ext+0x298>)
 8007918:	637b      	str	r3, [r7, #52]	; 0x34
 800791a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b00      	cmp	r3, #0
 8007924:	d051      	beq.n	80079ca <tud_task_ext+0x282>
 8007926:	be00      	bkpt	0x0000
 8007928:	e04f      	b.n	80079ca <tud_task_ext+0x282>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 800792a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792c:	691c      	ldr	r4, [r3, #16]
 800792e:	7a38      	ldrb	r0, [r7, #8]
 8007930:	7b7a      	ldrb	r2, [r7, #13]
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8007938:	47a0      	blx	r4
      break;
 800793a:	e041      	b.n	80079c0 <tud_task_ext+0x278>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
 800793c:	4b26      	ldr	r3, [pc, #152]	; (80079d8 <tud_task_ext+0x290>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d033      	beq.n	80079b2 <tud_task_ext+0x26a>
        {
          TU_LOG(USBD_DBG, ": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 800794a:	4b26      	ldr	r3, [pc, #152]	; (80079e4 <tud_task_ext+0x29c>)
 800794c:	2b00      	cmp	r3, #0
 800794e:	d030      	beq.n	80079b2 <tud_task_ext+0x26a>
 8007950:	4b21      	ldr	r3, [pc, #132]	; (80079d8 <tud_task_ext+0x290>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	bf14      	ite	ne
 800795e:	2301      	movne	r3, #1
 8007960:	2300      	moveq	r3, #0
 8007962:	b2db      	uxtb	r3, r3
 8007964:	4618      	mov	r0, r3
 8007966:	f7f8 fd53 	bl	8000410 <tud_suspend_cb>
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 800796a:	e022      	b.n	80079b2 <tud_task_ext+0x26a>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
 800796c:	4b1a      	ldr	r3, [pc, #104]	; (80079d8 <tud_task_ext+0x290>)
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d01d      	beq.n	80079b6 <tud_task_ext+0x26e>
        {
          TU_LOG(USBD_DBG, "\r\n");
          if (tud_resume_cb) tud_resume_cb();
 800797a:	4b1b      	ldr	r3, [pc, #108]	; (80079e8 <tud_task_ext+0x2a0>)
 800797c:	2b00      	cmp	r3, #0
 800797e:	d01a      	beq.n	80079b6 <tud_task_ext+0x26e>
 8007980:	f7f8 fd58 	bl	8000434 <tud_resume_cb>
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 8007984:	e017      	b.n	80079b6 <tud_task_ext+0x26e>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG(USBD_DBG, "\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d016      	beq.n	80079ba <tud_task_ext+0x272>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	4610      	mov	r0, r2
 8007992:	4798      	blx	r3
      break;
 8007994:	e011      	b.n	80079ba <tud_task_ext+0x272>

      case DCD_EVENT_SOF:
      default:
        TU_BREAKPOINT();
 8007996:	4b12      	ldr	r3, [pc, #72]	; (80079e0 <tud_task_ext+0x298>)
 8007998:	633b      	str	r3, [r7, #48]	; 0x30
 800799a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 0301 	and.w	r3, r3, #1
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00b      	beq.n	80079be <tud_task_ext+0x276>
 80079a6:	be00      	bkpt	0x0000
      break;
 80079a8:	e009      	b.n	80079be <tud_task_ext+0x276>
      break;
 80079aa:	bf00      	nop
 80079ac:	e6db      	b.n	8007766 <tud_task_ext+0x1e>
      break;
 80079ae:	bf00      	nop
 80079b0:	e6d9      	b.n	8007766 <tud_task_ext+0x1e>
      break;
 80079b2:	bf00      	nop
 80079b4:	e6d7      	b.n	8007766 <tud_task_ext+0x1e>
      break;
 80079b6:	bf00      	nop
 80079b8:	e6d5      	b.n	8007766 <tud_task_ext+0x1e>
      break;
 80079ba:	bf00      	nop
 80079bc:	e6d3      	b.n	8007766 <tud_task_ext+0x1e>
      break;
 80079be:	bf00      	nop
  {
 80079c0:	e6d1      	b.n	8007766 <tud_task_ext+0x1e>
  if ( !tud_inited() ) return;
 80079c2:	bf00      	nop
 80079c4:	e002      	b.n	80079cc <tud_task_ext+0x284>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 80079c6:	bf00      	nop
 80079c8:	e000      	b.n	80079cc <tud_task_ext+0x284>
          TU_ASSERT(driver, );
 80079ca:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 80079cc:	3744      	adds	r7, #68	; 0x44
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd90      	pop	{r4, r7, pc}
 80079d2:	bf00      	nop
 80079d4:	24001aec 	.word	0x24001aec
 80079d8:	240019ec 	.word	0x240019ec
 80079dc:	080003f9 	.word	0x080003f9
 80079e0:	e000edf0 	.word	0xe000edf0
 80079e4:	08000411 	.word	0x08000411
 80079e8:	08000435 	.word	0x08000435

080079ec <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	4603      	mov	r3, r0
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f001 faa4 	bl	8008f4c <usbd_control_set_complete_callback>
  TU_LOG(USBD_DBG, "  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	7bf8      	ldrb	r0, [r7, #15]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	4798      	blx	r3
 8007a10:	4603      	mov	r3, r0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
	...

08007a1c <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b094      	sub	sp, #80	; 0x50
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	4603      	mov	r3, r0
 8007a24:	6039      	str	r1, [r7, #0]
 8007a26:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8007a28:	2000      	movs	r0, #0
 8007a2a:	f001 fa8f 	bl	8008f4c <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b60      	cmp	r3, #96	; 0x60
 8007a3a:	d10a      	bne.n	8007a52 <process_control_request+0x36>
 8007a3c:	4ba4      	ldr	r3, [pc, #656]	; (8007cd0 <process_control_request+0x2b4>)
 8007a3e:	61bb      	str	r3, [r7, #24]
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d000      	beq.n	8007a4e <process_control_request+0x32>
 8007a4c:	be00      	bkpt	0x0000
 8007a4e:	2300      	movs	r3, #0
 8007a50:	e247      	b.n	8007ee2 <process_control_request+0x4c6>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b40      	cmp	r3, #64	; 0x40
 8007a5e:	d10f      	bne.n	8007a80 <process_control_request+0x64>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
 8007a60:	4b9c      	ldr	r3, [pc, #624]	; (8007cd4 <process_control_request+0x2b8>)
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d101      	bne.n	8007a6a <process_control_request+0x4e>
 8007a66:	2300      	movs	r3, #0
 8007a68:	e23b      	b.n	8007ee2 <process_control_request+0x4c6>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8007a6a:	489a      	ldr	r0, [pc, #616]	; (8007cd4 <process_control_request+0x2b8>)
 8007a6c:	f001 fa6e 	bl	8008f4c <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8007a70:	79fb      	ldrb	r3, [r7, #7]
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	2101      	movs	r1, #1
 8007a76:	4618      	mov	r0, r3
 8007a78:	f3af 8000 	nop.w
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	e230      	b.n	8007ee2 <process_control_request+0x4c6>
    TU_LOG(USBD_DBG, "  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG(USBD_DBG, "\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	f000 8177 	beq.w	8007d7e <process_control_request+0x362>
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	f300 821a 	bgt.w	8007eca <process_control_request+0x4ae>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <process_control_request+0x86>
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	f000 811e 	beq.w	8007cdc <process_control_request+0x2c0>
 8007aa0:	e213      	b.n	8007eca <process_control_request+0x4ae>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b20      	cmp	r3, #32
 8007aae:	d123      	bne.n	8007af8 <process_control_request+0xdc>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	889b      	ldrh	r3, [r3, #4]
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8007ab8:	8afb      	ldrh	r3, [r7, #22]
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8007ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ac4:	2b0f      	cmp	r3, #15
 8007ac6:	d901      	bls.n	8007acc <process_control_request+0xb0>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	e20a      	b.n	8007ee2 <process_control_request+0x4c6>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8007acc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ad0:	4a81      	ldr	r2, [pc, #516]	; (8007cd8 <process_control_request+0x2bc>)
 8007ad2:	4413      	add	r3, r2
 8007ad4:	78db      	ldrb	r3, [r3, #3]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7ff fcfe 	bl	80074d8 <get_driver>
 8007adc:	6238      	str	r0, [r7, #32]
        TU_VERIFY(driver);
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <process_control_request+0xcc>
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	e1fc      	b.n	8007ee2 <process_control_request+0x4c6>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 8007ae8:	79fb      	ldrb	r3, [r7, #7]
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	6a39      	ldr	r1, [r7, #32]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7ff ff7c 	bl	80079ec <invoke_class_control>
 8007af4:	4603      	mov	r3, r0
 8007af6:	e1f4      	b.n	8007ee2 <process_control_request+0x4c6>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00a      	beq.n	8007b1c <process_control_request+0x100>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
 8007b06:	4b72      	ldr	r3, [pc, #456]	; (8007cd0 <process_control_request+0x2b4>)
 8007b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d000      	beq.n	8007b18 <process_control_request+0xfc>
 8007b16:	be00      	bkpt	0x0000
        return false;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	e1e2      	b.n	8007ee2 <process_control_request+0x4c6>
      }

      switch ( p_request->bRequest )
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	785b      	ldrb	r3, [r3, #1]
 8007b20:	2b09      	cmp	r3, #9
 8007b22:	f200 80c8 	bhi.w	8007cb6 <process_control_request+0x29a>
 8007b26:	a201      	add	r2, pc, #4	; (adr r2, 8007b2c <process_control_request+0x110>)
 8007b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2c:	08007c81 	.word	0x08007c81
 8007b30:	08007c5d 	.word	0x08007c5d
 8007b34:	08007cb7 	.word	0x08007cb7
 8007b38:	08007c39 	.word	0x08007c39
 8007b3c:	08007cb7 	.word	0x08007cb7
 8007b40:	08007b55 	.word	0x08007b55
 8007b44:	08007c1f 	.word	0x08007c1f
 8007b48:	08007cb7 	.word	0x08007cb7
 8007b4c:	08007b79 	.word	0x08007b79
 8007b50:	08007b91 	.word	0x08007b91
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8007b54:	6838      	ldr	r0, [r7, #0]
 8007b56:	f001 fa09 	bl	8008f6c <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	885b      	ldrh	r3, [r3, #2]
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	79fb      	ldrb	r3, [r7, #7]
 8007b64:	4611      	mov	r1, r2
 8007b66:	4618      	mov	r0, r3
 8007b68:	f001 fe10 	bl	800978c <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8007b6c:	4a5a      	ldr	r2, [pc, #360]	; (8007cd8 <process_control_request+0x2bc>)
 8007b6e:	7813      	ldrb	r3, [r2, #0]
 8007b70:	f043 0302 	orr.w	r3, r3, #2
 8007b74:	7013      	strb	r3, [r2, #0]
        break;
 8007b76:	e0aa      	b.n	8007cce <process_control_request+0x2b2>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8007b78:	4b57      	ldr	r3, [pc, #348]	; (8007cd8 <process_control_request+0x2bc>)
 8007b7a:	785b      	ldrb	r3, [r3, #1]
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	73fb      	strb	r3, [r7, #15]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8007b80:	f107 020f 	add.w	r2, r7, #15
 8007b84:	79f8      	ldrb	r0, [r7, #7]
 8007b86:	2301      	movs	r3, #1
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	f001 f963 	bl	8008e54 <tud_control_xfer>
        }
        break;
 8007b8e:	e09e      	b.n	8007cce <process_control_request+0x2b2>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	885b      	ldrh	r3, [r3, #2]
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
 8007b9a:	4b4f      	ldr	r3, [pc, #316]	; (8007cd8 <process_control_request+0x2bc>)
 8007b9c:	785b      	ldrb	r3, [r3, #1]
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d030      	beq.n	8007c0a <process_control_request+0x1ee>
          {
            if ( _usbd_dev.cfg_num )
 8007ba8:	4b4b      	ldr	r3, [pc, #300]	; (8007cd8 <process_control_request+0x2bc>)
 8007baa:	785b      	ldrb	r3, [r3, #1]
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00f      	beq.n	8007bd2 <process_control_request+0x1b6>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG(USBD_DBG, "  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8007bb2:	79fb      	ldrb	r3, [r7, #7]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f001 ff47 	bl	8009a48 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8007bba:	4b47      	ldr	r3, [pc, #284]	; (8007cd8 <process_control_request+0x2bc>)
 8007bbc:	789b      	ldrb	r3, [r3, #2]
 8007bbe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
              configuration_reset(rhport);
 8007bc2:	79fb      	ldrb	r3, [r7, #7]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7ff fd69 	bl	800769c <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8007bca:	4a43      	ldr	r2, [pc, #268]	; (8007cd8 <process_control_request+0x2bc>)
 8007bcc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007bd0:	7093      	strb	r3, [r2, #2]
            }

            // switch to new configuration if not zero
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 8007bd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d017      	beq.n	8007c0a <process_control_request+0x1ee>
 8007bda:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007bde:	79fb      	ldrb	r3, [r7, #7]
 8007be0:	4611      	mov	r1, r2
 8007be2:	4618      	mov	r0, r3
 8007be4:	f000 f986 	bl	8007ef4 <process_set_config>
 8007be8:	4603      	mov	r3, r0
 8007bea:	f083 0301 	eor.w	r3, r3, #1
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00a      	beq.n	8007c0a <process_control_request+0x1ee>
 8007bf4:	4b36      	ldr	r3, [pc, #216]	; (8007cd0 <process_control_request+0x2b4>)
 8007bf6:	633b      	str	r3, [r7, #48]	; 0x30
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0301 	and.w	r3, r3, #1
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d000      	beq.n	8007c06 <process_control_request+0x1ea>
 8007c04:	be00      	bkpt	0x0000
 8007c06:	2300      	movs	r3, #0
 8007c08:	e16b      	b.n	8007ee2 <process_control_request+0x4c6>
          }

          _usbd_dev.cfg_num = cfg_num;
 8007c0a:	4a33      	ldr	r2, [pc, #204]	; (8007cd8 <process_control_request+0x2bc>)
 8007c0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c10:	7053      	strb	r3, [r2, #1]
          tud_control_status(rhport, p_request);
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f001 f8aa 	bl	8008d70 <tud_control_status>
        }
        break;
 8007c1c:	e057      	b.n	8007cce <process_control_request+0x2b2>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 8007c1e:	79fb      	ldrb	r3, [r7, #7]
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 fa82 	bl	800812c <process_get_descriptor>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	f083 0301 	eor.w	r3, r3, #1
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d04b      	beq.n	8007ccc <process_control_request+0x2b0>
 8007c34:	2300      	movs	r3, #0
 8007c36:	e154      	b.n	8007ee2 <process_control_request+0x4c6>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	885b      	ldrh	r3, [r3, #2]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d001      	beq.n	8007c46 <process_control_request+0x22a>
 8007c42:	2300      	movs	r3, #0
 8007c44:	e14d      	b.n	8007ee2 <process_control_request+0x4c6>

          TU_LOG(USBD_DBG, "    Enable Remote Wakeup\r\n");

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 8007c46:	4a24      	ldr	r2, [pc, #144]	; (8007cd8 <process_control_request+0x2bc>)
 8007c48:	7813      	ldrb	r3, [r2, #0]
 8007c4a:	f043 0308 	orr.w	r3, r3, #8
 8007c4e:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f001 f88b 	bl	8008d70 <tud_control_status>
        break;
 8007c5a:	e038      	b.n	8007cce <process_control_request+0x2b2>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	885b      	ldrh	r3, [r3, #2]
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d001      	beq.n	8007c6a <process_control_request+0x24e>
 8007c66:	2300      	movs	r3, #0
 8007c68:	e13b      	b.n	8007ee2 <process_control_request+0x4c6>

          TU_LOG(USBD_DBG, "    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8007c6a:	4a1b      	ldr	r2, [pc, #108]	; (8007cd8 <process_control_request+0x2bc>)
 8007c6c:	7813      	ldrb	r3, [r2, #0]
 8007c6e:	f36f 03c3 	bfc	r3, #3, #1
 8007c72:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8007c74:	79fb      	ldrb	r3, [r7, #7]
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f001 f879 	bl	8008d70 <tud_control_status>
        break;
 8007c7e:	e026      	b.n	8007cce <process_control_request+0x2b2>
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8007c80:	4b15      	ldr	r3, [pc, #84]	; (8007cd8 <process_control_request+0x2bc>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	095b      	lsrs	r3, r3, #5
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	4b11      	ldr	r3, [pc, #68]	; (8007cd8 <process_control_request+0x2bc>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	089b      	lsrs	r3, r3, #2
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	f003 0302 	and.w	r3, r3, #2
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	81bb      	strh	r3, [r7, #12]
          tud_control_xfer(rhport, p_request, &status, 2);
 8007ca6:	f107 020c 	add.w	r2, r7, #12
 8007caa:	79f8      	ldrb	r0, [r7, #7]
 8007cac:	2302      	movs	r3, #2
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	f001 f8d0 	bl	8008e54 <tud_control_xfer>
        }
        break;
 8007cb4:	e00b      	b.n	8007cce <process_control_request+0x2b2>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 8007cb6:	4b06      	ldr	r3, [pc, #24]	; (8007cd0 <process_control_request+0x2b4>)
 8007cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d000      	beq.n	8007cc8 <process_control_request+0x2ac>
 8007cc6:	be00      	bkpt	0x0000
 8007cc8:	2300      	movs	r3, #0
 8007cca:	e10a      	b.n	8007ee2 <process_control_request+0x4c6>
        break;
 8007ccc:	bf00      	nop
      }
    break;
 8007cce:	e107      	b.n	8007ee0 <process_control_request+0x4c4>
 8007cd0:	e000edf0 	.word	0xe000edf0
 8007cd4:	00000000 	.word	0x00000000
 8007cd8:	240019ec 	.word	0x240019ec

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	889b      	ldrh	r3, [r3, #4]
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	82bb      	strh	r3, [r7, #20]
 8007ce4:	8abb      	ldrh	r3, [r7, #20]
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8007cec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007cf0:	2b0f      	cmp	r3, #15
 8007cf2:	d901      	bls.n	8007cf8 <process_control_request+0x2dc>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	e0f4      	b.n	8007ee2 <process_control_request+0x4c6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8007cf8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007cfc:	4a7b      	ldr	r2, [pc, #492]	; (8007eec <process_control_request+0x4d0>)
 8007cfe:	4413      	add	r3, r2
 8007d00:	78db      	ldrb	r3, [r3, #3]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7ff fbe8 	bl	80074d8 <get_driver>
 8007d08:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(driver);
 8007d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <process_control_request+0x2f8>
 8007d10:	2300      	movs	r3, #0
 8007d12:	e0e6      	b.n	8007ee2 <process_control_request+0x4c6>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7ff fe66 	bl	80079ec <invoke_class_control>
 8007d20:	4603      	mov	r3, r0
 8007d22:	f083 0301 	eor.w	r3, r3, #1
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d026      	beq.n	8007d7a <process_control_request+0x35e>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <process_control_request+0x322>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	e0d1      	b.n	8007ee2 <process_control_request+0x4c6>

        switch(p_request->bRequest)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	785b      	ldrb	r3, [r3, #1]
 8007d42:	3b0a      	subs	r3, #10
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d816      	bhi.n	8007d76 <process_control_request+0x35a>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8007d48:	2000      	movs	r0, #0
 8007d4a:	f001 f8ff 	bl	8008f4c <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	785b      	ldrb	r3, [r3, #1]
 8007d52:	2b0a      	cmp	r3, #10
 8007d54:	d109      	bne.n	8007d6a <process_control_request+0x34e>
            {
              uint8_t alternate = 0;
 8007d56:	2300      	movs	r3, #0
 8007d58:	72fb      	strb	r3, [r7, #11]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8007d5a:	f107 020b 	add.w	r2, r7, #11
 8007d5e:	79f8      	ldrb	r0, [r7, #7]
 8007d60:	2301      	movs	r3, #1
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	f001 f876 	bl	8008e54 <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
 8007d68:	e008      	b.n	8007d7c <process_control_request+0x360>
              tud_control_status(rhport, p_request);
 8007d6a:	79fb      	ldrb	r3, [r7, #7]
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 fffe 	bl	8008d70 <tud_control_status>
          break;
 8007d74:	e002      	b.n	8007d7c <process_control_request+0x360>

          default: return false;
 8007d76:	2300      	movs	r3, #0
 8007d78:	e0b3      	b.n	8007ee2 <process_control_request+0x4c6>
        }
      }
 8007d7a:	bf00      	nop
    }
    break;
 8007d7c:	e0b0      	b.n	8007ee0 <process_control_request+0x4c4>

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	889b      	ldrh	r3, [r3, #4]
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	823b      	strh	r3, [r7, #16]
 8007d86:	8a3b      	ldrh	r3, [r7, #16]
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007d8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007d92:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007d94:	7cbb      	ldrb	r3, [r7, #18]
 8007d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d9a:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8007d9c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8007da0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007da4:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007da6:	7cfb      	ldrb	r3, [r7, #19]
 8007da8:	09db      	lsrs	r3, r3, #7
 8007daa:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8007dac:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8007db0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8007db4:	2b08      	cmp	r3, #8
 8007db6:	d90a      	bls.n	8007dce <process_control_request+0x3b2>
 8007db8:	4b4d      	ldr	r3, [pc, #308]	; (8007ef0 <process_control_request+0x4d4>)
 8007dba:	643b      	str	r3, [r7, #64]	; 0x40
 8007dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d000      	beq.n	8007dca <process_control_request+0x3ae>
 8007dc8:	be00      	bkpt	0x0000
 8007dca:	2300      	movs	r3, #0
 8007dcc:	e089      	b.n	8007ee2 <process_control_request+0x4c6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8007dce:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8007dd2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007dd6:	4945      	ldr	r1, [pc, #276]	; (8007eec <process_control_request+0x4d0>)
 8007dd8:	0052      	lsls	r2, r2, #1
 8007dda:	440a      	add	r2, r1
 8007ddc:	4413      	add	r3, r2
 8007dde:	3313      	adds	r3, #19
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7ff fb78 	bl	80074d8 <get_driver>
 8007de8:	64b8      	str	r0, [r7, #72]	; 0x48

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00c      	beq.n	8007e12 <process_control_request+0x3f6>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
 8007df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <process_control_request+0x3e6>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	e06f      	b.n	8007ee2 <process_control_request+0x4c6>
        return invoke_class_control(rhport, driver, p_request);
 8007e02:	79fb      	ldrb	r3, [r7, #7]
 8007e04:	683a      	ldr	r2, [r7, #0]
 8007e06:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7ff fdef 	bl	80079ec <invoke_class_control>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	e067      	b.n	8007ee2 <process_control_request+0x4c6>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	785b      	ldrb	r3, [r3, #1]
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d018      	beq.n	8007e4c <process_control_request+0x430>
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	dc48      	bgt.n	8007eb0 <process_control_request+0x494>
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d002      	beq.n	8007e28 <process_control_request+0x40c>
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d012      	beq.n	8007e4c <process_control_request+0x430>
 8007e26:	e043      	b.n	8007eb0 <process_control_request+0x494>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8007e28:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8007e2c:	79fb      	ldrb	r3, [r7, #7]
 8007e2e:	4611      	mov	r1, r2
 8007e30:	4618      	mov	r0, r3
 8007e32:	f000 fef7 	bl	8008c24 <usbd_edpt_stalled>
 8007e36:	4603      	mov	r3, r0
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	813b      	strh	r3, [r7, #8]
            tud_control_xfer(rhport, p_request, &status, 2);
 8007e3c:	f107 0208 	add.w	r2, r7, #8
 8007e40:	79f8      	ldrb	r0, [r7, #7]
 8007e42:	2302      	movs	r3, #2
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	f001 f805 	bl	8008e54 <tud_control_xfer>
          }
          break;
 8007e4a:	e03d      	b.n	8007ec8 <process_control_request+0x4ac>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	885b      	ldrh	r3, [r3, #2]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d112      	bne.n	8007e7c <process_control_request+0x460>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	785b      	ldrb	r3, [r3, #1]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d107      	bne.n	8007e6e <process_control_request+0x452>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
 8007e5e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8007e62:	79fb      	ldrb	r3, [r7, #7]
 8007e64:	4611      	mov	r1, r2
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 fe90 	bl	8008b8c <usbd_edpt_clear_stall>
 8007e6c:	e006      	b.n	8007e7c <process_control_request+0x460>
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
 8007e6e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8007e72:	79fb      	ldrb	r3, [r7, #7]
 8007e74:	4611      	mov	r1, r2
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 fe3c 	bl	8008af4 <usbd_edpt_stall>
              }
            }

            if (driver)
 8007e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d021      	beq.n	8007ec6 <process_control_request+0x4aa>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	683a      	ldr	r2, [r7, #0]
 8007e86:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7ff fdaf 	bl	80079ec <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8007e8e:	2000      	movs	r0, #0
 8007e90:	f001 f85c 	bl	8008f4c <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8007e94:	4b15      	ldr	r3, [pc, #84]	; (8007eec <process_control_request+0x4d0>)
 8007e96:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007e9a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d110      	bne.n	8007ec6 <process_control_request+0x4aa>
 8007ea4:	79fb      	ldrb	r3, [r7, #7]
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f000 ff61 	bl	8008d70 <tud_control_status>
            }
          }
          break;
 8007eae:	e00a      	b.n	8007ec6 <process_control_request+0x4aa>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 8007eb0:	4b0f      	ldr	r3, [pc, #60]	; (8007ef0 <process_control_request+0x4d4>)
 8007eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8007eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d000      	beq.n	8007ec2 <process_control_request+0x4a6>
 8007ec0:	be00      	bkpt	0x0000
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	e00d      	b.n	8007ee2 <process_control_request+0x4c6>
          break;
 8007ec6:	bf00      	nop
        }
      }
    }
    break;
 8007ec8:	e00a      	b.n	8007ee0 <process_control_request+0x4c4>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 8007eca:	4b09      	ldr	r3, [pc, #36]	; (8007ef0 <process_control_request+0x4d4>)
 8007ecc:	61fb      	str	r3, [r7, #28]
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d000      	beq.n	8007edc <process_control_request+0x4c0>
 8007eda:	be00      	bkpt	0x0000
 8007edc:	2300      	movs	r3, #0
 8007ede:	e000      	b.n	8007ee2 <process_control_request+0x4c6>
  }

  return true;
 8007ee0:	2301      	movs	r3, #1
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3750      	adds	r7, #80	; 0x50
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	240019ec 	.word	0x240019ec
 8007ef0:	e000edf0 	.word	0xe000edf0

08007ef4 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b094      	sub	sp, #80	; 0x50
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	4603      	mov	r3, r0
 8007efc:	460a      	mov	r2, r1
 8007efe:	71fb      	strb	r3, [r7, #7]
 8007f00:	4613      	mov	r3, r2
 8007f02:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8007f04:	79bb      	ldrb	r3, [r7, #6]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7f9 f914 	bl	8001138 <tud_descriptor_configuration_cb>
 8007f10:	6478      	str	r0, [r7, #68]	; 0x44
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8007f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d003      	beq.n	8007f20 <process_set_config+0x2c>
 8007f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f1a:	785b      	ldrb	r3, [r3, #1]
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d00a      	beq.n	8007f36 <process_set_config+0x42>
 8007f20:	4b7c      	ldr	r3, [pc, #496]	; (8008114 <process_set_config+0x220>)
 8007f22:	61bb      	str	r3, [r7, #24]
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d000      	beq.n	8007f32 <process_set_config+0x3e>
 8007f30:	be00      	bkpt	0x0000
 8007f32:	2300      	movs	r3, #0
 8007f34:	e0e9      	b.n	800810a <process_set_config+0x216>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8007f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f38:	79db      	ldrb	r3, [r3, #7]
 8007f3a:	115b      	asrs	r3, r3, #5
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	b2d9      	uxtb	r1, r3
 8007f42:	4a75      	ldr	r2, [pc, #468]	; (8008118 <process_set_config+0x224>)
 8007f44:	7813      	ldrb	r3, [r2, #0]
 8007f46:	f361 1304 	bfi	r3, r1, #4, #1
 8007f4a:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8007f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f4e:	79db      	ldrb	r3, [r3, #7]
 8007f50:	119b      	asrs	r3, r3, #6
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	b2d9      	uxtb	r1, r3
 8007f58:	4a6f      	ldr	r2, [pc, #444]	; (8008118 <process_set_config+0x224>)
 8007f5a:	7813      	ldrb	r3, [r2, #0]
 8007f5c:	f361 1345 	bfi	r3, r1, #5, #1
 8007f60:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8007f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f64:	3309      	adds	r3, #9
 8007f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8007f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f6a:	885b      	ldrh	r3, [r3, #2]
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	461a      	mov	r2, r3
 8007f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f72:	4413      	add	r3, r2
 8007f74:	643b      	str	r3, [r7, #64]	; 0x40

  while( p_desc < desc_end )
 8007f76:	e0bd      	b.n	80080f4 <process_set_config+0x200>
  {
    uint8_t assoc_itf_count = 1;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f80:	617b      	str	r3, [r7, #20]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	3301      	adds	r3, #1
 8007f86:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8007f88:	2b0b      	cmp	r3, #11
 8007f8a:	d10f      	bne.n	8007fac <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8007f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
      assoc_itf_count = desc_iad->bInterfaceCount;
 8007f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f92:	78db      	ldrb	r3, [r3, #3]
 8007f94:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f9a:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8007faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fae:	60bb      	str	r3, [r7, #8]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8007fb6:	2b04      	cmp	r3, #4
 8007fb8:	d00a      	beq.n	8007fd0 <process_set_config+0xdc>
 8007fba:	4b56      	ldr	r3, [pc, #344]	; (8008114 <process_set_config+0x220>)
 8007fbc:	61fb      	str	r3, [r7, #28]
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d000      	beq.n	8007fcc <process_set_config+0xd8>
 8007fca:	be00      	bkpt	0x0000
 8007fcc:	2300      	movs	r3, #0
 8007fce:	e09c      	b.n	800810a <process_set_config+0x216>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8007fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fd2:	63bb      	str	r3, [r7, #56]	; 0x38

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8007fd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8007fe2:	e06e      	b.n	80080c2 <process_set_config+0x1ce>
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8007fe4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7ff fa75 	bl	80074d8 <get_driver>
 8007fee:	6338      	str	r0, [r7, #48]	; 0x30
      TU_ASSERT(driver);
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10a      	bne.n	800800c <process_set_config+0x118>
 8007ff6:	4b47      	ldr	r3, [pc, #284]	; (8008114 <process_set_config+0x220>)
 8007ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	d000      	beq.n	8008008 <process_set_config+0x114>
 8008006:	be00      	bkpt	0x0000
 8008008:	2300      	movs	r3, #0
 800800a:	e07e      	b.n	800810a <process_set_config+0x216>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008012:	79f8      	ldrb	r0, [r7, #7]
 8008014:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008016:	4798      	blx	r3
 8008018:	4603      	mov	r3, r0
 800801a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 800801c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800801e:	2b08      	cmp	r3, #8
 8008020:	d94a      	bls.n	80080b8 <process_set_config+0x1c4>
 8008022:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008024:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008026:	429a      	cmp	r2, r3
 8008028:	d846      	bhi.n	80080b8 <process_set_config+0x1c4>
        // Open successfully
        TU_LOG(USBD_DBG, "  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 800802a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800802e:	2b01      	cmp	r3, #1
 8008030:	d107      	bne.n	8008042 <process_set_config+0x14e>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 8008032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	4a39      	ldr	r2, [pc, #228]	; (800811c <process_set_config+0x228>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d102      	bne.n	8008042 <process_set_config+0x14e>
 800803c:	2302      	movs	r3, #2
 800803e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8008042:	2300      	movs	r3, #0
 8008044:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8008048:	e024      	b.n	8008094 <process_set_config+0x1a0>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 800804a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804c:	789a      	ldrb	r2, [r3, #2]
 800804e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8008052:	4413      	add	r3, r2
 8008054:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8008058:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800805c:	4a2e      	ldr	r2, [pc, #184]	; (8008118 <process_set_config+0x224>)
 800805e:	4413      	add	r3, r2
 8008060:	78db      	ldrb	r3, [r3, #3]
 8008062:	2bff      	cmp	r3, #255	; 0xff
 8008064:	d00a      	beq.n	800807c <process_set_config+0x188>
 8008066:	4b2b      	ldr	r3, [pc, #172]	; (8008114 <process_set_config+0x220>)
 8008068:	62bb      	str	r3, [r7, #40]	; 0x28
 800806a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 0301 	and.w	r3, r3, #1
 8008072:	2b00      	cmp	r3, #0
 8008074:	d000      	beq.n	8008078 <process_set_config+0x184>
 8008076:	be00      	bkpt	0x0000
 8008078:	2300      	movs	r3, #0
 800807a:	e046      	b.n	800810a <process_set_config+0x216>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 800807c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008080:	4a25      	ldr	r2, [pc, #148]	; (8008118 <process_set_config+0x224>)
 8008082:	4413      	add	r3, r2
 8008084:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8008088:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 800808a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800808e:	3301      	adds	r3, #1
 8008090:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8008094:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8008098:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800809c:	429a      	cmp	r2, r3
 800809e:	d3d4      	bcc.n	800804a <process_set_config+0x156>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 80080a0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80080a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80080a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080a8:	481d      	ldr	r0, [pc, #116]	; (8008120 <process_set_config+0x22c>)
 80080aa:	f002 fd19 	bl	800aae0 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 80080ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80080b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080b2:	4413      	add	r3, r2
 80080b4:	64fb      	str	r3, [r7, #76]	; 0x4c

        break; // exit driver find loop
 80080b6:	e00b      	b.n	80080d0 <process_set_config+0x1dc>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80080b8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80080bc:	3301      	adds	r3, #1
 80080be:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80080c2:	4b18      	ldr	r3, [pc, #96]	; (8008124 <process_set_config+0x230>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	1c5a      	adds	r2, r3, #1
 80080c8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80080cc:	429a      	cmp	r2, r3
 80080ce:	da89      	bge.n	8007fe4 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 80080d0:	4b14      	ldr	r3, [pc, #80]	; (8008124 <process_set_config+0x230>)
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	1c5a      	adds	r2, r3, #1
 80080d6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80080da:	429a      	cmp	r2, r3
 80080dc:	da0a      	bge.n	80080f4 <process_set_config+0x200>
 80080de:	4b0d      	ldr	r3, [pc, #52]	; (8008114 <process_set_config+0x220>)
 80080e0:	623b      	str	r3, [r7, #32]
 80080e2:	6a3b      	ldr	r3, [r7, #32]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d000      	beq.n	80080f0 <process_set_config+0x1fc>
 80080ee:	be00      	bkpt	0x0000
 80080f0:	2300      	movs	r3, #0
 80080f2:	e00a      	b.n	800810a <process_set_config+0x216>
  while( p_desc < desc_end )
 80080f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080f8:	429a      	cmp	r2, r3
 80080fa:	f4ff af3d 	bcc.w	8007f78 <process_set_config+0x84>
  }

  // invoke callback
  if (tud_mount_cb) tud_mount_cb();
 80080fe:	4b0a      	ldr	r3, [pc, #40]	; (8008128 <process_set_config+0x234>)
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <process_set_config+0x214>
 8008104:	f7f8 f96a 	bl	80003dc <tud_mount_cb>

  return true;
 8008108:	2301      	movs	r3, #1
}
 800810a:	4618      	mov	r0, r3
 800810c:	3750      	adds	r7, #80	; 0x50
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	e000edf0 	.word	0xe000edf0
 8008118:	240019ec 	.word	0x240019ec
 800811c:	08006355 	.word	0x08006355
 8008120:	240019ff 	.word	0x240019ff
 8008124:	24001a28 	.word	0x24001a28
 8008128:	080003dd 	.word	0x080003dd

0800812c <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b094      	sub	sp, #80	; 0x50
 8008130:	af00      	add	r7, sp, #0
 8008132:	4603      	mov	r3, r0
 8008134:	6039      	str	r1, [r7, #0]
 8008136:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	885b      	ldrh	r3, [r3, #2]
 800813c:	b29b      	uxth	r3, r3
 800813e:	84bb      	strh	r3, [r7, #36]	; 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8008140:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008142:	0a1b      	lsrs	r3, r3, #8
 8008144:	b29b      	uxth	r3, r3
 8008146:	b2db      	uxtb	r3, r3
 8008148:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	885b      	ldrh	r3, [r3, #2]
 8008150:	b29b      	uxth	r3, r3
 8008152:	84fb      	strh	r3, [r7, #38]	; 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8008154:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008156:	b2db      	uxtb	r3, r3
 8008158:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

  switch(desc_type)
 800815c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8008160:	3b01      	subs	r3, #1
 8008162:	2b0e      	cmp	r3, #14
 8008164:	f200 80bc 	bhi.w	80082e0 <process_get_descriptor+0x1b4>
 8008168:	a201      	add	r2, pc, #4	; (adr r2, 8008170 <process_get_descriptor+0x44>)
 800816a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816e:	bf00      	nop
 8008170:	080081ad 	.word	0x080081ad
 8008174:	08008211 	.word	0x08008211
 8008178:	08008279 	.word	0x08008279
 800817c:	080082e1 	.word	0x080082e1
 8008180:	080082e1 	.word	0x080082e1
 8008184:	080082af 	.word	0x080082af
 8008188:	08008211 	.word	0x08008211
 800818c:	080082e1 	.word	0x080082e1
 8008190:	080082e1 	.word	0x080082e1
 8008194:	080082e1 	.word	0x080082e1
 8008198:	080082e1 	.word	0x080082e1
 800819c:	080082e1 	.word	0x080082e1
 80081a0:	080082e1 	.word	0x080082e1
 80081a4:	080082e1 	.word	0x080082e1
 80081a8:	080081c3 	.word	0x080081c3
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG(USBD_DBG, " Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 80081ac:	f7f8 ffba 	bl	8001124 <tud_descriptor_device_cb>
 80081b0:	62b8      	str	r0, [r7, #40]	; 0x28
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 80081b2:	79f8      	ldrb	r0, [r7, #7]
 80081b4:	2312      	movs	r3, #18
 80081b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081b8:	6839      	ldr	r1, [r7, #0]
 80081ba:	f000 fe4b 	bl	8008e54 <tud_control_xfer>
 80081be:	4603      	mov	r3, r0
 80081c0:	e08f      	b.n	80082e2 <process_get_descriptor+0x1b6>
    case TUSB_DESC_BOS:
    {
      TU_LOG(USBD_DBG, " BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 80081c2:	4b4a      	ldr	r3, [pc, #296]	; (80082ec <process_get_descriptor+0x1c0>)
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d101      	bne.n	80081cc <process_get_descriptor+0xa0>
 80081c8:	2300      	movs	r3, #0
 80081ca:	e08a      	b.n	80082e2 <process_get_descriptor+0x1b6>

      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 80081cc:	f3af 8000 	nop.w
 80081d0:	4603      	mov	r3, r0
 80081d2:	647b      	str	r3, [r7, #68]	; 0x44
      TU_ASSERT(desc_bos);
 80081d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d10a      	bne.n	80081f0 <process_get_descriptor+0xc4>
 80081da:	4b45      	ldr	r3, [pc, #276]	; (80082f0 <process_get_descriptor+0x1c4>)
 80081dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d000      	beq.n	80081ec <process_get_descriptor+0xc0>
 80081ea:	be00      	bkpt	0x0000
 80081ec:	2300      	movs	r3, #0
 80081ee:	e078      	b.n	80082e2 <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 80081f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081f2:	3302      	adds	r3, #2
 80081f4:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 80081fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008200:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008204:	79f8      	ldrb	r0, [r7, #7]
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	f000 fe24 	bl	8008e54 <tud_control_xfer>
 800820c:	4603      	mov	r3, r0
 800820e:	e068      	b.n	80082e2 <process_get_descriptor+0x1b6>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
 8008210:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8008214:	2b02      	cmp	r3, #2
 8008216:	d107      	bne.n	8008228 <process_get_descriptor+0xfc>
      {
        TU_LOG(USBD_DBG, " Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8008218:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800821c:	4618      	mov	r0, r3
 800821e:	f7f8 ff8b 	bl	8001138 <tud_descriptor_configuration_cb>
 8008222:	4603      	mov	r3, r0
 8008224:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008226:	e00b      	b.n	8008240 <process_get_descriptor+0x114>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG(USBD_DBG, " Other Speed Configuration\r\n");
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8008228:	4b32      	ldr	r3, [pc, #200]	; (80082f4 <process_get_descriptor+0x1c8>)
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <process_get_descriptor+0x106>
 800822e:	2300      	movs	r3, #0
 8008230:	e057      	b.n	80082e2 <process_get_descriptor+0x1b6>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8008232:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8008236:	4618      	mov	r0, r3
 8008238:	f3af 8000 	nop.w
 800823c:	4603      	mov	r3, r0
 800823e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      TU_ASSERT(desc_config);
 8008240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10a      	bne.n	800825c <process_get_descriptor+0x130>
 8008246:	4b2a      	ldr	r3, [pc, #168]	; (80082f0 <process_get_descriptor+0x1c4>)
 8008248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800824a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	2b00      	cmp	r3, #0
 8008254:	d000      	beq.n	8008258 <process_get_descriptor+0x12c>
 8008256:	be00      	bkpt	0x0000
 8008258:	2300      	movs	r3, #0
 800825a:	e042      	b.n	80082e2 <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 800825c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800825e:	3302      	adds	r3, #2
 8008260:	61fb      	str	r3, [r7, #28]
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	867b      	strh	r3, [r7, #50]	; 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8008268:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800826a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800826c:	79f8      	ldrb	r0, [r7, #7]
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	f000 fdf0 	bl	8008e54 <tud_control_xfer>
 8008274:	4603      	mov	r3, r0
 8008276:	e034      	b.n	80082e2 <process_get_descriptor+0x1b6>
    case TUSB_DESC_STRING:
    {
      TU_LOG(USBD_DBG, " String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	889b      	ldrh	r3, [r3, #4]
 800827c:	b29a      	uxth	r2, r3
 800827e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8008282:	4611      	mov	r1, r2
 8008284:	4618      	mov	r0, r3
 8008286:	f7f8 ff65 	bl	8001154 <tud_descriptor_string_cb>
 800828a:	6378      	str	r0, [r7, #52]	; 0x34
      TU_VERIFY(desc_str);
 800828c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <process_get_descriptor+0x16a>
 8008292:	2300      	movs	r3, #0
 8008294:	e025      	b.n	80082e2 <process_get_descriptor+0x1b6>
 8008296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008298:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 800829e:	b29b      	uxth	r3, r3
 80082a0:	79f8      	ldrb	r0, [r7, #7]
 80082a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	f000 fdd5 	bl	8008e54 <tud_control_xfer>
 80082aa:	4603      	mov	r3, r0
 80082ac:	e019      	b.n	80082e2 <process_get_descriptor+0x1b6>

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG(USBD_DBG, " Device Qualifier\r\n");

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 80082ae:	4b12      	ldr	r3, [pc, #72]	; (80082f8 <process_get_descriptor+0x1cc>)
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <process_get_descriptor+0x18c>
 80082b4:	2300      	movs	r3, #0
 80082b6:	e014      	b.n	80082e2 <process_get_descriptor+0x1b6>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 80082b8:	f3af 8000 	nop.w
 80082bc:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(desc_qualifier);
 80082be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <process_get_descriptor+0x19c>
 80082c4:	2300      	movs	r3, #0
 80082c6:	e00c      	b.n	80082e2 <process_get_descriptor+0x1b6>
 80082c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ca:	617b      	str	r3, [r7, #20]
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	79f8      	ldrb	r0, [r7, #7]
 80082d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082d6:	6839      	ldr	r1, [r7, #0]
 80082d8:	f000 fdbc 	bl	8008e54 <tud_control_xfer>
 80082dc:	4603      	mov	r3, r0
 80082de:	e000      	b.n	80082e2 <process_get_descriptor+0x1b6>
    }
    // break; // unreachable

    default: return false;
 80082e0:	2300      	movs	r3, #0
  }
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3750      	adds	r7, #80	; 0x50
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	00000000 	.word	0x00000000
 80082f0:	e000edf0 	.word	0xe000edf0
	...

080082fc <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const * event, bool in_isr)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b0aa      	sub	sp, #168	; 0xa8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	70fb      	strb	r3, [r7, #3]
  switch (event->event_id)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	785b      	ldrb	r3, [r3, #1]
 800830c:	3b02      	subs	r3, #2
 800830e:	2b03      	cmp	r3, #3
 8008310:	f200 8198 	bhi.w	8008644 <dcd_event_handler+0x348>
 8008314:	a201      	add	r2, pc, #4	; (adr r2, 800831c <dcd_event_handler+0x20>)
 8008316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831a:	bf00      	nop
 800831c:	0800832d 	.word	0x0800832d
 8008320:	08008531 	.word	0x08008531
 8008324:	080083ed 	.word	0x080083ed
 8008328:	08008493 	.word	0x08008493
  {
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected  = 0;
 800832c:	4a82      	ldr	r2, [pc, #520]	; (8008538 <dcd_event_handler+0x23c>)
 800832e:	7813      	ldrb	r3, [r2, #0]
 8008330:	f36f 0300 	bfc	r3, #0, #1
 8008334:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed  = 0;
 8008336:	4a80      	ldr	r2, [pc, #512]	; (8008538 <dcd_event_handler+0x23c>)
 8008338:	7813      	ldrb	r3, [r2, #0]
 800833a:	f36f 0341 	bfc	r3, #1, #1
 800833e:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num    = 0;
 8008340:	4b7d      	ldr	r3, [pc, #500]	; (8008538 <dcd_event_handler+0x23c>)
 8008342:	2200      	movs	r2, #0
 8008344:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
 8008346:	4a7c      	ldr	r2, [pc, #496]	; (8008538 <dcd_event_handler+0x23c>)
 8008348:	7813      	ldrb	r3, [r2, #0]
 800834a:	f36f 0382 	bfc	r3, #2, #1
 800834e:	7013      	strb	r3, [r2, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 8008350:	4b7a      	ldr	r3, [pc, #488]	; (800853c <dcd_event_handler+0x240>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800835e:	78fb      	ldrb	r3, [r7, #3]
 8008360:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if (!in_isr) {
 8008364:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008368:	f083 0301 	eor.w	r3, r3, #1
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b00      	cmp	r3, #0
 8008370:	d009      	beq.n	8008386 <dcd_event_handler+0x8a>
 8008372:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008376:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  qhdl->interrupt_set(false);
 800837a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2000      	movs	r0, #0
 8008382:	4798      	blx	r3
}
 8008384:	bf00      	nop
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 8008386:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800838a:	3304      	adds	r3, #4
 800838c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8008390:	4618      	mov	r0, r3
 8008392:	f7ff f816 	bl	80073c2 <tu_fifo_write>
 8008396:	4603      	mov	r3, r0
 8008398:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

  if (!in_isr) {
 800839c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80083a0:	f083 0301 	eor.w	r3, r3, #1
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d009      	beq.n	80083be <dcd_event_handler+0xc2>
 80083aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  qhdl->interrupt_set(true);
 80083b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2001      	movs	r0, #1
 80083ba:	4798      	blx	r3
}
 80083bc:	bf00      	nop
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 80083be:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80083c2:	f083 0301 	eor.w	r3, r3, #1
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00b      	beq.n	80083e4 <dcd_event_handler+0xe8>
 80083cc:	4b5c      	ldr	r3, [pc, #368]	; (8008540 <dcd_event_handler+0x244>)
 80083ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 0301 	and.w	r3, r3, #1
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d003      	beq.n	80083e8 <dcd_event_handler+0xec>
 80083e0:	be00      	bkpt	0x0000
 80083e2:	e001      	b.n	80083e8 <dcd_event_handler+0xec>

  return success;
 80083e4:	bf00      	nop
 80083e6:	e172      	b.n	80086ce <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 80083e8:	bf00      	nop
    break;
 80083ea:	e170      	b.n	80086ce <dcd_event_handler+0x3d2>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if ( _usbd_dev.connected )
 80083ec:	4b52      	ldr	r3, [pc, #328]	; (8008538 <dcd_event_handler+0x23c>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 8164 	beq.w	80086c4 <dcd_event_handler+0x3c8>
      {
        _usbd_dev.suspended = 1;
 80083fc:	4a4e      	ldr	r2, [pc, #312]	; (8008538 <dcd_event_handler+0x23c>)
 80083fe:	7813      	ldrb	r3, [r2, #0]
 8008400:	f043 0304 	orr.w	r3, r3, #4
 8008404:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8008406:	4b4d      	ldr	r3, [pc, #308]	; (800853c <dcd_event_handler+0x240>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  if (!in_isr) {
 8008418:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800841c:	f083 0301 	eor.w	r3, r3, #1
 8008420:	b2db      	uxtb	r3, r3
 8008422:	2b00      	cmp	r3, #0
 8008424:	d007      	beq.n	8008436 <dcd_event_handler+0x13a>
 8008426:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800842a:	677b      	str	r3, [r7, #116]	; 0x74
  qhdl->interrupt_set(false);
 800842c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2000      	movs	r0, #0
 8008432:	4798      	blx	r3
}
 8008434:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8008436:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800843a:	3304      	adds	r3, #4
 800843c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800843e:	4618      	mov	r0, r3
 8008440:	f7fe ffbf 	bl	80073c2 <tu_fifo_write>
 8008444:	4603      	mov	r3, r0
 8008446:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  if (!in_isr) {
 800844a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800844e:	f083 0301 	eor.w	r3, r3, #1
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b00      	cmp	r3, #0
 8008456:	d007      	beq.n	8008468 <dcd_event_handler+0x16c>
 8008458:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800845c:	66fb      	str	r3, [r7, #108]	; 0x6c
  qhdl->interrupt_set(true);
 800845e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2001      	movs	r0, #1
 8008464:	4798      	blx	r3
}
 8008466:	bf00      	nop
  TU_ASSERT(success);
 8008468:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800846c:	f083 0301 	eor.w	r3, r3, #1
 8008470:	b2db      	uxtb	r3, r3
 8008472:	2b00      	cmp	r3, #0
 8008474:	d009      	beq.n	800848a <dcd_event_handler+0x18e>
 8008476:	4b32      	ldr	r3, [pc, #200]	; (8008540 <dcd_event_handler+0x244>)
 8008478:	66bb      	str	r3, [r7, #104]	; 0x68
 800847a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 0301 	and.w	r3, r3, #1
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <dcd_event_handler+0x192>
 8008486:	be00      	bkpt	0x0000
 8008488:	e001      	b.n	800848e <dcd_event_handler+0x192>
  return success;
 800848a:	bf00      	nop
 800848c:	e11a      	b.n	80086c4 <dcd_event_handler+0x3c8>
  TU_ASSERT(success);
 800848e:	bf00      	nop
      }
    break;
 8008490:	e118      	b.n	80086c4 <dcd_event_handler+0x3c8>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if ( _usbd_dev.connected )
 8008492:	4b29      	ldr	r3, [pc, #164]	; (8008538 <dcd_event_handler+0x23c>)
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 8113 	beq.w	80086c8 <dcd_event_handler+0x3cc>
      {
        _usbd_dev.suspended = 0;
 80084a2:	4a25      	ldr	r2, [pc, #148]	; (8008538 <dcd_event_handler+0x23c>)
 80084a4:	7813      	ldrb	r3, [r2, #0]
 80084a6:	f36f 0382 	bfc	r3, #2, #1
 80084aa:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 80084ac:	4b23      	ldr	r3, [pc, #140]	; (800853c <dcd_event_handler+0x240>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	667b      	str	r3, [r7, #100]	; 0x64
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	663b      	str	r3, [r7, #96]	; 0x60
 80084b6:	78fb      	ldrb	r3, [r7, #3]
 80084b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (!in_isr) {
 80084bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084c0:	f083 0301 	eor.w	r3, r3, #1
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d006      	beq.n	80084d8 <dcd_event_handler+0x1dc>
 80084ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084cc:	65bb      	str	r3, [r7, #88]	; 0x58
  qhdl->interrupt_set(false);
 80084ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2000      	movs	r0, #0
 80084d4:	4798      	blx	r3
}
 80084d6:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 80084d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084da:	3304      	adds	r3, #4
 80084dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fe ff6f 	bl	80073c2 <tu_fifo_write>
 80084e4:	4603      	mov	r3, r0
 80084e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (!in_isr) {
 80084ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084ee:	f083 0301 	eor.w	r3, r3, #1
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d006      	beq.n	8008506 <dcd_event_handler+0x20a>
 80084f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084fa:	653b      	str	r3, [r7, #80]	; 0x50
  qhdl->interrupt_set(true);
 80084fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2001      	movs	r0, #1
 8008502:	4798      	blx	r3
}
 8008504:	bf00      	nop
  TU_ASSERT(success);
 8008506:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800850a:	f083 0301 	eor.w	r3, r3, #1
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b00      	cmp	r3, #0
 8008512:	d009      	beq.n	8008528 <dcd_event_handler+0x22c>
 8008514:	4b0a      	ldr	r3, [pc, #40]	; (8008540 <dcd_event_handler+0x244>)
 8008516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0301 	and.w	r3, r3, #1
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <dcd_event_handler+0x230>
 8008524:	be00      	bkpt	0x0000
 8008526:	e001      	b.n	800852c <dcd_event_handler+0x230>
  return success;
 8008528:	bf00      	nop
 800852a:	e0cd      	b.n	80086c8 <dcd_event_handler+0x3cc>
  TU_ASSERT(success);
 800852c:	bf00      	nop
      }
    break;
 800852e:	e0cb      	b.n	80086c8 <dcd_event_handler+0x3cc>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8008530:	2300      	movs	r3, #0
 8008532:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8008536:	e023      	b.n	8008580 <dcd_event_handler+0x284>
 8008538:	240019ec 	.word	0x240019ec
 800853c:	24001aec 	.word	0x24001aec
 8008540:	e000edf0 	.word	0xe000edf0
      {
        usbd_class_driver_t const * driver = get_driver(i);
 8008544:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008548:	4618      	mov	r0, r3
 800854a:	f7fe ffc5 	bl	80074d8 <get_driver>
 800854e:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
        if (driver && driver->sof)
 8008552:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00d      	beq.n	8008576 <dcd_event_handler+0x27a>
 800855a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800855e:	695b      	ldr	r3, [r3, #20]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d008      	beq.n	8008576 <dcd_event_handler+0x27a>
        {
          driver->sof(event->rhport, event->sof.frame_count);
 8008564:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	7810      	ldrb	r0, [r2, #0]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	6852      	ldr	r2, [r2, #4]
 8008572:	4611      	mov	r1, r2
 8008574:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8008576:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800857a:	3301      	adds	r3, #1
 800857c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8008580:	4b55      	ldr	r3, [pc, #340]	; (80086d8 <dcd_event_handler+0x3dc>)
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	1c5a      	adds	r2, r3, #1
 8008586:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800858a:	429a      	cmp	r2, r3
 800858c:	dada      	bge.n	8008544 <dcd_event_handler+0x248>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if ( _usbd_dev.suspended )
 800858e:	4b53      	ldr	r3, [pc, #332]	; (80086dc <dcd_event_handler+0x3e0>)
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008596:	b2db      	uxtb	r3, r3
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 8097 	beq.w	80086cc <dcd_event_handler+0x3d0>
      {
        _usbd_dev.suspended = 0;
 800859e:	4a4f      	ldr	r2, [pc, #316]	; (80086dc <dcd_event_handler+0x3e0>)
 80085a0:	7813      	ldrb	r3, [r2, #0]
 80085a2:	f36f 0382 	bfc	r3, #2, #1
 80085a6:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 80085a8:	f107 0308 	add.w	r3, r7, #8
 80085ac:	2200      	movs	r2, #0
 80085ae:	601a      	str	r2, [r3, #0]
 80085b0:	605a      	str	r2, [r3, #4]
 80085b2:	609a      	str	r2, [r3, #8]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	723b      	strb	r3, [r7, #8]
 80085ba:	2305      	movs	r3, #5
 80085bc:	727b      	strb	r3, [r7, #9]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 80085be:	4b48      	ldr	r3, [pc, #288]	; (80086e0 <dcd_event_handler+0x3e4>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80085c4:	f107 0308 	add.w	r3, r7, #8
 80085c8:	647b      	str	r3, [r7, #68]	; 0x44
 80085ca:	78fb      	ldrb	r3, [r7, #3]
 80085cc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (!in_isr) {
 80085d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80085d4:	f083 0301 	eor.w	r3, r3, #1
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d006      	beq.n	80085ec <dcd_event_handler+0x2f0>
 80085de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  qhdl->interrupt_set(false);
 80085e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2000      	movs	r0, #0
 80085e8:	4798      	blx	r3
}
 80085ea:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 80085ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ee:	3304      	adds	r3, #4
 80085f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fe fee5 	bl	80073c2 <tu_fifo_write>
 80085f8:	4603      	mov	r3, r0
 80085fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (!in_isr) {
 80085fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008602:	f083 0301 	eor.w	r3, r3, #1
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b00      	cmp	r3, #0
 800860a:	d006      	beq.n	800861a <dcd_event_handler+0x31e>
 800860c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800860e:	637b      	str	r3, [r7, #52]	; 0x34
  qhdl->interrupt_set(true);
 8008610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2001      	movs	r0, #1
 8008616:	4798      	blx	r3
}
 8008618:	bf00      	nop
  TU_ASSERT(success);
 800861a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800861e:	f083 0301 	eor.w	r3, r3, #1
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b00      	cmp	r3, #0
 8008626:	d009      	beq.n	800863c <dcd_event_handler+0x340>
 8008628:	4b2e      	ldr	r3, [pc, #184]	; (80086e4 <dcd_event_handler+0x3e8>)
 800862a:	633b      	str	r3, [r7, #48]	; 0x30
 800862c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 0301 	and.w	r3, r3, #1
 8008634:	2b00      	cmp	r3, #0
 8008636:	d003      	beq.n	8008640 <dcd_event_handler+0x344>
 8008638:	be00      	bkpt	0x0000
 800863a:	e001      	b.n	8008640 <dcd_event_handler+0x344>
  return success;
 800863c:	bf00      	nop
 800863e:	e045      	b.n	80086cc <dcd_event_handler+0x3d0>
  TU_ASSERT(success);
 8008640:	bf00      	nop
      }

      // skip osal queue for SOF in usbd task
    break;
 8008642:	e043      	b.n	80086cc <dcd_event_handler+0x3d0>

    default:
      osal_queue_send(_usbd_q, event, in_isr);
 8008644:	4b26      	ldr	r3, [pc, #152]	; (80086e0 <dcd_event_handler+0x3e4>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	62bb      	str	r3, [r7, #40]	; 0x28
 800864e:	78fb      	ldrb	r3, [r7, #3]
 8008650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (!in_isr) {
 8008654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008658:	f083 0301 	eor.w	r3, r3, #1
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b00      	cmp	r3, #0
 8008660:	d006      	beq.n	8008670 <dcd_event_handler+0x374>
 8008662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008664:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 8008666:	6a3b      	ldr	r3, [r7, #32]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2000      	movs	r0, #0
 800866c:	4798      	blx	r3
}
 800866e:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8008670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008672:	3304      	adds	r3, #4
 8008674:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008676:	4618      	mov	r0, r3
 8008678:	f7fe fea3 	bl	80073c2 <tu_fifo_write>
 800867c:	4603      	mov	r3, r0
 800867e:	77fb      	strb	r3, [r7, #31]
  if (!in_isr) {
 8008680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008684:	f083 0301 	eor.w	r3, r3, #1
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	d006      	beq.n	800869c <dcd_event_handler+0x3a0>
 800868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008690:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2001      	movs	r0, #1
 8008698:	4798      	blx	r3
}
 800869a:	bf00      	nop
  TU_ASSERT(success);
 800869c:	7ffb      	ldrb	r3, [r7, #31]
 800869e:	f083 0301 	eor.w	r3, r3, #1
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d009      	beq.n	80086bc <dcd_event_handler+0x3c0>
 80086a8:	4b0e      	ldr	r3, [pc, #56]	; (80086e4 <dcd_event_handler+0x3e8>)
 80086aa:	617b      	str	r3, [r7, #20]
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0301 	and.w	r3, r3, #1
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d003      	beq.n	80086c0 <dcd_event_handler+0x3c4>
 80086b8:	be00      	bkpt	0x0000
 80086ba:	e001      	b.n	80086c0 <dcd_event_handler+0x3c4>
  return success;
 80086bc:	bf00      	nop
 80086be:	e006      	b.n	80086ce <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 80086c0:	bf00      	nop
    break;
 80086c2:	e004      	b.n	80086ce <dcd_event_handler+0x3d2>
    break;
 80086c4:	bf00      	nop
 80086c6:	e002      	b.n	80086ce <dcd_event_handler+0x3d2>
    break;
 80086c8:	bf00      	nop
 80086ca:	e000      	b.n	80086ce <dcd_event_handler+0x3d2>
    break;
 80086cc:	bf00      	nop
  }
}
 80086ce:	bf00      	nop
 80086d0:	37a8      	adds	r7, #168	; 0xa8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	24001a28 	.word	0x24001a28
 80086dc:	240019ec 	.word	0x240019ec
 80086e0:	24001aec 	.word	0x24001aec
 80086e4:	e000edf0 	.word	0xe000edf0

080086e8 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	4603      	mov	r3, r0
 80086f0:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d005      	beq.n	8008704 <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 80086f8:	4b07      	ldr	r3, [pc, #28]	; (8008718 <usbd_int_set+0x30>)
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f001 f82d 	bl	800975c <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 8008702:	e004      	b.n	800870e <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8008704:	4b04      	ldr	r3, [pc, #16]	; (8008718 <usbd_int_set+0x30>)
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	4618      	mov	r0, r3
 800870a:	f001 f833 	bl	8009774 <dcd_int_disable>
}
 800870e:	bf00      	nop
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	24000035 	.word	0x24000035

0800871c <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b08a      	sub	sp, #40	; 0x28
 8008720:	af00      	add	r7, sp, #0
 8008722:	6039      	str	r1, [r7, #0]
 8008724:	4611      	mov	r1, r2
 8008726:	461a      	mov	r2, r3
 8008728:	4603      	mov	r3, r0
 800872a:	71fb      	strb	r3, [r7, #7]
 800872c:	460b      	mov	r3, r1
 800872e:	71bb      	strb	r3, [r7, #6]
 8008730:	4613      	mov	r3, r2
 8008732:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8008734:	2300      	movs	r3, #0
 8008736:	627b      	str	r3, [r7, #36]	; 0x24
 8008738:	e04d      	b.n	80087d6 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 800873e:	6a3b      	ldr	r3, [r7, #32]
 8008740:	785b      	ldrb	r3, [r3, #1]
 8008742:	2b05      	cmp	r3, #5
 8008744:	d108      	bne.n	8008758 <usbd_open_edpt_pair+0x3c>
 8008746:	6a3b      	ldr	r3, [r7, #32]
 8008748:	78db      	ldrb	r3, [r3, #3]
 800874a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800874e:	b2db      	uxtb	r3, r3
 8008750:	461a      	mov	r2, r3
 8008752:	797b      	ldrb	r3, [r7, #5]
 8008754:	4293      	cmp	r3, r2
 8008756:	d00a      	beq.n	800876e <usbd_open_edpt_pair+0x52>
 8008758:	4b23      	ldr	r3, [pc, #140]	; (80087e8 <usbd_open_edpt_pair+0xcc>)
 800875a:	61bb      	str	r3, [r7, #24]
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0301 	and.w	r3, r3, #1
 8008764:	2b00      	cmp	r3, #0
 8008766:	d000      	beq.n	800876a <usbd_open_edpt_pair+0x4e>
 8008768:	be00      	bkpt	0x0000
 800876a:	2300      	movs	r3, #0
 800876c:	e038      	b.n	80087e0 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800876e:	79fb      	ldrb	r3, [r7, #7]
 8008770:	6a39      	ldr	r1, [r7, #32]
 8008772:	4618      	mov	r0, r3
 8008774:	f000 f83a 	bl	80087ec <usbd_edpt_open>
 8008778:	4603      	mov	r3, r0
 800877a:	f083 0301 	eor.w	r3, r3, #1
 800877e:	b2db      	uxtb	r3, r3
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00a      	beq.n	800879a <usbd_open_edpt_pair+0x7e>
 8008784:	4b18      	ldr	r3, [pc, #96]	; (80087e8 <usbd_open_edpt_pair+0xcc>)
 8008786:	61fb      	str	r3, [r7, #28]
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0301 	and.w	r3, r3, #1
 8008790:	2b00      	cmp	r3, #0
 8008792:	d000      	beq.n	8008796 <usbd_open_edpt_pair+0x7a>
 8008794:	be00      	bkpt	0x0000
 8008796:	2300      	movs	r3, #0
 8008798:	e022      	b.n	80087e0 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	789b      	ldrb	r3, [r3, #2]
 800879e:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80087a0:	7dfb      	ldrb	r3, [r7, #23]
 80087a2:	09db      	lsrs	r3, r3, #7
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d104      	bne.n	80087b4 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	789a      	ldrb	r2, [r3, #2]
 80087ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b0:	701a      	strb	r2, [r3, #0]
 80087b2:	e003      	b.n	80087bc <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	789a      	ldrb	r2, [r3, #2]
 80087b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ba:	701a      	strb	r2, [r3, #0]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	461a      	mov	r2, r3
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 80087ce:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	3301      	adds	r3, #1
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
 80087d6:	79bb      	ldrb	r3, [r7, #6]
 80087d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087da:	429a      	cmp	r2, r3
 80087dc:	dbad      	blt.n	800873a <usbd_open_edpt_pair+0x1e>
  }

  return true;
 80087de:	2301      	movs	r3, #1
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3728      	adds	r7, #40	; 0x28
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	e000edf0 	.word	0xe000edf0

080087ec <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	6039      	str	r1, [r7, #0]
 80087f6:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 80087f8:	4b1b      	ldr	r3, [pc, #108]	; (8008868 <usbd_edpt_open+0x7c>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	789b      	ldrb	r3, [r3, #2]
 8008802:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b08      	cmp	r3, #8
 800880e:	d90a      	bls.n	8008826 <usbd_edpt_open+0x3a>
 8008810:	4b16      	ldr	r3, [pc, #88]	; (800886c <usbd_edpt_open+0x80>)
 8008812:	613b      	str	r3, [r7, #16]
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0301 	and.w	r3, r3, #1
 800881c:	2b00      	cmp	r3, #0
 800881e:	d000      	beq.n	8008822 <usbd_edpt_open+0x36>
 8008820:	be00      	bkpt	0x0000
 8008822:	2300      	movs	r3, #0
 8008824:	e01c      	b.n	8008860 <usbd_edpt_open+0x74>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8008826:	4b12      	ldr	r3, [pc, #72]	; (8008870 <usbd_edpt_open+0x84>)
 8008828:	789b      	ldrb	r3, [r3, #2]
 800882a:	4619      	mov	r1, r3
 800882c:	6838      	ldr	r0, [r7, #0]
 800882e:	f002 f8db 	bl	800a9e8 <tu_edpt_validate>
 8008832:	4603      	mov	r3, r0
 8008834:	f083 0301 	eor.w	r3, r3, #1
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00a      	beq.n	8008854 <usbd_edpt_open+0x68>
 800883e:	4b0b      	ldr	r3, [pc, #44]	; (800886c <usbd_edpt_open+0x80>)
 8008840:	617b      	str	r3, [r7, #20]
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	2b00      	cmp	r3, #0
 800884c:	d000      	beq.n	8008850 <usbd_edpt_open+0x64>
 800884e:	be00      	bkpt	0x0000
 8008850:	2300      	movs	r3, #0
 8008852:	e005      	b.n	8008860 <usbd_edpt_open+0x74>

  return dcd_edpt_open(rhport, desc_ep);
 8008854:	79fb      	ldrb	r3, [r7, #7]
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	4618      	mov	r0, r3
 800885a:	f000 ffdb 	bl	8009814 <dcd_edpt_open>
 800885e:	4603      	mov	r3, r0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3718      	adds	r7, #24
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	24000035 	.word	0x24000035
 800886c:	e000edf0 	.word	0xe000edf0
 8008870:	240019ec 	.word	0x240019ec

08008874 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	4603      	mov	r3, r0
 800887c:	460a      	mov	r2, r1
 800887e:	71fb      	strb	r3, [r7, #7]
 8008880:	4613      	mov	r3, r2
 8008882:	71bb      	strb	r3, [r7, #6]
 8008884:	79bb      	ldrb	r3, [r7, #6]
 8008886:	73bb      	strb	r3, [r7, #14]
 8008888:	7bbb      	ldrb	r3, [r7, #14]
 800888a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800888e:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 8008890:	75fb      	strb	r3, [r7, #23]
 8008892:	79bb      	ldrb	r3, [r7, #6]
 8008894:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008896:	7bfb      	ldrb	r3, [r7, #15]
 8008898:	09db      	lsrs	r3, r3, #7
 800889a:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 800889c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800889e:	7dfa      	ldrb	r2, [r7, #23]
 80088a0:	7dbb      	ldrb	r3, [r7, #22]
 80088a2:	0052      	lsls	r2, r2, #1
 80088a4:	4413      	add	r3, r2
 80088a6:	3320      	adds	r3, #32
 80088a8:	4a06      	ldr	r2, [pc, #24]	; (80088c4 <usbd_edpt_claim+0x50>)
 80088aa:	4413      	add	r3, r2
 80088ac:	3305      	adds	r3, #5
 80088ae:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 80088b0:	2100      	movs	r1, #0
 80088b2:	6938      	ldr	r0, [r7, #16]
 80088b4:	f002 f834 	bl	800a920 <tu_edpt_claim>
 80088b8:	4603      	mov	r3, r0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	240019ec 	.word	0x240019ec

080088c8 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	4603      	mov	r3, r0
 80088d0:	460a      	mov	r2, r1
 80088d2:	71fb      	strb	r3, [r7, #7]
 80088d4:	4613      	mov	r3, r2
 80088d6:	71bb      	strb	r3, [r7, #6]
 80088d8:	79bb      	ldrb	r3, [r7, #6]
 80088da:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80088dc:	7bbb      	ldrb	r3, [r7, #14]
 80088de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e2:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 80088e4:	75fb      	strb	r3, [r7, #23]
 80088e6:	79bb      	ldrb	r3, [r7, #6]
 80088e8:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
 80088ec:	09db      	lsrs	r3, r3, #7
 80088ee:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 80088f0:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80088f2:	7dfa      	ldrb	r2, [r7, #23]
 80088f4:	7dbb      	ldrb	r3, [r7, #22]
 80088f6:	0052      	lsls	r2, r2, #1
 80088f8:	4413      	add	r3, r2
 80088fa:	3320      	adds	r3, #32
 80088fc:	4a06      	ldr	r2, [pc, #24]	; (8008918 <usbd_edpt_release+0x50>)
 80088fe:	4413      	add	r3, r2
 8008900:	3305      	adds	r3, #5
 8008902:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 8008904:	2100      	movs	r1, #0
 8008906:	6938      	ldr	r0, [r7, #16]
 8008908:	f002 f844 	bl	800a994 <tu_edpt_release>
 800890c:	4603      	mov	r3, r0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3718      	adds	r7, #24
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	240019ec 	.word	0x240019ec

0800891c <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af00      	add	r7, sp, #0
 8008922:	603a      	str	r2, [r7, #0]
 8008924:	461a      	mov	r2, r3
 8008926:	4603      	mov	r3, r0
 8008928:	71fb      	strb	r3, [r7, #7]
 800892a:	460b      	mov	r3, r1
 800892c:	71bb      	strb	r3, [r7, #6]
 800892e:	4613      	mov	r3, r2
 8008930:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 8008932:	4b32      	ldr	r3, [pc, #200]	; (80089fc <usbd_edpt_xfer+0xe0>)
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	71fb      	strb	r3, [r7, #7]
 8008938:	79bb      	ldrb	r3, [r7, #6]
 800893a:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800893c:	7abb      	ldrb	r3, [r7, #10]
 800893e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008942:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008944:	75fb      	strb	r3, [r7, #23]
 8008946:	79bb      	ldrb	r3, [r7, #6]
 8008948:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800894a:	7afb      	ldrb	r3, [r7, #11]
 800894c:	09db      	lsrs	r3, r3, #7
 800894e:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8008950:	75bb      	strb	r3, [r7, #22]
  // TU_VERIFY(tud_ready());

  TU_LOG(USBD_DBG, "  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8008952:	7dfa      	ldrb	r2, [r7, #23]
 8008954:	7dbb      	ldrb	r3, [r7, #22]
 8008956:	492a      	ldr	r1, [pc, #168]	; (8008a00 <usbd_edpt_xfer+0xe4>)
 8008958:	0052      	lsls	r2, r2, #1
 800895a:	440a      	add	r2, r1
 800895c:	4413      	add	r3, r2
 800895e:	3320      	adds	r3, #32
 8008960:	795b      	ldrb	r3, [r3, #5]
 8008962:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008966:	b2db      	uxtb	r3, r3
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00a      	beq.n	8008982 <usbd_edpt_xfer+0x66>
 800896c:	4b25      	ldr	r3, [pc, #148]	; (8008a04 <usbd_edpt_xfer+0xe8>)
 800896e:	60fb      	str	r3, [r7, #12]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 0301 	and.w	r3, r3, #1
 8008978:	2b00      	cmp	r3, #0
 800897a:	d000      	beq.n	800897e <usbd_edpt_xfer+0x62>
 800897c:	be00      	bkpt	0x0000
 800897e:	2300      	movs	r3, #0
 8008980:	e038      	b.n	80089f4 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8008982:	7dfa      	ldrb	r2, [r7, #23]
 8008984:	7dbb      	ldrb	r3, [r7, #22]
 8008986:	491e      	ldr	r1, [pc, #120]	; (8008a00 <usbd_edpt_xfer+0xe4>)
 8008988:	0052      	lsls	r2, r2, #1
 800898a:	440a      	add	r2, r1
 800898c:	4413      	add	r3, r2
 800898e:	f103 0220 	add.w	r2, r3, #32
 8008992:	7953      	ldrb	r3, [r2, #5]
 8008994:	f043 0301 	orr.w	r3, r3, #1
 8008998:	7153      	strb	r3, [r2, #5]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 800899a:	88bb      	ldrh	r3, [r7, #4]
 800899c:	79b9      	ldrb	r1, [r7, #6]
 800899e:	79f8      	ldrb	r0, [r7, #7]
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	f001 f897 	bl	8009ad4 <dcd_edpt_xfer>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d001      	beq.n	80089b0 <usbd_edpt_xfer+0x94>
  {
    return true;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e021      	b.n	80089f4 <usbd_edpt_xfer+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 80089b0:	7dfa      	ldrb	r2, [r7, #23]
 80089b2:	7dbb      	ldrb	r3, [r7, #22]
 80089b4:	4912      	ldr	r1, [pc, #72]	; (8008a00 <usbd_edpt_xfer+0xe4>)
 80089b6:	0052      	lsls	r2, r2, #1
 80089b8:	440a      	add	r2, r1
 80089ba:	4413      	add	r3, r2
 80089bc:	f103 0220 	add.w	r2, r3, #32
 80089c0:	7953      	ldrb	r3, [r2, #5]
 80089c2:	f36f 0300 	bfc	r3, #0, #1
 80089c6:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 80089c8:	7dfa      	ldrb	r2, [r7, #23]
 80089ca:	7dbb      	ldrb	r3, [r7, #22]
 80089cc:	490c      	ldr	r1, [pc, #48]	; (8008a00 <usbd_edpt_xfer+0xe4>)
 80089ce:	0052      	lsls	r2, r2, #1
 80089d0:	440a      	add	r2, r1
 80089d2:	4413      	add	r3, r2
 80089d4:	f103 0220 	add.w	r2, r3, #32
 80089d8:	7953      	ldrb	r3, [r2, #5]
 80089da:	f36f 0382 	bfc	r3, #2, #1
 80089de:	7153      	strb	r3, [r2, #5]
    TU_LOG(USBD_DBG, "FAILED\r\n");
    TU_BREAKPOINT();
 80089e0:	4b08      	ldr	r3, [pc, #32]	; (8008a04 <usbd_edpt_xfer+0xe8>)
 80089e2:	613b      	str	r3, [r7, #16]
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0301 	and.w	r3, r3, #1
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d000      	beq.n	80089f2 <usbd_edpt_xfer+0xd6>
 80089f0:	be00      	bkpt	0x0000
    return false;
 80089f2:	2300      	movs	r3, #0
  }
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3718      	adds	r7, #24
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	24000035 	.word	0x24000035
 8008a00:	240019ec 	.word	0x240019ec
 8008a04:	e000edf0 	.word	0xe000edf0

08008a08 <usbd_edpt_xfer_fifo>:
// The number of bytes has to be given explicitly to allow more flexible control of how many
// bytes should be written and second to keep the return value free to give back a boolean
// success message. If total_bytes is too big, the FIFO will copy only what is available
// into the USB buffer!
bool usbd_edpt_xfer_fifo(uint8_t rhport, uint8_t ep_addr, tu_fifo_t * ff, uint16_t total_bytes)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	603a      	str	r2, [r7, #0]
 8008a10:	461a      	mov	r2, r3
 8008a12:	4603      	mov	r3, r0
 8008a14:	71fb      	strb	r3, [r7, #7]
 8008a16:	460b      	mov	r3, r1
 8008a18:	71bb      	strb	r3, [r7, #6]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 8008a1e:	4b32      	ldr	r3, [pc, #200]	; (8008ae8 <usbd_edpt_xfer_fifo+0xe0>)
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	71fb      	strb	r3, [r7, #7]
 8008a24:	79bb      	ldrb	r3, [r7, #6]
 8008a26:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008a28:	7abb      	ldrb	r3, [r7, #10]
 8008a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a2e:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008a30:	75fb      	strb	r3, [r7, #23]
 8008a32:	79bb      	ldrb	r3, [r7, #6]
 8008a34:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008a36:	7afb      	ldrb	r3, [r7, #11]
 8008a38:	09db      	lsrs	r3, r3, #7
 8008a3a:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8008a3c:	75bb      	strb	r3, [r7, #22]

  TU_LOG(USBD_DBG, "  Queue ISO EP %02X with %u bytes ... ", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8008a3e:	7dfa      	ldrb	r2, [r7, #23]
 8008a40:	7dbb      	ldrb	r3, [r7, #22]
 8008a42:	492a      	ldr	r1, [pc, #168]	; (8008aec <usbd_edpt_xfer_fifo+0xe4>)
 8008a44:	0052      	lsls	r2, r2, #1
 8008a46:	440a      	add	r2, r1
 8008a48:	4413      	add	r3, r2
 8008a4a:	3320      	adds	r3, #32
 8008a4c:	795b      	ldrb	r3, [r3, #5]
 8008a4e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00a      	beq.n	8008a6e <usbd_edpt_xfer_fifo+0x66>
 8008a58:	4b25      	ldr	r3, [pc, #148]	; (8008af0 <usbd_edpt_xfer_fifo+0xe8>)
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0301 	and.w	r3, r3, #1
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d000      	beq.n	8008a6a <usbd_edpt_xfer_fifo+0x62>
 8008a68:	be00      	bkpt	0x0000
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	e038      	b.n	8008ae0 <usbd_edpt_xfer_fifo+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer() could return
  // and usbd task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8008a6e:	7dfa      	ldrb	r2, [r7, #23]
 8008a70:	7dbb      	ldrb	r3, [r7, #22]
 8008a72:	491e      	ldr	r1, [pc, #120]	; (8008aec <usbd_edpt_xfer_fifo+0xe4>)
 8008a74:	0052      	lsls	r2, r2, #1
 8008a76:	440a      	add	r2, r1
 8008a78:	4413      	add	r3, r2
 8008a7a:	f103 0220 	add.w	r2, r3, #32
 8008a7e:	7953      	ldrb	r3, [r2, #5]
 8008a80:	f043 0301 	orr.w	r3, r3, #1
 8008a84:	7153      	strb	r3, [r2, #5]

  if (dcd_edpt_xfer_fifo(rhport, ep_addr, ff, total_bytes))
 8008a86:	88bb      	ldrh	r3, [r7, #4]
 8008a88:	79b9      	ldrb	r1, [r7, #6]
 8008a8a:	79f8      	ldrb	r0, [r7, #7]
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	f001 f889 	bl	8009ba4 <dcd_edpt_xfer_fifo>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <usbd_edpt_xfer_fifo+0x94>
  {
    TU_LOG(USBD_DBG, "OK\r\n");
    return true;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e021      	b.n	8008ae0 <usbd_edpt_xfer_fifo+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8008a9c:	7dfa      	ldrb	r2, [r7, #23]
 8008a9e:	7dbb      	ldrb	r3, [r7, #22]
 8008aa0:	4912      	ldr	r1, [pc, #72]	; (8008aec <usbd_edpt_xfer_fifo+0xe4>)
 8008aa2:	0052      	lsls	r2, r2, #1
 8008aa4:	440a      	add	r2, r1
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f103 0220 	add.w	r2, r3, #32
 8008aac:	7953      	ldrb	r3, [r2, #5]
 8008aae:	f36f 0300 	bfc	r3, #0, #1
 8008ab2:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8008ab4:	7dfa      	ldrb	r2, [r7, #23]
 8008ab6:	7dbb      	ldrb	r3, [r7, #22]
 8008ab8:	490c      	ldr	r1, [pc, #48]	; (8008aec <usbd_edpt_xfer_fifo+0xe4>)
 8008aba:	0052      	lsls	r2, r2, #1
 8008abc:	440a      	add	r2, r1
 8008abe:	4413      	add	r3, r2
 8008ac0:	f103 0220 	add.w	r2, r3, #32
 8008ac4:	7953      	ldrb	r3, [r2, #5]
 8008ac6:	f36f 0382 	bfc	r3, #2, #1
 8008aca:	7153      	strb	r3, [r2, #5]
    TU_LOG(USBD_DBG, "failed\r\n");
    TU_BREAKPOINT();
 8008acc:	4b08      	ldr	r3, [pc, #32]	; (8008af0 <usbd_edpt_xfer_fifo+0xe8>)
 8008ace:	613b      	str	r3, [r7, #16]
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0301 	and.w	r3, r3, #1
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d000      	beq.n	8008ade <usbd_edpt_xfer_fifo+0xd6>
 8008adc:	be00      	bkpt	0x0000
    return false;
 8008ade:	2300      	movs	r3, #0
  }
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3718      	adds	r7, #24
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	24000035 	.word	0x24000035
 8008aec:	240019ec 	.word	0x240019ec
 8008af0:	e000edf0 	.word	0xe000edf0

08008af4 <usbd_edpt_stall>:

  return _usbd_dev.ep_status[epnum][dir].busy;
}

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	460a      	mov	r2, r1
 8008afe:	71fb      	strb	r3, [r7, #7]
 8008b00:	4613      	mov	r3, r2
 8008b02:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8008b04:	4b1f      	ldr	r3, [pc, #124]	; (8008b84 <usbd_edpt_stall+0x90>)
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	71fb      	strb	r3, [r7, #7]
 8008b0a:	79bb      	ldrb	r3, [r7, #6]
 8008b0c:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008b0e:	7b3b      	ldrb	r3, [r7, #12]
 8008b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b14:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008b16:	73fb      	strb	r3, [r7, #15]
 8008b18:	79bb      	ldrb	r3, [r7, #6]
 8008b1a:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008b1c:	7b7b      	ldrb	r3, [r7, #13]
 8008b1e:	09db      	lsrs	r3, r3, #7
 8008b20:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8008b22:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8008b24:	7bfa      	ldrb	r2, [r7, #15]
 8008b26:	7bbb      	ldrb	r3, [r7, #14]
 8008b28:	4917      	ldr	r1, [pc, #92]	; (8008b88 <usbd_edpt_stall+0x94>)
 8008b2a:	0052      	lsls	r2, r2, #1
 8008b2c:	440a      	add	r2, r1
 8008b2e:	4413      	add	r3, r2
 8008b30:	3320      	adds	r3, #32
 8008b32:	795b      	ldrb	r3, [r3, #5]
 8008b34:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d11d      	bne.n	8008b7a <usbd_edpt_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 8008b3e:	79ba      	ldrb	r2, [r7, #6]
 8008b40:	79fb      	ldrb	r3, [r7, #7]
 8008b42:	4611      	mov	r1, r2
 8008b44:	4618      	mov	r0, r3
 8008b46:	f001 f9e7 	bl	8009f18 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 1;
 8008b4a:	7bfa      	ldrb	r2, [r7, #15]
 8008b4c:	7bbb      	ldrb	r3, [r7, #14]
 8008b4e:	490e      	ldr	r1, [pc, #56]	; (8008b88 <usbd_edpt_stall+0x94>)
 8008b50:	0052      	lsls	r2, r2, #1
 8008b52:	440a      	add	r2, r1
 8008b54:	4413      	add	r3, r2
 8008b56:	f103 0220 	add.w	r2, r3, #32
 8008b5a:	7953      	ldrb	r3, [r2, #5]
 8008b5c:	f043 0302 	orr.w	r3, r3, #2
 8008b60:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].busy = 1;
 8008b62:	7bfa      	ldrb	r2, [r7, #15]
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	4908      	ldr	r1, [pc, #32]	; (8008b88 <usbd_edpt_stall+0x94>)
 8008b68:	0052      	lsls	r2, r2, #1
 8008b6a:	440a      	add	r2, r1
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f103 0220 	add.w	r2, r3, #32
 8008b72:	7953      	ldrb	r3, [r2, #5]
 8008b74:	f043 0301 	orr.w	r3, r3, #1
 8008b78:	7153      	strb	r3, [r2, #5]
  }
}
 8008b7a:	bf00      	nop
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	24000035 	.word	0x24000035
 8008b88:	240019ec 	.word	0x240019ec

08008b8c <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	4603      	mov	r3, r0
 8008b94:	460a      	mov	r2, r1
 8008b96:	71fb      	strb	r3, [r7, #7]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8008b9c:	4b1f      	ldr	r3, [pc, #124]	; (8008c1c <usbd_edpt_clear_stall+0x90>)
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	71fb      	strb	r3, [r7, #7]
 8008ba2:	79bb      	ldrb	r3, [r7, #6]
 8008ba4:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008ba6:	7b3b      	ldrb	r3, [r7, #12]
 8008ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bac:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008bae:	73fb      	strb	r3, [r7, #15]
 8008bb0:	79bb      	ldrb	r3, [r7, #6]
 8008bb2:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008bb4:	7b7b      	ldrb	r3, [r7, #13]
 8008bb6:	09db      	lsrs	r3, r3, #7
 8008bb8:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8008bba:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8008bbc:	7bfa      	ldrb	r2, [r7, #15]
 8008bbe:	7bbb      	ldrb	r3, [r7, #14]
 8008bc0:	4917      	ldr	r1, [pc, #92]	; (8008c20 <usbd_edpt_clear_stall+0x94>)
 8008bc2:	0052      	lsls	r2, r2, #1
 8008bc4:	440a      	add	r2, r1
 8008bc6:	4413      	add	r3, r2
 8008bc8:	3320      	adds	r3, #32
 8008bca:	795b      	ldrb	r3, [r3, #5]
 8008bcc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d01d      	beq.n	8008c12 <usbd_edpt_clear_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 8008bd6:	79ba      	ldrb	r2, [r7, #6]
 8008bd8:	79fb      	ldrb	r3, [r7, #7]
 8008bda:	4611      	mov	r1, r2
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f001 f9ad 	bl	8009f3c <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8008be2:	7bfa      	ldrb	r2, [r7, #15]
 8008be4:	7bbb      	ldrb	r3, [r7, #14]
 8008be6:	490e      	ldr	r1, [pc, #56]	; (8008c20 <usbd_edpt_clear_stall+0x94>)
 8008be8:	0052      	lsls	r2, r2, #1
 8008bea:	440a      	add	r2, r1
 8008bec:	4413      	add	r3, r2
 8008bee:	f103 0220 	add.w	r2, r3, #32
 8008bf2:	7953      	ldrb	r3, [r2, #5]
 8008bf4:	f36f 0341 	bfc	r3, #1, #1
 8008bf8:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8008bfa:	7bfa      	ldrb	r2, [r7, #15]
 8008bfc:	7bbb      	ldrb	r3, [r7, #14]
 8008bfe:	4908      	ldr	r1, [pc, #32]	; (8008c20 <usbd_edpt_clear_stall+0x94>)
 8008c00:	0052      	lsls	r2, r2, #1
 8008c02:	440a      	add	r2, r1
 8008c04:	4413      	add	r3, r2
 8008c06:	f103 0220 	add.w	r2, r3, #32
 8008c0a:	7953      	ldrb	r3, [r2, #5]
 8008c0c:	f36f 0300 	bfc	r3, #0, #1
 8008c10:	7153      	strb	r3, [r2, #5]
  }
}
 8008c12:	bf00      	nop
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	24000035 	.word	0x24000035
 8008c20:	240019ec 	.word	0x240019ec

08008c24 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	460a      	mov	r2, r1
 8008c2e:	71fb      	strb	r3, [r7, #7]
 8008c30:	4613      	mov	r3, r2
 8008c32:	71bb      	strb	r3, [r7, #6]
 8008c34:	79bb      	ldrb	r3, [r7, #6]
 8008c36:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008c38:	7b3b      	ldrb	r3, [r7, #12]
 8008c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c3e:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008c40:	73fb      	strb	r3, [r7, #15]
 8008c42:	79bb      	ldrb	r3, [r7, #6]
 8008c44:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008c46:	7b7b      	ldrb	r3, [r7, #13]
 8008c48:	09db      	lsrs	r3, r3, #7
 8008c4a:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8008c4c:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8008c4e:	7bfa      	ldrb	r2, [r7, #15]
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
 8008c52:	490a      	ldr	r1, [pc, #40]	; (8008c7c <usbd_edpt_stalled+0x58>)
 8008c54:	0052      	lsls	r2, r2, #1
 8008c56:	440a      	add	r2, r1
 8008c58:	4413      	add	r3, r2
 8008c5a:	3320      	adds	r3, #32
 8008c5c:	795b      	ldrb	r3, [r3, #5]
 8008c5e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	bf14      	ite	ne
 8008c68:	2301      	movne	r3, #1
 8008c6a:	2300      	moveq	r3, #0
 8008c6c:	b2db      	uxtb	r3, r3
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3714      	adds	r7, #20
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	240019ec 	.word	0x240019ec

08008c80 <usbd_edpt_close>:
 *
 * In progress transfers on this EP may be delivered after this call.
 *
 */
void usbd_edpt_close(uint8_t rhport, uint8_t ep_addr)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	4603      	mov	r3, r0
 8008c88:	460a      	mov	r2, r1
 8008c8a:	71fb      	strb	r3, [r7, #7]
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8008c90:	4b25      	ldr	r3, [pc, #148]	; (8008d28 <usbd_edpt_close+0xa8>)
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(dcd_edpt_close, /**/);
 8008c96:	4b25      	ldr	r3, [pc, #148]	; (8008d2c <usbd_edpt_close+0xac>)
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d109      	bne.n	8008cb0 <usbd_edpt_close+0x30>
 8008c9c:	4b24      	ldr	r3, [pc, #144]	; (8008d30 <usbd_edpt_close+0xb0>)
 8008c9e:	613b      	str	r3, [r7, #16]
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 0301 	and.w	r3, r3, #1
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d039      	beq.n	8008d20 <usbd_edpt_close+0xa0>
 8008cac:	be00      	bkpt	0x0000
 8008cae:	e037      	b.n	8008d20 <usbd_edpt_close+0xa0>
 8008cb0:	79bb      	ldrb	r3, [r7, #6]
 8008cb2:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008cb4:	7bbb      	ldrb	r3, [r7, #14]
 8008cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cba:	b2db      	uxtb	r3, r3
  TU_LOG(USBD_DBG, "  CLOSING Endpoint: 0x%02X\r\n", ep_addr);

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008cbc:	75fb      	strb	r3, [r7, #23]
 8008cbe:	79bb      	ldrb	r3, [r7, #6]
 8008cc0:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
 8008cc4:	09db      	lsrs	r3, r3, #7
 8008cc6:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8008cc8:	75bb      	strb	r3, [r7, #22]

  dcd_edpt_close(rhport, ep_addr);
 8008cca:	79ba      	ldrb	r2, [r7, #6]
 8008ccc:	79fb      	ldrb	r3, [r7, #7]
 8008cce:	4611      	mov	r1, r2
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f001 f8bb 	bl	8009e4c <dcd_edpt_close>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8008cd6:	7dfa      	ldrb	r2, [r7, #23]
 8008cd8:	7dbb      	ldrb	r3, [r7, #22]
 8008cda:	4916      	ldr	r1, [pc, #88]	; (8008d34 <usbd_edpt_close+0xb4>)
 8008cdc:	0052      	lsls	r2, r2, #1
 8008cde:	440a      	add	r2, r1
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f103 0220 	add.w	r2, r3, #32
 8008ce6:	7953      	ldrb	r3, [r2, #5]
 8008ce8:	f36f 0341 	bfc	r3, #1, #1
 8008cec:	7153      	strb	r3, [r2, #5]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 8008cee:	7dfa      	ldrb	r2, [r7, #23]
 8008cf0:	7dbb      	ldrb	r3, [r7, #22]
 8008cf2:	4910      	ldr	r1, [pc, #64]	; (8008d34 <usbd_edpt_close+0xb4>)
 8008cf4:	0052      	lsls	r2, r2, #1
 8008cf6:	440a      	add	r2, r1
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f103 0220 	add.w	r2, r3, #32
 8008cfe:	7953      	ldrb	r3, [r2, #5]
 8008d00:	f36f 0300 	bfc	r3, #0, #1
 8008d04:	7153      	strb	r3, [r2, #5]
  _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8008d06:	7dfa      	ldrb	r2, [r7, #23]
 8008d08:	7dbb      	ldrb	r3, [r7, #22]
 8008d0a:	490a      	ldr	r1, [pc, #40]	; (8008d34 <usbd_edpt_close+0xb4>)
 8008d0c:	0052      	lsls	r2, r2, #1
 8008d0e:	440a      	add	r2, r1
 8008d10:	4413      	add	r3, r2
 8008d12:	f103 0220 	add.w	r2, r3, #32
 8008d16:	7953      	ldrb	r3, [r2, #5]
 8008d18:	f36f 0382 	bfc	r3, #2, #1
 8008d1c:	7153      	strb	r3, [r2, #5]

  return;
 8008d1e:	e000      	b.n	8008d22 <usbd_edpt_close+0xa2>
  TU_ASSERT(dcd_edpt_close, /**/);
 8008d20:	bf00      	nop
}
 8008d22:	3718      	adds	r7, #24
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	24000035 	.word	0x24000035
 8008d2c:	08009e4d 	.word	0x08009e4d
 8008d30:	e000edf0 	.word	0xe000edf0
 8008d34:	240019ec 	.word	0x240019ec

08008d38 <_status_stage_xact>:
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	6039      	str	r1, [r7, #0]
 8008d42:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d001      	beq.n	8008d56 <_status_stage_xact+0x1e>
 8008d52:	2300      	movs	r3, #0
 8008d54:	e000      	b.n	8008d58 <_status_stage_xact+0x20>
 8008d56:	2380      	movs	r3, #128	; 0x80
 8008d58:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8008d5a:	7bf9      	ldrb	r1, [r7, #15]
 8008d5c:	79f8      	ldrb	r0, [r7, #7]
 8008d5e:	2300      	movs	r3, #0
 8008d60:	2200      	movs	r2, #0
 8008d62:	f7ff fddb 	bl	800891c <usbd_edpt_xfer>
 8008d66:	4603      	mov	r3, r0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	6039      	str	r1, [r7, #0]
 8008d7a:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request       = (*request);
 8008d7c:	4b0b      	ldr	r3, [pc, #44]	; (8008dac <tud_control_status+0x3c>)
 8008d7e:	683a      	ldr	r2, [r7, #0]
 8008d80:	6810      	ldr	r0, [r2, #0]
 8008d82:	6851      	ldr	r1, [r2, #4]
 8008d84:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8008d86:	4b09      	ldr	r3, [pc, #36]	; (8008dac <tud_control_status+0x3c>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8008d8c:	4b07      	ldr	r3, [pc, #28]	; (8008dac <tud_control_status+0x3c>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8008d92:	4b06      	ldr	r3, [pc, #24]	; (8008dac <tud_control_status+0x3c>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 8008d98:	79fb      	ldrb	r3, [r7, #7]
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7ff ffcb 	bl	8008d38 <_status_stage_xact>
 8008da2:	4603      	mov	r3, r0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	24001af0 	.word	0x24001af0

08008db0 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b088      	sub	sp, #32
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	4603      	mov	r3, r0
 8008db8:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8008dba:	4b24      	ldr	r3, [pc, #144]	; (8008e4c <_data_stage_xact+0x9c>)
 8008dbc:	899a      	ldrh	r2, [r3, #12]
 8008dbe:	4b23      	ldr	r3, [pc, #140]	; (8008e4c <_data_stage_xact+0x9c>)
 8008dc0:	89db      	ldrh	r3, [r3, #14]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	837b      	strh	r3, [r7, #26]
 8008dc8:	2340      	movs	r3, #64	; 0x40
 8008dca:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008dcc:	8b7a      	ldrh	r2, [r7, #26]
 8008dce:	8b3b      	ldrh	r3, [r7, #24]
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	bf28      	it	cs
 8008dd4:	4613      	movcs	r3, r2
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	83bb      	strh	r3, [r7, #28]

  uint8_t ep_addr = EDPT_CTRL_OUT;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	77fb      	strb	r3, [r7, #31]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8008dde:	4b1b      	ldr	r3, [pc, #108]	; (8008e4c <_data_stage_xact+0x9c>)
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d01e      	beq.n	8008e2a <_data_stage_xact+0x7a>
  {
    ep_addr = EDPT_CTRL_IN;
 8008dec:	2380      	movs	r3, #128	; 0x80
 8008dee:	77fb      	strb	r3, [r7, #31]
    if ( xact_len ) {
 8008df0:	8bbb      	ldrh	r3, [r7, #28]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d019      	beq.n	8008e2a <_data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_usbd_ctrl_buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 8008df6:	4b15      	ldr	r3, [pc, #84]	; (8008e4c <_data_stage_xact+0x9c>)
 8008df8:	689a      	ldr	r2, [r3, #8]
 8008dfa:	8bbb      	ldrh	r3, [r7, #28]
 8008dfc:	4914      	ldr	r1, [pc, #80]	; (8008e50 <_data_stage_xact+0xa0>)
 8008dfe:	6179      	str	r1, [r7, #20]
 8008e00:	2140      	movs	r1, #64	; 0x40
 8008e02:	6139      	str	r1, [r7, #16]
 8008e04:	60fa      	str	r2, [r7, #12]
 8008e06:	60bb      	str	r3, [r7, #8]
  if (count > destsz) {
 8008e08:	693a      	ldr	r2, [r7, #16]
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d202      	bcs.n	8008e16 <_data_stage_xact+0x66>
    return -1;
 8008e10:	f04f 33ff 	mov.w	r3, #4294967295
 8008e14:	e005      	b.n	8008e22 <_data_stage_xact+0x72>
  memcpy(dest, src, count);
 8008e16:	68ba      	ldr	r2, [r7, #8]
 8008e18:	68f9      	ldr	r1, [r7, #12]
 8008e1a:	6978      	ldr	r0, [r7, #20]
 8008e1c:	f001 feca 	bl	800abb4 <memcpy>
  return 0;
 8008e20:	2300      	movs	r3, #0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <_data_stage_xact+0x7a>
 8008e26:	2300      	movs	r3, #0
 8008e28:	e00b      	b.n	8008e42 <_data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8008e2a:	8bbb      	ldrh	r3, [r7, #28]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <_data_stage_xact+0x84>
 8008e30:	4a07      	ldr	r2, [pc, #28]	; (8008e50 <_data_stage_xact+0xa0>)
 8008e32:	e000      	b.n	8008e36 <_data_stage_xact+0x86>
 8008e34:	2200      	movs	r2, #0
 8008e36:	8bbb      	ldrh	r3, [r7, #28]
 8008e38:	7ff9      	ldrb	r1, [r7, #31]
 8008e3a:	79f8      	ldrb	r0, [r7, #7]
 8008e3c:	f7ff fd6e 	bl	800891c <usbd_edpt_xfer>
 8008e40:	4603      	mov	r3, r0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3720      	adds	r7, #32
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	24001af0 	.word	0x24001af0
 8008e50:	24001b04 	.word	0x24001b04

08008e54 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b088      	sub	sp, #32
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60b9      	str	r1, [r7, #8]
 8008e5c:	607a      	str	r2, [r7, #4]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	4603      	mov	r3, r0
 8008e62:	73fb      	strb	r3, [r7, #15]
 8008e64:	4613      	mov	r3, r2
 8008e66:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request       = (*request);
 8008e68:	4b30      	ldr	r3, [pc, #192]	; (8008f2c <tud_control_xfer+0xd8>)
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	6810      	ldr	r0, [r2, #0]
 8008e6e:	6851      	ldr	r1, [r2, #4]
 8008e70:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8008e72:	4a2e      	ldr	r2, [pc, #184]	; (8008f2c <tud_control_xfer+0xd8>)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8008e78:	4b2c      	ldr	r3, [pc, #176]	; (8008f2c <tud_control_xfer+0xd8>)
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	88db      	ldrh	r3, [r3, #6]
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	89bb      	ldrh	r3, [r7, #12]
 8008e86:	827b      	strh	r3, [r7, #18]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008e8c:	8a7a      	ldrh	r2, [r7, #18]
 8008e8e:	8a3b      	ldrh	r3, [r7, #16]
 8008e90:	4293      	cmp	r3, r2
 8008e92:	bf28      	it	cs
 8008e94:	4613      	movcs	r3, r2
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	4b24      	ldr	r3, [pc, #144]	; (8008f2c <tud_control_xfer+0xd8>)
 8008e9a:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	88db      	ldrh	r3, [r3, #6]
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d026      	beq.n	8008ef4 <tud_control_xfer+0xa0>
  {
    if(_ctrl_xfer.data_len > 0U)
 8008ea6:	4b21      	ldr	r3, [pc, #132]	; (8008f2c <tud_control_xfer+0xd8>)
 8008ea8:	899b      	ldrh	r3, [r3, #12]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00d      	beq.n	8008eca <tud_control_xfer+0x76>
    {
      TU_ASSERT(buffer);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10a      	bne.n	8008eca <tud_control_xfer+0x76>
 8008eb4:	4b1e      	ldr	r3, [pc, #120]	; (8008f30 <tud_control_xfer+0xdc>)
 8008eb6:	61bb      	str	r3, [r7, #24]
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 0301 	and.w	r3, r3, #1
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d000      	beq.n	8008ec6 <tud_control_xfer+0x72>
 8008ec4:	be00      	bkpt	0x0000
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	e02b      	b.n	8008f22 <tud_control_xfer+0xce>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7ff ff6f 	bl	8008db0 <_data_stage_xact>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	f083 0301 	eor.w	r3, r3, #1
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d020      	beq.n	8008f20 <tud_control_xfer+0xcc>
 8008ede:	4b14      	ldr	r3, [pc, #80]	; (8008f30 <tud_control_xfer+0xdc>)
 8008ee0:	617b      	str	r3, [r7, #20]
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 0301 	and.w	r3, r3, #1
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d000      	beq.n	8008ef0 <tud_control_xfer+0x9c>
 8008eee:	be00      	bkpt	0x0000
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	e016      	b.n	8008f22 <tud_control_xfer+0xce>
  }
  else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
 8008ef4:	7bfb      	ldrb	r3, [r7, #15]
 8008ef6:	68b9      	ldr	r1, [r7, #8]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff ff1d 	bl	8008d38 <_status_stage_xact>
 8008efe:	4603      	mov	r3, r0
 8008f00:	f083 0301 	eor.w	r3, r3, #1
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00a      	beq.n	8008f20 <tud_control_xfer+0xcc>
 8008f0a:	4b09      	ldr	r3, [pc, #36]	; (8008f30 <tud_control_xfer+0xdc>)
 8008f0c:	61fb      	str	r3, [r7, #28]
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d000      	beq.n	8008f1c <tud_control_xfer+0xc8>
 8008f1a:	be00      	bkpt	0x0000
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	e000      	b.n	8008f22 <tud_control_xfer+0xce>
  }

  return true;
 8008f20:	2301      	movs	r3, #1
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3720      	adds	r7, #32
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	24001af0 	.word	0x24001af0
 8008f30:	e000edf0 	.word	0xe000edf0

08008f34 <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8008f38:	2214      	movs	r2, #20
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	4802      	ldr	r0, [pc, #8]	; (8008f48 <usbd_control_reset+0x14>)
 8008f3e:	f001 fe47 	bl	800abd0 <memset>
}
 8008f42:	bf00      	nop
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	24001af0 	.word	0x24001af0

08008f4c <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8008f54:	4a04      	ldr	r2, [pc, #16]	; (8008f68 <usbd_control_set_complete_callback+0x1c>)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6113      	str	r3, [r2, #16]
}
 8008f5a:	bf00      	nop
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	24001af0 	.word	0x24001af0

08008f6c <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request       = (*request);
 8008f74:	4b09      	ldr	r3, [pc, #36]	; (8008f9c <usbd_control_set_request+0x30>)
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	6810      	ldr	r0, [r2, #0]
 8008f7a:	6851      	ldr	r1, [r2, #4]
 8008f7c:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8008f7e:	4b07      	ldr	r3, [pc, #28]	; (8008f9c <usbd_control_set_request+0x30>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8008f84:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <usbd_control_set_request+0x30>)
 8008f86:	2200      	movs	r2, #0
 8008f88:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8008f8a:	4b04      	ldr	r3, [pc, #16]	; (8008f9c <usbd_control_set_request+0x30>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	819a      	strh	r2, [r3, #12]
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr
 8008f9c:	24001af0 	.word	0x24001af0

08008fa0 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b088      	sub	sp, #32
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	603b      	str	r3, [r7, #0]
 8008fa8:	4603      	mov	r3, r0
 8008faa:	71fb      	strb	r3, [r7, #7]
 8008fac:	460b      	mov	r3, r1
 8008fae:	71bb      	strb	r3, [r7, #6]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	717b      	strb	r3, [r7, #5]
 8008fb4:	79bb      	ldrb	r3, [r7, #6]
 8008fb6:	73fb      	strb	r3, [r7, #15]
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
 8008fba:	09db      	lsrs	r3, r3, #7
 8008fbc:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8008fbe:	4a50      	ldr	r2, [pc, #320]	; (8009100 <usbd_control_xfer_cb+0x160>)
 8008fc0:	7812      	ldrb	r2, [r2, #0]
 8008fc2:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8008fc6:	b2d2      	uxtb	r2, r2
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d021      	beq.n	8009010 <usbd_control_xfer_cb+0x70>
  {
    TU_ASSERT(0 == xferred_bytes);
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00a      	beq.n	8008fe8 <usbd_control_xfer_cb+0x48>
 8008fd2:	4b4c      	ldr	r3, [pc, #304]	; (8009104 <usbd_control_xfer_cb+0x164>)
 8008fd4:	613b      	str	r3, [r7, #16]
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d000      	beq.n	8008fe4 <usbd_control_xfer_cb+0x44>
 8008fe2:	be00      	bkpt	0x0000
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	e087      	b.n	80090f8 <usbd_control_xfer_cb+0x158>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8008fe8:	4b47      	ldr	r3, [pc, #284]	; (8009108 <usbd_control_xfer_cb+0x168>)
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d004      	beq.n	8008ff8 <usbd_control_xfer_cb+0x58>
 8008fee:	79fb      	ldrb	r3, [r7, #7]
 8008ff0:	4943      	ldr	r1, [pc, #268]	; (8009100 <usbd_control_xfer_cb+0x160>)
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f3af 8000 	nop.w

    if (_ctrl_xfer.complete_cb)
 8008ff8:	4b41      	ldr	r3, [pc, #260]	; (8009100 <usbd_control_xfer_cb+0x160>)
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d005      	beq.n	800900c <usbd_control_xfer_cb+0x6c>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8009000:	4b3f      	ldr	r3, [pc, #252]	; (8009100 <usbd_control_xfer_cb+0x160>)
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	79f8      	ldrb	r0, [r7, #7]
 8009006:	4a3e      	ldr	r2, [pc, #248]	; (8009100 <usbd_control_xfer_cb+0x160>)
 8009008:	2103      	movs	r1, #3
 800900a:	4798      	blx	r3
    }

    return true;
 800900c:	2301      	movs	r3, #1
 800900e:	e073      	b.n	80090f8 <usbd_control_xfer_cb+0x158>
  }

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8009010:	4b3b      	ldr	r3, [pc, #236]	; (8009100 <usbd_control_xfer_cb+0x160>)
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10c      	bne.n	8009038 <usbd_control_xfer_cb+0x98>
  {
    TU_VERIFY(_ctrl_xfer.buffer);
 800901e:	4b38      	ldr	r3, [pc, #224]	; (8009100 <usbd_control_xfer_cb+0x160>)
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d101      	bne.n	800902a <usbd_control_xfer_cb+0x8a>
 8009026:	2300      	movs	r3, #0
 8009028:	e066      	b.n	80090f8 <usbd_control_xfer_cb+0x158>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 800902a:	4b35      	ldr	r3, [pc, #212]	; (8009100 <usbd_control_xfer_cb+0x160>)
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	4936      	ldr	r1, [pc, #216]	; (800910c <usbd_control_xfer_cb+0x16c>)
 8009032:	4618      	mov	r0, r3
 8009034:	f001 fdbe 	bl	800abb4 <memcpy>
    TU_LOG_MEM(USBD_CONTROL_DEBUG, _usbd_ctrl_buf, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8009038:	4b31      	ldr	r3, [pc, #196]	; (8009100 <usbd_control_xfer_cb+0x160>)
 800903a:	89da      	ldrh	r2, [r3, #14]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	b29b      	uxth	r3, r3
 8009040:	4413      	add	r3, r2
 8009042:	b29a      	uxth	r2, r3
 8009044:	4b2e      	ldr	r3, [pc, #184]	; (8009100 <usbd_control_xfer_cb+0x160>)
 8009046:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8009048:	4b2d      	ldr	r3, [pc, #180]	; (8009100 <usbd_control_xfer_cb+0x160>)
 800904a:	689a      	ldr	r2, [r3, #8]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	4413      	add	r3, r2
 8009050:	4a2b      	ldr	r2, [pc, #172]	; (8009100 <usbd_control_xfer_cb+0x160>)
 8009052:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8009054:	4b2a      	ldr	r3, [pc, #168]	; (8009100 <usbd_control_xfer_cb+0x160>)
 8009056:	88da      	ldrh	r2, [r3, #6]
 8009058:	4b29      	ldr	r3, [pc, #164]	; (8009100 <usbd_control_xfer_cb+0x160>)
 800905a:	89db      	ldrh	r3, [r3, #14]
 800905c:	429a      	cmp	r2, r3
 800905e:	d002      	beq.n	8009066 <usbd_control_xfer_cb+0xc6>
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	2b3f      	cmp	r3, #63	; 0x3f
 8009064:	d831      	bhi.n	80090ca <usbd_control_xfer_cb+0x12a>
  {
    // DATA stage is complete
    bool is_ok = true;
 8009066:	2301      	movs	r3, #1
 8009068:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if ( _ctrl_xfer.complete_cb )
 800906a:	4b25      	ldr	r3, [pc, #148]	; (8009100 <usbd_control_xfer_cb+0x160>)
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d007      	beq.n	8009082 <usbd_control_xfer_cb+0xe2>
    {
      #if CFG_TUSB_DEBUG >= USBD_CONTROL_DEBUG
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8009072:	4b23      	ldr	r3, [pc, #140]	; (8009100 <usbd_control_xfer_cb+0x160>)
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	79f8      	ldrb	r0, [r7, #7]
 8009078:	4a21      	ldr	r2, [pc, #132]	; (8009100 <usbd_control_xfer_cb+0x160>)
 800907a:	2102      	movs	r1, #2
 800907c:	4798      	blx	r3
 800907e:	4603      	mov	r3, r0
 8009080:	77fb      	strb	r3, [r7, #31]
    }

    if ( is_ok )
 8009082:	7ffb      	ldrb	r3, [r7, #31]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d015      	beq.n	80090b4 <usbd_control_xfer_cb+0x114>
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 8009088:	79fb      	ldrb	r3, [r7, #7]
 800908a:	491d      	ldr	r1, [pc, #116]	; (8009100 <usbd_control_xfer_cb+0x160>)
 800908c:	4618      	mov	r0, r3
 800908e:	f7ff fe53 	bl	8008d38 <_status_stage_xact>
 8009092:	4603      	mov	r3, r0
 8009094:	f083 0301 	eor.w	r3, r3, #1
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d02a      	beq.n	80090f4 <usbd_control_xfer_cb+0x154>
 800909e:	4b19      	ldr	r3, [pc, #100]	; (8009104 <usbd_control_xfer_cb+0x164>)
 80090a0:	617b      	str	r3, [r7, #20]
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0301 	and.w	r3, r3, #1
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d000      	beq.n	80090b0 <usbd_control_xfer_cb+0x110>
 80090ae:	be00      	bkpt	0x0000
 80090b0:	2300      	movs	r3, #0
 80090b2:	e021      	b.n	80090f8 <usbd_control_xfer_cb+0x158>
    }else
    {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 80090b4:	79fb      	ldrb	r3, [r7, #7]
 80090b6:	2100      	movs	r1, #0
 80090b8:	4618      	mov	r0, r3
 80090ba:	f000 ff2d 	bl	8009f18 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 80090be:	79fb      	ldrb	r3, [r7, #7]
 80090c0:	2180      	movs	r1, #128	; 0x80
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 ff28 	bl	8009f18 <dcd_edpt_stall>
  {
 80090c8:	e014      	b.n	80090f4 <usbd_control_xfer_cb+0x154>
    }
  }
  else
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
 80090ca:	79fb      	ldrb	r3, [r7, #7]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7ff fe6f 	bl	8008db0 <_data_stage_xact>
 80090d2:	4603      	mov	r3, r0
 80090d4:	f083 0301 	eor.w	r3, r3, #1
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00b      	beq.n	80090f6 <usbd_control_xfer_cb+0x156>
 80090de:	4b09      	ldr	r3, [pc, #36]	; (8009104 <usbd_control_xfer_cb+0x164>)
 80090e0:	61bb      	str	r3, [r7, #24]
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d000      	beq.n	80090f0 <usbd_control_xfer_cb+0x150>
 80090ee:	be00      	bkpt	0x0000
 80090f0:	2300      	movs	r3, #0
 80090f2:	e001      	b.n	80090f8 <usbd_control_xfer_cb+0x158>
  {
 80090f4:	bf00      	nop
  }

  return true;
 80090f6:	2301      	movs	r3, #1
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3720      	adds	r7, #32
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	24001af0 	.word	0x24001af0
 8009104:	e000edf0 	.word	0xe000edf0
 8009108:	00000000 	.word	0x00000000
 800910c:	24001b04 	.word	0x24001b04

08009110 <__NVIC_EnableIRQ>:
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	4603      	mov	r3, r0
 8009118:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800911a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800911e:	2b00      	cmp	r3, #0
 8009120:	db0b      	blt.n	800913a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009122:	88fb      	ldrh	r3, [r7, #6]
 8009124:	f003 021f 	and.w	r2, r3, #31
 8009128:	4907      	ldr	r1, [pc, #28]	; (8009148 <__NVIC_EnableIRQ+0x38>)
 800912a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800912e:	095b      	lsrs	r3, r3, #5
 8009130:	2001      	movs	r0, #1
 8009132:	fa00 f202 	lsl.w	r2, r0, r2
 8009136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800913a:	bf00      	nop
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	e000e100 	.word	0xe000e100

0800914c <__NVIC_DisableIRQ>:
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	4603      	mov	r3, r0
 8009154:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800915a:	2b00      	cmp	r3, #0
 800915c:	db12      	blt.n	8009184 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800915e:	88fb      	ldrh	r3, [r7, #6]
 8009160:	f003 021f 	and.w	r2, r3, #31
 8009164:	490a      	ldr	r1, [pc, #40]	; (8009190 <__NVIC_DisableIRQ+0x44>)
 8009166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800916a:	095b      	lsrs	r3, r3, #5
 800916c:	2001      	movs	r0, #1
 800916e:	fa00 f202 	lsl.w	r2, r0, r2
 8009172:	3320      	adds	r3, #32
 8009174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009178:	f3bf 8f4f 	dsb	sy
}
 800917c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800917e:	f3bf 8f6f 	isb	sy
}
 8009182:	bf00      	nop
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr
 8009190:	e000e100 	.word	0xe000e100

08009194 <calc_rx_ff_size>:
static uint16_t _allocated_fifo_words_tx;         // TX FIFO size in words (IN EPs)
static bool _out_ep_closed;                       // Flag to check if RX FIFO size needs an update (reduce its size)

// Calculate the RX FIFO size according to recommendations from reference manual
static inline uint16_t calc_rx_ff_size(uint16_t ep_size)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	4603      	mov	r3, r0
 800919c:	80fb      	strh	r3, [r7, #6]
  return 15 + 2*(ep_size/4) + 2*EP_MAX;
 800919e:	88fb      	ldrh	r3, [r7, #6]
 80091a0:	089b      	lsrs	r3, r3, #2
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	005b      	lsls	r3, r3, #1
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	3321      	adds	r3, #33	; 0x21
 80091aa:	b29b      	uxth	r3, r3
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <update_grxfsiz>:

static void update_grxfsiz(uint8_t rhport)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b086      	sub	sp, #24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	4603      	mov	r3, r0
 80091c0:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 80091c2:	4b15      	ldr	r3, [pc, #84]	; (8009218 <update_grxfsiz+0x60>)
 80091c4:	613b      	str	r3, [r7, #16]

  // Determine largest EP size for RX FIFO
  uint16_t max_epsize = 0;
 80091c6:	2300      	movs	r3, #0
 80091c8:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < EP_MAX; epnum++)
 80091ca:	2300      	movs	r3, #0
 80091cc:	757b      	strb	r3, [r7, #21]
 80091ce:	e013      	b.n	80091f8 <update_grxfsiz+0x40>
  {
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 80091d0:	7d7b      	ldrb	r3, [r7, #21]
 80091d2:	4a12      	ldr	r2, [pc, #72]	; (800921c <update_grxfsiz+0x64>)
 80091d4:	015b      	lsls	r3, r3, #5
 80091d6:	4413      	add	r3, r2
 80091d8:	330a      	adds	r3, #10
 80091da:	881a      	ldrh	r2, [r3, #0]
 80091dc:	8afb      	ldrh	r3, [r7, #22]
 80091de:	81fb      	strh	r3, [r7, #14]
 80091e0:	4613      	mov	r3, r2
 80091e2:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 80091e4:	89fa      	ldrh	r2, [r7, #14]
 80091e6:	89bb      	ldrh	r3, [r7, #12]
 80091e8:	4293      	cmp	r3, r2
 80091ea:	bf38      	it	cc
 80091ec:	4613      	movcc	r3, r2
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < EP_MAX; epnum++)
 80091f2:	7d7b      	ldrb	r3, [r7, #21]
 80091f4:	3301      	adds	r3, #1
 80091f6:	757b      	strb	r3, [r7, #21]
 80091f8:	7d7b      	ldrb	r3, [r7, #21]
 80091fa:	2b08      	cmp	r3, #8
 80091fc:	d9e8      	bls.n	80091d0 <update_grxfsiz+0x18>
  }

  // Update size of RX FIFO
  usb_otg->GRXFSIZ = calc_rx_ff_size(max_epsize);
 80091fe:	8afb      	ldrh	r3, [r7, #22]
 8009200:	4618      	mov	r0, r3
 8009202:	f7ff ffc7 	bl	8009194 <calc_rx_ff_size>
 8009206:	4603      	mov	r3, r0
 8009208:	461a      	mov	r2, r3
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800920e:	bf00      	nop
 8009210:	3718      	adds	r7, #24
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	40040000 	.word	0x40040000
 800921c:	24001b4c 	.word	0x24001b4c

08009220 <bus_reset>:

// Setup the control endpoint 0.
static void bus_reset(uint8_t rhport)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b088      	sub	sp, #32
 8009224:	af00      	add	r7, sp, #0
 8009226:	4603      	mov	r3, r0
 8009228:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 800922a:	4b33      	ldr	r3, [pc, #204]	; (80092f8 <bus_reset+0xd8>)
 800922c:	61bb      	str	r3, [r7, #24]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 800922e:	4b33      	ldr	r3, [pc, #204]	; (80092fc <bus_reset+0xdc>)
 8009230:	617b      	str	r3, [r7, #20]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8009232:	4b33      	ldr	r3, [pc, #204]	; (8009300 <bus_reset+0xe0>)
 8009234:	613b      	str	r3, [r7, #16]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8009236:	4b33      	ldr	r3, [pc, #204]	; (8009304 <bus_reset+0xe4>)
 8009238:	60fb      	str	r3, [r7, #12]

  tu_memclr(xfer_status, sizeof(xfer_status));
 800923a:	f44f 7290 	mov.w	r2, #288	; 0x120
 800923e:	2100      	movs	r1, #0
 8009240:	4831      	ldr	r0, [pc, #196]	; (8009308 <bus_reset+0xe8>)
 8009242:	f001 fcc5 	bl	800abd0 <memset>
  _out_ep_closed = false;
 8009246:	4b31      	ldr	r3, [pc, #196]	; (800930c <bus_reset+0xec>)
 8009248:	2200      	movs	r2, #0
 800924a:	701a      	strb	r2, [r3, #0]

  // clear device address
  dev->DCFG &= ~USB_OTG_DCFG_DAD_Msk;
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	601a      	str	r2, [r3, #0]

  // 1. NAK for all OUT endpoints
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8009258:	2300      	movs	r3, #0
 800925a:	77fb      	strb	r3, [r7, #31]
 800925c:	e00e      	b.n	800927c <bus_reset+0x5c>
    out_ep[n].DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800925e:	7ffb      	ldrb	r3, [r7, #31]
 8009260:	015b      	lsls	r3, r3, #5
 8009262:	693a      	ldr	r2, [r7, #16]
 8009264:	4413      	add	r3, r2
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	7ffb      	ldrb	r3, [r7, #31]
 800926a:	015b      	lsls	r3, r3, #5
 800926c:	6939      	ldr	r1, [r7, #16]
 800926e:	440b      	add	r3, r1
 8009270:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8009274:	601a      	str	r2, [r3, #0]
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8009276:	7ffb      	ldrb	r3, [r7, #31]
 8009278:	3301      	adds	r3, #1
 800927a:	77fb      	strb	r3, [r7, #31]
 800927c:	7ffb      	ldrb	r3, [r7, #31]
 800927e:	2b08      	cmp	r3, #8
 8009280:	d9ed      	bls.n	800925e <bus_reset+0x3e>
  }

  // 2. Un-mask interrupt bits
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8009288:	61da      	str	r2, [r3, #28]
  dev->DOEPMSK = USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM;
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2209      	movs	r2, #9
 800928e:	615a      	str	r2, [r3, #20]
  dev->DIEPMSK = USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	2209      	movs	r2, #9
 8009294:	611a      	str	r2, [r3, #16]
  //
  //   For Isochronous, largest EP size can be 1023/1024 for FS/HS respectively. In addition if multiple ISO
  //   are enabled at least "2 x (Largest-EPsize/4) + 1" are recommended.  Maybe provide a macro for application to
  //   overwrite this.

  usb_otg->GRXFSIZ = calc_rx_ff_size(TUD_OPT_HIGH_SPEED ? 512 : 64);
 8009296:	2040      	movs	r0, #64	; 0x40
 8009298:	f7ff ff7c 	bl	8009194 <calc_rx_ff_size>
 800929c:	4603      	mov	r3, r0
 800929e:	461a      	mov	r2, r3
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	625a      	str	r2, [r3, #36]	; 0x24

  _allocated_fifo_words_tx = 16;
 80092a4:	4b1a      	ldr	r3, [pc, #104]	; (8009310 <bus_reset+0xf0>)
 80092a6:	2210      	movs	r2, #16
 80092a8:	801a      	strh	r2, [r3, #0]

  // Control IN uses FIFO 0 with 64 bytes ( 16 32-bit word )
  usb_otg->DIEPTXF0_HNPTXFSIZ = (16 << USB_OTG_TX0FD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 80092aa:	4b19      	ldr	r3, [pc, #100]	; (8009310 <bus_reset+0xf0>)
 80092ac:	881b      	ldrh	r3, [r3, #0]
 80092ae:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80092b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092b6:	461a      	mov	r2, r3
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	629a      	str	r2, [r3, #40]	; 0x28

  // Fixed control EP0 size to 64 bytes
  in_ep[0].DIEPCTL &= ~(0x03 << USB_OTG_DIEPCTL_MPSIZ_Pos);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f023 0203 	bic.w	r2, r3, #3
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	601a      	str	r2, [r3, #0]
  xfer_status[0][TUSB_DIR_OUT].max_size = xfer_status[0][TUSB_DIR_IN].max_size = 64;
 80092c8:	4b0f      	ldr	r3, [pc, #60]	; (8009308 <bus_reset+0xe8>)
 80092ca:	2240      	movs	r2, #64	; 0x40
 80092cc:	835a      	strh	r2, [r3, #26]
 80092ce:	4b0e      	ldr	r3, [pc, #56]	; (8009308 <bus_reset+0xe8>)
 80092d0:	8b5a      	ldrh	r2, [r3, #26]
 80092d2:	4b0d      	ldr	r3, [pc, #52]	; (8009308 <bus_reset+0xe8>)
 80092d4:	815a      	strh	r2, [r3, #10]

  out_ep[0].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	611a      	str	r2, [r3, #16]

  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IEPINT;
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	619a      	str	r2, [r3, #24]
}
 80092ee:	bf00      	nop
 80092f0:	3720      	adds	r7, #32
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	40040000 	.word	0x40040000
 80092fc:	40040800 	.word	0x40040800
 8009300:	40040b00 	.word	0x40040b00
 8009304:	40040900 	.word	0x40040900
 8009308:	24001b4c 	.word	0x24001b4c
 800930c:	24001c72 	.word	0x24001c72
 8009310:	24001c70 	.word	0x24001c70

08009314 <set_turnaround>:

// Set turn-around timeout according to link speed
extern uint32_t SystemCoreClock;
static void set_turnaround(USB_OTG_GlobalTypeDef * usb_otg, tusb_speed_t speed)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	460b      	mov	r3, r1
 800931e:	70fb      	strb	r3, [r7, #3]
  usb_otg->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	60da      	str	r2, [r3, #12]

  if ( speed == TUSB_SPEED_HIGH )
 800932c:	78fb      	ldrb	r3, [r7, #3]
 800932e:	2b02      	cmp	r3, #2
 8009330:	d106      	bne.n	8009340 <set_turnaround+0x2c>
  {
    // Use fixed 0x09 for Highspeed
    usb_otg->GUSBCFG |= (0x09 << USB_OTG_GUSBCFG_TRDT_Pos);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	f443 5210 	orr.w	r2, r3, #9216	; 0x2400
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	60da      	str	r2, [r3, #12]
      turnaround = 0xFU;

    // Fullspeed depends on MCU clocks, but we will use 0x06 for 32+ Mhz
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
  }
}
 800933e:	e050      	b.n	80093e2 <set_turnaround+0xce>
    if ( SystemCoreClock >= 32000000U )
 8009340:	4b2b      	ldr	r3, [pc, #172]	; (80093f0 <set_turnaround+0xdc>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a2b      	ldr	r2, [pc, #172]	; (80093f4 <set_turnaround+0xe0>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d302      	bcc.n	8009350 <set_turnaround+0x3c>
      turnaround = 0x6U;
 800934a:	2306      	movs	r3, #6
 800934c:	60fb      	str	r3, [r7, #12]
 800934e:	e041      	b.n	80093d4 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 27500000U )
 8009350:	4b27      	ldr	r3, [pc, #156]	; (80093f0 <set_turnaround+0xdc>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a28      	ldr	r2, [pc, #160]	; (80093f8 <set_turnaround+0xe4>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d902      	bls.n	8009360 <set_turnaround+0x4c>
      turnaround = 0x7U;
 800935a:	2307      	movs	r3, #7
 800935c:	60fb      	str	r3, [r7, #12]
 800935e:	e039      	b.n	80093d4 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 24000000U )
 8009360:	4b23      	ldr	r3, [pc, #140]	; (80093f0 <set_turnaround+0xdc>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a25      	ldr	r2, [pc, #148]	; (80093fc <set_turnaround+0xe8>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d302      	bcc.n	8009370 <set_turnaround+0x5c>
      turnaround = 0x8U;
 800936a:	2308      	movs	r3, #8
 800936c:	60fb      	str	r3, [r7, #12]
 800936e:	e031      	b.n	80093d4 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 21800000U )
 8009370:	4b1f      	ldr	r3, [pc, #124]	; (80093f0 <set_turnaround+0xdc>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a22      	ldr	r2, [pc, #136]	; (8009400 <set_turnaround+0xec>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d902      	bls.n	8009380 <set_turnaround+0x6c>
      turnaround = 0x9U;
 800937a:	2309      	movs	r3, #9
 800937c:	60fb      	str	r3, [r7, #12]
 800937e:	e029      	b.n	80093d4 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 20000000U )
 8009380:	4b1b      	ldr	r3, [pc, #108]	; (80093f0 <set_turnaround+0xdc>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a1f      	ldr	r2, [pc, #124]	; (8009404 <set_turnaround+0xf0>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d902      	bls.n	8009390 <set_turnaround+0x7c>
      turnaround = 0xAU;
 800938a:	230a      	movs	r3, #10
 800938c:	60fb      	str	r3, [r7, #12]
 800938e:	e021      	b.n	80093d4 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 18500000U )
 8009390:	4b17      	ldr	r3, [pc, #92]	; (80093f0 <set_turnaround+0xdc>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a1c      	ldr	r2, [pc, #112]	; (8009408 <set_turnaround+0xf4>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d902      	bls.n	80093a0 <set_turnaround+0x8c>
      turnaround = 0xBU;
 800939a:	230b      	movs	r3, #11
 800939c:	60fb      	str	r3, [r7, #12]
 800939e:	e019      	b.n	80093d4 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 17200000U )
 80093a0:	4b13      	ldr	r3, [pc, #76]	; (80093f0 <set_turnaround+0xdc>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a19      	ldr	r2, [pc, #100]	; (800940c <set_turnaround+0xf8>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d302      	bcc.n	80093b0 <set_turnaround+0x9c>
      turnaround = 0xCU;
 80093aa:	230c      	movs	r3, #12
 80093ac:	60fb      	str	r3, [r7, #12]
 80093ae:	e011      	b.n	80093d4 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 16000000U )
 80093b0:	4b0f      	ldr	r3, [pc, #60]	; (80093f0 <set_turnaround+0xdc>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a16      	ldr	r2, [pc, #88]	; (8009410 <set_turnaround+0xfc>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d302      	bcc.n	80093c0 <set_turnaround+0xac>
      turnaround = 0xDU;
 80093ba:	230d      	movs	r3, #13
 80093bc:	60fb      	str	r3, [r7, #12]
 80093be:	e009      	b.n	80093d4 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 15000000U )
 80093c0:	4b0b      	ldr	r3, [pc, #44]	; (80093f0 <set_turnaround+0xdc>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a13      	ldr	r2, [pc, #76]	; (8009414 <set_turnaround+0x100>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d302      	bcc.n	80093d0 <set_turnaround+0xbc>
      turnaround = 0xEU;
 80093ca:	230e      	movs	r3, #14
 80093cc:	60fb      	str	r3, [r7, #12]
 80093ce:	e001      	b.n	80093d4 <set_turnaround+0xc0>
      turnaround = 0xFU;
 80093d0:	230f      	movs	r3, #15
 80093d2:	60fb      	str	r3, [r7, #12]
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	68da      	ldr	r2, [r3, #12]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	029b      	lsls	r3, r3, #10
 80093dc:	431a      	orrs	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	60da      	str	r2, [r3, #12]
}
 80093e2:	bf00      	nop
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	2400000c 	.word	0x2400000c
 80093f4:	01e84800 	.word	0x01e84800
 80093f8:	01a39ddf 	.word	0x01a39ddf
 80093fc:	016e3600 	.word	0x016e3600
 8009400:	014ca43f 	.word	0x014ca43f
 8009404:	01312cff 	.word	0x01312cff
 8009408:	011a499f 	.word	0x011a499f
 800940c:	01067380 	.word	0x01067380
 8009410:	00f42400 	.word	0x00f42400
 8009414:	00e4e1c0 	.word	0x00e4e1c0

08009418 <get_speed>:

static tusb_speed_t get_speed(uint8_t rhport)
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	4603      	mov	r3, r0
 8009420:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8009422:	4b0a      	ldr	r3, [pc, #40]	; (800944c <get_speed+0x34>)
 8009424:	60fb      	str	r3, [r7, #12]
  uint32_t const enum_spd = (dev->DSTS & USB_OTG_DSTS_ENUMSPD_Msk) >> USB_OTG_DSTS_ENUMSPD_Pos;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	085b      	lsrs	r3, r3, #1
 800942c:	f003 0303 	and.w	r3, r3, #3
 8009430:	60bb      	str	r3, [r7, #8]
  return (enum_spd == DCD_HIGH_SPEED) ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL;
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d101      	bne.n	800943c <get_speed+0x24>
 8009438:	2302      	movs	r3, #2
 800943a:	e000      	b.n	800943e <get_speed+0x26>
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	40040800 	.word	0x40040800

08009450 <set_speed>:

static void set_speed(uint8_t rhport, tusb_speed_t speed)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	4603      	mov	r3, r0
 8009458:	460a      	mov	r2, r1
 800945a:	71fb      	strb	r3, [r7, #7]
 800945c:	4613      	mov	r3, r2
 800945e:	71bb      	strb	r3, [r7, #6]
  uint32_t bitvalue;

  if ( rhport == 1 )
 8009460:	79fb      	ldrb	r3, [r7, #7]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d107      	bne.n	8009476 <set_speed+0x26>
  {
    bitvalue = ((TUSB_SPEED_HIGH == speed) ? DCD_HIGH_SPEED : DCD_FULL_SPEED_USE_HS);
 8009466:	79bb      	ldrb	r3, [r7, #6]
 8009468:	2b02      	cmp	r3, #2
 800946a:	bf14      	ite	ne
 800946c:	2301      	movne	r3, #1
 800946e:	2300      	moveq	r3, #0
 8009470:	b2db      	uxtb	r3, r3
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	e001      	b.n	800947a <set_speed+0x2a>
  }
  else
  {
    bitvalue = DCD_FULL_SPEED;
 8009476:	2303      	movs	r3, #3
 8009478:	60fb      	str	r3, [r7, #12]
  }

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 800947a:	4b0a      	ldr	r3, [pc, #40]	; (80094a4 <set_speed+0x54>)
 800947c:	60bb      	str	r3, [r7, #8]

  // Clear and set speed bits
  dev->DCFG &= ~(3 << USB_OTG_DCFG_DSPD_Pos);
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f023 0203 	bic.w	r2, r3, #3
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	601a      	str	r2, [r3, #0]
  dev->DCFG |= (bitvalue << USB_OTG_DCFG_DSPD_Pos);
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	431a      	orrs	r2, r3
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	601a      	str	r2, [r3, #0]
}
 8009496:	bf00      	nop
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	40040800 	.word	0x40040800

080094a8 <edpt_schedule_packets>:
  return true;
}
#endif

static void edpt_schedule_packets(uint8_t rhport, uint8_t const epnum, uint8_t const dir, uint16_t const num_packets, uint16_t total_bytes)
{
 80094a8:	b490      	push	{r4, r7}
 80094aa:	b08a      	sub	sp, #40	; 0x28
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	4604      	mov	r4, r0
 80094b0:	4608      	mov	r0, r1
 80094b2:	4611      	mov	r1, r2
 80094b4:	461a      	mov	r2, r3
 80094b6:	4623      	mov	r3, r4
 80094b8:	71fb      	strb	r3, [r7, #7]
 80094ba:	4603      	mov	r3, r0
 80094bc:	71bb      	strb	r3, [r7, #6]
 80094be:	460b      	mov	r3, r1
 80094c0:	717b      	strb	r3, [r7, #5]
 80094c2:	4613      	mov	r3, r2
 80094c4:	807b      	strh	r3, [r7, #2]
  (void) rhport;

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 80094c6:	4b6c      	ldr	r3, [pc, #432]	; (8009678 <edpt_schedule_packets+0x1d0>)
 80094c8:	627b      	str	r3, [r7, #36]	; 0x24
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 80094ca:	4b6c      	ldr	r3, [pc, #432]	; (800967c <edpt_schedule_packets+0x1d4>)
 80094cc:	623b      	str	r3, [r7, #32]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 80094ce:	4b6c      	ldr	r3, [pc, #432]	; (8009680 <edpt_schedule_packets+0x1d8>)
 80094d0:	61fb      	str	r3, [r7, #28]

  // EP0 is limited to one packet each xfer
  // We use multiple transaction of xfer->max_size length to get a whole transfer done
  if(epnum == 0) {
 80094d2:	79bb      	ldrb	r3, [r7, #6]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d121      	bne.n	800951c <edpt_schedule_packets+0x74>
    xfer_ctl_t * const xfer = XFER_CTL_BASE(epnum, dir);
 80094d8:	79ba      	ldrb	r2, [r7, #6]
 80094da:	797b      	ldrb	r3, [r7, #5]
 80094dc:	0052      	lsls	r2, r2, #1
 80094de:	4413      	add	r3, r2
 80094e0:	011b      	lsls	r3, r3, #4
 80094e2:	4a68      	ldr	r2, [pc, #416]	; (8009684 <edpt_schedule_packets+0x1dc>)
 80094e4:	4413      	add	r3, r2
 80094e6:	61bb      	str	r3, [r7, #24]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 80094e8:	797b      	ldrb	r3, [r7, #5]
 80094ea:	4a67      	ldr	r2, [pc, #412]	; (8009688 <edpt_schedule_packets+0x1e0>)
 80094ec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	895b      	ldrh	r3, [r3, #10]
 80094f4:	81fa      	strh	r2, [r7, #14]
 80094f6:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80094f8:	89fa      	ldrh	r2, [r7, #14]
 80094fa:	89bb      	ldrh	r3, [r7, #12]
 80094fc:	4293      	cmp	r3, r2
 80094fe:	bf28      	it	cs
 8009500:	4613      	movcs	r3, r2
 8009502:	b29b      	uxth	r3, r3
 8009504:	863b      	strh	r3, [r7, #48]	; 0x30
    ep0_pending[dir] -= total_bytes;
 8009506:	797b      	ldrb	r3, [r7, #5]
 8009508:	4a5f      	ldr	r2, [pc, #380]	; (8009688 <edpt_schedule_packets+0x1e0>)
 800950a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800950e:	797b      	ldrb	r3, [r7, #5]
 8009510:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8009512:	1a8a      	subs	r2, r1, r2
 8009514:	b291      	uxth	r1, r2
 8009516:	4a5c      	ldr	r2, [pc, #368]	; (8009688 <edpt_schedule_packets+0x1e0>)
 8009518:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  }

  // IN and OUT endpoint xfers are interrupt-driven, we just schedule them here.
  if(dir == TUSB_DIR_IN) {
 800951c:	797b      	ldrb	r3, [r7, #5]
 800951e:	2b01      	cmp	r3, #1
 8009520:	d14f      	bne.n	80095c2 <edpt_schedule_packets+0x11a>
    // A full IN transfer (multiple packets, possibly) triggers XFRC.
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8009522:	887b      	ldrh	r3, [r7, #2]
 8009524:	04db      	lsls	r3, r3, #19
 8009526:	4618      	mov	r0, r3
        ((total_bytes << USB_OTG_DIEPTSIZ_XFRSIZ_Pos) & USB_OTG_DIEPTSIZ_XFRSIZ_Msk);
 8009528:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 800952a:	79bb      	ldrb	r3, [r7, #6]
 800952c:	015b      	lsls	r3, r3, #5
 800952e:	69f9      	ldr	r1, [r7, #28]
 8009530:	440b      	add	r3, r1
 8009532:	4302      	orrs	r2, r0
 8009534:	611a      	str	r2, [r3, #16]

    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8009536:	79bb      	ldrb	r3, [r7, #6]
 8009538:	015b      	lsls	r3, r3, #5
 800953a:	69fa      	ldr	r2, [r7, #28]
 800953c:	4413      	add	r3, r2
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	79bb      	ldrb	r3, [r7, #6]
 8009542:	015b      	lsls	r3, r3, #5
 8009544:	69f9      	ldr	r1, [r7, #28]
 8009546:	440b      	add	r3, r1
 8009548:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800954c:	601a      	str	r2, [r3, #0]
    // For ISO endpoint set correct odd/even bit for next frame.
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 800954e:	79bb      	ldrb	r3, [r7, #6]
 8009550:	015b      	lsls	r3, r3, #5
 8009552:	69fa      	ldr	r2, [r7, #28]
 8009554:	4413      	add	r3, r2
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800955c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009560:	d122      	bne.n	80095a8 <edpt_schedule_packets+0x100>
 8009562:	79ba      	ldrb	r2, [r7, #6]
 8009564:	797b      	ldrb	r3, [r7, #5]
 8009566:	4947      	ldr	r1, [pc, #284]	; (8009684 <edpt_schedule_packets+0x1dc>)
 8009568:	0052      	lsls	r2, r2, #1
 800956a:	4413      	add	r3, r2
 800956c:	011b      	lsls	r3, r3, #4
 800956e:	440b      	add	r3, r1
 8009570:	330c      	adds	r3, #12
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d117      	bne.n	80095a8 <edpt_schedule_packets+0x100>
    {
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8009578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009580:	613b      	str	r3, [r7, #16]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 8009582:	79bb      	ldrb	r3, [r7, #6]
 8009584:	015b      	lsls	r3, r3, #5
 8009586:	69fa      	ldr	r2, [r7, #28]
 8009588:	4413      	add	r3, r2
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d002      	beq.n	8009598 <edpt_schedule_packets+0xf0>
 8009592:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8009596:	e001      	b.n	800959c <edpt_schedule_packets+0xf4>
 8009598:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 800959c:	79bb      	ldrb	r3, [r7, #6]
 800959e:	015b      	lsls	r3, r3, #5
 80095a0:	69f8      	ldr	r0, [r7, #28]
 80095a2:	4403      	add	r3, r0
 80095a4:	430a      	orrs	r2, r1
 80095a6:	601a      	str	r2, [r3, #0]
    }
    // Enable fifo empty interrupt only if there are something to put in the fifo.
    if(total_bytes != 0) {
 80095a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d05e      	beq.n	800966c <edpt_schedule_packets+0x1c4>
      dev->DIEPEMPMSK |= (1 << epnum);
 80095ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095b2:	79ba      	ldrb	r2, [r7, #6]
 80095b4:	2101      	movs	r1, #1
 80095b6:	fa01 f202 	lsl.w	r2, r1, r2
 80095ba:	431a      	orrs	r2, r3
 80095bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095be:	635a      	str	r2, [r3, #52]	; 0x34
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
    }
  }
}
 80095c0:	e054      	b.n	800966c <edpt_schedule_packets+0x1c4>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 80095c2:	79bb      	ldrb	r3, [r7, #6]
 80095c4:	015b      	lsls	r3, r3, #5
 80095c6:	6a3a      	ldr	r2, [r7, #32]
 80095c8:	4413      	add	r3, r2
 80095ca:	691a      	ldr	r2, [r3, #16]
 80095cc:	79bb      	ldrb	r3, [r7, #6]
 80095ce:	015b      	lsls	r3, r3, #5
 80095d0:	6a39      	ldr	r1, [r7, #32]
 80095d2:	440b      	add	r3, r1
 80095d4:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 80095d8:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 80095da:	79bb      	ldrb	r3, [r7, #6]
 80095dc:	015b      	lsls	r3, r3, #5
 80095de:	6a3a      	ldr	r2, [r7, #32]
 80095e0:	4413      	add	r3, r2
 80095e2:	6919      	ldr	r1, [r3, #16]
 80095e4:	887b      	ldrh	r3, [r7, #2]
 80095e6:	04db      	lsls	r3, r3, #19
 80095e8:	461a      	mov	r2, r3
        ((total_bytes << USB_OTG_DOEPTSIZ_XFRSIZ_Pos) & USB_OTG_DOEPTSIZ_XFRSIZ_Msk);
 80095ea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 80095ec:	431a      	orrs	r2, r3
 80095ee:	79bb      	ldrb	r3, [r7, #6]
 80095f0:	015b      	lsls	r3, r3, #5
 80095f2:	6a38      	ldr	r0, [r7, #32]
 80095f4:	4403      	add	r3, r0
 80095f6:	430a      	orrs	r2, r1
 80095f8:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 80095fa:	79bb      	ldrb	r3, [r7, #6]
 80095fc:	015b      	lsls	r3, r3, #5
 80095fe:	6a3a      	ldr	r2, [r7, #32]
 8009600:	4413      	add	r3, r2
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	79bb      	ldrb	r3, [r7, #6]
 8009606:	015b      	lsls	r3, r3, #5
 8009608:	6a39      	ldr	r1, [r7, #32]
 800960a:	440b      	add	r3, r1
 800960c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8009610:	601a      	str	r2, [r3, #0]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8009612:	79bb      	ldrb	r3, [r7, #6]
 8009614:	015b      	lsls	r3, r3, #5
 8009616:	6a3a      	ldr	r2, [r7, #32]
 8009618:	4413      	add	r3, r2
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009620:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009624:	d122      	bne.n	800966c <edpt_schedule_packets+0x1c4>
 8009626:	79ba      	ldrb	r2, [r7, #6]
 8009628:	797b      	ldrb	r3, [r7, #5]
 800962a:	4916      	ldr	r1, [pc, #88]	; (8009684 <edpt_schedule_packets+0x1dc>)
 800962c:	0052      	lsls	r2, r2, #1
 800962e:	4413      	add	r3, r2
 8009630:	011b      	lsls	r3, r3, #4
 8009632:	440b      	add	r3, r1
 8009634:	330c      	adds	r3, #12
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d117      	bne.n	800966c <edpt_schedule_packets+0x1c4>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 800963c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009644:	617b      	str	r3, [r7, #20]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 8009646:	79bb      	ldrb	r3, [r7, #6]
 8009648:	015b      	lsls	r3, r3, #5
 800964a:	6a3a      	ldr	r2, [r7, #32]
 800964c:	4413      	add	r3, r2
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d002      	beq.n	800965c <edpt_schedule_packets+0x1b4>
 8009656:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 800965a:	e001      	b.n	8009660 <edpt_schedule_packets+0x1b8>
 800965c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8009660:	79bb      	ldrb	r3, [r7, #6]
 8009662:	015b      	lsls	r3, r3, #5
 8009664:	6a38      	ldr	r0, [r7, #32]
 8009666:	4403      	add	r3, r0
 8009668:	430a      	orrs	r2, r1
 800966a:	601a      	str	r2, [r3, #0]
}
 800966c:	bf00      	nop
 800966e:	3728      	adds	r7, #40	; 0x28
 8009670:	46bd      	mov	sp, r7
 8009672:	bc90      	pop	{r4, r7}
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	40040800 	.word	0x40040800
 800967c:	40040b00 	.word	0x40040b00
 8009680:	40040900 	.word	0x40040900
 8009684:	24001b4c 	.word	0x24001b4c
 8009688:	24001c6c 	.word	0x24001c6c

0800968c <dcd_init>:

/*------------------------------------------------------------------*/
/* Controller API
 *------------------------------------------------------------------*/
void dcd_init (uint8_t rhport)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	4603      	mov	r3, r0
 8009694:	71fb      	strb	r3, [r7, #7]
  // Programming model begins in the last section of the chapter on the USB
  // peripheral in each Reference Manual.

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8009696:	4b2d      	ldr	r3, [pc, #180]	; (800974c <dcd_init+0xc0>)
 8009698:	60fb      	str	r3, [r7, #12]

  // No HNP/SRP (no OTG support), program timeout later.
  if ( rhport == 1 )
 800969a:	79fb      	ldrb	r3, [r7, #7]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d106      	bne.n	80096ae <dcd_init+0x22>
    usb_otg->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    // Select default internal VBUS Indicator and Drive for ULPI
    usb_otg->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
#else
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	60da      	str	r2, [r3, #12]
 80096ac:	e005      	b.n	80096ba <dcd_init+0x2e>
    USB_HS_PHYCInit();
#endif
  } else
  {
    // Enable internal PHY
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	60da      	str	r2, [r3, #12]
  }

  // Reset core after selecting PHY
  // Wait AHB IDLE, reset then wait until it is cleared
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U) {}
 80096ba:	bf00      	nop
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	dafb      	bge.n	80096bc <dcd_init+0x30>
  usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	f043 0201 	orr.w	r2, r3, #1
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	611a      	str	r2, [r3, #16]
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST) {}
 80096d0:	bf00      	nop
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	f003 0301 	and.w	r3, r3, #1
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d0f9      	beq.n	80096d2 <dcd_init+0x46>

  // Restart PHY clock
  *((volatile uint32_t *)(RHPORT_REGS_BASE + USB_OTG_PCGCCTL_BASE)) = 0;
 80096de:	4b1c      	ldr	r3, [pc, #112]	; (8009750 <dcd_init+0xc4>)
 80096e0:	2200      	movs	r2, #0
 80096e2:	601a      	str	r2, [r3, #0]

  // Clear all interrupts
  usb_otg->GINTSTS |= usb_otg->GINTSTS;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	695a      	ldr	r2, [r3, #20]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	695b      	ldr	r3, [r3, #20]
 80096ec:	431a      	orrs	r2, r3
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	615a      	str	r2, [r3, #20]

  // Required as part of core initialization.
  // TODO: How should mode mismatch be handled? It will cause
  // the core to stop working/require reset.
  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OTGINT | USB_OTG_GINTMSK_MMISM;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	699b      	ldr	r3, [r3, #24]
 80096f6:	f043 0206 	orr.w	r2, r3, #6
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	619a      	str	r2, [r3, #24]

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 80096fe:	4b15      	ldr	r3, [pc, #84]	; (8009754 <dcd_init+0xc8>)
 8009700:	60bb      	str	r3, [r7, #8]

  // If USB host misbehaves during status portion of control xfer
  // (non zero-length packet), send STALL back and discard.
  dev->DCFG |=  USB_OTG_DCFG_NZLSOHSK;
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f043 0204 	orr.w	r2, r3, #4
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	601a      	str	r2, [r3, #0]

  set_speed(rhport, TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL);
 800970e:	79fb      	ldrb	r3, [r7, #7]
 8009710:	2100      	movs	r1, #0
 8009712:	4618      	mov	r0, r3
 8009714:	f7ff fe9c 	bl	8009450 <set_speed>

  // Enable internal USB transceiver, unless using HS core (port 1) with external PHY.
  if (!(rhport == 1 && (CFG_TUSB_RHPORT1_MODE & OPT_MODE_HIGH_SPEED))) usb_otg->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	639a      	str	r2, [r3, #56]	; 0x38

  usb_otg->GINTMSK |= USB_OTG_GINTMSK_USBRST   | USB_OTG_GINTMSK_ENUMDNEM |
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	699a      	ldr	r2, [r3, #24]
 8009728:	4b0b      	ldr	r3, [pc, #44]	; (8009758 <dcd_init+0xcc>)
 800972a:	4313      	orrs	r3, r2
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	6193      	str	r3, [r2, #24]
      USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_WUIM     |
      USB_OTG_GINTMSK_RXFLVLM  | (USE_SOF ? USB_OTG_GINTMSK_SOFM : 0);

  // Enable global interrupt
  usb_otg->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f043 0201 	orr.w	r2, r3, #1
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 800973c:	79fb      	ldrb	r3, [r7, #7]
 800973e:	4618      	mov	r0, r3
 8009740:	f000 f852 	bl	80097e8 <dcd_connect>
}
 8009744:	bf00      	nop
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	40040000 	.word	0x40040000
 8009750:	40040e00 	.word	0x40040e00
 8009754:	40040800 	.word	0x40040800
 8009758:	80003810 	.word	0x80003810

0800975c <dcd_int_enable>:

void dcd_int_enable (uint8_t rhport)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	4603      	mov	r3, r0
 8009764:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  NVIC_EnableIRQ(RHPORT_IRQn);
 8009766:	204d      	movs	r0, #77	; 0x4d
 8009768:	f7ff fcd2 	bl	8009110 <__NVIC_EnableIRQ>
}
 800976c:	bf00      	nop
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <dcd_int_disable>:

void dcd_int_disable (uint8_t rhport)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	4603      	mov	r3, r0
 800977c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  NVIC_DisableIRQ(RHPORT_IRQn);
 800977e:	204d      	movs	r0, #77	; 0x4d
 8009780:	f7ff fce4 	bl	800914c <__NVIC_DisableIRQ>
}
 8009784:	bf00      	nop
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <dcd_set_address>:

void dcd_set_address (uint8_t rhport, uint8_t dev_addr)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	4603      	mov	r3, r0
 8009794:	460a      	mov	r2, r1
 8009796:	71fb      	strb	r3, [r7, #7]
 8009798:	4613      	mov	r3, r2
 800979a:	71bb      	strb	r3, [r7, #6]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 800979c:	4b11      	ldr	r3, [pc, #68]	; (80097e4 <dcd_set_address+0x58>)
 800979e:	60fb      	str	r3, [r7, #12]
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80097a8:	79ba      	ldrb	r2, [r7, #6]
 80097aa:	0112      	lsls	r2, r2, #4
 80097ac:	431a      	orrs	r2, r3
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	601a      	str	r2, [r3, #0]
 80097b2:	2300      	movs	r3, #0
 80097b4:	72fb      	strb	r3, [r7, #11]
 80097b6:	2301      	movs	r3, #1
 80097b8:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 80097ba:	7abb      	ldrb	r3, [r7, #10]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d002      	beq.n	80097c6 <dcd_set_address+0x3a>
 80097c0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80097c4:	e000      	b.n	80097c8 <dcd_set_address+0x3c>
 80097c6:	2300      	movs	r3, #0
 80097c8:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	b25b      	sxtb	r3, r3
 80097d0:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 80097d2:	79f8      	ldrb	r0, [r7, #7]
 80097d4:	2300      	movs	r3, #0
 80097d6:	2200      	movs	r2, #0
 80097d8:	f000 f97c 	bl	8009ad4 <dcd_edpt_xfer>
}
 80097dc:	bf00      	nop
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	40040800 	.word	0x40040800

080097e8 <dcd_connect>:

  dev->DCTL &= ~USB_OTG_DCTL_RWUSIG;
}

void dcd_connect(uint8_t rhport)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	4603      	mov	r3, r0
 80097f0:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 80097f2:	4b07      	ldr	r3, [pc, #28]	; (8009810 <dcd_connect+0x28>)
 80097f4:	60fb      	str	r3, [r7, #12]
  dev->DCTL &= ~USB_OTG_DCTL_SDIS;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	f023 0202 	bic.w	r2, r3, #2
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	605a      	str	r2, [r3, #4]
}
 8009802:	bf00      	nop
 8009804:	3714      	adds	r7, #20
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	40040800 	.word	0x40040800

08009814 <dcd_edpt_open>:
/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b090      	sub	sp, #64	; 0x40
 8009818:	af00      	add	r7, sp, #0
 800981a:	4603      	mov	r3, r0
 800981c:	6039      	str	r1, [r7, #0]
 800981e:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8009820:	4b82      	ldr	r3, [pc, #520]	; (8009a2c <dcd_edpt_open+0x218>)
 8009822:	63fb      	str	r3, [r7, #60]	; 0x3c
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8009824:	4b82      	ldr	r3, [pc, #520]	; (8009a30 <dcd_edpt_open+0x21c>)
 8009826:	63bb      	str	r3, [r7, #56]	; 0x38
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8009828:	4b82      	ldr	r3, [pc, #520]	; (8009a34 <dcd_edpt_open+0x220>)
 800982a:	637b      	str	r3, [r7, #52]	; 0x34
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 800982c:	4b82      	ldr	r3, [pc, #520]	; (8009a38 <dcd_edpt_open+0x224>)
 800982e:	633b      	str	r3, [r7, #48]	; 0x30

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	789b      	ldrb	r3, [r3, #2]
 8009834:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009836:	7cbb      	ldrb	r3, [r7, #18]
 8009838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800983c:	b2db      	uxtb	r3, r3
 800983e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t const dir   = tu_edpt_dir(desc_edpt->bEndpointAddress);
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	789b      	ldrb	r3, [r3, #2]
 8009846:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009848:	7cfb      	ldrb	r3, [r7, #19]
 800984a:	09db      	lsrs	r3, r3, #7
 800984c:	b2db      	uxtb	r3, r3
 800984e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

  TU_ASSERT(epnum < EP_MAX);
 8009852:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009856:	2b08      	cmp	r3, #8
 8009858:	d90a      	bls.n	8009870 <dcd_edpt_open+0x5c>
 800985a:	4b78      	ldr	r3, [pc, #480]	; (8009a3c <dcd_edpt_open+0x228>)
 800985c:	617b      	str	r3, [r7, #20]
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 0301 	and.w	r3, r3, #1
 8009866:	2b00      	cmp	r3, #0
 8009868:	d000      	beq.n	800986c <dcd_edpt_open+0x58>
 800986a:	be00      	bkpt	0x0000
 800986c:	2300      	movs	r3, #0
 800986e:	e0d8      	b.n	8009a22 <dcd_edpt_open+0x20e>

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 8009870:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009874:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009878:	0052      	lsls	r2, r2, #1
 800987a:	4413      	add	r3, r2
 800987c:	011b      	lsls	r3, r3, #4
 800987e:	4a70      	ldr	r2, [pc, #448]	; (8009a40 <dcd_edpt_open+0x22c>)
 8009880:	4413      	add	r3, r2
 8009882:	62bb      	str	r3, [r7, #40]	; 0x28
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	889b      	ldrh	r3, [r3, #4]
 800988c:	b29b      	uxth	r3, r3
 800988e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009892:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8009894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009896:	815a      	strh	r2, [r3, #10]
  xfer->interval = desc_edpt->bInterval;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	799a      	ldrb	r2, [r3, #6]
 800989c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989e:	731a      	strb	r2, [r3, #12]

  uint16_t const fifo_size = (xfer->max_size + 3) / 4; // Round up to next full word
 80098a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a2:	895b      	ldrh	r3, [r3, #10]
 80098a4:	3303      	adds	r3, #3
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	da00      	bge.n	80098ac <dcd_edpt_open+0x98>
 80098aa:	3303      	adds	r3, #3
 80098ac:	109b      	asrs	r3, r3, #2
 80098ae:	84fb      	strh	r3, [r7, #38]	; 0x26

  if(dir == TUSB_DIR_OUT)
 80098b0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d152      	bne.n	800995e <dcd_edpt_open+0x14a>
  {
    // Calculate required size of RX FIFO
    uint16_t const sz = calc_rx_ff_size(4*fifo_size);
 80098b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	b29b      	uxth	r3, r3
 80098be:	4618      	mov	r0, r3
 80098c0:	f7ff fc68 	bl	8009194 <calc_rx_ff_size>
 80098c4:	4603      	mov	r3, r0
 80098c6:	83fb      	strh	r3, [r7, #30]

    // If size_rx needs to be extended check if possible and if so enlarge it
    if (usb_otg->GRXFSIZ < sz)
 80098c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098cc:	8bfb      	ldrh	r3, [r7, #30]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d214      	bcs.n	80098fc <dcd_edpt_open+0xe8>
    {
      TU_ASSERT(sz + _allocated_fifo_words_tx <= EP_FIFO_SIZE/4);
 80098d2:	8bfb      	ldrh	r3, [r7, #30]
 80098d4:	4a5b      	ldr	r2, [pc, #364]	; (8009a44 <dcd_edpt_open+0x230>)
 80098d6:	8812      	ldrh	r2, [r2, #0]
 80098d8:	4413      	add	r3, r2
 80098da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098de:	dd0a      	ble.n	80098f6 <dcd_edpt_open+0xe2>
 80098e0:	4b56      	ldr	r3, [pc, #344]	; (8009a3c <dcd_edpt_open+0x228>)
 80098e2:	61bb      	str	r3, [r7, #24]
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 0301 	and.w	r3, r3, #1
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d000      	beq.n	80098f2 <dcd_edpt_open+0xde>
 80098f0:	be00      	bkpt	0x0000
 80098f2:	2300      	movs	r3, #0
 80098f4:	e095      	b.n	8009a22 <dcd_edpt_open+0x20e>

      // Enlarge RX FIFO
      usb_otg->GRXFSIZ = sz;
 80098f6:	8bfa      	ldrh	r2, [r7, #30]
 80098f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098fa:	625a      	str	r2, [r3, #36]	; 0x24
    }

    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 80098fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009900:	015b      	lsls	r3, r3, #5
 8009902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009904:	4413      	add	r3, r2
 8009906:	681a      	ldr	r2, [r3, #0]
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	78db      	ldrb	r3, [r3, #3]
 800990c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009910:	b2db      	uxtb	r3, r3
 8009912:	049b      	lsls	r3, r3, #18
 8009914:	4619      	mov	r1, r3
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	78db      	ldrb	r3, [r3, #3]
 800991a:	f003 0303 	and.w	r3, r3, #3
 800991e:	b2db      	uxtb	r3, r3
 8009920:	2b01      	cmp	r3, #1
 8009922:	d002      	beq.n	800992a <dcd_edpt_open+0x116>
 8009924:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009928:	e000      	b.n	800992c <dcd_edpt_open+0x118>
 800992a:	2300      	movs	r3, #0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 800992c:	430b      	orrs	r3, r1
        (xfer->max_size << USB_OTG_DOEPCTL_MPSIZ_Pos);
 800992e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009930:	8949      	ldrh	r1, [r1, #10]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 8009932:	430b      	orrs	r3, r1
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 8009934:	431a      	orrs	r2, r3
 8009936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800993a:	015b      	lsls	r3, r3, #5
 800993c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800993e:	440b      	add	r3, r1
 8009940:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009944:	601a      	str	r2, [r3, #0]

    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_OEPM_Pos + epnum));
 8009946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009948:	69db      	ldr	r3, [r3, #28]
 800994a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800994e:	3210      	adds	r2, #16
 8009950:	2101      	movs	r1, #1
 8009952:	fa01 f202 	lsl.w	r2, r1, r2
 8009956:	431a      	orrs	r2, r3
 8009958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995a:	61da      	str	r2, [r3, #28]
 800995c:	e060      	b.n	8009a20 <dcd_edpt_open+0x20c>
    //
    // In FIFO is allocated by following rules:
    // - IN EP 1 gets FIFO 1, IN EP "n" gets FIFO "n".

    // Check if free space is available
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + usb_otg->GRXFSIZ <= EP_FIFO_SIZE/4);
 800995e:	4b39      	ldr	r3, [pc, #228]	; (8009a44 <dcd_edpt_open+0x230>)
 8009960:	881b      	ldrh	r3, [r3, #0]
 8009962:	461a      	mov	r2, r3
 8009964:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009966:	4413      	add	r3, r2
 8009968:	461a      	mov	r2, r3
 800996a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800996c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996e:	4413      	add	r3, r2
 8009970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009974:	d90a      	bls.n	800998c <dcd_edpt_open+0x178>
 8009976:	4b31      	ldr	r3, [pc, #196]	; (8009a3c <dcd_edpt_open+0x228>)
 8009978:	623b      	str	r3, [r7, #32]
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f003 0301 	and.w	r3, r3, #1
 8009982:	2b00      	cmp	r3, #0
 8009984:	d000      	beq.n	8009988 <dcd_edpt_open+0x174>
 8009986:	be00      	bkpt	0x0000
 8009988:	2300      	movs	r3, #0
 800998a:	e04a      	b.n	8009a22 <dcd_edpt_open+0x20e>

    _allocated_fifo_words_tx += fifo_size;
 800998c:	4b2d      	ldr	r3, [pc, #180]	; (8009a44 <dcd_edpt_open+0x230>)
 800998e:	881a      	ldrh	r2, [r3, #0]
 8009990:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009992:	4413      	add	r3, r2
 8009994:	b29a      	uxth	r2, r3
 8009996:	4b2b      	ldr	r3, [pc, #172]	; (8009a44 <dcd_edpt_open+0x230>)
 8009998:	801a      	strh	r2, [r3, #0]

    TU_LOG(2, "    Allocated %u bytes at offset %u", fifo_size*4, EP_FIFO_SIZE-_allocated_fifo_words_tx*4);

    // DIEPTXF starts at FIFO #1.
    // Both TXFD and TXSA are in unit of 32-bit words.
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 800999a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800999c:	041a      	lsls	r2, r3, #16
 800999e:	4b29      	ldr	r3, [pc, #164]	; (8009a44 <dcd_edpt_open+0x230>)
 80099a0:	881b      	ldrh	r3, [r3, #0]
 80099a2:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80099a6:	431a      	orrs	r2, r3
 80099a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099ac:	3b01      	subs	r3, #1
 80099ae:	4611      	mov	r1, r2
 80099b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80099b2:	3340      	adds	r3, #64	; 0x40
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4413      	add	r3, r2
 80099b8:	6059      	str	r1, [r3, #4]

    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 80099ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099be:	015b      	lsls	r3, r3, #5
 80099c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099c2:	4413      	add	r3, r2
 80099c4:	6819      	ldr	r1, [r3, #0]
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 80099c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099ca:	059b      	lsls	r3, r3, #22
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 80099cc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	78db      	ldrb	r3, [r3, #3]
 80099d4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	049b      	lsls	r3, r3, #18
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 80099dc:	4313      	orrs	r3, r2
 80099de:	461a      	mov	r2, r3
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	78db      	ldrb	r3, [r3, #3]
 80099e4:	f003 0303 	and.w	r3, r3, #3
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d002      	beq.n	80099f4 <dcd_edpt_open+0x1e0>
 80099ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80099f2:	e000      	b.n	80099f6 <dcd_edpt_open+0x1e2>
 80099f4:	2300      	movs	r3, #0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 80099f6:	4313      	orrs	r3, r2
        (xfer->max_size << USB_OTG_DIEPCTL_MPSIZ_Pos);
 80099f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099fa:	8952      	ldrh	r2, [r2, #10]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 80099fc:	431a      	orrs	r2, r3
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 80099fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a02:	015b      	lsls	r3, r3, #5
 8009a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a06:	4403      	add	r3, r0
 8009a08:	430a      	orrs	r2, r1
 8009a0a:	601a      	str	r2, [r3, #0]

    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_IEPM_Pos + epnum));
 8009a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0e:	69db      	ldr	r3, [r3, #28]
 8009a10:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009a14:	2101      	movs	r1, #1
 8009a16:	fa01 f202 	lsl.w	r2, r1, r2
 8009a1a:	431a      	orrs	r2, r3
 8009a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1e:	61da      	str	r2, [r3, #28]
  }

  return true;
 8009a20:	2301      	movs	r3, #1
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3740      	adds	r7, #64	; 0x40
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	40040000 	.word	0x40040000
 8009a30:	40040800 	.word	0x40040800
 8009a34:	40040b00 	.word	0x40040b00
 8009a38:	40040900 	.word	0x40040900
 8009a3c:	e000edf0 	.word	0xe000edf0
 8009a40:	24001b4c 	.word	0x24001b4c
 8009a44:	24001c70 	.word	0x24001c70

08009a48 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all (uint8_t rhport)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b087      	sub	sp, #28
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	4603      	mov	r3, r0
 8009a50:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

//  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8009a52:	4b1b      	ldr	r3, [pc, #108]	; (8009ac0 <dcd_edpt_close_all+0x78>)
 8009a54:	613b      	str	r3, [r7, #16]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8009a56:	4b1b      	ldr	r3, [pc, #108]	; (8009ac4 <dcd_edpt_close_all+0x7c>)
 8009a58:	60fb      	str	r3, [r7, #12]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8009a5a:	4b1b      	ldr	r3, [pc, #108]	; (8009ac8 <dcd_edpt_close_all+0x80>)
 8009a5c:	60bb      	str	r3, [r7, #8]

  // Disable non-control interrupt
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8009a64:	61da      	str	r2, [r3, #28]

  for(uint8_t n = 1; n < EP_MAX; n++)
 8009a66:	2301      	movs	r3, #1
 8009a68:	75fb      	strb	r3, [r7, #23]
 8009a6a:	e01c      	b.n	8009aa6 <dcd_edpt_close_all+0x5e>
  {
    // disable OUT endpoint
    out_ep[n].DOEPCTL = 0;
 8009a6c:	7dfb      	ldrb	r3, [r7, #23]
 8009a6e:	015b      	lsls	r3, r3, #5
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	4413      	add	r3, r2
 8009a74:	2200      	movs	r2, #0
 8009a76:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8009a78:	7dfb      	ldrb	r3, [r7, #23]
 8009a7a:	4a14      	ldr	r2, [pc, #80]	; (8009acc <dcd_edpt_close_all+0x84>)
 8009a7c:	015b      	lsls	r3, r3, #5
 8009a7e:	4413      	add	r3, r2
 8009a80:	330a      	adds	r3, #10
 8009a82:	2200      	movs	r2, #0
 8009a84:	801a      	strh	r2, [r3, #0]

    // disable IN endpoint
    in_ep[n].DIEPCTL = 0;
 8009a86:	7dfb      	ldrb	r3, [r7, #23]
 8009a88:	015b      	lsls	r3, r3, #5
 8009a8a:	68ba      	ldr	r2, [r7, #8]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	2200      	movs	r2, #0
 8009a90:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8009a92:	7dfb      	ldrb	r3, [r7, #23]
 8009a94:	4a0d      	ldr	r2, [pc, #52]	; (8009acc <dcd_edpt_close_all+0x84>)
 8009a96:	015b      	lsls	r3, r3, #5
 8009a98:	4413      	add	r3, r2
 8009a9a:	331a      	adds	r3, #26
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	801a      	strh	r2, [r3, #0]
  for(uint8_t n = 1; n < EP_MAX; n++)
 8009aa0:	7dfb      	ldrb	r3, [r7, #23]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	75fb      	strb	r3, [r7, #23]
 8009aa6:	7dfb      	ldrb	r3, [r7, #23]
 8009aa8:	2b08      	cmp	r3, #8
 8009aaa:	d9df      	bls.n	8009a6c <dcd_edpt_close_all+0x24>
  }

  // reset allocated fifo IN
  _allocated_fifo_words_tx = 16;
 8009aac:	4b08      	ldr	r3, [pc, #32]	; (8009ad0 <dcd_edpt_close_all+0x88>)
 8009aae:	2210      	movs	r2, #16
 8009ab0:	801a      	strh	r2, [r3, #0]
}
 8009ab2:	bf00      	nop
 8009ab4:	371c      	adds	r7, #28
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	40040800 	.word	0x40040800
 8009ac4:	40040b00 	.word	0x40040b00
 8009ac8:	40040900 	.word	0x40040900
 8009acc:	24001b4c 	.word	0x24001b4c
 8009ad0:	24001c70 	.word	0x24001c70

08009ad4 <dcd_edpt_xfer>:

bool dcd_edpt_xfer (uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8009ad4:	b590      	push	{r4, r7, lr}
 8009ad6:	b089      	sub	sp, #36	; 0x24
 8009ad8:	af02      	add	r7, sp, #8
 8009ada:	603a      	str	r2, [r7, #0]
 8009adc:	461a      	mov	r2, r3
 8009ade:	4603      	mov	r3, r0
 8009ae0:	71fb      	strb	r3, [r7, #7]
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	71bb      	strb	r3, [r7, #6]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	80bb      	strh	r3, [r7, #4]
 8009aea:	79bb      	ldrb	r3, [r7, #6]
 8009aec:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009aee:	7b3b      	ldrb	r3, [r7, #12]
 8009af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009af4:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009af6:	757b      	strb	r3, [r7, #21]
 8009af8:	79bb      	ldrb	r3, [r7, #6]
 8009afa:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009afc:	7b7b      	ldrb	r3, [r7, #13]
 8009afe:	09db      	lsrs	r3, r3, #7
 8009b00:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8009b02:	753b      	strb	r3, [r7, #20]

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 8009b04:	7d7a      	ldrb	r2, [r7, #21]
 8009b06:	7d3b      	ldrb	r3, [r7, #20]
 8009b08:	0052      	lsls	r2, r2, #1
 8009b0a:	4413      	add	r3, r2
 8009b0c:	011b      	lsls	r3, r3, #4
 8009b0e:	4a23      	ldr	r2, [pc, #140]	; (8009b9c <dcd_edpt_xfer+0xc8>)
 8009b10:	4413      	add	r3, r2
 8009b12:	613b      	str	r3, [r7, #16]
  xfer->buffer      = buffer;
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	683a      	ldr	r2, [r7, #0]
 8009b18:	601a      	str	r2, [r3, #0]
  xfer->ff          = NULL;
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	605a      	str	r2, [r3, #4]
  xfer->total_len   = total_bytes;
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	88ba      	ldrh	r2, [r7, #4]
 8009b24:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if(epnum == 0) {
 8009b26:	7d7b      	ldrb	r3, [r7, #21]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d111      	bne.n	8009b50 <dcd_edpt_xfer+0x7c>
    ep0_pending[dir] = total_bytes;
 8009b2c:	7d3b      	ldrb	r3, [r7, #20]
 8009b2e:	491c      	ldr	r1, [pc, #112]	; (8009ba0 <dcd_edpt_xfer+0xcc>)
 8009b30:	88ba      	ldrh	r2, [r7, #4]
 8009b32:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
 8009b36:	7d3b      	ldrb	r3, [r7, #20]
 8009b38:	4a19      	ldr	r2, [pc, #100]	; (8009ba0 <dcd_edpt_xfer+0xcc>)
 8009b3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b3e:	7d3a      	ldrb	r2, [r7, #20]
 8009b40:	7d79      	ldrb	r1, [r7, #21]
 8009b42:	79f8      	ldrb	r0, [r7, #7]
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	2301      	movs	r3, #1
 8009b48:	f7ff fcae 	bl	80094a8 <edpt_schedule_packets>
    return true;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e021      	b.n	8009b94 <dcd_edpt_xfer+0xc0>
  }

  uint16_t num_packets = (total_bytes / xfer->max_size);
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	895b      	ldrh	r3, [r3, #10]
 8009b54:	88ba      	ldrh	r2, [r7, #4]
 8009b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b5a:	82fb      	strh	r3, [r7, #22]
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	895a      	ldrh	r2, [r3, #10]
 8009b60:	88bb      	ldrh	r3, [r7, #4]
 8009b62:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b66:	fb01 f202 	mul.w	r2, r1, r2
 8009b6a:	1a9b      	subs	r3, r3, r2
 8009b6c:	81fb      	strh	r3, [r7, #14]

  // Zero-size packet is special case.
  if(short_packet_size > 0 || (total_bytes == 0)) {
 8009b6e:	89fb      	ldrh	r3, [r7, #14]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d102      	bne.n	8009b7a <dcd_edpt_xfer+0xa6>
 8009b74:	88bb      	ldrh	r3, [r7, #4]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d102      	bne.n	8009b80 <dcd_edpt_xfer+0xac>
    num_packets++;
 8009b7a:	8afb      	ldrh	r3, [r7, #22]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	82fb      	strh	r3, [r7, #22]
  }

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 8009b80:	8afc      	ldrh	r4, [r7, #22]
 8009b82:	7d3a      	ldrb	r2, [r7, #20]
 8009b84:	7d79      	ldrb	r1, [r7, #21]
 8009b86:	79f8      	ldrb	r0, [r7, #7]
 8009b88:	88bb      	ldrh	r3, [r7, #4]
 8009b8a:	9300      	str	r3, [sp, #0]
 8009b8c:	4623      	mov	r3, r4
 8009b8e:	f7ff fc8b 	bl	80094a8 <edpt_schedule_packets>

  return true;
 8009b92:	2301      	movs	r3, #1
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	371c      	adds	r7, #28
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd90      	pop	{r4, r7, pc}
 8009b9c:	24001b4c 	.word	0x24001b4c
 8009ba0:	24001c6c 	.word	0x24001c6c

08009ba4 <dcd_edpt_xfer_fifo>:
// The number of bytes has to be given explicitly to allow more flexible control of how many
// bytes should be written and second to keep the return value free to give back a boolean
// success message. If total_bytes is too big, the FIFO will copy only what is available
// into the USB buffer!
bool dcd_edpt_xfer_fifo (uint8_t rhport, uint8_t ep_addr, tu_fifo_t * ff, uint16_t total_bytes)
{
 8009ba4:	b590      	push	{r4, r7, lr}
 8009ba6:	b08b      	sub	sp, #44	; 0x2c
 8009ba8:	af02      	add	r7, sp, #8
 8009baa:	603a      	str	r2, [r7, #0]
 8009bac:	461a      	mov	r2, r3
 8009bae:	4603      	mov	r3, r0
 8009bb0:	71fb      	strb	r3, [r7, #7]
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	71bb      	strb	r3, [r7, #6]
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	80bb      	strh	r3, [r7, #4]
  // USB buffers always work in bytes so to avoid unnecessary divisions we demand item_size = 1
  TU_ASSERT(ff->item_size == 1);
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	88db      	ldrh	r3, [r3, #6]
 8009bbe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d00a      	beq.n	8009bde <dcd_edpt_xfer_fifo+0x3a>
 8009bc8:	4b27      	ldr	r3, [pc, #156]	; (8009c68 <dcd_edpt_xfer_fifo+0xc4>)
 8009bca:	613b      	str	r3, [r7, #16]
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 0301 	and.w	r3, r3, #1
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d000      	beq.n	8009bda <dcd_edpt_xfer_fifo+0x36>
 8009bd8:	be00      	bkpt	0x0000
 8009bda:	2300      	movs	r3, #0
 8009bdc:	e03f      	b.n	8009c5e <dcd_edpt_xfer_fifo+0xba>
 8009bde:	79bb      	ldrb	r3, [r7, #6]
 8009be0:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009be2:	7bbb      	ldrb	r3, [r7, #14]
 8009be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009be8:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009bea:	777b      	strb	r3, [r7, #29]
 8009bec:	79bb      	ldrb	r3, [r7, #6]
 8009bee:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009bf0:	7bfb      	ldrb	r3, [r7, #15]
 8009bf2:	09db      	lsrs	r3, r3, #7
 8009bf4:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8009bf6:	773b      	strb	r3, [r7, #28]

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 8009bf8:	7f7a      	ldrb	r2, [r7, #29]
 8009bfa:	7f3b      	ldrb	r3, [r7, #28]
 8009bfc:	0052      	lsls	r2, r2, #1
 8009bfe:	4413      	add	r3, r2
 8009c00:	011b      	lsls	r3, r3, #4
 8009c02:	4a1a      	ldr	r2, [pc, #104]	; (8009c6c <dcd_edpt_xfer_fifo+0xc8>)
 8009c04:	4413      	add	r3, r2
 8009c06:	61bb      	str	r3, [r7, #24]
  xfer->buffer      = NULL;
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	601a      	str	r2, [r3, #0]
  xfer->ff          = ff;
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	683a      	ldr	r2, [r7, #0]
 8009c12:	605a      	str	r2, [r3, #4]
  xfer->total_len   = total_bytes;
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	88ba      	ldrh	r2, [r7, #4]
 8009c18:	811a      	strh	r2, [r3, #8]

  uint16_t num_packets = (total_bytes / xfer->max_size);
 8009c1a:	69bb      	ldr	r3, [r7, #24]
 8009c1c:	895b      	ldrh	r3, [r3, #10]
 8009c1e:	88ba      	ldrh	r2, [r7, #4]
 8009c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c24:	83fb      	strh	r3, [r7, #30]
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	895a      	ldrh	r2, [r3, #10]
 8009c2a:	88bb      	ldrh	r3, [r7, #4]
 8009c2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c30:	fb01 f202 	mul.w	r2, r1, r2
 8009c34:	1a9b      	subs	r3, r3, r2
 8009c36:	82fb      	strh	r3, [r7, #22]

  // Zero-size packet is special case.
  if(short_packet_size > 0 || (total_bytes == 0)) num_packets++;
 8009c38:	8afb      	ldrh	r3, [r7, #22]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d102      	bne.n	8009c44 <dcd_edpt_xfer_fifo+0xa0>
 8009c3e:	88bb      	ldrh	r3, [r7, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d102      	bne.n	8009c4a <dcd_edpt_xfer_fifo+0xa6>
 8009c44:	8bfb      	ldrh	r3, [r7, #30]
 8009c46:	3301      	adds	r3, #1
 8009c48:	83fb      	strh	r3, [r7, #30]

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 8009c4a:	8bfc      	ldrh	r4, [r7, #30]
 8009c4c:	7f3a      	ldrb	r2, [r7, #28]
 8009c4e:	7f79      	ldrb	r1, [r7, #29]
 8009c50:	79f8      	ldrb	r0, [r7, #7]
 8009c52:	88bb      	ldrh	r3, [r7, #4]
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	4623      	mov	r3, r4
 8009c58:	f7ff fc26 	bl	80094a8 <edpt_schedule_packets>

  return true;
 8009c5c:	2301      	movs	r3, #1
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3724      	adds	r7, #36	; 0x24
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd90      	pop	{r4, r7, pc}
 8009c66:	bf00      	nop
 8009c68:	e000edf0 	.word	0xe000edf0
 8009c6c:	24001b4c 	.word	0x24001b4c

08009c70 <dcd_edpt_disable>:

static void dcd_edpt_disable (uint8_t rhport, uint8_t ep_addr, bool stall)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b089      	sub	sp, #36	; 0x24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	4603      	mov	r3, r0
 8009c78:	71fb      	strb	r3, [r7, #7]
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	71bb      	strb	r3, [r7, #6]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	717b      	strb	r3, [r7, #5]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8009c82:	4b6d      	ldr	r3, [pc, #436]	; (8009e38 <dcd_edpt_disable+0x1c8>)
 8009c84:	61fb      	str	r3, [r7, #28]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8009c86:	4b6d      	ldr	r3, [pc, #436]	; (8009e3c <dcd_edpt_disable+0x1cc>)
 8009c88:	61bb      	str	r3, [r7, #24]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8009c8a:	4b6d      	ldr	r3, [pc, #436]	; (8009e40 <dcd_edpt_disable+0x1d0>)
 8009c8c:	617b      	str	r3, [r7, #20]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8009c8e:	4b6d      	ldr	r3, [pc, #436]	; (8009e44 <dcd_edpt_disable+0x1d4>)
 8009c90:	613b      	str	r3, [r7, #16]
 8009c92:	79bb      	ldrb	r3, [r7, #6]
 8009c94:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009c96:	7b3b      	ldrb	r3, [r7, #12]
 8009c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c9c:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009c9e:	73fb      	strb	r3, [r7, #15]
 8009ca0:	79bb      	ldrb	r3, [r7, #6]
 8009ca2:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009ca4:	7b7b      	ldrb	r3, [r7, #13]
 8009ca6:	09db      	lsrs	r3, r3, #7
 8009ca8:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8009caa:	73bb      	strb	r3, [r7, #14]

  if(dir == TUSB_DIR_IN) {
 8009cac:	7bbb      	ldrb	r3, [r7, #14]
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d16a      	bne.n	8009d88 <dcd_edpt_disable+0x118>
    // Only disable currently enabled non-control endpoint
    if ( (epnum == 0) || !(in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPENA) ){
 8009cb2:	7bfb      	ldrb	r3, [r7, #15]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d006      	beq.n	8009cc6 <dcd_edpt_disable+0x56>
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
 8009cba:	015b      	lsls	r3, r3, #5
 8009cbc:	693a      	ldr	r2, [r7, #16]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	db13      	blt.n	8009cee <dcd_edpt_disable+0x7e>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 8009cc6:	7bfb      	ldrb	r3, [r7, #15]
 8009cc8:	015b      	lsls	r3, r3, #5
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	4413      	add	r3, r2
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	797b      	ldrb	r3, [r7, #5]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d002      	beq.n	8009cdc <dcd_edpt_disable+0x6c>
 8009cd6:	f04f 6102 	mov.w	r1, #136314880	; 0x8200000
 8009cda:	e001      	b.n	8009ce0 <dcd_edpt_disable+0x70>
 8009cdc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8009ce0:	7bfb      	ldrb	r3, [r7, #15]
 8009ce2:	015b      	lsls	r3, r3, #5
 8009ce4:	6938      	ldr	r0, [r7, #16]
 8009ce6:	4403      	add	r3, r0
 8009ce8:	430a      	orrs	r2, r1
 8009cea:	601a      	str	r2, [r3, #0]
 8009cec:	e037      	b.n	8009d5e <dcd_edpt_disable+0xee>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009cee:	7bfb      	ldrb	r3, [r7, #15]
 8009cf0:	015b      	lsls	r3, r3, #5
 8009cf2:	693a      	ldr	r2, [r7, #16]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	7bfb      	ldrb	r3, [r7, #15]
 8009cfa:	015b      	lsls	r3, r3, #5
 8009cfc:	6939      	ldr	r1, [r7, #16]
 8009cfe:	440b      	add	r3, r1
 8009d00:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8009d04:	601a      	str	r2, [r3, #0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_INEPNE) == 0);
 8009d06:	bf00      	nop
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
 8009d0a:	015b      	lsls	r3, r3, #5
 8009d0c:	693a      	ldr	r2, [r7, #16]
 8009d0e:	4413      	add	r3, r2
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d0f6      	beq.n	8009d08 <dcd_edpt_disable+0x98>

      // Disable the endpoint.
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPDIS | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 8009d1a:	7bfb      	ldrb	r3, [r7, #15]
 8009d1c:	015b      	lsls	r3, r3, #5
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	4413      	add	r3, r2
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	797b      	ldrb	r3, [r7, #5]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d001      	beq.n	8009d2e <dcd_edpt_disable+0xbe>
 8009d2a:	4947      	ldr	r1, [pc, #284]	; (8009e48 <dcd_edpt_disable+0x1d8>)
 8009d2c:	e001      	b.n	8009d32 <dcd_edpt_disable+0xc2>
 8009d2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
 8009d34:	015b      	lsls	r3, r3, #5
 8009d36:	6938      	ldr	r0, [r7, #16]
 8009d38:	4403      	add	r3, r0
 8009d3a:	430a      	orrs	r2, r1
 8009d3c:	601a      	str	r2, [r3, #0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_EPDISD_Msk) == 0);
 8009d3e:	bf00      	nop
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
 8009d42:	015b      	lsls	r3, r3, #5
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	4413      	add	r3, r2
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	f003 0302 	and.w	r3, r3, #2
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d0f6      	beq.n	8009d40 <dcd_edpt_disable+0xd0>
      in_ep[epnum].DIEPINT = USB_OTG_DIEPINT_EPDISD;
 8009d52:	7bfb      	ldrb	r3, [r7, #15]
 8009d54:	015b      	lsls	r3, r3, #5
 8009d56:	693a      	ldr	r2, [r7, #16]
 8009d58:	4413      	add	r3, r2
 8009d5a:	2202      	movs	r2, #2
 8009d5c:	609a      	str	r2, [r3, #8]
    }

    // Flush the FIFO, and wait until we have confirmed it cleared.
    usb_otg->GRSTCTL |= (epnum << USB_OTG_GRSTCTL_TXFNUM_Pos);
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	7bfa      	ldrb	r2, [r7, #15]
 8009d64:	0192      	lsls	r2, r2, #6
 8009d66:	431a      	orrs	r2, r3
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	611a      	str	r2, [r3, #16]
    usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	691b      	ldr	r3, [r3, #16]
 8009d70:	f043 0220 	orr.w	r2, r3, #32
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	611a      	str	r2, [r3, #16]
    while((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH_Msk) != 0);
 8009d78:	bf00      	nop
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	f003 0320 	and.w	r3, r3, #32
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1f9      	bne.n	8009d7a <dcd_edpt_disable+0x10a>

      // Allow other OUT endpoints to keep receiving.
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
    }
  }
}
 8009d86:	e051      	b.n	8009e2c <dcd_edpt_disable+0x1bc>
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d006      	beq.n	8009d9c <dcd_edpt_disable+0x12c>
 8009d8e:	7bfb      	ldrb	r3, [r7, #15]
 8009d90:	015b      	lsls	r3, r3, #5
 8009d92:	697a      	ldr	r2, [r7, #20]
 8009d94:	4413      	add	r3, r2
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	db12      	blt.n	8009dc2 <dcd_edpt_disable+0x152>
      out_ep[epnum].DOEPCTL |= stall ? USB_OTG_DOEPCTL_STALL : 0;
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
 8009d9e:	015b      	lsls	r3, r3, #5
 8009da0:	697a      	ldr	r2, [r7, #20]
 8009da2:	4413      	add	r3, r2
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	797b      	ldrb	r3, [r7, #5]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d002      	beq.n	8009db2 <dcd_edpt_disable+0x142>
 8009dac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009db0:	e000      	b.n	8009db4 <dcd_edpt_disable+0x144>
 8009db2:	2100      	movs	r1, #0
 8009db4:	7bfb      	ldrb	r3, [r7, #15]
 8009db6:	015b      	lsls	r3, r3, #5
 8009db8:	6978      	ldr	r0, [r7, #20]
 8009dba:	4403      	add	r3, r0
 8009dbc:	430a      	orrs	r2, r1
 8009dbe:	601a      	str	r2, [r3, #0]
}
 8009dc0:	e034      	b.n	8009e2c <dcd_edpt_disable+0x1bc>
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	605a      	str	r2, [r3, #4]
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 8009dce:	bf00      	nop
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	695b      	ldr	r3, [r3, #20]
 8009dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d0f9      	beq.n	8009dd0 <dcd_edpt_disable+0x160>
      out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPDIS | (stall ? USB_OTG_DOEPCTL_STALL : 0);
 8009ddc:	7bfb      	ldrb	r3, [r7, #15]
 8009dde:	015b      	lsls	r3, r3, #5
 8009de0:	697a      	ldr	r2, [r7, #20]
 8009de2:	4413      	add	r3, r2
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	797b      	ldrb	r3, [r7, #5]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d001      	beq.n	8009df0 <dcd_edpt_disable+0x180>
 8009dec:	4916      	ldr	r1, [pc, #88]	; (8009e48 <dcd_edpt_disable+0x1d8>)
 8009dee:	e001      	b.n	8009df4 <dcd_edpt_disable+0x184>
 8009df0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009df4:	7bfb      	ldrb	r3, [r7, #15]
 8009df6:	015b      	lsls	r3, r3, #5
 8009df8:	6978      	ldr	r0, [r7, #20]
 8009dfa:	4403      	add	r3, r0
 8009dfc:	430a      	orrs	r2, r1
 8009dfe:	601a      	str	r2, [r3, #0]
      while((out_ep[epnum].DOEPINT & USB_OTG_DOEPINT_EPDISD_Msk) == 0);
 8009e00:	bf00      	nop
 8009e02:	7bfb      	ldrb	r3, [r7, #15]
 8009e04:	015b      	lsls	r3, r3, #5
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	4413      	add	r3, r2
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	f003 0302 	and.w	r3, r3, #2
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d0f6      	beq.n	8009e02 <dcd_edpt_disable+0x192>
      out_ep[epnum].DOEPINT = USB_OTG_DOEPINT_EPDISD;
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
 8009e16:	015b      	lsls	r3, r3, #5
 8009e18:	697a      	ldr	r2, [r7, #20]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	2202      	movs	r2, #2
 8009e1e:	609a      	str	r2, [r3, #8]
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	605a      	str	r2, [r3, #4]
}
 8009e2c:	bf00      	nop
 8009e2e:	3724      	adds	r7, #36	; 0x24
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr
 8009e38:	40040000 	.word	0x40040000
 8009e3c:	40040800 	.word	0x40040800
 8009e40:	40040b00 	.word	0x40040b00
 8009e44:	40040900 	.word	0x40040900
 8009e48:	40200000 	.word	0x40200000

08009e4c <dcd_edpt_close>:

/**
 * Close an endpoint.
 */
void dcd_edpt_close (uint8_t rhport, uint8_t ep_addr)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b088      	sub	sp, #32
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	4603      	mov	r3, r0
 8009e54:	460a      	mov	r2, r1
 8009e56:	71fb      	strb	r3, [r7, #7]
 8009e58:	4613      	mov	r3, r2
 8009e5a:	71bb      	strb	r3, [r7, #6]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8009e5c:	4b29      	ldr	r3, [pc, #164]	; (8009f04 <dcd_edpt_close+0xb8>)
 8009e5e:	61fb      	str	r3, [r7, #28]
 8009e60:	79bb      	ldrb	r3, [r7, #6]
 8009e62:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
 8009e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e6a:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009e6c:	76fb      	strb	r3, [r7, #27]
 8009e6e:	79bb      	ldrb	r3, [r7, #6]
 8009e70:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009e72:	7bfb      	ldrb	r3, [r7, #15]
 8009e74:	09db      	lsrs	r3, r3, #7
 8009e76:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8009e78:	76bb      	strb	r3, [r7, #26]

  dcd_edpt_disable(rhport, ep_addr, false);
 8009e7a:	79b9      	ldrb	r1, [r7, #6]
 8009e7c:	79fb      	ldrb	r3, [r7, #7]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7ff fef5 	bl	8009c70 <dcd_edpt_disable>

  // Update max_size
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 8009e86:	7efa      	ldrb	r2, [r7, #27]
 8009e88:	7ebb      	ldrb	r3, [r7, #26]
 8009e8a:	491f      	ldr	r1, [pc, #124]	; (8009f08 <dcd_edpt_close+0xbc>)
 8009e8c:	0052      	lsls	r2, r2, #1
 8009e8e:	4413      	add	r3, r2
 8009e90:	011b      	lsls	r3, r3, #4
 8009e92:	440b      	add	r3, r1
 8009e94:	330a      	adds	r3, #10
 8009e96:	2200      	movs	r2, #0
 8009e98:	801a      	strh	r2, [r3, #0]

  if (dir == TUSB_DIR_IN)
 8009e9a:	7ebb      	ldrb	r3, [r7, #26]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d129      	bne.n	8009ef4 <dcd_edpt_close+0xa8>
  {
    uint16_t const fifo_size = (usb_otg->DIEPTXF[epnum - 1] & USB_OTG_DIEPTXF_INEPTXFD_Msk) >> USB_OTG_DIEPTXF_INEPTXFD_Pos;
 8009ea0:	7efb      	ldrb	r3, [r7, #27]
 8009ea2:	3b01      	subs	r3, #1
 8009ea4:	69fa      	ldr	r2, [r7, #28]
 8009ea6:	3340      	adds	r3, #64	; 0x40
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	4413      	add	r3, r2
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	0c1b      	lsrs	r3, r3, #16
 8009eb0:	833b      	strh	r3, [r7, #24]
    uint16_t const fifo_start = (usb_otg->DIEPTXF[epnum - 1] & USB_OTG_DIEPTXF_INEPTXSA_Msk) >> USB_OTG_DIEPTXF_INEPTXSA_Pos;
 8009eb2:	7efb      	ldrb	r3, [r7, #27]
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	69fa      	ldr	r2, [r7, #28]
 8009eb8:	3340      	adds	r3, #64	; 0x40
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4413      	add	r3, r2
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	82fb      	strh	r3, [r7, #22]
    // For now only the last opened endpoint can be closed without fuss.
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
 8009ec2:	8afa      	ldrh	r2, [r7, #22]
 8009ec4:	4b11      	ldr	r3, [pc, #68]	; (8009f0c <dcd_edpt_close+0xc0>)
 8009ec6:	881b      	ldrh	r3, [r3, #0]
 8009ec8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d009      	beq.n	8009ee4 <dcd_edpt_close+0x98>
 8009ed0:	4b0f      	ldr	r3, [pc, #60]	; (8009f10 <dcd_edpt_close+0xc4>)
 8009ed2:	613b      	str	r3, [r7, #16]
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f003 0301 	and.w	r3, r3, #1
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00d      	beq.n	8009efc <dcd_edpt_close+0xb0>
 8009ee0:	be00      	bkpt	0x0000
 8009ee2:	e00b      	b.n	8009efc <dcd_edpt_close+0xb0>
    _allocated_fifo_words_tx -= fifo_size;
 8009ee4:	4b09      	ldr	r3, [pc, #36]	; (8009f0c <dcd_edpt_close+0xc0>)
 8009ee6:	881a      	ldrh	r2, [r3, #0]
 8009ee8:	8b3b      	ldrh	r3, [r7, #24]
 8009eea:	1ad3      	subs	r3, r2, r3
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	4b07      	ldr	r3, [pc, #28]	; (8009f0c <dcd_edpt_close+0xc0>)
 8009ef0:	801a      	strh	r2, [r3, #0]
 8009ef2:	e004      	b.n	8009efe <dcd_edpt_close+0xb2>
  }
  else
  {
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
 8009ef4:	4b07      	ldr	r3, [pc, #28]	; (8009f14 <dcd_edpt_close+0xc8>)
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	701a      	strb	r2, [r3, #0]
 8009efa:	e000      	b.n	8009efe <dcd_edpt_close+0xb2>
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
 8009efc:	bf00      	nop
  }
}
 8009efe:	3720      	adds	r7, #32
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	40040000 	.word	0x40040000
 8009f08:	24001b4c 	.word	0x24001b4c
 8009f0c:	24001c70 	.word	0x24001c70
 8009f10:	e000edf0 	.word	0xe000edf0
 8009f14:	24001c72 	.word	0x24001c72

08009f18 <dcd_edpt_stall>:

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	4603      	mov	r3, r0
 8009f20:	460a      	mov	r2, r1
 8009f22:	71fb      	strb	r3, [r7, #7]
 8009f24:	4613      	mov	r3, r2
 8009f26:	71bb      	strb	r3, [r7, #6]
  dcd_edpt_disable(rhport, ep_addr, true);
 8009f28:	79b9      	ldrb	r1, [r7, #6]
 8009f2a:	79fb      	ldrb	r3, [r7, #7]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7ff fe9e 	bl	8009c70 <dcd_edpt_disable>
}
 8009f34:	bf00      	nop
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b087      	sub	sp, #28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	4603      	mov	r3, r0
 8009f44:	460a      	mov	r2, r1
 8009f46:	71fb      	strb	r3, [r7, #7]
 8009f48:	4613      	mov	r3, r2
 8009f4a:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8009f4c:	4b25      	ldr	r3, [pc, #148]	; (8009fe4 <dcd_edpt_clear_stall+0xa8>)
 8009f4e:	617b      	str	r3, [r7, #20]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8009f50:	4b25      	ldr	r3, [pc, #148]	; (8009fe8 <dcd_edpt_clear_stall+0xac>)
 8009f52:	613b      	str	r3, [r7, #16]
 8009f54:	79bb      	ldrb	r3, [r7, #6]
 8009f56:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009f58:	7b3b      	ldrb	r3, [r7, #12]
 8009f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f5e:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009f60:	73fb      	strb	r3, [r7, #15]
 8009f62:	79bb      	ldrb	r3, [r7, #6]
 8009f64:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009f66:	7b7b      	ldrb	r3, [r7, #13]
 8009f68:	09db      	lsrs	r3, r3, #7
 8009f6a:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8009f6c:	73bb      	strb	r3, [r7, #14]

  // Clear stall and reset data toggle
  if(dir == TUSB_DIR_IN) {
 8009f6e:	7bbb      	ldrb	r3, [r7, #14]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d118      	bne.n	8009fa6 <dcd_edpt_clear_stall+0x6a>
    in_ep[epnum].DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009f74:	7bfb      	ldrb	r3, [r7, #15]
 8009f76:	015b      	lsls	r3, r3, #5
 8009f78:	693a      	ldr	r2, [r7, #16]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	7bfb      	ldrb	r3, [r7, #15]
 8009f80:	015b      	lsls	r3, r3, #5
 8009f82:	6939      	ldr	r1, [r7, #16]
 8009f84:	440b      	add	r3, r1
 8009f86:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8009f8a:	601a      	str	r2, [r3, #0]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009f8c:	7bfb      	ldrb	r3, [r7, #15]
 8009f8e:	015b      	lsls	r3, r3, #5
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	4413      	add	r3, r2
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
 8009f98:	015b      	lsls	r3, r3, #5
 8009f9a:	6939      	ldr	r1, [r7, #16]
 8009f9c:	440b      	add	r3, r1
 8009f9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009fa2:	601a      	str	r2, [r3, #0]
  } else {
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
  }
}
 8009fa4:	e017      	b.n	8009fd6 <dcd_edpt_clear_stall+0x9a>
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009fa6:	7bfb      	ldrb	r3, [r7, #15]
 8009fa8:	015b      	lsls	r3, r3, #5
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	4413      	add	r3, r2
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	7bfb      	ldrb	r3, [r7, #15]
 8009fb2:	015b      	lsls	r3, r3, #5
 8009fb4:	6979      	ldr	r1, [r7, #20]
 8009fb6:	440b      	add	r3, r1
 8009fb8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8009fbc:	601a      	str	r2, [r3, #0]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009fbe:	7bfb      	ldrb	r3, [r7, #15]
 8009fc0:	015b      	lsls	r3, r3, #5
 8009fc2:	697a      	ldr	r2, [r7, #20]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
 8009fca:	015b      	lsls	r3, r3, #5
 8009fcc:	6979      	ldr	r1, [r7, #20]
 8009fce:	440b      	add	r3, r1
 8009fd0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009fd4:	601a      	str	r2, [r3, #0]
}
 8009fd6:	bf00      	nop
 8009fd8:	371c      	adds	r7, #28
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	40040b00 	.word	0x40040b00
 8009fe8:	40040900 	.word	0x40040900

08009fec <read_fifo_packet>:

/*------------------------------------------------------------------*/

// Read a single data packet from receive FIFO
static void read_fifo_packet(uint8_t rhport, uint8_t * dst, uint16_t len)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b089      	sub	sp, #36	; 0x24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	6039      	str	r1, [r7, #0]
 8009ff6:	71fb      	strb	r3, [r7, #7]
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  usb_fifo_t rx_fifo = FIFO_BASE(rhport, 0);
 8009ffc:	4b28      	ldr	r3, [pc, #160]	; (800a0a0 <read_fifo_packet+0xb4>)
 8009ffe:	61bb      	str	r3, [r7, #24]

  // Reading full available 32 bit words from fifo
  uint16_t full_words = len >> 2;
 800a000:	88bb      	ldrh	r3, [r7, #4]
 800a002:	089b      	lsrs	r3, r3, #2
 800a004:	82fb      	strh	r3, [r7, #22]
  for(uint16_t i = 0; i < full_words; i++) {
 800a006:	2300      	movs	r3, #0
 800a008:	83fb      	strh	r3, [r7, #30]
 800a00a:	e01e      	b.n	800a04a <read_fifo_packet+0x5e>
    uint32_t tmp = *rx_fifo;
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	60fb      	str	r3, [r7, #12]
    dst[0] = tmp & 0x000000FF;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	b2da      	uxtb	r2, r3
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	701a      	strb	r2, [r3, #0]
    dst[1] = (tmp & 0x0000FF00) >> 8;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	0a1a      	lsrs	r2, r3, #8
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	3301      	adds	r3, #1
 800a022:	b2d2      	uxtb	r2, r2
 800a024:	701a      	strb	r2, [r3, #0]
    dst[2] = (tmp & 0x00FF0000) >> 16;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	0c1a      	lsrs	r2, r3, #16
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	3302      	adds	r3, #2
 800a02e:	b2d2      	uxtb	r2, r2
 800a030:	701a      	strb	r2, [r3, #0]
    dst[3] = (tmp & 0xFF000000) >> 24;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	0e1a      	lsrs	r2, r3, #24
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	3303      	adds	r3, #3
 800a03a:	b2d2      	uxtb	r2, r2
 800a03c:	701a      	strb	r2, [r3, #0]
    dst += 4;
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	3304      	adds	r3, #4
 800a042:	603b      	str	r3, [r7, #0]
  for(uint16_t i = 0; i < full_words; i++) {
 800a044:	8bfb      	ldrh	r3, [r7, #30]
 800a046:	3301      	adds	r3, #1
 800a048:	83fb      	strh	r3, [r7, #30]
 800a04a:	8bfa      	ldrh	r2, [r7, #30]
 800a04c:	8afb      	ldrh	r3, [r7, #22]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d3dc      	bcc.n	800a00c <read_fifo_packet+0x20>
  }

  // Read the remaining 1-3 bytes from fifo
  uint8_t bytes_rem = len & 0x03;
 800a052:	88bb      	ldrh	r3, [r7, #4]
 800a054:	b2db      	uxtb	r3, r3
 800a056:	f003 0303 	and.w	r3, r3, #3
 800a05a:	757b      	strb	r3, [r7, #21]
  if(bytes_rem != 0) {
 800a05c:	7d7b      	ldrb	r3, [r7, #21]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d018      	beq.n	800a094 <read_fifo_packet+0xa8>
    uint32_t tmp = *rx_fifo;
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	613b      	str	r3, [r7, #16]
    dst[0] = tmp & 0x000000FF;
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	b2da      	uxtb	r2, r3
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	701a      	strb	r2, [r3, #0]
    if(bytes_rem > 1) {
 800a070:	7d7b      	ldrb	r3, [r7, #21]
 800a072:	2b01      	cmp	r3, #1
 800a074:	d905      	bls.n	800a082 <read_fifo_packet+0x96>
      dst[1] = (tmp & 0x0000FF00) >> 8;
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	0a1a      	lsrs	r2, r3, #8
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	3301      	adds	r3, #1
 800a07e:	b2d2      	uxtb	r2, r2
 800a080:	701a      	strb	r2, [r3, #0]
    }
    if(bytes_rem > 2) {
 800a082:	7d7b      	ldrb	r3, [r7, #21]
 800a084:	2b02      	cmp	r3, #2
 800a086:	d905      	bls.n	800a094 <read_fifo_packet+0xa8>
      dst[2] = (tmp & 0x00FF0000) >> 16;
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	0c1a      	lsrs	r2, r3, #16
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	3302      	adds	r3, #2
 800a090:	b2d2      	uxtb	r2, r2
 800a092:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800a094:	bf00      	nop
 800a096:	3724      	adds	r7, #36	; 0x24
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr
 800a0a0:	40041000 	.word	0x40041000

0800a0a4 <write_fifo_packet>:

// Write a single data packet to EPIN FIFO
static void write_fifo_packet(uint8_t rhport, uint8_t fifo_num, uint8_t * src, uint16_t len)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	603a      	str	r2, [r7, #0]
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	71fb      	strb	r3, [r7, #7]
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	71bb      	strb	r3, [r7, #6]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  usb_fifo_t tx_fifo = FIFO_BASE(rhport, fifo_num);
 800a0ba:	79ba      	ldrb	r2, [r7, #6]
 800a0bc:	4b2b      	ldr	r3, [pc, #172]	; (800a16c <write_fifo_packet+0xc8>)
 800a0be:	4413      	add	r3, r2
 800a0c0:	031b      	lsls	r3, r3, #12
 800a0c2:	60fb      	str	r3, [r7, #12]

  // Pushing full available 32 bit words to fifo
  uint16_t full_words = len >> 2;
 800a0c4:	88bb      	ldrh	r3, [r7, #4]
 800a0c6:	089b      	lsrs	r3, r3, #2
 800a0c8:	817b      	strh	r3, [r7, #10]
  for(uint16_t i = 0; i < full_words; i++){
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	82fb      	strh	r3, [r7, #22]
 800a0ce:	e019      	b.n	800a104 <write_fifo_packet+0x60>
    *tx_fifo = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	3303      	adds	r3, #3
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	061a      	lsls	r2, r3, #24
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	3302      	adds	r3, #2
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	041b      	lsls	r3, r3, #16
 800a0e0:	431a      	orrs	r2, r3
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	021b      	lsls	r3, r3, #8
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	683a      	ldr	r2, [r7, #0]
 800a0ee:	7812      	ldrb	r2, [r2, #0]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	601a      	str	r2, [r3, #0]
    src += 4;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	3304      	adds	r3, #4
 800a0fc:	603b      	str	r3, [r7, #0]
  for(uint16_t i = 0; i < full_words; i++){
 800a0fe:	8afb      	ldrh	r3, [r7, #22]
 800a100:	3301      	adds	r3, #1
 800a102:	82fb      	strh	r3, [r7, #22]
 800a104:	8afa      	ldrh	r2, [r7, #22]
 800a106:	897b      	ldrh	r3, [r7, #10]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d3e1      	bcc.n	800a0d0 <write_fifo_packet+0x2c>
  }

  // Write the remaining 1-3 bytes into fifo
  uint8_t bytes_rem = len & 0x03;
 800a10c:	88bb      	ldrh	r3, [r7, #4]
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	f003 0303 	and.w	r3, r3, #3
 800a114:	727b      	strb	r3, [r7, #9]
  if(bytes_rem){
 800a116:	7a7b      	ldrb	r3, [r7, #9]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d020      	beq.n	800a15e <write_fifo_packet+0xba>
    uint32_t tmp_word = 0;
 800a11c:	2300      	movs	r3, #0
 800a11e:	613b      	str	r3, [r7, #16]
    tmp_word |= src[0];
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	461a      	mov	r2, r3
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	4313      	orrs	r3, r2
 800a12a:	613b      	str	r3, [r7, #16]
    if(bytes_rem > 1){
 800a12c:	7a7b      	ldrb	r3, [r7, #9]
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d907      	bls.n	800a142 <write_fifo_packet+0x9e>
      tmp_word |= src[1] << 8;
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	3301      	adds	r3, #1
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	021b      	lsls	r3, r3, #8
 800a13a:	461a      	mov	r2, r3
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	4313      	orrs	r3, r2
 800a140:	613b      	str	r3, [r7, #16]
    }
    if(bytes_rem > 2){
 800a142:	7a7b      	ldrb	r3, [r7, #9]
 800a144:	2b02      	cmp	r3, #2
 800a146:	d907      	bls.n	800a158 <write_fifo_packet+0xb4>
      tmp_word |= src[2] << 16;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	3302      	adds	r3, #2
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	041b      	lsls	r3, r3, #16
 800a150:	461a      	mov	r2, r3
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	4313      	orrs	r3, r2
 800a156:	613b      	str	r3, [r7, #16]
    }
    *tx_fifo = tmp_word;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	601a      	str	r2, [r3, #0]
  }
}
 800a15e:	bf00      	nop
 800a160:	371c      	adds	r7, #28
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	00040041 	.word	0x00040041

0800a170 <handle_rxflvl_ints>:

static void handle_rxflvl_ints(uint8_t rhport, USB_OTG_OUTEndpointTypeDef * out_ep) {
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af00      	add	r7, sp, #0
 800a176:	4603      	mov	r3, r0
 800a178:	6039      	str	r1, [r7, #0]
 800a17a:	71fb      	strb	r3, [r7, #7]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 800a17c:	4b4a      	ldr	r3, [pc, #296]	; (800a2a8 <handle_rxflvl_ints+0x138>)
 800a17e:	61fb      	str	r3, [r7, #28]
  usb_fifo_t rx_fifo = FIFO_BASE(rhport, 0);
 800a180:	4b4a      	ldr	r3, [pc, #296]	; (800a2ac <handle_rxflvl_ints+0x13c>)
 800a182:	61bb      	str	r3, [r7, #24]

  // Pop control word off FIFO
  uint32_t ctl_word = usb_otg->GRXSTSP;
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	6a1b      	ldr	r3, [r3, #32]
 800a188:	617b      	str	r3, [r7, #20]
  uint8_t pktsts = (ctl_word & USB_OTG_GRXSTSP_PKTSTS_Msk) >> USB_OTG_GRXSTSP_PKTSTS_Pos;
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	0c5b      	lsrs	r3, r3, #17
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	f003 030f 	and.w	r3, r3, #15
 800a194:	74fb      	strb	r3, [r7, #19]
  uint8_t epnum = (ctl_word &  USB_OTG_GRXSTSP_EPNUM_Msk) >>  USB_OTG_GRXSTSP_EPNUM_Pos;
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	f003 030f 	and.w	r3, r3, #15
 800a19e:	74bb      	strb	r3, [r7, #18]
  uint16_t bcnt = (ctl_word & USB_OTG_GRXSTSP_BCNT_Msk) >> USB_OTG_GRXSTSP_BCNT_Pos;
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	091b      	lsrs	r3, r3, #4
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a1aa:	823b      	strh	r3, [r7, #16]

  switch(pktsts) {
 800a1ac:	7cfb      	ldrb	r3, [r7, #19]
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	2b05      	cmp	r3, #5
 800a1b2:	d865      	bhi.n	800a280 <handle_rxflvl_ints+0x110>
 800a1b4:	a201      	add	r2, pc, #4	; (adr r2, 800a1bc <handle_rxflvl_ints+0x4c>)
 800a1b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ba:	bf00      	nop
 800a1bc:	0800a295 	.word	0x0800a295
 800a1c0:	0800a1d5 	.word	0x0800a1d5
 800a1c4:	0800a295 	.word	0x0800a295
 800a1c8:	0800a255 	.word	0x0800a255
 800a1cc:	0800a281 	.word	0x0800a281
 800a1d0:	0800a26f 	.word	0x0800a26f
    case 0x01: // Global OUT NAK (Interrupt)
      break;

    case 0x02: // Out packet recvd
    {
      xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800a1d4:	7cbb      	ldrb	r3, [r7, #18]
 800a1d6:	015b      	lsls	r3, r3, #5
 800a1d8:	4a35      	ldr	r2, [pc, #212]	; (800a2b0 <handle_rxflvl_ints+0x140>)
 800a1da:	4413      	add	r3, r2
 800a1dc:	60fb      	str	r3, [r7, #12]

      // Read packet off RxFIFO
      if (xfer->ff)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d007      	beq.n	800a1f6 <handle_rxflvl_ints+0x86>
      {
        // Ring buffer
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void *)(uintptr_t) rx_fifo, bcnt);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	8a3a      	ldrh	r2, [r7, #16]
 800a1ec:	69b9      	ldr	r1, [r7, #24]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fd f93c 	bl	800746c <tu_fifo_write_n_const_addr_full_words>
 800a1f4:	e00c      	b.n	800a210 <handle_rxflvl_ints+0xa0>
      }
      else
      {
        // Linear buffer
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6819      	ldr	r1, [r3, #0]
 800a1fa:	8a3a      	ldrh	r2, [r7, #16]
 800a1fc:	79fb      	ldrb	r3, [r7, #7]
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7ff fef4 	bl	8009fec <read_fifo_packet>

        // Increment pointer to xfer data
        xfer->buffer += bcnt;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	8a3b      	ldrh	r3, [r7, #16]
 800a20a:	441a      	add	r2, r3
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	601a      	str	r2, [r3, #0]
      }

      // Truncate transfer length in case of short packet
      if(bcnt < xfer->max_size) {
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	895b      	ldrh	r3, [r3, #10]
 800a214:	8a3a      	ldrh	r2, [r7, #16]
 800a216:	429a      	cmp	r2, r3
 800a218:	d23e      	bcs.n	800a298 <handle_rxflvl_ints+0x128>
        xfer->total_len -= (out_ep[epnum].DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DOEPTSIZ_XFRSIZ_Pos;
 800a21a:	7cbb      	ldrb	r3, [r7, #18]
 800a21c:	015b      	lsls	r3, r3, #5
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	4413      	add	r3, r2
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	f3c3 0112 	ubfx	r1, r3, #0, #19
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	891a      	ldrh	r2, [r3, #8]
 800a22c:	b28b      	uxth	r3, r1
 800a22e:	1ad3      	subs	r3, r2, r3
 800a230:	b29a      	uxth	r2, r3
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	811a      	strh	r2, [r3, #8]
        if(epnum == 0) {
 800a236:	7cbb      	ldrb	r3, [r7, #18]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d12d      	bne.n	800a298 <handle_rxflvl_ints+0x128>
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	891a      	ldrh	r2, [r3, #8]
 800a240:	4b1c      	ldr	r3, [pc, #112]	; (800a2b4 <handle_rxflvl_ints+0x144>)
 800a242:	881b      	ldrh	r3, [r3, #0]
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	b29a      	uxth	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 800a24c:	4b19      	ldr	r3, [pc, #100]	; (800a2b4 <handle_rxflvl_ints+0x144>)
 800a24e:	2200      	movs	r2, #0
 800a250:	801a      	strh	r2, [r3, #0]
        }
      }
    }
    break;
 800a252:	e021      	b.n	800a298 <handle_rxflvl_ints+0x128>

    case 0x03: // Out packet done (Interrupt)
      break;

    case 0x04: // Setup packet done (Interrupt)
      out_ep[epnum].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 800a254:	7cbb      	ldrb	r3, [r7, #18]
 800a256:	015b      	lsls	r3, r3, #5
 800a258:	683a      	ldr	r2, [r7, #0]
 800a25a:	4413      	add	r3, r2
 800a25c:	691a      	ldr	r2, [r3, #16]
 800a25e:	7cbb      	ldrb	r3, [r7, #18]
 800a260:	015b      	lsls	r3, r3, #5
 800a262:	6839      	ldr	r1, [r7, #0]
 800a264:	440b      	add	r3, r1
 800a266:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 800a26a:	611a      	str	r2, [r3, #16]
      break;
 800a26c:	e017      	b.n	800a29e <handle_rxflvl_ints+0x12e>

    case 0x06: // Setup packet recvd
      // We can receive up to three setup packets in succession, but
      // only the last one is valid.
      _setup_packet[0] = (* rx_fifo);
 800a26e:	69bb      	ldr	r3, [r7, #24]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a11      	ldr	r2, [pc, #68]	; (800a2b8 <handle_rxflvl_ints+0x148>)
 800a274:	6013      	str	r3, [r2, #0]
      _setup_packet[1] = (* rx_fifo);
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a0f      	ldr	r2, [pc, #60]	; (800a2b8 <handle_rxflvl_ints+0x148>)
 800a27c:	6053      	str	r3, [r2, #4]
      break;
 800a27e:	e00e      	b.n	800a29e <handle_rxflvl_ints+0x12e>

    default: // Invalid
      TU_BREAKPOINT();
 800a280:	4b0e      	ldr	r3, [pc, #56]	; (800a2bc <handle_rxflvl_ints+0x14c>)
 800a282:	60bb      	str	r3, [r7, #8]
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f003 0301 	and.w	r3, r3, #1
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d005      	beq.n	800a29c <handle_rxflvl_ints+0x12c>
 800a290:	be00      	bkpt	0x0000
      break;
 800a292:	e003      	b.n	800a29c <handle_rxflvl_ints+0x12c>
      break;
 800a294:	bf00      	nop
 800a296:	e002      	b.n	800a29e <handle_rxflvl_ints+0x12e>
    break;
 800a298:	bf00      	nop
 800a29a:	e000      	b.n	800a29e <handle_rxflvl_ints+0x12e>
      break;
 800a29c:	bf00      	nop
  }
}
 800a29e:	bf00      	nop
 800a2a0:	3720      	adds	r7, #32
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	40040000 	.word	0x40040000
 800a2ac:	40041000 	.word	0x40041000
 800a2b0:	24001b4c 	.word	0x24001b4c
 800a2b4:	24001c6c 	.word	0x24001c6c
 800a2b8:	24001b44 	.word	0x24001b44
 800a2bc:	e000edf0 	.word	0xe000edf0

0800a2c0 <handle_epout_ints>:

static void handle_epout_ints(uint8_t rhport, USB_OTG_DeviceTypeDef * dev, USB_OTG_OUTEndpointTypeDef * out_ep) {
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b094      	sub	sp, #80	; 0x50
 800a2c4:	af02      	add	r7, sp, #8
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	73fb      	strb	r3, [r7, #15]
  // DAINT for a given EP clears when DOEPINTx is cleared.
  // OEPINT will be cleared when DAINT's out bits are cleared.
  for(uint8_t n = 0; n < EP_MAX; n++) {
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a2d4:	e09e      	b.n	800a414 <handle_epout_ints+0x154>
    xfer_ctl_t * xfer = XFER_CTL_BASE(n, TUSB_DIR_OUT);
 800a2d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a2da:	015b      	lsls	r3, r3, #5
 800a2dc:	4a52      	ldr	r2, [pc, #328]	; (800a428 <handle_epout_ints+0x168>)
 800a2de:	4413      	add	r3, r2
 800a2e0:	643b      	str	r3, [r7, #64]	; 0x40

    if(dev->DAINT & (1 << (USB_OTG_DAINT_OEPINT_Pos + n))) {
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800a2ea:	3210      	adds	r2, #16
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	fa01 f202 	lsl.w	r2, r1, r2
 800a2f2:	4013      	ands	r3, r2
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f000 8088 	beq.w	800a40a <handle_epout_ints+0x14a>
      // SETUP packet Setup Phase done.
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_STUP) {
 800a2fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a2fe:	015b      	lsls	r3, r3, #5
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	4413      	add	r3, r2
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	f003 0308 	and.w	r3, r3, #8
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d028      	beq.n	800a360 <handle_epout_ints+0xa0>
        out_ep[n].DOEPINT =  USB_OTG_DOEPINT_STUP;
 800a30e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a312:	015b      	lsls	r3, r3, #5
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	4413      	add	r3, r2
 800a318:	2208      	movs	r2, #8
 800a31a:	609a      	str	r2, [r3, #8]
 800a31c:	7bfb      	ldrb	r3, [r7, #15]
 800a31e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a322:	4b42      	ldr	r3, [pc, #264]	; (800a42c <handle_epout_ints+0x16c>)
 800a324:	63bb      	str	r3, [r7, #56]	; 0x38
 800a326:	2301      	movs	r3, #1
 800a328:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
}

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 800a32c:	f107 0314 	add.w	r3, r7, #20
 800a330:	2200      	movs	r2, #0
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	605a      	str	r2, [r3, #4]
 800a336:	609a      	str	r2, [r3, #8]
 800a338:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a33c:	753b      	strb	r3, [r7, #20]
 800a33e:	2306      	movs	r3, #6
 800a340:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 800a342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a344:	f107 0318 	add.w	r3, r7, #24
 800a348:	6810      	ldr	r0, [r2, #0]
 800a34a:	6851      	ldr	r1, [r2, #4]
 800a34c:	c303      	stmia	r3!, {r0, r1}

  dcd_event_handler(&event, in_isr);
 800a34e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a352:	f107 0314 	add.w	r3, r7, #20
 800a356:	4611      	mov	r1, r2
 800a358:	4618      	mov	r0, r3
 800a35a:	f7fd ffcf 	bl	80082fc <dcd_event_handler>
}
 800a35e:	bf00      	nop
        dcd_event_setup_received(rhport, (uint8_t*) &_setup_packet[0], true);
      }

      // OUT XFER complete
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_XFRC) {
 800a360:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a364:	015b      	lsls	r3, r3, #5
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	4413      	add	r3, r2
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	f003 0301 	and.w	r3, r3, #1
 800a370:	2b00      	cmp	r3, #0
 800a372:	d04a      	beq.n	800a40a <handle_epout_ints+0x14a>
        out_ep[n].DOEPINT = USB_OTG_DOEPINT_XFRC;
 800a374:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a378:	015b      	lsls	r3, r3, #5
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	4413      	add	r3, r2
 800a37e:	2201      	movs	r2, #1
 800a380:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if((n == 0) && ep0_pending[TUSB_DIR_OUT]) {
 800a382:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a386:	2b00      	cmp	r3, #0
 800a388:	d10e      	bne.n	800a3a8 <handle_epout_ints+0xe8>
 800a38a:	4b29      	ldr	r3, [pc, #164]	; (800a430 <handle_epout_ints+0x170>)
 800a38c:	881b      	ldrh	r3, [r3, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d00a      	beq.n	800a3a8 <handle_epout_ints+0xe8>
          // Schedule another packet to be received.
          edpt_schedule_packets(rhport, n, TUSB_DIR_OUT, 1, ep0_pending[TUSB_DIR_OUT]);
 800a392:	4b27      	ldr	r3, [pc, #156]	; (800a430 <handle_epout_ints+0x170>)
 800a394:	881b      	ldrh	r3, [r3, #0]
 800a396:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800a39a:	7bf8      	ldrb	r0, [r7, #15]
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	2301      	movs	r3, #1
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f7ff f881 	bl	80094a8 <edpt_schedule_packets>
 800a3a6:	e030      	b.n	800a40a <handle_epout_ints+0x14a>
        } else {
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800a3a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3aa:	891b      	ldrh	r3, [r3, #8]
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	7bfb      	ldrb	r3, [r7, #15]
 800a3b0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800a3b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a3b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800a3bc:	633a      	str	r2, [r7, #48]	; 0x30
 800a3be:	2300      	movs	r3, #0
 800a3c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800a3ca:	f107 0320 	add.w	r3, r7, #32
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	601a      	str	r2, [r3, #0]
 800a3d2:	605a      	str	r2, [r3, #4]
 800a3d4:	609a      	str	r2, [r3, #8]
 800a3d6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a3da:	f887 3020 	strb.w	r3, [r7, #32]
 800a3de:	2307      	movs	r3, #7
 800a3e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  event.xfer_complete.ep_addr = ep_addr;
 800a3e4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800a3e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  event.xfer_complete.len     = xferred_bytes;
 800a3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ee:	62bb      	str	r3, [r7, #40]	; 0x28
  event.xfer_complete.result  = result;
 800a3f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  dcd_event_handler(&event, in_isr);
 800a3f8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a3fc:	f107 0320 	add.w	r3, r7, #32
 800a400:	4611      	mov	r1, r2
 800a402:	4618      	mov	r0, r3
 800a404:	f7fd ff7a 	bl	80082fc <dcd_event_handler>
}
 800a408:	bf00      	nop
  for(uint8_t n = 0; n < EP_MAX; n++) {
 800a40a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a40e:	3301      	adds	r3, #1
 800a410:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a414:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a418:	2b08      	cmp	r3, #8
 800a41a:	f67f af5c 	bls.w	800a2d6 <handle_epout_ints+0x16>
        }
      }
    }
  }
}
 800a41e:	bf00      	nop
 800a420:	bf00      	nop
 800a422:	3748      	adds	r7, #72	; 0x48
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	24001b4c 	.word	0x24001b4c
 800a42c:	24001b44 	.word	0x24001b44
 800a430:	24001c6c 	.word	0x24001c6c

0800a434 <handle_epin_ints>:

static void handle_epin_ints(uint8_t rhport, USB_OTG_DeviceTypeDef * dev, USB_OTG_INEndpointTypeDef * in_ep) {
 800a434:	b580      	push	{r7, lr}
 800a436:	b092      	sub	sp, #72	; 0x48
 800a438:	af02      	add	r7, sp, #8
 800a43a:	4603      	mov	r3, r0
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
 800a440:	73fb      	strb	r3, [r7, #15]
  // DAINT for a given EP clears when DIEPINTx is cleared.
  // IEPINT will be cleared when DAINT's out bits are cleared.
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 800a442:	2300      	movs	r3, #0
 800a444:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a448:	e0eb      	b.n	800a622 <handle_epin_ints+0x1ee>
  {
    xfer_ctl_t *xfer = XFER_CTL_BASE(n, TUSB_DIR_IN);
 800a44a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a44e:	015b      	lsls	r3, r3, #5
 800a450:	3310      	adds	r3, #16
 800a452:	4a79      	ldr	r2, [pc, #484]	; (800a638 <handle_epin_ints+0x204>)
 800a454:	4413      	add	r3, r2
 800a456:	63bb      	str	r3, [r7, #56]	; 0x38

    if ( dev->DAINT & (1 << (USB_OTG_DAINT_IEPINT_Pos + n)) )
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a460:	2101      	movs	r1, #1
 800a462:	fa01 f202 	lsl.w	r2, r1, r2
 800a466:	4013      	ands	r3, r2
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f000 80d5 	beq.w	800a618 <handle_epin_ints+0x1e4>
    {
      // IN XFER complete (entire xfer).
      if ( in_ep[n].DIEPINT & USB_OTG_DIEPINT_XFRC )
 800a46e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a472:	015b      	lsls	r3, r3, #5
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	4413      	add	r3, r2
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	f003 0301 	and.w	r3, r3, #1
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d04a      	beq.n	800a518 <handle_epin_ints+0xe4>
      {
        in_ep[n].DIEPINT = USB_OTG_DIEPINT_XFRC;
 800a482:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a486:	015b      	lsls	r3, r3, #5
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	4413      	add	r3, r2
 800a48c:	2201      	movs	r2, #1
 800a48e:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if((n == 0) && ep0_pending[TUSB_DIR_IN]) {
 800a490:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a494:	2b00      	cmp	r3, #0
 800a496:	d10e      	bne.n	800a4b6 <handle_epin_ints+0x82>
 800a498:	4b68      	ldr	r3, [pc, #416]	; (800a63c <handle_epin_ints+0x208>)
 800a49a:	885b      	ldrh	r3, [r3, #2]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00a      	beq.n	800a4b6 <handle_epin_ints+0x82>
          // Schedule another packet to be transmitted.
          edpt_schedule_packets(rhport, n, TUSB_DIR_IN, 1, ep0_pending[TUSB_DIR_IN]);
 800a4a0:	4b66      	ldr	r3, [pc, #408]	; (800a63c <handle_epin_ints+0x208>)
 800a4a2:	885b      	ldrh	r3, [r3, #2]
 800a4a4:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800a4a8:	7bf8      	ldrb	r0, [r7, #15]
 800a4aa:	9300      	str	r3, [sp, #0]
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f7fe fffa 	bl	80094a8 <edpt_schedule_packets>
 800a4b4:	e030      	b.n	800a518 <handle_epin_ints+0xe4>
        } else {
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800a4b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a4ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a4be:	b2d9      	uxtb	r1, r3
 800a4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c2:	891b      	ldrh	r3, [r3, #8]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	7bfb      	ldrb	r3, [r7, #15]
 800a4c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a4d2:	627a      	str	r2, [r7, #36]	; 0x24
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4da:	2301      	movs	r3, #1
 800a4dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800a4e0:	f107 0310 	add.w	r3, r7, #16
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	601a      	str	r2, [r3, #0]
 800a4e8:	605a      	str	r2, [r3, #4]
 800a4ea:	609a      	str	r2, [r3, #8]
 800a4ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a4f0:	743b      	strb	r3, [r7, #16]
 800a4f2:	2307      	movs	r3, #7
 800a4f4:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 800a4f6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a4fa:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fe:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 800a500:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a504:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800a506:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a50a:	f107 0310 	add.w	r3, r7, #16
 800a50e:	4611      	mov	r1, r2
 800a510:	4618      	mov	r0, r3
 800a512:	f7fd fef3 	bl	80082fc <dcd_event_handler>
}
 800a516:	bf00      	nop
        }
      }

      // XFER FIFO empty
      if ( (in_ep[n].DIEPINT & USB_OTG_DIEPINT_TXFE) && (dev->DIEPEMPMSK & (1 << n)) )
 800a518:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a51c:	015b      	lsls	r3, r3, #5
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	4413      	add	r3, r2
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d075      	beq.n	800a618 <handle_epin_ints+0x1e4>
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a530:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a534:	2101      	movs	r1, #1
 800a536:	fa01 f202 	lsl.w	r2, r1, r2
 800a53a:	4013      	ands	r3, r2
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d06b      	beq.n	800a618 <handle_epin_ints+0x1e4>
        // DIEPINT's TXFE bit is read-only, software cannot clear it.
        // It will only be cleared by hardware when written bytes is more than
        // - 64 bytes or
        // - Half of TX FIFO size (configured by DIEPTXF)

        uint16_t remaining_packets = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_PKTCNT_Msk) >> USB_OTG_DIEPTSIZ_PKTCNT_Pos;
 800a540:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a544:	015b      	lsls	r3, r3, #5
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	4413      	add	r3, r2
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	0cdb      	lsrs	r3, r3, #19
 800a54e:	b29b      	uxth	r3, r3
 800a550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a554:	86fb      	strh	r3, [r7, #54]	; 0x36

        // Process every single packet (only whole packets can be written to fifo)
        for(uint16_t i = 0; i < remaining_packets; i++)
 800a556:	2300      	movs	r3, #0
 800a558:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a55a:	e042      	b.n	800a5e2 <handle_epin_ints+0x1ae>
        {
          uint16_t const remaining_bytes = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos;
 800a55c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a560:	015b      	lsls	r3, r3, #5
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	4413      	add	r3, r2
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	86bb      	strh	r3, [r7, #52]	; 0x34

          // Packet can not be larger than ep max size
          uint16_t const packet_size = tu_min16(remaining_bytes, xfer->max_size);
 800a56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56c:	895a      	ldrh	r2, [r3, #10]
 800a56e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a570:	843b      	strh	r3, [r7, #32]
 800a572:	4613      	mov	r3, r2
 800a574:	83fb      	strh	r3, [r7, #30]
 800a576:	8c3a      	ldrh	r2, [r7, #32]
 800a578:	8bfb      	ldrh	r3, [r7, #30]
 800a57a:	4293      	cmp	r3, r2
 800a57c:	bf28      	it	cs
 800a57e:	4613      	movcs	r3, r2
 800a580:	b29b      	uxth	r3, r3
 800a582:	867b      	strh	r3, [r7, #50]	; 0x32

          // It's only possible to write full packets into FIFO. Therefore DTXFSTS register of current
          // EP has to be checked if the buffer can take another WHOLE packet
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 800a584:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a586:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a58a:	015b      	lsls	r3, r3, #5
 800a58c:	6879      	ldr	r1, [r7, #4]
 800a58e:	440b      	add	r3, r1
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	0099      	lsls	r1, r3, #2
 800a594:	4b2a      	ldr	r3, [pc, #168]	; (800a640 <handle_epin_ints+0x20c>)
 800a596:	400b      	ands	r3, r1
 800a598:	429a      	cmp	r2, r3
 800a59a:	d827      	bhi.n	800a5ec <handle_epin_ints+0x1b8>

          // Push packet to Tx-FIFO
          if (xfer->ff)
 800a59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d00d      	beq.n	800a5c0 <handle_epin_ints+0x18c>
          {
            usb_fifo_t tx_fifo = FIFO_BASE(rhport, n);
 800a5a4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a5a8:	4b26      	ldr	r3, [pc, #152]	; (800a644 <handle_epin_ints+0x210>)
 800a5aa:	4413      	add	r3, r2
 800a5ac:	031b      	lsls	r3, r3, #12
 800a5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void *)(uintptr_t) tx_fifo, packet_size);
 800a5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a5b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7fc fef0 	bl	800739e <tu_fifo_read_n_const_addr_full_words>
 800a5be:	e00d      	b.n	800a5dc <handle_epin_ints+0x1a8>
          }
          else
          {
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a5c6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800a5ca:	7bf8      	ldrb	r0, [r7, #15]
 800a5cc:	f7ff fd6a 	bl	800a0a4 <write_fifo_packet>

            // Increment pointer to xfer data
            xfer->buffer += packet_size;
 800a5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a5d6:	441a      	add	r2, r3
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5da:	601a      	str	r2, [r3, #0]
        for(uint16_t i = 0; i < remaining_packets; i++)
 800a5dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a5de:	3301      	adds	r3, #1
 800a5e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a5e2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800a5e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d3b8      	bcc.n	800a55c <handle_epin_ints+0x128>
 800a5ea:	e000      	b.n	800a5ee <handle_epin_ints+0x1ba>
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 800a5ec:	bf00      	nop
          }
        }

        // Turn off TXFE if all bytes are written.
        if (((in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos) == 0)
 800a5ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a5f2:	015b      	lsls	r3, r3, #5
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	691b      	ldr	r3, [r3, #16]
 800a5fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10a      	bne.n	800a618 <handle_epin_ints+0x1e4>
        {
          dev->DIEPEMPMSK &= ~(1 << n);
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a606:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a60a:	2101      	movs	r1, #1
 800a60c:	fa01 f202 	lsl.w	r2, r1, r2
 800a610:	43d2      	mvns	r2, r2
 800a612:	401a      	ands	r2, r3
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	635a      	str	r2, [r3, #52]	; 0x34
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 800a618:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a61c:	3301      	adds	r3, #1
 800a61e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a622:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a626:	2b08      	cmp	r3, #8
 800a628:	f67f af0f 	bls.w	800a44a <handle_epin_ints+0x16>
        }
      }
    }
  }
}
 800a62c:	bf00      	nop
 800a62e:	bf00      	nop
 800a630:	3740      	adds	r7, #64	; 0x40
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	24001b4c 	.word	0x24001b4c
 800a63c:	24001c6c 	.word	0x24001c6c
 800a640:	0003fffc 	.word	0x0003fffc
 800a644:	00040041 	.word	0x00040041

0800a648 <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b09c      	sub	sp, #112	; 0x70
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	4603      	mov	r3, r0
 800a650:	71fb      	strb	r3, [r7, #7]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 800a652:	4b9f      	ldr	r3, [pc, #636]	; (800a8d0 <dcd_int_handler+0x288>)
 800a654:	66fb      	str	r3, [r7, #108]	; 0x6c
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 800a656:	4b9f      	ldr	r3, [pc, #636]	; (800a8d4 <dcd_int_handler+0x28c>)
 800a658:	66bb      	str	r3, [r7, #104]	; 0x68
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 800a65a:	4b9f      	ldr	r3, [pc, #636]	; (800a8d8 <dcd_int_handler+0x290>)
 800a65c:	667b      	str	r3, [r7, #100]	; 0x64
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 800a65e:	4b9f      	ldr	r3, [pc, #636]	; (800a8dc <dcd_int_handler+0x294>)
 800a660:	663b      	str	r3, [r7, #96]	; 0x60

  uint32_t const int_status = usb_otg->GINTSTS & usb_otg->GINTMSK;
 800a662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a664:	695a      	ldr	r2, [r3, #20]
 800a666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	4013      	ands	r3, r2
 800a66c:	65fb      	str	r3, [r7, #92]	; 0x5c

  if(int_status & USB_OTG_GINTSTS_USBRST)
 800a66e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a674:	2b00      	cmp	r3, #0
 800a676:	d007      	beq.n	800a688 <dcd_int_handler+0x40>
  {
    // USBRST is start of reset.
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBRST;
 800a678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a67a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a67e:	615a      	str	r2, [r3, #20]
    bus_reset(rhport);
 800a680:	79fb      	ldrb	r3, [r7, #7]
 800a682:	4618      	mov	r0, r3
 800a684:	f7fe fdcc 	bl	8009220 <bus_reset>
  }

  if(int_status & USB_OTG_GINTSTS_ENUMDNE)
 800a688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a68a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d031      	beq.n	800a6f6 <dcd_int_handler+0xae>
  {
    // ENUMDNE is the end of reset where speed of the link is detected

    usb_otg->GINTSTS = USB_OTG_GINTSTS_ENUMDNE;
 800a692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a694:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a698:	615a      	str	r2, [r3, #20]

    tusb_speed_t const speed = get_speed(rhport);
 800a69a:	79fb      	ldrb	r3, [r7, #7]
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7fe febb 	bl	8009418 <get_speed>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

    set_turnaround(usb_otg, speed);
 800a6a8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a6b0:	f7fe fe30 	bl	8009314 <set_turnaround>
 800a6b4:	79fb      	ldrb	r3, [r7, #7]
 800a6b6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800a6ba:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a6be:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 800a6c8:	f107 0314 	add.w	r3, r7, #20
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	601a      	str	r2, [r3, #0]
 800a6d0:	605a      	str	r2, [r3, #4]
 800a6d2:	609a      	str	r2, [r3, #8]
 800a6d4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800a6d8:	753b      	strb	r3, [r7, #20]
 800a6da:	2301      	movs	r3, #1
 800a6dc:	757b      	strb	r3, [r7, #21]
  event.bus_reset.speed = speed;
 800a6de:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800a6e2:	763b      	strb	r3, [r7, #24]
  dcd_event_handler(&event, in_isr);
 800a6e4:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 800a6e8:	f107 0314 	add.w	r3, r7, #20
 800a6ec:	4611      	mov	r1, r2
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fd fe04 	bl	80082fc <dcd_event_handler>
}
 800a6f4:	bf00      	nop
    dcd_event_bus_reset(rhport, speed, true);
  }

  if(int_status & USB_OTG_GINTSTS_USBSUSP)
 800a6f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d023      	beq.n	800a748 <dcd_int_handler+0x100>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBSUSP;
 800a700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a702:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a706:	615a      	str	r2, [r3, #20]
 800a708:	79fb      	ldrb	r3, [r7, #7]
 800a70a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800a70e:	2304      	movs	r3, #4
 800a710:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a714:	2301      	movs	r3, #1
 800a716:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800a71a:	f107 0320 	add.w	r3, r7, #32
 800a71e:	2200      	movs	r2, #0
 800a720:	601a      	str	r2, [r3, #0]
 800a722:	605a      	str	r2, [r3, #4]
 800a724:	609a      	str	r2, [r3, #8]
 800a726:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800a72a:	f887 3020 	strb.w	r3, [r7, #32]
 800a72e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a732:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  dcd_event_handler(&event, in_isr);
 800a736:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800a73a:	f107 0320 	add.w	r3, r7, #32
 800a73e:	4611      	mov	r1, r2
 800a740:	4618      	mov	r0, r3
 800a742:	f7fd fddb 	bl	80082fc <dcd_event_handler>
}
 800a746:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if(int_status & USB_OTG_GINTSTS_WKUINT)
 800a748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	da23      	bge.n	800a796 <dcd_int_handler+0x14e>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_WKUINT;
 800a74e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a750:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a754:	615a      	str	r2, [r3, #20]
 800a756:	79fb      	ldrb	r3, [r7, #7]
 800a758:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800a75c:	2305      	movs	r3, #5
 800a75e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 800a762:	2301      	movs	r3, #1
 800a764:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800a768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a76c:	2200      	movs	r2, #0
 800a76e:	601a      	str	r2, [r3, #0]
 800a770:	605a      	str	r2, [r3, #4]
 800a772:	609a      	str	r2, [r3, #8]
 800a774:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a778:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800a77c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800a780:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dcd_event_handler(&event, in_isr);
 800a784:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800a788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a78c:	4611      	mov	r1, r2
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fd fdb4 	bl	80082fc <dcd_event_handler>
}
 800a794:	bf00      	nop
  }

  // TODO check USB_OTG_GINTSTS_DISCINT for disconnect detection
  // if(int_status & USB_OTG_GINTSTS_DISCINT)

  if(int_status & USB_OTG_GINTSTS_OTGINT)
 800a796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a798:	f003 0304 	and.w	r3, r3, #4
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d028      	beq.n	800a7f2 <dcd_int_handler+0x1aa>
  {
    // OTG INT bit is read-only
    uint32_t const otg_int = usb_otg->GOTGINT;
 800a7a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	657b      	str	r3, [r7, #84]	; 0x54

    if (otg_int & USB_OTG_GOTGINT_SEDET)
 800a7a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7a8:	f003 0304 	and.w	r3, r3, #4
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d01d      	beq.n	800a7ec <dcd_int_handler+0x1a4>
 800a7b0:	79fb      	ldrb	r3, [r7, #7]
 800a7b2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 800a7b6:	2302      	movs	r3, #2
 800a7b8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800a7bc:	2301      	movs	r3, #1
 800a7be:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800a7c2:	f107 0308 	add.w	r3, r7, #8
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	601a      	str	r2, [r3, #0]
 800a7ca:	605a      	str	r2, [r3, #4]
 800a7cc:	609a      	str	r2, [r3, #8]
 800a7ce:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800a7d2:	723b      	strb	r3, [r7, #8]
 800a7d4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800a7d8:	727b      	strb	r3, [r7, #9]
  dcd_event_handler(&event, in_isr);
 800a7da:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800a7de:	f107 0308 	add.w	r3, r7, #8
 800a7e2:	4611      	mov	r1, r2
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7fd fd89 	bl	80082fc <dcd_event_handler>
}
 800a7ea:	bf00      	nop
    {
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    usb_otg->GOTGINT = otg_int;
 800a7ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a7f0:	605a      	str	r2, [r3, #4]
  }

  if(int_status & USB_OTG_GINTSTS_SOF)
 800a7f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7f4:	f003 0308 	and.w	r3, r3, #8
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d028      	beq.n	800a84e <dcd_int_handler+0x206>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_SOF;
 800a7fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7fe:	2208      	movs	r2, #8
 800a800:	615a      	str	r2, [r3, #20]

    // Disable SOF interrupt since currently only used for remote wakeup detection
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_SOFM;
 800a802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	f023 0208 	bic.w	r2, r3, #8
 800a80a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a80c:	619a      	str	r2, [r3, #24]
 800a80e:	79fb      	ldrb	r3, [r7, #7]
 800a810:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a814:	2303      	movs	r3, #3
 800a816:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800a81a:	2301      	movs	r3, #1
 800a81c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800a820:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a824:	2200      	movs	r2, #0
 800a826:	601a      	str	r2, [r3, #0]
 800a828:	605a      	str	r2, [r3, #4]
 800a82a:	609a      	str	r2, [r3, #8]
 800a82c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a830:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800a834:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a838:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  dcd_event_handler(&event, in_isr);
 800a83c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a840:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a844:	4611      	mov	r1, r2
 800a846:	4618      	mov	r0, r3
 800a848:	f7fd fd58 	bl	80082fc <dcd_event_handler>
}
 800a84c:	bf00      	nop

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if(int_status & USB_OTG_GINTSTS_RXFLVL)
 800a84e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a850:	f003 0310 	and.w	r3, r3, #16
 800a854:	2b00      	cmp	r3, #0
 800a856:	d021      	beq.n	800a89c <dcd_int_handler+0x254>
  {
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_RXFLVLM;
 800a858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	f023 0210 	bic.w	r2, r3, #16
 800a860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a862:	619a      	str	r2, [r3, #24]

    // Loop until all available packets were handled
    do
    {
      handle_rxflvl_ints(rhport, out_ep);
 800a864:	79fb      	ldrb	r3, [r7, #7]
 800a866:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a868:	4618      	mov	r0, r3
 800a86a:	f7ff fc81 	bl	800a170 <handle_rxflvl_ints>
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 800a86e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a870:	695b      	ldr	r3, [r3, #20]
 800a872:	f003 0310 	and.w	r3, r3, #16
 800a876:	2b00      	cmp	r3, #0
 800a878:	d1f4      	bne.n	800a864 <dcd_int_handler+0x21c>

    // Manage RX FIFO size
    if (_out_ep_closed)
 800a87a:	4b19      	ldr	r3, [pc, #100]	; (800a8e0 <dcd_int_handler+0x298>)
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d006      	beq.n	800a890 <dcd_int_handler+0x248>
    {
      update_grxfsiz(rhport);
 800a882:	79fb      	ldrb	r3, [r7, #7]
 800a884:	4618      	mov	r0, r3
 800a886:	f7fe fc97 	bl	80091b8 <update_grxfsiz>

      // Disable flag
      _out_ep_closed = false;
 800a88a:	4b15      	ldr	r3, [pc, #84]	; (800a8e0 <dcd_int_handler+0x298>)
 800a88c:	2200      	movs	r2, #0
 800a88e:	701a      	strb	r2, [r3, #0]
    }

    usb_otg->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	f043 0210 	orr.w	r2, r3, #16
 800a898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a89a:	619a      	str	r2, [r3, #24]
  }

  // OUT endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_OEPINT)
 800a89c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a89e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d005      	beq.n	800a8b2 <dcd_int_handler+0x26a>
  {
    // OEPINT is read-only
    handle_epout_ints(rhport, dev, out_ep);
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a8aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7ff fd07 	bl	800a2c0 <handle_epout_ints>
  }

  // IN endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_IEPINT)
 800a8b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d005      	beq.n	800a8c8 <dcd_int_handler+0x280>
  {
    // IEPINT bit read-only
    handle_epin_ints(rhport, dev, in_ep);
 800a8bc:	79fb      	ldrb	r3, [r7, #7]
 800a8be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a8c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7ff fdb6 	bl	800a434 <handle_epin_ints>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & USB_OTG_GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG2("      IISOIXFR!\r\n");
  //  }
}
 800a8c8:	bf00      	nop
 800a8ca:	3770      	adds	r7, #112	; 0x70
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	40040000 	.word	0x40040000
 800a8d4:	40040800 	.word	0x40040800
 800a8d8:	40040b00 	.word	0x40040b00
 800a8dc:	40040900 	.word	0x40040900
 800a8e0:	24001c72 	.word	0x24001c72

0800a8e4 <tusb_init>:
//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+

bool tusb_init(void)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
#if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
  // init device stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
 800a8ea:	2001      	movs	r0, #1
 800a8ec:	f7fc fe60 	bl	80075b0 <tud_init>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	f083 0301 	eor.w	r3, r3, #1
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00a      	beq.n	800a912 <tusb_init+0x2e>
 800a8fc:	4b07      	ldr	r3, [pc, #28]	; (800a91c <tusb_init+0x38>)
 800a8fe:	607b      	str	r3, [r7, #4]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 0301 	and.w	r3, r3, #1
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d000      	beq.n	800a90e <tusb_init+0x2a>
 800a90c:	be00      	bkpt	0x0000
 800a90e:	2300      	movs	r3, #0
 800a910:	e000      	b.n	800a914 <tusb_init+0x30>
#if CFG_TUH_ENABLED && defined(TUH_OPT_RHPORT)
  // init host stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) );
#endif

  return true;
 800a912:	2301      	movs	r3, #1
}
 800a914:	4618      	mov	r0, r3
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	e000edf0 	.word	0xe000edf0

0800a920 <tu_edpt_claim>:
//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 800a920:	b480      	push	{r7}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a932:	b2db      	uxtb	r3, r3
 800a934:	2b00      	cmp	r3, #0
 800a936:	d106      	bne.n	800a946 <tu_edpt_claim+0x26>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a940:	b2db      	uxtb	r3, r3
 800a942:	2b00      	cmp	r3, #0
 800a944:	d001      	beq.n	800a94a <tu_edpt_claim+0x2a>
 800a946:	2300      	movs	r3, #0
 800a948:	e01e      	b.n	800a988 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a952:	b2db      	uxtb	r3, r3
 800a954:	2b00      	cmp	r3, #0
 800a956:	d108      	bne.n	800a96a <tu_edpt_claim+0x4a>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a960:	b2db      	uxtb	r3, r3
 800a962:	2b00      	cmp	r3, #0
 800a964:	d101      	bne.n	800a96a <tu_edpt_claim+0x4a>
 800a966:	2301      	movs	r3, #1
 800a968:	e000      	b.n	800a96c <tu_edpt_claim+0x4c>
 800a96a:	2300      	movs	r3, #0
 800a96c:	73fb      	strb	r3, [r7, #15]
 800a96e:	7bfb      	ldrb	r3, [r7, #15]
 800a970:	f003 0301 	and.w	r3, r3, #1
 800a974:	73fb      	strb	r3, [r7, #15]
  if (available)
 800a976:	7bfb      	ldrb	r3, [r7, #15]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d004      	beq.n	800a986 <tu_edpt_claim+0x66>
  {
    ep_state->claimed = 1;
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	7813      	ldrb	r3, [r2, #0]
 800a980:	f043 0304 	orr.w	r3, r3, #4
 800a984:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return available;
 800a986:	7bfb      	ldrb	r3, [r7, #15]
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3714      	adds	r7, #20
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
  (void) mutex;

  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d108      	bne.n	800a9be <tu_edpt_release+0x2a>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d101      	bne.n	800a9be <tu_edpt_release+0x2a>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e000      	b.n	800a9c0 <tu_edpt_release+0x2c>
 800a9be:	2300      	movs	r3, #0
 800a9c0:	73fb      	strb	r3, [r7, #15]
 800a9c2:	7bfb      	ldrb	r3, [r7, #15]
 800a9c4:	f003 0301 	and.w	r3, r3, #1
 800a9c8:	73fb      	strb	r3, [r7, #15]
  if (ret)
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d004      	beq.n	800a9da <tu_edpt_release+0x46>
  {
    ep_state->claimed = 0;
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	7813      	ldrb	r3, [r2, #0]
 800a9d4:	f36f 0382 	bfc	r3, #2, #1
 800a9d8:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return ret;
 800a9da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3714      	adds	r7, #20
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b08b      	sub	sp, #44	; 0x2c
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	70fb      	strb	r3, [r7, #3]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	889b      	ldrh	r3, [r3, #4]
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa02:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800aa04:	84fb      	strh	r3, [r7, #38]	; 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	78db      	ldrb	r3, [r3, #3]
 800aa0a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	2b03      	cmp	r3, #3
 800aa12:	d03e      	beq.n	800aa92 <tu_edpt_validate+0xaa>
 800aa14:	2b03      	cmp	r3, #3
 800aa16:	dc53      	bgt.n	800aac0 <tu_edpt_validate+0xd8>
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d002      	beq.n	800aa22 <tu_edpt_validate+0x3a>
 800aa1c:	2b02      	cmp	r3, #2
 800aa1e:	d018      	beq.n	800aa52 <tu_edpt_validate+0x6a>
 800aa20:	e04e      	b.n	800aac0 <tu_edpt_validate+0xd8>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800aa22:	78fb      	ldrb	r3, [r7, #3]
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	d102      	bne.n	800aa2e <tu_edpt_validate+0x46>
 800aa28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa2c:	e001      	b.n	800aa32 <tu_edpt_validate+0x4a>
 800aa2e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800aa32:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 800aa34:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800aa36:	8afb      	ldrh	r3, [r7, #22]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d943      	bls.n	800aac4 <tu_edpt_validate+0xdc>
 800aa3c:	4b27      	ldr	r3, [pc, #156]	; (800aadc <tu_edpt_validate+0xf4>)
 800aa3e:	613b      	str	r3, [r7, #16]
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f003 0301 	and.w	r3, r3, #1
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d000      	beq.n	800aa4e <tu_edpt_validate+0x66>
 800aa4c:	be00      	bkpt	0x0000
 800aa4e:	2300      	movs	r3, #0
 800aa50:	e03e      	b.n	800aad0 <tu_edpt_validate+0xe8>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 800aa52:	78fb      	ldrb	r3, [r7, #3]
 800aa54:	2b02      	cmp	r3, #2
 800aa56:	d10e      	bne.n	800aa76 <tu_edpt_validate+0x8e>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 800aa58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aa5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa5e:	d033      	beq.n	800aac8 <tu_edpt_validate+0xe0>
 800aa60:	4b1e      	ldr	r3, [pc, #120]	; (800aadc <tu_edpt_validate+0xf4>)
 800aa62:	61bb      	str	r3, [r7, #24]
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f003 0301 	and.w	r3, r3, #1
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d000      	beq.n	800aa72 <tu_edpt_validate+0x8a>
 800aa70:	be00      	bkpt	0x0000
 800aa72:	2300      	movs	r3, #0
 800aa74:	e02c      	b.n	800aad0 <tu_edpt_validate+0xe8>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 800aa76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aa78:	2b40      	cmp	r3, #64	; 0x40
 800aa7a:	d925      	bls.n	800aac8 <tu_edpt_validate+0xe0>
 800aa7c:	4b17      	ldr	r3, [pc, #92]	; (800aadc <tu_edpt_validate+0xf4>)
 800aa7e:	61fb      	str	r3, [r7, #28]
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 0301 	and.w	r3, r3, #1
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d000      	beq.n	800aa8e <tu_edpt_validate+0xa6>
 800aa8c:	be00      	bkpt	0x0000
 800aa8e:	2300      	movs	r3, #0
 800aa90:	e01e      	b.n	800aad0 <tu_edpt_validate+0xe8>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800aa92:	78fb      	ldrb	r3, [r7, #3]
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d102      	bne.n	800aa9e <tu_edpt_validate+0xb6>
 800aa98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa9c:	e000      	b.n	800aaa0 <tu_edpt_validate+0xb8>
 800aa9e:	2340      	movs	r3, #64	; 0x40
 800aaa0:	84bb      	strh	r3, [r7, #36]	; 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800aaa2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800aaa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d910      	bls.n	800aacc <tu_edpt_validate+0xe4>
 800aaaa:	4b0c      	ldr	r3, [pc, #48]	; (800aadc <tu_edpt_validate+0xf4>)
 800aaac:	623b      	str	r3, [r7, #32]
 800aaae:	6a3b      	ldr	r3, [r7, #32]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 0301 	and.w	r3, r3, #1
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d000      	beq.n	800aabc <tu_edpt_validate+0xd4>
 800aaba:	be00      	bkpt	0x0000
 800aabc:	2300      	movs	r3, #0
 800aabe:	e007      	b.n	800aad0 <tu_edpt_validate+0xe8>
    }
    break;

    default: return false;
 800aac0:	2300      	movs	r3, #0
 800aac2:	e005      	b.n	800aad0 <tu_edpt_validate+0xe8>
    break;
 800aac4:	bf00      	nop
 800aac6:	e002      	b.n	800aace <tu_edpt_validate+0xe6>
    break;
 800aac8:	bf00      	nop
 800aaca:	e000      	b.n	800aace <tu_edpt_validate+0xe6>
    break;
 800aacc:	bf00      	nop
  }

  return true;
 800aace:	2301      	movs	r3, #1
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	372c      	adds	r7, #44	; 0x2c
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr
 800aadc:	e000edf0 	.word	0xe000edf0

0800aae0 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b08d      	sub	sp, #52	; 0x34
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	4611      	mov	r1, r2
 800aaec:	461a      	mov	r2, r3
 800aaee:	460b      	mov	r3, r1
 800aaf0:	80fb      	strh	r3, [r7, #6]
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800aafa:	88fb      	ldrh	r3, [r7, #6]
 800aafc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aafe:	4413      	add	r3, r2
 800ab00:	62bb      	str	r3, [r7, #40]	; 0x28

  while( p_desc < desc_end )
 800ab02:	e027      	b.n	800ab54 <tu_edpt_bind_driver+0x74>
 800ab04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab06:	623b      	str	r3, [r7, #32]
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800ab08:	6a3b      	ldr	r3, [r7, #32]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	781b      	ldrb	r3, [r3, #0]
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 800ab0e:	2b05      	cmp	r3, #5
 800ab10:	d116      	bne.n	800ab40 <tu_edpt_bind_driver+0x60>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800ab12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab14:	789b      	ldrb	r3, [r3, #2]
 800ab16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ab1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab1e:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800ab20:	7fbb      	ldrb	r3, [r7, #30]
 800ab22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab26:	b2db      	uxtb	r3, r3

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800ab28:	005b      	lsls	r3, r3, #1
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ab32:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800ab34:	7ffa      	ldrb	r2, [r7, #31]
 800ab36:	09d2      	lsrs	r2, r2, #7
 800ab38:	b2d2      	uxtb	r2, r2
 800ab3a:	4611      	mov	r1, r2
 800ab3c:	797a      	ldrb	r2, [r7, #5]
 800ab3e:	545a      	strb	r2, [r3, r1]
 800ab40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab42:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 800ab52:	62fb      	str	r3, [r7, #44]	; 0x2c
  while( p_desc < desc_end )
 800ab54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d3d3      	bcc.n	800ab04 <tu_edpt_bind_driver+0x24>
  }
}
 800ab5c:	bf00      	nop
 800ab5e:	bf00      	nop
 800ab60:	3734      	adds	r7, #52	; 0x34
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
	...

0800ab6c <__libc_init_array>:
 800ab6c:	b570      	push	{r4, r5, r6, lr}
 800ab6e:	4d0d      	ldr	r5, [pc, #52]	; (800aba4 <__libc_init_array+0x38>)
 800ab70:	4c0d      	ldr	r4, [pc, #52]	; (800aba8 <__libc_init_array+0x3c>)
 800ab72:	1b64      	subs	r4, r4, r5
 800ab74:	10a4      	asrs	r4, r4, #2
 800ab76:	2600      	movs	r6, #0
 800ab78:	42a6      	cmp	r6, r4
 800ab7a:	d109      	bne.n	800ab90 <__libc_init_array+0x24>
 800ab7c:	4d0b      	ldr	r5, [pc, #44]	; (800abac <__libc_init_array+0x40>)
 800ab7e:	4c0c      	ldr	r4, [pc, #48]	; (800abb0 <__libc_init_array+0x44>)
 800ab80:	f000 f82e 	bl	800abe0 <_init>
 800ab84:	1b64      	subs	r4, r4, r5
 800ab86:	10a4      	asrs	r4, r4, #2
 800ab88:	2600      	movs	r6, #0
 800ab8a:	42a6      	cmp	r6, r4
 800ab8c:	d105      	bne.n	800ab9a <__libc_init_array+0x2e>
 800ab8e:	bd70      	pop	{r4, r5, r6, pc}
 800ab90:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab94:	4798      	blx	r3
 800ab96:	3601      	adds	r6, #1
 800ab98:	e7ee      	b.n	800ab78 <__libc_init_array+0xc>
 800ab9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab9e:	4798      	blx	r3
 800aba0:	3601      	adds	r6, #1
 800aba2:	e7f2      	b.n	800ab8a <__libc_init_array+0x1e>
 800aba4:	0800ae50 	.word	0x0800ae50
 800aba8:	0800ae50 	.word	0x0800ae50
 800abac:	0800ae50 	.word	0x0800ae50
 800abb0:	0800ae54 	.word	0x0800ae54

0800abb4 <memcpy>:
 800abb4:	440a      	add	r2, r1
 800abb6:	4291      	cmp	r1, r2
 800abb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800abbc:	d100      	bne.n	800abc0 <memcpy+0xc>
 800abbe:	4770      	bx	lr
 800abc0:	b510      	push	{r4, lr}
 800abc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abca:	4291      	cmp	r1, r2
 800abcc:	d1f9      	bne.n	800abc2 <memcpy+0xe>
 800abce:	bd10      	pop	{r4, pc}

0800abd0 <memset>:
 800abd0:	4402      	add	r2, r0
 800abd2:	4603      	mov	r3, r0
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d100      	bne.n	800abda <memset+0xa>
 800abd8:	4770      	bx	lr
 800abda:	f803 1b01 	strb.w	r1, [r3], #1
 800abde:	e7f9      	b.n	800abd4 <memset+0x4>

0800abe0 <_init>:
 800abe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abe2:	bf00      	nop
 800abe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abe6:	bc08      	pop	{r3}
 800abe8:	469e      	mov	lr, r3
 800abea:	4770      	bx	lr

0800abec <_fini>:
 800abec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abee:	bf00      	nop
 800abf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abf2:	bc08      	pop	{r3}
 800abf4:	469e      	mov	lr, r3
 800abf6:	4770      	bx	lr
